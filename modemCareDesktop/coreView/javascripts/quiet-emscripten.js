// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');

    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (x) {
    Runtime.tempRet0 = x;
  },
  getTempRet0: function () {
    return Runtime.tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  getFunctionTables: function (module) {
    if (!module) module = Module;
    var tables = {};
    for (var t in module) {
      if (/^FUNCTION_TABLE_.*/.test(t)) {
        var table = module[t];
        if (typeof table === 'object') tables[t.substr('FUNCTION_TABLE_'.length)] = table;
      }
    }
    return tables;
  },
  alignFunctionTables: function (module) {
    var tables = Runtime.getFunctionTables(module);
    var maxx = 0;
    for (var sig in tables) {
      maxx = Math.max(maxx, tables[sig].length);
    }
    assert(maxx >= 0);
    for (var sig in tables) {
      var table = tables[sig];
      while (table.length < maxx) table.push(0);
    }
    return maxx;
  },
  registerFunctions: function (sigs, newModule) {
    sigs.forEach(function(sig) {
      if (!Module['FUNCTION_TABLE_' + sig]) {
        Module['FUNCTION_TABLE_' + sig] = [];
      }
    });
    var oldMaxx = Runtime.alignFunctionTables(); // align the new tables we may have just added
    var newMaxx = Runtime.alignFunctionTables(newModule);
    var maxx = oldMaxx + newMaxx;
    sigs.forEach(function(sig) {
      var newTable = newModule['FUNCTION_TABLE_' + sig];
      var oldTable = Module['FUNCTION_TABLE_' + sig];
      assert(newTable !== oldTable);
      assert(oldTable.length === oldMaxx);
      for (var i = 0; i < newTable.length; i++) {
        oldTable.push(newTable[i]);
      }
      assert(oldTable.length === maxx);
    });
    assert(maxx === Runtime.alignFunctionTables()); // align the ones we didn't touch
  },
  functionPointers: [],
  addFunction: function (func) {
    Runtime.alignFunctionTables(); // XXX we should rely on this being an invariant
    var tables = Runtime.getFunctionTables();
    var ret = -1;
    for (var sig in tables) {
      var table = tables[sig];
      if (ret < 0) ret = table.length;
      else assert(ret === table.length);
      table.push(func);
    }
    return ret;
  },
  removeFunction: function (index) {
    Runtime.alignFunctionTables(); // XXX we should rely on this being an invariant
    var tables = Runtime.getFunctionTables();
    for (var sig in tables) {
      tables[sig][index] = null;
    }
  },
  loadedDynamicLibraries: [],
  loadDynamicLibrary: function (lib) {
    // TODO: addRunDep etc., do asynchronously when in the browser. for now we assume we can do a sync xhr, no mem init files in libs, and we ignore the sync xhr lag
    var src = Module['read'](lib);
    var libModule = eval(src)(
      Runtime.alignFunctionTables(),
      Module
    );
    // add symbols into global namespace TODO: weak linking etc.
    for (var sym in libModule) {
      if (!Module.hasOwnProperty(sym)) {
        Module[sym] = libModule[sym];
      }
    }
    Runtime.loadedDynamicLibraries.push(libModule);
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  tempRet0: 0,
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Runtime.GLOBAL_BASE = Runtime.alignMemory(Runtime.GLOBAL_BASE, 8);

Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }
  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
      return func;
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  buffer = new ArrayBuffer(TOTAL_MEMORY);
}
updateGlobalBufferViews();


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
if (HEAPU8[0] !== 255 || HEAPU8[3] !== 0) throw 'Typed arrays 2 must be run on a little-endian system';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data




addOnPreRun(function() {
  if (Module['dynamicLibraries']) {
    Module['dynamicLibraries'].forEach(function(lib) {
      Runtime.loadDynamicLibrary(lib);
    });
  }
  asm['runPostSets']();
});

function lookupSymbol(ptr) { // for a pointer, print out all symbols that resolve to it
  var ret = [];
  for (var i in Module) {
    if (Module[i] === ptr) ret.push(i);
  }
  print(ptr + ' is ' + ret);
}

var memoryInitializer = null;




// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 46624;
  /* global initializers */  __ATINIT__.push();
  

memoryInitializer = "quiet-emscripten.js.mem";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  function _chainback_viterbi29() {
  if (!Module['_chainback_viterbi29']) abort("external function 'chainback_viterbi29' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return Module['_chainback_viterbi29'].apply(null, arguments);
  }

  function _create_viterbi39() {
  if (!Module['_create_viterbi39']) abort("external function 'create_viterbi39' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return Module['_create_viterbi39'].apply(null, arguments);
  }

   
  Module["_i64Subtract"] = _i64Subtract;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }
  Module["___assert_fail"] = ___assert_fail;

   
  Module["_roundf"] = _roundf;

  function _chainback_viterbi615() {
  if (!Module['_chainback_viterbi615']) abort("external function 'chainback_viterbi615' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return Module['_chainback_viterbi615'].apply(null, arguments);
  }

   
  Module["_memset"] = _memset;

  function _chainback_viterbi27() {
  if (!Module['_chainback_viterbi27']) abort("external function 'chainback_viterbi27' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return Module['_chainback_viterbi27'].apply(null, arguments);
  }

  function _update_viterbi27_blk() {
  if (!Module['_update_viterbi27_blk']) abort("external function 'update_viterbi27_blk' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return Module['_update_viterbi27_blk'].apply(null, arguments);
  }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }
  Module["_abort"] = _abort;

  function _init_viterbi39() {
  if (!Module['_init_viterbi39']) abort("external function 'init_viterbi39' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return Module['_init_viterbi39'].apply(null, arguments);
  }

  function _update_viterbi39_blk() {
  if (!Module['_update_viterbi39_blk']) abort("external function 'update_viterbi39_blk' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return Module['_update_viterbi39_blk'].apply(null, arguments);
  }

  function ___lock() {}
  Module["___lock"] = ___lock;

  function ___unlock() {}
  Module["___unlock"] = ___unlock;

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(Runtime.stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }
  Module["_llvm_stacksave"] = _llvm_stacksave;

  function _delete_viterbi39() {
  if (!Module['_delete_viterbi39']) abort("external function 'delete_viterbi39' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return Module['_delete_viterbi39'].apply(null, arguments);
  }

  var _llvm_fabs_f64=Math_abs;
  Module["_llvm_fabs_f64"] = _llvm_fabs_f64;

   
  Module["_i64Add"] = _i64Add;

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    }
  Module["_emscripten_memcpy_big"] = _emscripten_memcpy_big; 
  Module["_memcpy"] = _memcpy;

  var _llvm_pow_f32=Math_pow;
  Module["_llvm_pow_f32"] = _llvm_pow_f32;

  
  var PROCINFO={ppid:1,pid:42,sid:42,pgid:42};
  Module["PROCINFO"] = PROCINFO;
  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  Module["ERRNO_CODES"] = ERRNO_CODES;
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  Module["ERRNO_MESSAGES"] = ERRNO_MESSAGES;
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  Module["___setErrNo"] = ___setErrNo;
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  Module["PATH"] = PATH;
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  Module["TTY"] = TTY;
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  Module["MEMFS"] = MEMFS;
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  Module["IDBFS"] = IDBFS;
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~02000000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  Module["NODEFS"] = NODEFS;
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  Module["WORKERFS"] = WORKERFS;
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  Module["_stdin"] = _stdin;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  Module["_stdout"] = _stdout;
  
  var _stderr=STATICTOP; STATICTOP += 16;;
  Module["_stderr"] = _stderr;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  Module["FS"] = FS;var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};
  Module["SYSCALLS"] = SYSCALLS;function ___syscall20(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getpid
      return PROCINFO.pid;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall20"] = ___syscall20;

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }
  Module["__exit"] = __exit;function _exit(status) {
      __exit(status);
    }
  Module["_exit"] = _exit;

  function _create_viterbi27() {
  if (!Module['_create_viterbi27']) abort("external function 'create_viterbi27' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return Module['_create_viterbi27'].apply(null, arguments);
  }

  function _create_viterbi29() {
  if (!Module['_create_viterbi29']) abort("external function 'create_viterbi29' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return Module['_create_viterbi29'].apply(null, arguments);
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall6"] = ___syscall6;

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall54"] = ___syscall54;

  function _init_viterbi27() {
  if (!Module['_init_viterbi27']) abort("external function 'init_viterbi27' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return Module['_init_viterbi27'].apply(null, arguments);
  }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }
  Module["_sysconf"] = _sysconf;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function _chainback_viterbi39() {
  if (!Module['_chainback_viterbi39']) abort("external function 'chainback_viterbi39' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return Module['_chainback_viterbi39'].apply(null, arguments);
  }

  function _sched_yield() {
      return 0;
    }
  Module["_sched_yield"] = _sched_yield;

  function _update_viterbi29_blk() {
  if (!Module['_update_viterbi29_blk']) abort("external function 'update_viterbi29_blk' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return Module['_update_viterbi29_blk'].apply(null, arguments);
  }

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }
  Module["_pthread_cleanup_push"] = _pthread_cleanup_push;

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }
  Module["_gettimeofday"] = _gettimeofday;

  function _update_viterbi615_blk() {
  if (!Module['_update_viterbi615_blk']) abort("external function 'update_viterbi615_blk' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return Module['_update_viterbi615_blk'].apply(null, arguments);
  }

  function _partab_init() {
  if (!Module['_partab_init']) abort("external function 'partab_init' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return Module['_partab_init'].apply(null, arguments);
  }

  function ___syscall3(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // read
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.read(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall3"] = ___syscall3;

  function _free_rs_char() {
  if (!Module['_free_rs_char']) abort("external function 'free_rs_char' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return Module['_free_rs_char'].apply(null, arguments);
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall5"] = ___syscall5;

  function _decode_rs_char() {
  if (!Module['_decode_rs_char']) abort("external function 'decode_rs_char' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return Module['_decode_rs_char'].apply(null, arguments);
  }

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      Runtime.stackRestore(ret);
    }
  Module["_llvm_stackrestore"] = _llvm_stackrestore;

  function _create_viterbi615() {
  if (!Module['_create_viterbi615']) abort("external function 'create_viterbi615' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return Module['_create_viterbi615'].apply(null, arguments);
  }

  function _delete_viterbi29() {
  if (!Module['_delete_viterbi29']) abort("external function 'delete_viterbi29' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return Module['_delete_viterbi29'].apply(null, arguments);
  }

  function _encode_rs_char() {
  if (!Module['_encode_rs_char']) abort("external function 'encode_rs_char' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return Module['_encode_rs_char'].apply(null, arguments);
  }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }
  Module["_sbrk"] = _sbrk;

   
  Module["_memmove"] = _memmove;

  function _init_viterbi29() {
  if (!Module['_init_viterbi29']) abort("external function 'init_viterbi29' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return Module['_init_viterbi29'].apply(null, arguments);
  }

  function _delete_viterbi27() {
  if (!Module['_delete_viterbi27']) abort("external function 'delete_viterbi27' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return Module['_delete_viterbi27'].apply(null, arguments);
  }

  function _init_viterbi615() {
  if (!Module['_init_viterbi615']) abort("external function 'init_viterbi615' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return Module['_init_viterbi615'].apply(null, arguments);
  }

  function _init_rs_char() {
  if (!Module['_init_rs_char']) abort("external function 'init_rs_char' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return Module['_init_rs_char'].apply(null, arguments);
  }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }
  Module["_pthread_cleanup_pop"] = _pthread_cleanup_pop;

  var _llvm_fabs_f32=Math_abs;
  Module["_llvm_fabs_f32"] = _llvm_fabs_f32;

  function _delete_viterbi615() {
  if (!Module['_delete_viterbi615']) abort("external function 'delete_viterbi615' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return Module['_delete_viterbi615'].apply(null, arguments);
  }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }
  Module["_time"] = _time;

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }
  Module["_pthread_self"] = _pthread_self;

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall140"] = ___syscall140;

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall146"] = ___syscall146;

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall221"] = ___syscall221;

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall145"] = ___syscall145;

  function _P_init() {
  if (!Module['_P_init']) abort("external function 'P_init' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return Module['_P_init'].apply(null, arguments);
  }

  function _Partab() {
  if (!Module['_Partab']) abort("external function 'Partab' is missing. perhaps a side module was not linked in? if this function was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment");return Module['_Partab'].apply(null, arguments);
  }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }
var gb = Runtime.GLOBAL_BASE, fb = 0;
var setTempRet0 = Runtime.setTempRet0, getTempRet0 = Runtime.getTempRet0;

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function ftCall_iiiiiiii(x, a0, a1, a2, a3, a4, a5, a6) {
  if (x < 0 || x >= FUNCTION_TABLE_iiiiiiii.length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return FUNCTION_TABLE_iiiiiiii[x](a0, a1, a2, a3, a4, a5, a6);
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function ftCall_iiii(x, a0, a1, a2) {
  if (x < 0 || x >= FUNCTION_TABLE_iiii.length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return FUNCTION_TABLE_iiii[x](a0, a1, a2);
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function ftCall_vi(x, a0) {
  if (x < 0 || x >= FUNCTION_TABLE_vi.length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return FUNCTION_TABLE_vi[x](a0);
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function ftCall_ii(x, a0) {
  if (x < 0 || x >= FUNCTION_TABLE_ii.length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return FUNCTION_TABLE_ii[x](a0);
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function ftCall_viii(x, a0, a1, a2) {
  if (x < 0 || x >= FUNCTION_TABLE_viii.length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return FUNCTION_TABLE_viii[x](a0, a1, a2);
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function ftCall_iiiii(x, a0, a1, a2, a3) {
  if (x < 0 || x >= FUNCTION_TABLE_iiiii.length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return FUNCTION_TABLE_iiiii[x](a0, a1, a2, a3);
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function ftCall_iii(x, a0, a1) {
  if (x < 0 || x >= FUNCTION_TABLE_iii.length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return FUNCTION_TABLE_iii[x](a0, a1);
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function ftCall_viiii(x, a0, a1, a2, a3) {
  if (x < 0 || x >= FUNCTION_TABLE_viiii.length) { Module.printErr("Function table mask error (out of range)"); Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); ; abort(x) }
  return FUNCTION_TABLE_viiii[x](a0, a1, a2, a3);
}
var g$_P_init = function() { assert(Module["_P_init"], "external function '_P_init' is missing. perhaps a side module was not linked in? if this symbol was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment"); return Module["_P_init"] };
var g$_Partab = function() { assert(Module["_Partab"], "external function '_Partab' is missing. perhaps a side module was not linked in? if this symbol was expected to arrive from a system library, try to build the MAIN_MODULE with EMCC_FORCE_STDLIBS=1 in the environment"); return Module["_Partab"] };


var dynCall_iiiiiiii = ftCall_iiiiiiii;


var dynCall_iiii = ftCall_iiii;


var dynCall_vi = ftCall_vi;


var dynCall_ii = ftCall_ii;


var dynCall_viii = ftCall_viii;


var dynCall_iiiii = ftCall_iiiii;


var dynCall_iii = ftCall_iii;


var dynCall_viiii = ftCall_viiii;


Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_vi": nullFunc_vi, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_viiii": nullFunc_viiii, "setTempRet0": setTempRet0, "getTempRet0": getTempRet0, "invoke_iiiiiiii": invoke_iiiiiiii, "ftCall_iiiiiiii": ftCall_iiiiiiii, "invoke_iiii": invoke_iiii, "ftCall_iiii": ftCall_iiii, "invoke_vi": invoke_vi, "ftCall_vi": ftCall_vi, "invoke_ii": invoke_ii, "ftCall_ii": ftCall_ii, "invoke_viii": invoke_viii, "ftCall_viii": ftCall_viii, "invoke_iiiii": invoke_iiiii, "ftCall_iiiii": ftCall_iiiii, "invoke_iii": invoke_iii, "ftCall_iii": ftCall_iii, "invoke_viiii": invoke_viiii, "ftCall_viiii": ftCall_viiii, "_pthread_cleanup_pop": _pthread_cleanup_pop, "___syscall221": ___syscall221, "_delete_viterbi615": _delete_viterbi615, "_chainback_viterbi615": _chainback_viterbi615, "_create_viterbi615": _create_viterbi615, "_init_viterbi39": _init_viterbi39, "_sched_yield": _sched_yield, "_abort": _abort, "_llvm_fabs_f64": _llvm_fabs_f64, "_pthread_cleanup_push": _pthread_cleanup_push, "_delete_viterbi29": _delete_viterbi29, "_delete_viterbi27": _delete_viterbi27, "___syscall20": ___syscall20, "_llvm_stackrestore": _llvm_stackrestore, "___assert_fail": ___assert_fail, "_decode_rs_char": _decode_rs_char, "_update_viterbi29_blk": _update_viterbi29_blk, "_create_viterbi27": _create_viterbi27, "_delete_viterbi39": _delete_viterbi39, "_chainback_viterbi29": _chainback_viterbi29, "___setErrNo": ___setErrNo, "_sbrk": _sbrk, "_chainback_viterbi39": _chainback_viterbi39, "_llvm_pow_f32": _llvm_pow_f32, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_P_init": _P_init, "_llvm_fabs_f32": _llvm_fabs_f32, "__exit": __exit, "_create_viterbi29": _create_viterbi29, "_init_viterbi29": _init_viterbi29, "_encode_rs_char": _encode_rs_char, "_init_viterbi27": _init_viterbi27, "_pthread_self": _pthread_self, "_llvm_stacksave": _llvm_stacksave, "_update_viterbi27_blk": _update_viterbi27_blk, "_free_rs_char": _free_rs_char, "_update_viterbi615_blk": _update_viterbi615_blk, "_init_rs_char": _init_rs_char, "___syscall54": ___syscall54, "___unlock": ___unlock, "_partab_init": _partab_init, "_update_viterbi39_blk": _update_viterbi39_blk, "_chainback_viterbi27": _chainback_viterbi27, "_init_viterbi615": _init_viterbi615, "___syscall3": ___syscall3, "_sysconf": _sysconf, "___lock": ___lock, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "_time": _time, "_Partab": _Partab, "_gettimeofday": _gettimeofday, "___syscall140": ___syscall140, "_exit": _exit, "_create_viterbi39": _create_viterbi39, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "g$_P_init": g$_P_init, "g$_Partab": g$_Partab, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "gb": gb, "fb": fb };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var gb=env.gb|0;
  var fb=env.fb|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var setTempRet0=env.setTempRet0;
  var getTempRet0=env.getTempRet0;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var ftCall_iiiiiiii=env.ftCall_iiiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var ftCall_iiii=env.ftCall_iiii;
  var invoke_vi=env.invoke_vi;
  var ftCall_vi=env.ftCall_vi;
  var invoke_ii=env.invoke_ii;
  var ftCall_ii=env.ftCall_ii;
  var invoke_viii=env.invoke_viii;
  var ftCall_viii=env.ftCall_viii;
  var invoke_iiiii=env.invoke_iiiii;
  var ftCall_iiiii=env.ftCall_iiiii;
  var invoke_iii=env.invoke_iii;
  var ftCall_iii=env.ftCall_iii;
  var invoke_viiii=env.invoke_viiii;
  var ftCall_viiii=env.ftCall_viiii;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var ___syscall221=env.___syscall221;
  var _delete_viterbi615=env._delete_viterbi615;
  var _chainback_viterbi615=env._chainback_viterbi615;
  var _create_viterbi615=env._create_viterbi615;
  var _init_viterbi39=env._init_viterbi39;
  var _sched_yield=env._sched_yield;
  var _abort=env._abort;
  var _llvm_fabs_f64=env._llvm_fabs_f64;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var _delete_viterbi29=env._delete_viterbi29;
  var _delete_viterbi27=env._delete_viterbi27;
  var ___syscall20=env.___syscall20;
  var _llvm_stackrestore=env._llvm_stackrestore;
  var ___assert_fail=env.___assert_fail;
  var _decode_rs_char=env._decode_rs_char;
  var _update_viterbi29_blk=env._update_viterbi29_blk;
  var _create_viterbi27=env._create_viterbi27;
  var _delete_viterbi39=env._delete_viterbi39;
  var _chainback_viterbi29=env._chainback_viterbi29;
  var ___setErrNo=env.___setErrNo;
  var _sbrk=env._sbrk;
  var _chainback_viterbi39=env._chainback_viterbi39;
  var _llvm_pow_f32=env._llvm_pow_f32;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _P_init=env._P_init;
  var _llvm_fabs_f32=env._llvm_fabs_f32;
  var __exit=env.__exit;
  var _create_viterbi29=env._create_viterbi29;
  var _init_viterbi29=env._init_viterbi29;
  var _encode_rs_char=env._encode_rs_char;
  var _init_viterbi27=env._init_viterbi27;
  var _pthread_self=env._pthread_self;
  var _llvm_stacksave=env._llvm_stacksave;
  var _update_viterbi27_blk=env._update_viterbi27_blk;
  var _free_rs_char=env._free_rs_char;
  var _update_viterbi615_blk=env._update_viterbi615_blk;
  var _init_rs_char=env._init_rs_char;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _partab_init=env._partab_init;
  var _update_viterbi39_blk=env._update_viterbi39_blk;
  var _chainback_viterbi27=env._chainback_viterbi27;
  var _init_viterbi615=env._init_viterbi615;
  var ___syscall3=env.___syscall3;
  var _sysconf=env._sysconf;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var _time=env._time;
  var _Partab=env._Partab;
  var _gettimeofday=env._gettimeofday;
  var ___syscall140=env.___syscall140;
  var _exit=env._exit;
  var _create_viterbi39=env._create_viterbi39;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var g$_P_init=env.g$_P_init;
  var g$_Partab=env.g$_Partab;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function _malloc($bytes) {
 $bytes = $bytes | 0;
 var $$0 = 0, $$lcssa = 0, $$lcssa141 = 0, $$lcssa142 = 0, $$lcssa144 = 0, $$lcssa147 = 0, $$lcssa149 = 0, $$lcssa151 = 0, $$lcssa153 = 0, $$lcssa155 = 0, $$lcssa157 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i14Z2D = 0, $$pre$phi$i17$iZ2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$rsize$4$i = 0, $100 = 0, $1001 = 0, $1006 = 0, $101 = 0, $1012 = 0, $1015 = 0, $1016 = 0, $1034 = 0, $1036 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1053 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $107 = 0, $111 = 0, $113 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $133 = 0, $139 = 0, $14 = 0, $142 = 0, $145 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $152 = 0, $155 = 0, $157 = 0, $16 = 0, $160 = 0, $162 = 0, $165 = 0, $168 = 0, $169 = 0, $17 = 0, $171 = 0, $172 = 0, $174 = 0, $175 = 0, $177 = 0, $178 = 0, $18 = 0, $183 = 0, $184 = 0, $193 = 0, $198 = 0, $202 = 0, $208 = 0, $215 = 0, $219 = 0, $227 = 0, $229 = 0, $230 = 0, $232 = 0, $233 = 0, $234 = 0, $238 = 0, $239 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $251 = 0, $252 = 0, $257 = 0, $258 = 0, $261 = 0, $263 = 0, $266 = 0, $271 = 0, $278 = 0, $28 = 0, $287 = 0, $288 = 0, $292 = 0, $298 = 0, $303 = 0, $306 = 0, $310 = 0, $312 = 0, $313 = 0, $315 = 0, $317 = 0, $319 = 0, $32 = 0, $321 = 0, $323 = 0, $325 = 0, $327 = 0, $337 = 0, $338 = 0, $340 = 0, $349 = 0, $35 = 0, $351 = 0, $354 = 0, $356 = 0, $359 = 0, $361 = 0, $364 = 0, $367 = 0, $368 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $376 = 0, $377 = 0, $382 = 0, $383 = 0, $39 = 0, $392 = 0, $397 = 0, $4 = 0, $401 = 0, $407 = 0, $414 = 0, $418 = 0, $42 = 0, $426 = 0, $429 = 0, $430 = 0, $431 = 0, $435 = 0, $436 = 0, $442 = 0, $447 = 0, $448 = 0, $45 = 0, $451 = 0, $453 = 0, $456 = 0, $461 = 0, $467 = 0, $469 = 0, $47 = 0, $471 = 0, $472 = 0, $48 = 0, $490 = 0, $492 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $509 = 0, $511 = 0, $512 = 0, $514 = 0, $52 = 0, $523 = 0, $527 = 0, $529 = 0, $530 = 0, $531 = 0, $539 = 0, $54 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $553 = 0, $555 = 0, $556 = 0, $56 = 0, $562 = 0, $564 = 0, $566 = 0, $573 = 0, $575 = 0, $576 = 0, $577 = 0, $58 = 0, $585 = 0, $586 = 0, $589 = 0, $593 = 0, $597 = 0, $599 = 0, $6 = 0, $60 = 0, $605 = 0, $609 = 0, $613 = 0, $62 = 0, $622 = 0, $623 = 0, $629 = 0, $632 = 0, $635 = 0, $637 = 0, $642 = 0, $648 = 0, $65 = 0, $653 = 0, $654 = 0, $655 = 0, $661 = 0, $662 = 0, $663 = 0, $67 = 0, $678 = 0, $68 = 0, $683 = 0, $684 = 0, $686 = 0, $69 = 0, $692 = 0, $694 = 0, $7 = 0, $70 = 0, $704 = 0, $708 = 0, $71 = 0, $714 = 0, $716 = 0, $722 = 0, $726 = 0, $727 = 0, $732 = 0, $738 = 0, $743 = 0, $746 = 0, $747 = 0, $750 = 0, $752 = 0, $754 = 0, $757 = 0, $768 = 0, $773 = 0, $775 = 0, $778 = 0, $78 = 0, $780 = 0, $783 = 0, $786 = 0, $787 = 0, $788 = 0, $790 = 0, $792 = 0, $793 = 0, $795 = 0, $796 = 0, $801 = 0, $802 = 0, $811 = 0, $816 = 0, $819 = 0, $82 = 0, $820 = 0, $826 = 0, $834 = 0, $840 = 0, $843 = 0, $844 = 0, $845 = 0, $849 = 0, $85 = 0, $850 = 0, $856 = 0, $861 = 0, $862 = 0, $865 = 0, $867 = 0, $870 = 0, $875 = 0, $881 = 0, $883 = 0, $885 = 0, $886 = 0, $90 = 0, $904 = 0, $906 = 0, $91 = 0, $913 = 0, $914 = 0, $915 = 0, $92 = 0, $922 = 0, $926 = 0, $930 = 0, $932 = 0, $938 = 0, $939 = 0, $94 = 0, $941 = 0, $942 = 0, $946 = 0, $95 = 0, $951 = 0, $952 = 0, $953 = 0, $959 = 0, $96 = 0, $966 = 0, $971 = 0, $974 = 0, $975 = 0, $976 = 0, $980 = 0, $981 = 0, $987 = 0, $992 = 0, $993 = 0, $996 = 0, $998 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$0$i = 0, $K2$0$i$i = 0, $K8$0$i$i = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i$i$lcssa = 0, $R$1$i$lcssa = 0, $R$1$i9 = 0, $R$1$i9$lcssa = 0, $R$3$i = 0, $R$3$i$i = 0, $R$3$i11 = 0, $RP$1$i = 0, $RP$1$i$i = 0, $RP$1$i$i$lcssa = 0, $RP$1$i$lcssa = 0, $RP$1$i8 = 0, $RP$1$i8$lcssa = 0, $T$0$i = 0, $T$0$i$i = 0, $T$0$i$i$lcssa = 0, $T$0$i$i$lcssa140 = 0, $T$0$i$lcssa = 0, $T$0$i$lcssa156 = 0, $T$0$i18$i = 0, $T$0$i18$i$lcssa = 0, $T$0$i18$i$lcssa139 = 0, $br$2$ph$i = 0, $i$01$i$i = 0, $idx$0$i = 0, $nb$0 = 0, $oldfirst$0$i$i = 0, $p$0$i$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i5 = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$412$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$068$i = 0, $sp$068$i$lcssa = 0, $sp$167$i = 0, $sp$167$i$lcssa = 0, $ssize$0$i = 0, $ssize$2$ph$i = 0, $ssize$5$i = 0, $t$0$i = 0, $t$0$i4 = 0, $t$2$i = 0, $t$4$ph$i = 0, $t$4$v$4$i = 0, $t$411$i = 0, $tbase$746$i = 0, $tsize$745$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i6 = 0, $v$1$i = 0, $v$3$i = 0, $v$4$lcssa$i = 0, $v$413$i = 0, label = 0;
 do if ($bytes >>> 0 < 245) {
  $4 = $bytes >>> 0 < 11 ? 16 : $bytes + 11 & -8;
  $5 = $4 >>> 3;
  $6 = HEAP32[gb + 45080 >> 2] | 0;
  $7 = $6 >>> $5;
  if ($7 & 3 | 0) {
   $12 = ($7 & 1 ^ 1) + $5 | 0;
   $14 = gb + 45080 + 40 + ($12 << 1 << 2) | 0;
   $15 = $14 + 8 | 0;
   $16 = HEAP32[$15 >> 2] | 0;
   $17 = $16 + 8 | 0;
   $18 = HEAP32[$17 >> 2] | 0;
   do if (($14 | 0) == ($18 | 0)) HEAP32[gb + 45080 >> 2] = $6 & ~(1 << $12); else {
    if ($18 >>> 0 < (HEAP32[gb + 45080 + 16 >> 2] | 0) >>> 0) _abort();
    $25 = $18 + 12 | 0;
    if ((HEAP32[$25 >> 2] | 0) == ($16 | 0)) {
     HEAP32[$25 >> 2] = $14;
     HEAP32[$15 >> 2] = $18;
     break;
    } else _abort();
   } while (0);
   $28 = $12 << 3;
   HEAP32[$16 + 4 >> 2] = $28 | 3;
   $32 = $16 + $28 + 4 | 0;
   HEAP32[$32 >> 2] = HEAP32[$32 >> 2] | 1;
   $$0 = $17;
   return $$0 | 0;
  }
  $35 = HEAP32[gb + 45080 + 8 >> 2] | 0;
  if ($4 >>> 0 > $35 >>> 0) {
   if ($7 | 0) {
    $39 = 2 << $5;
    $42 = $7 << $5 & ($39 | 0 - $39);
    $45 = ($42 & 0 - $42) + -1 | 0;
    $47 = $45 >>> 12 & 16;
    $48 = $45 >>> $47;
    $50 = $48 >>> 5 & 8;
    $52 = $48 >>> $50;
    $54 = $52 >>> 2 & 4;
    $56 = $52 >>> $54;
    $58 = $56 >>> 1 & 2;
    $60 = $56 >>> $58;
    $62 = $60 >>> 1 & 1;
    $65 = ($50 | $47 | $54 | $58 | $62) + ($60 >>> $62) | 0;
    $67 = gb + 45080 + 40 + ($65 << 1 << 2) | 0;
    $68 = $67 + 8 | 0;
    $69 = HEAP32[$68 >> 2] | 0;
    $70 = $69 + 8 | 0;
    $71 = HEAP32[$70 >> 2] | 0;
    do if (($67 | 0) == ($71 | 0)) {
     HEAP32[gb + 45080 >> 2] = $6 & ~(1 << $65);
     $90 = $35;
    } else {
     if ($71 >>> 0 < (HEAP32[gb + 45080 + 16 >> 2] | 0) >>> 0) _abort();
     $78 = $71 + 12 | 0;
     if ((HEAP32[$78 >> 2] | 0) == ($69 | 0)) {
      HEAP32[$78 >> 2] = $67;
      HEAP32[$68 >> 2] = $71;
      $90 = HEAP32[gb + 45080 + 8 >> 2] | 0;
      break;
     } else _abort();
    } while (0);
    $82 = ($65 << 3) - $4 | 0;
    HEAP32[$69 + 4 >> 2] = $4 | 3;
    $85 = $69 + $4 | 0;
    HEAP32[$85 + 4 >> 2] = $82 | 1;
    HEAP32[$85 + $82 >> 2] = $82;
    if ($90 | 0) {
     $91 = HEAP32[gb + 45080 + 20 >> 2] | 0;
     $92 = $90 >>> 3;
     $94 = gb + 45080 + 40 + ($92 << 1 << 2) | 0;
     $95 = HEAP32[gb + 45080 >> 2] | 0;
     $96 = 1 << $92;
     if (!($95 & $96)) {
      HEAP32[gb + 45080 >> 2] = $95 | $96;
      $$pre$phiZ2D = $94 + 8 | 0;
      $F4$0 = $94;
     } else {
      $100 = $94 + 8 | 0;
      $101 = HEAP32[$100 >> 2] | 0;
      if ($101 >>> 0 < (HEAP32[gb + 45080 + 16 >> 2] | 0) >>> 0) _abort(); else {
       $$pre$phiZ2D = $100;
       $F4$0 = $101;
      }
     }
     HEAP32[$$pre$phiZ2D >> 2] = $91;
     HEAP32[$F4$0 + 12 >> 2] = $91;
     HEAP32[$91 + 8 >> 2] = $F4$0;
     HEAP32[$91 + 12 >> 2] = $94;
    }
    HEAP32[gb + 45080 + 8 >> 2] = $82;
    HEAP32[gb + 45080 + 20 >> 2] = $85;
    $$0 = $70;
    return $$0 | 0;
   }
   $107 = HEAP32[gb + 45080 + 4 >> 2] | 0;
   if (!$107) $nb$0 = $4; else {
    $111 = ($107 & 0 - $107) + -1 | 0;
    $113 = $111 >>> 12 & 16;
    $114 = $111 >>> $113;
    $116 = $114 >>> 5 & 8;
    $118 = $114 >>> $116;
    $120 = $118 >>> 2 & 4;
    $122 = $118 >>> $120;
    $124 = $122 >>> 1 & 2;
    $126 = $122 >>> $124;
    $128 = $126 >>> 1 & 1;
    $133 = HEAP32[gb + 45080 + 304 + (($116 | $113 | $120 | $124 | $128) + ($126 >>> $128) << 2) >> 2] | 0;
    $rsize$0$i = (HEAP32[$133 + 4 >> 2] & -8) - $4 | 0;
    $t$0$i = $133;
    $v$0$i = $133;
    while (1) {
     $139 = HEAP32[$t$0$i + 16 >> 2] | 0;
     if (!$139) {
      $142 = HEAP32[$t$0$i + 20 >> 2] | 0;
      if (!$142) {
       $rsize$0$i$lcssa = $rsize$0$i;
       $v$0$i$lcssa = $v$0$i;
       break;
      } else $145 = $142;
     } else $145 = $139;
     $148 = (HEAP32[$145 + 4 >> 2] & -8) - $4 | 0;
     $149 = $148 >>> 0 < $rsize$0$i >>> 0;
     $rsize$0$i = $149 ? $148 : $rsize$0$i;
     $t$0$i = $145;
     $v$0$i = $149 ? $145 : $v$0$i;
    }
    $150 = HEAP32[gb + 45080 + 16 >> 2] | 0;
    if ($v$0$i$lcssa >>> 0 < $150 >>> 0) _abort();
    $152 = $v$0$i$lcssa + $4 | 0;
    if ($v$0$i$lcssa >>> 0 >= $152 >>> 0) _abort();
    $155 = HEAP32[$v$0$i$lcssa + 24 >> 2] | 0;
    $157 = HEAP32[$v$0$i$lcssa + 12 >> 2] | 0;
    do if (($157 | 0) == ($v$0$i$lcssa | 0)) {
     $168 = $v$0$i$lcssa + 20 | 0;
     $169 = HEAP32[$168 >> 2] | 0;
     if (!$169) {
      $171 = $v$0$i$lcssa + 16 | 0;
      $172 = HEAP32[$171 >> 2] | 0;
      if (!$172) {
       $R$3$i = 0;
       break;
      } else {
       $R$1$i = $172;
       $RP$1$i = $171;
      }
     } else {
      $R$1$i = $169;
      $RP$1$i = $168;
     }
     while (1) {
      $174 = $R$1$i + 20 | 0;
      $175 = HEAP32[$174 >> 2] | 0;
      if ($175 | 0) {
       $R$1$i = $175;
       $RP$1$i = $174;
       continue;
      }
      $177 = $R$1$i + 16 | 0;
      $178 = HEAP32[$177 >> 2] | 0;
      if (!$178) {
       $R$1$i$lcssa = $R$1$i;
       $RP$1$i$lcssa = $RP$1$i;
       break;
      } else {
       $R$1$i = $178;
       $RP$1$i = $177;
      }
     }
     if ($RP$1$i$lcssa >>> 0 < $150 >>> 0) _abort(); else {
      HEAP32[$RP$1$i$lcssa >> 2] = 0;
      $R$3$i = $R$1$i$lcssa;
      break;
     }
    } else {
     $160 = HEAP32[$v$0$i$lcssa + 8 >> 2] | 0;
     if ($160 >>> 0 < $150 >>> 0) _abort();
     $162 = $160 + 12 | 0;
     if ((HEAP32[$162 >> 2] | 0) != ($v$0$i$lcssa | 0)) _abort();
     $165 = $157 + 8 | 0;
     if ((HEAP32[$165 >> 2] | 0) == ($v$0$i$lcssa | 0)) {
      HEAP32[$162 >> 2] = $157;
      HEAP32[$165 >> 2] = $160;
      $R$3$i = $157;
      break;
     } else _abort();
    } while (0);
    do if ($155 | 0) {
     $183 = HEAP32[$v$0$i$lcssa + 28 >> 2] | 0;
     $184 = gb + 45080 + 304 + ($183 << 2) | 0;
     if (($v$0$i$lcssa | 0) == (HEAP32[$184 >> 2] | 0)) {
      HEAP32[$184 >> 2] = $R$3$i;
      if (!$R$3$i) {
       HEAP32[gb + 45080 + 4 >> 2] = HEAP32[gb + 45080 + 4 >> 2] & ~(1 << $183);
       break;
      }
     } else {
      if ($155 >>> 0 < (HEAP32[gb + 45080 + 16 >> 2] | 0) >>> 0) _abort();
      $193 = $155 + 16 | 0;
      if ((HEAP32[$193 >> 2] | 0) == ($v$0$i$lcssa | 0)) HEAP32[$193 >> 2] = $R$3$i; else HEAP32[$155 + 20 >> 2] = $R$3$i;
      if (!$R$3$i) break;
     }
     $198 = HEAP32[gb + 45080 + 16 >> 2] | 0;
     if ($R$3$i >>> 0 < $198 >>> 0) _abort();
     HEAP32[$R$3$i + 24 >> 2] = $155;
     $202 = HEAP32[$v$0$i$lcssa + 16 >> 2] | 0;
     do if ($202 | 0) if ($202 >>> 0 < $198 >>> 0) _abort(); else {
      HEAP32[$R$3$i + 16 >> 2] = $202;
      HEAP32[$202 + 24 >> 2] = $R$3$i;
      break;
     } while (0);
     $208 = HEAP32[$v$0$i$lcssa + 20 >> 2] | 0;
     if ($208 | 0) if ($208 >>> 0 < (HEAP32[gb + 45080 + 16 >> 2] | 0) >>> 0) _abort(); else {
      HEAP32[$R$3$i + 20 >> 2] = $208;
      HEAP32[$208 + 24 >> 2] = $R$3$i;
      break;
     }
    } while (0);
    if ($rsize$0$i$lcssa >>> 0 < 16) {
     $215 = $rsize$0$i$lcssa + $4 | 0;
     HEAP32[$v$0$i$lcssa + 4 >> 2] = $215 | 3;
     $219 = $v$0$i$lcssa + $215 + 4 | 0;
     HEAP32[$219 >> 2] = HEAP32[$219 >> 2] | 1;
    } else {
     HEAP32[$v$0$i$lcssa + 4 >> 2] = $4 | 3;
     HEAP32[$152 + 4 >> 2] = $rsize$0$i$lcssa | 1;
     HEAP32[$152 + $rsize$0$i$lcssa >> 2] = $rsize$0$i$lcssa;
     $227 = HEAP32[gb + 45080 + 8 >> 2] | 0;
     if ($227 | 0) {
      $229 = HEAP32[gb + 45080 + 20 >> 2] | 0;
      $230 = $227 >>> 3;
      $232 = gb + 45080 + 40 + ($230 << 1 << 2) | 0;
      $233 = HEAP32[gb + 45080 >> 2] | 0;
      $234 = 1 << $230;
      if (!($233 & $234)) {
       HEAP32[gb + 45080 >> 2] = $233 | $234;
       $$pre$phi$iZ2D = $232 + 8 | 0;
       $F1$0$i = $232;
      } else {
       $238 = $232 + 8 | 0;
       $239 = HEAP32[$238 >> 2] | 0;
       if ($239 >>> 0 < (HEAP32[gb + 45080 + 16 >> 2] | 0) >>> 0) _abort(); else {
        $$pre$phi$iZ2D = $238;
        $F1$0$i = $239;
       }
      }
      HEAP32[$$pre$phi$iZ2D >> 2] = $229;
      HEAP32[$F1$0$i + 12 >> 2] = $229;
      HEAP32[$229 + 8 >> 2] = $F1$0$i;
      HEAP32[$229 + 12 >> 2] = $232;
     }
     HEAP32[gb + 45080 + 8 >> 2] = $rsize$0$i$lcssa;
     HEAP32[gb + 45080 + 20 >> 2] = $152;
    }
    $$0 = $v$0$i$lcssa + 8 | 0;
    return $$0 | 0;
   }
  } else $nb$0 = $4;
 } else if ($bytes >>> 0 > 4294967231) $nb$0 = -1; else {
  $247 = $bytes + 11 | 0;
  $248 = $247 & -8;
  $249 = HEAP32[gb + 45080 + 4 >> 2] | 0;
  if (!$249) $nb$0 = $248; else {
   $251 = 0 - $248 | 0;
   $252 = $247 >>> 8;
   if (!$252) $idx$0$i = 0; else if ($248 >>> 0 > 16777215) $idx$0$i = 31; else {
    $257 = ($252 + 1048320 | 0) >>> 16 & 8;
    $258 = $252 << $257;
    $261 = ($258 + 520192 | 0) >>> 16 & 4;
    $263 = $258 << $261;
    $266 = ($263 + 245760 | 0) >>> 16 & 2;
    $271 = 14 - ($261 | $257 | $266) + ($263 << $266 >>> 15) | 0;
    $idx$0$i = $248 >>> ($271 + 7 | 0) & 1 | $271 << 1;
   }
   $278 = HEAP32[gb + 45080 + 304 + ($idx$0$i << 2) >> 2] | 0;
   L123 : do if (!$278) {
    $rsize$3$i = $251;
    $t$2$i = 0;
    $v$3$i = 0;
    label = 86;
   } else {
    $rsize$0$i5 = $251;
    $rst$0$i = 0;
    $sizebits$0$i = $248 << (($idx$0$i | 0) == 31 ? 0 : 25 - ($idx$0$i >>> 1) | 0);
    $t$0$i4 = $278;
    $v$0$i6 = 0;
    while (1) {
     $287 = HEAP32[$t$0$i4 + 4 >> 2] & -8;
     $288 = $287 - $248 | 0;
     if ($288 >>> 0 < $rsize$0$i5 >>> 0) if (($287 | 0) == ($248 | 0)) {
      $rsize$412$i = $288;
      $t$411$i = $t$0$i4;
      $v$413$i = $t$0$i4;
      label = 90;
      break L123;
     } else {
      $rsize$1$i = $288;
      $v$1$i = $t$0$i4;
     } else {
      $rsize$1$i = $rsize$0$i5;
      $v$1$i = $v$0$i6;
     }
     $292 = HEAP32[$t$0$i4 + 20 >> 2] | 0;
     $t$0$i4 = HEAP32[$t$0$i4 + 16 + ($sizebits$0$i >>> 31 << 2) >> 2] | 0;
     $rst$1$i = ($292 | 0) == 0 | ($292 | 0) == ($t$0$i4 | 0) ? $rst$0$i : $292;
     $298 = ($t$0$i4 | 0) == 0;
     if ($298) {
      $rsize$3$i = $rsize$1$i;
      $t$2$i = $rst$1$i;
      $v$3$i = $v$1$i;
      label = 86;
      break;
     } else {
      $rsize$0$i5 = $rsize$1$i;
      $rst$0$i = $rst$1$i;
      $sizebits$0$i = $sizebits$0$i << ($298 & 1 ^ 1);
      $v$0$i6 = $v$1$i;
     }
    }
   } while (0);
   if ((label | 0) == 86) {
    if (($t$2$i | 0) == 0 & ($v$3$i | 0) == 0) {
     $303 = 2 << $idx$0$i;
     $306 = $249 & ($303 | 0 - $303);
     if (!$306) {
      $nb$0 = $248;
      break;
     }
     $310 = ($306 & 0 - $306) + -1 | 0;
     $312 = $310 >>> 12 & 16;
     $313 = $310 >>> $312;
     $315 = $313 >>> 5 & 8;
     $317 = $313 >>> $315;
     $319 = $317 >>> 2 & 4;
     $321 = $317 >>> $319;
     $323 = $321 >>> 1 & 2;
     $325 = $321 >>> $323;
     $327 = $325 >>> 1 & 1;
     $t$4$ph$i = HEAP32[gb + 45080 + 304 + (($315 | $312 | $319 | $323 | $327) + ($325 >>> $327) << 2) >> 2] | 0;
    } else $t$4$ph$i = $t$2$i;
    if (!$t$4$ph$i) {
     $rsize$4$lcssa$i = $rsize$3$i;
     $v$4$lcssa$i = $v$3$i;
    } else {
     $rsize$412$i = $rsize$3$i;
     $t$411$i = $t$4$ph$i;
     $v$413$i = $v$3$i;
     label = 90;
    }
   }
   if ((label | 0) == 90) while (1) {
    label = 0;
    $337 = (HEAP32[$t$411$i + 4 >> 2] & -8) - $248 | 0;
    $338 = $337 >>> 0 < $rsize$412$i >>> 0;
    $$rsize$4$i = $338 ? $337 : $rsize$412$i;
    $t$4$v$4$i = $338 ? $t$411$i : $v$413$i;
    $340 = HEAP32[$t$411$i + 16 >> 2] | 0;
    if ($340 | 0) {
     $rsize$412$i = $$rsize$4$i;
     $t$411$i = $340;
     $v$413$i = $t$4$v$4$i;
     label = 90;
     continue;
    }
    $t$411$i = HEAP32[$t$411$i + 20 >> 2] | 0;
    if (!$t$411$i) {
     $rsize$4$lcssa$i = $$rsize$4$i;
     $v$4$lcssa$i = $t$4$v$4$i;
     break;
    } else {
     $rsize$412$i = $$rsize$4$i;
     $v$413$i = $t$4$v$4$i;
     label = 90;
    }
   }
   if (!$v$4$lcssa$i) $nb$0 = $248; else if ($rsize$4$lcssa$i >>> 0 < ((HEAP32[gb + 45080 + 8 >> 2] | 0) - $248 | 0) >>> 0) {
    $349 = HEAP32[gb + 45080 + 16 >> 2] | 0;
    if ($v$4$lcssa$i >>> 0 < $349 >>> 0) _abort();
    $351 = $v$4$lcssa$i + $248 | 0;
    if ($v$4$lcssa$i >>> 0 >= $351 >>> 0) _abort();
    $354 = HEAP32[$v$4$lcssa$i + 24 >> 2] | 0;
    $356 = HEAP32[$v$4$lcssa$i + 12 >> 2] | 0;
    do if (($356 | 0) == ($v$4$lcssa$i | 0)) {
     $367 = $v$4$lcssa$i + 20 | 0;
     $368 = HEAP32[$367 >> 2] | 0;
     if (!$368) {
      $370 = $v$4$lcssa$i + 16 | 0;
      $371 = HEAP32[$370 >> 2] | 0;
      if (!$371) {
       $R$3$i11 = 0;
       break;
      } else {
       $R$1$i9 = $371;
       $RP$1$i8 = $370;
      }
     } else {
      $R$1$i9 = $368;
      $RP$1$i8 = $367;
     }
     while (1) {
      $373 = $R$1$i9 + 20 | 0;
      $374 = HEAP32[$373 >> 2] | 0;
      if ($374 | 0) {
       $R$1$i9 = $374;
       $RP$1$i8 = $373;
       continue;
      }
      $376 = $R$1$i9 + 16 | 0;
      $377 = HEAP32[$376 >> 2] | 0;
      if (!$377) {
       $R$1$i9$lcssa = $R$1$i9;
       $RP$1$i8$lcssa = $RP$1$i8;
       break;
      } else {
       $R$1$i9 = $377;
       $RP$1$i8 = $376;
      }
     }
     if ($RP$1$i8$lcssa >>> 0 < $349 >>> 0) _abort(); else {
      HEAP32[$RP$1$i8$lcssa >> 2] = 0;
      $R$3$i11 = $R$1$i9$lcssa;
      break;
     }
    } else {
     $359 = HEAP32[$v$4$lcssa$i + 8 >> 2] | 0;
     if ($359 >>> 0 < $349 >>> 0) _abort();
     $361 = $359 + 12 | 0;
     if ((HEAP32[$361 >> 2] | 0) != ($v$4$lcssa$i | 0)) _abort();
     $364 = $356 + 8 | 0;
     if ((HEAP32[$364 >> 2] | 0) == ($v$4$lcssa$i | 0)) {
      HEAP32[$361 >> 2] = $356;
      HEAP32[$364 >> 2] = $359;
      $R$3$i11 = $356;
      break;
     } else _abort();
    } while (0);
    do if ($354 | 0) {
     $382 = HEAP32[$v$4$lcssa$i + 28 >> 2] | 0;
     $383 = gb + 45080 + 304 + ($382 << 2) | 0;
     if (($v$4$lcssa$i | 0) == (HEAP32[$383 >> 2] | 0)) {
      HEAP32[$383 >> 2] = $R$3$i11;
      if (!$R$3$i11) {
       HEAP32[gb + 45080 + 4 >> 2] = HEAP32[gb + 45080 + 4 >> 2] & ~(1 << $382);
       break;
      }
     } else {
      if ($354 >>> 0 < (HEAP32[gb + 45080 + 16 >> 2] | 0) >>> 0) _abort();
      $392 = $354 + 16 | 0;
      if ((HEAP32[$392 >> 2] | 0) == ($v$4$lcssa$i | 0)) HEAP32[$392 >> 2] = $R$3$i11; else HEAP32[$354 + 20 >> 2] = $R$3$i11;
      if (!$R$3$i11) break;
     }
     $397 = HEAP32[gb + 45080 + 16 >> 2] | 0;
     if ($R$3$i11 >>> 0 < $397 >>> 0) _abort();
     HEAP32[$R$3$i11 + 24 >> 2] = $354;
     $401 = HEAP32[$v$4$lcssa$i + 16 >> 2] | 0;
     do if ($401 | 0) if ($401 >>> 0 < $397 >>> 0) _abort(); else {
      HEAP32[$R$3$i11 + 16 >> 2] = $401;
      HEAP32[$401 + 24 >> 2] = $R$3$i11;
      break;
     } while (0);
     $407 = HEAP32[$v$4$lcssa$i + 20 >> 2] | 0;
     if ($407 | 0) if ($407 >>> 0 < (HEAP32[gb + 45080 + 16 >> 2] | 0) >>> 0) _abort(); else {
      HEAP32[$R$3$i11 + 20 >> 2] = $407;
      HEAP32[$407 + 24 >> 2] = $R$3$i11;
      break;
     }
    } while (0);
    do if ($rsize$4$lcssa$i >>> 0 < 16) {
     $414 = $rsize$4$lcssa$i + $248 | 0;
     HEAP32[$v$4$lcssa$i + 4 >> 2] = $414 | 3;
     $418 = $v$4$lcssa$i + $414 + 4 | 0;
     HEAP32[$418 >> 2] = HEAP32[$418 >> 2] | 1;
    } else {
     HEAP32[$v$4$lcssa$i + 4 >> 2] = $248 | 3;
     HEAP32[$351 + 4 >> 2] = $rsize$4$lcssa$i | 1;
     HEAP32[$351 + $rsize$4$lcssa$i >> 2] = $rsize$4$lcssa$i;
     $426 = $rsize$4$lcssa$i >>> 3;
     if ($rsize$4$lcssa$i >>> 0 < 256) {
      $429 = gb + 45080 + 40 + ($426 << 1 << 2) | 0;
      $430 = HEAP32[gb + 45080 >> 2] | 0;
      $431 = 1 << $426;
      if (!($430 & $431)) {
       HEAP32[gb + 45080 >> 2] = $430 | $431;
       $$pre$phi$i14Z2D = $429 + 8 | 0;
       $F5$0$i = $429;
      } else {
       $435 = $429 + 8 | 0;
       $436 = HEAP32[$435 >> 2] | 0;
       if ($436 >>> 0 < (HEAP32[gb + 45080 + 16 >> 2] | 0) >>> 0) _abort(); else {
        $$pre$phi$i14Z2D = $435;
        $F5$0$i = $436;
       }
      }
      HEAP32[$$pre$phi$i14Z2D >> 2] = $351;
      HEAP32[$F5$0$i + 12 >> 2] = $351;
      HEAP32[$351 + 8 >> 2] = $F5$0$i;
      HEAP32[$351 + 12 >> 2] = $429;
      break;
     }
     $442 = $rsize$4$lcssa$i >>> 8;
     if (!$442) $I7$0$i = 0; else if ($rsize$4$lcssa$i >>> 0 > 16777215) $I7$0$i = 31; else {
      $447 = ($442 + 1048320 | 0) >>> 16 & 8;
      $448 = $442 << $447;
      $451 = ($448 + 520192 | 0) >>> 16 & 4;
      $453 = $448 << $451;
      $456 = ($453 + 245760 | 0) >>> 16 & 2;
      $461 = 14 - ($451 | $447 | $456) + ($453 << $456 >>> 15) | 0;
      $I7$0$i = $rsize$4$lcssa$i >>> ($461 + 7 | 0) & 1 | $461 << 1;
     }
     $467 = gb + 45080 + 304 + ($I7$0$i << 2) | 0;
     HEAP32[$351 + 28 >> 2] = $I7$0$i;
     $469 = $351 + 16 | 0;
     HEAP32[$469 + 4 >> 2] = 0;
     HEAP32[$469 >> 2] = 0;
     $471 = HEAP32[gb + 45080 + 4 >> 2] | 0;
     $472 = 1 << $I7$0$i;
     if (!($471 & $472)) {
      HEAP32[gb + 45080 + 4 >> 2] = $471 | $472;
      HEAP32[$467 >> 2] = $351;
      HEAP32[$351 + 24 >> 2] = $467;
      HEAP32[$351 + 12 >> 2] = $351;
      HEAP32[$351 + 8 >> 2] = $351;
      break;
     }
     $K12$0$i = $rsize$4$lcssa$i << (($I7$0$i | 0) == 31 ? 0 : 25 - ($I7$0$i >>> 1) | 0);
     $T$0$i = HEAP32[$467 >> 2] | 0;
     while (1) {
      if ((HEAP32[$T$0$i + 4 >> 2] & -8 | 0) == ($rsize$4$lcssa$i | 0)) {
       $T$0$i$lcssa = $T$0$i;
       label = 148;
       break;
      }
      $490 = $T$0$i + 16 + ($K12$0$i >>> 31 << 2) | 0;
      $492 = HEAP32[$490 >> 2] | 0;
      if (!$492) {
       $$lcssa157 = $490;
       $T$0$i$lcssa156 = $T$0$i;
       label = 145;
       break;
      } else {
       $K12$0$i = $K12$0$i << 1;
       $T$0$i = $492;
      }
     }
     if ((label | 0) == 145) if ($$lcssa157 >>> 0 < (HEAP32[gb + 45080 + 16 >> 2] | 0) >>> 0) _abort(); else {
      HEAP32[$$lcssa157 >> 2] = $351;
      HEAP32[$351 + 24 >> 2] = $T$0$i$lcssa156;
      HEAP32[$351 + 12 >> 2] = $351;
      HEAP32[$351 + 8 >> 2] = $351;
      break;
     } else if ((label | 0) == 148) {
      $499 = $T$0$i$lcssa + 8 | 0;
      $500 = HEAP32[$499 >> 2] | 0;
      $501 = HEAP32[gb + 45080 + 16 >> 2] | 0;
      if ($500 >>> 0 >= $501 >>> 0 & $T$0$i$lcssa >>> 0 >= $501 >>> 0) {
       HEAP32[$500 + 12 >> 2] = $351;
       HEAP32[$499 >> 2] = $351;
       HEAP32[$351 + 8 >> 2] = $500;
       HEAP32[$351 + 12 >> 2] = $T$0$i$lcssa;
       HEAP32[$351 + 24 >> 2] = 0;
       break;
      } else _abort();
     }
    } while (0);
    $$0 = $v$4$lcssa$i + 8 | 0;
    return $$0 | 0;
   } else $nb$0 = $248;
  }
 } while (0);
 $509 = HEAP32[gb + 45080 + 8 >> 2] | 0;
 if ($509 >>> 0 >= $nb$0 >>> 0) {
  $511 = $509 - $nb$0 | 0;
  $512 = HEAP32[gb + 45080 + 20 >> 2] | 0;
  if ($511 >>> 0 > 15) {
   $514 = $512 + $nb$0 | 0;
   HEAP32[gb + 45080 + 20 >> 2] = $514;
   HEAP32[gb + 45080 + 8 >> 2] = $511;
   HEAP32[$514 + 4 >> 2] = $511 | 1;
   HEAP32[$514 + $511 >> 2] = $511;
   HEAP32[$512 + 4 >> 2] = $nb$0 | 3;
  } else {
   HEAP32[gb + 45080 + 8 >> 2] = 0;
   HEAP32[gb + 45080 + 20 >> 2] = 0;
   HEAP32[$512 + 4 >> 2] = $509 | 3;
   $523 = $512 + $509 + 4 | 0;
   HEAP32[$523 >> 2] = HEAP32[$523 >> 2] | 1;
  }
  $$0 = $512 + 8 | 0;
  return $$0 | 0;
 }
 $527 = HEAP32[gb + 45080 + 12 >> 2] | 0;
 if ($527 >>> 0 > $nb$0 >>> 0) {
  $529 = $527 - $nb$0 | 0;
  HEAP32[gb + 45080 + 12 >> 2] = $529;
  $530 = HEAP32[gb + 45080 + 24 >> 2] | 0;
  $531 = $530 + $nb$0 | 0;
  HEAP32[gb + 45080 + 24 >> 2] = $531;
  HEAP32[$531 + 4 >> 2] = $529 | 1;
  HEAP32[$530 + 4 >> 2] = $nb$0 | 3;
  $$0 = $530 + 8 | 0;
  return $$0 | 0;
 }
 do if (!(HEAP32[gb + 45552 >> 2] | 0)) {
  $539 = _sysconf(30) | 0;
  if (!($539 + -1 & $539)) {
   HEAP32[gb + 45552 + 8 >> 2] = $539;
   HEAP32[gb + 45552 + 4 >> 2] = $539;
   HEAP32[gb + 45552 + 12 >> 2] = -1;
   HEAP32[gb + 45552 + 16 >> 2] = -1;
   HEAP32[gb + 45552 + 20 >> 2] = 0;
   HEAP32[gb + 45080 + 444 >> 2] = 0;
   $545 = (_time(0) | 0) & -16 ^ 1431655768;
   HEAP32[gb + 45552 >> 2] = $545;
   break;
  } else _abort();
 } while (0);
 $546 = $nb$0 + 48 | 0;
 $547 = HEAP32[gb + 45552 + 8 >> 2] | 0;
 $548 = $nb$0 + 47 | 0;
 $549 = $547 + $548 | 0;
 $550 = 0 - $547 | 0;
 $551 = $549 & $550;
 if ($551 >>> 0 <= $nb$0 >>> 0) {
  $$0 = 0;
  return $$0 | 0;
 }
 $553 = HEAP32[gb + 45080 + 440 >> 2] | 0;
 if ($553 | 0) {
  $555 = HEAP32[gb + 45080 + 432 >> 2] | 0;
  $556 = $555 + $551 | 0;
  if ($556 >>> 0 <= $555 >>> 0 | $556 >>> 0 > $553 >>> 0) {
   $$0 = 0;
   return $$0 | 0;
  }
 }
 L257 : do if (!(HEAP32[gb + 45080 + 444 >> 2] & 4)) {
  $562 = HEAP32[gb + 45080 + 24 >> 2] | 0;
  L259 : do if (!$562) label = 173; else {
   $sp$0$i$i = gb + 45080 + 448 | 0;
   while (1) {
    $564 = HEAP32[$sp$0$i$i >> 2] | 0;
    if ($564 >>> 0 <= $562 >>> 0) {
     $566 = $sp$0$i$i + 4 | 0;
     if (($564 + (HEAP32[$566 >> 2] | 0) | 0) >>> 0 > $562 >>> 0) {
      $$lcssa153 = $sp$0$i$i;
      $$lcssa155 = $566;
      break;
     }
    }
    $sp$0$i$i = HEAP32[$sp$0$i$i + 8 >> 2] | 0;
    if (!$sp$0$i$i) {
     label = 173;
     break L259;
    }
   }
   $597 = $549 - (HEAP32[gb + 45080 + 12 >> 2] | 0) & $550;
   if ($597 >>> 0 < 2147483647) {
    $599 = _sbrk($597 | 0) | 0;
    if (($599 | 0) == ((HEAP32[$$lcssa153 >> 2] | 0) + (HEAP32[$$lcssa155 >> 2] | 0) | 0)) {
     if (($599 | 0) != (-1 | 0)) {
      $tbase$746$i = $599;
      $tsize$745$i = $597;
      label = 193;
      break L257;
     }
    } else {
     $br$2$ph$i = $599;
     $ssize$2$ph$i = $597;
     label = 183;
    }
   }
  } while (0);
  do if ((label | 0) == 173) {
   $573 = _sbrk(0) | 0;
   if (($573 | 0) != (-1 | 0)) {
    $575 = $573;
    $576 = HEAP32[gb + 45552 + 4 >> 2] | 0;
    $577 = $576 + -1 | 0;
    if (!($577 & $575)) $ssize$0$i = $551; else $ssize$0$i = $551 - $575 + ($577 + $575 & 0 - $576) | 0;
    $585 = HEAP32[gb + 45080 + 432 >> 2] | 0;
    $586 = $585 + $ssize$0$i | 0;
    if ($ssize$0$i >>> 0 > $nb$0 >>> 0 & $ssize$0$i >>> 0 < 2147483647) {
     $589 = HEAP32[gb + 45080 + 440 >> 2] | 0;
     if ($589 | 0) if ($586 >>> 0 <= $585 >>> 0 | $586 >>> 0 > $589 >>> 0) break;
     $593 = _sbrk($ssize$0$i | 0) | 0;
     if (($593 | 0) == ($573 | 0)) {
      $tbase$746$i = $573;
      $tsize$745$i = $ssize$0$i;
      label = 193;
      break L257;
     } else {
      $br$2$ph$i = $593;
      $ssize$2$ph$i = $ssize$0$i;
      label = 183;
     }
    }
   }
  } while (0);
  L279 : do if ((label | 0) == 183) {
   $605 = 0 - $ssize$2$ph$i | 0;
   do if ($546 >>> 0 > $ssize$2$ph$i >>> 0 & ($ssize$2$ph$i >>> 0 < 2147483647 & ($br$2$ph$i | 0) != (-1 | 0))) {
    $609 = HEAP32[gb + 45552 + 8 >> 2] | 0;
    $613 = $548 - $ssize$2$ph$i + $609 & 0 - $609;
    if ($613 >>> 0 < 2147483647) if ((_sbrk($613 | 0) | 0) == (-1 | 0)) {
     _sbrk($605 | 0) | 0;
     break L279;
    } else {
     $ssize$5$i = $613 + $ssize$2$ph$i | 0;
     break;
    } else $ssize$5$i = $ssize$2$ph$i;
   } else $ssize$5$i = $ssize$2$ph$i; while (0);
   if (($br$2$ph$i | 0) != (-1 | 0)) {
    $tbase$746$i = $br$2$ph$i;
    $tsize$745$i = $ssize$5$i;
    label = 193;
    break L257;
   }
  } while (0);
  HEAP32[gb + 45080 + 444 >> 2] = HEAP32[gb + 45080 + 444 >> 2] | 4;
  label = 190;
 } else label = 190; while (0);
 if ((label | 0) == 190) if ($551 >>> 0 < 2147483647) {
  $622 = _sbrk($551 | 0) | 0;
  $623 = _sbrk(0) | 0;
  if ($622 >>> 0 < $623 >>> 0 & (($622 | 0) != (-1 | 0) & ($623 | 0) != (-1 | 0))) {
   $629 = $623 - $622 | 0;
   if ($629 >>> 0 > ($nb$0 + 40 | 0) >>> 0) {
    $tbase$746$i = $622;
    $tsize$745$i = $629;
    label = 193;
   }
  }
 }
 if ((label | 0) == 193) {
  $632 = (HEAP32[gb + 45080 + 432 >> 2] | 0) + $tsize$745$i | 0;
  HEAP32[gb + 45080 + 432 >> 2] = $632;
  if ($632 >>> 0 > (HEAP32[gb + 45080 + 436 >> 2] | 0) >>> 0) HEAP32[gb + 45080 + 436 >> 2] = $632;
  $635 = HEAP32[gb + 45080 + 24 >> 2] | 0;
  do if (!$635) {
   $637 = HEAP32[gb + 45080 + 16 >> 2] | 0;
   if (($637 | 0) == 0 | $tbase$746$i >>> 0 < $637 >>> 0) HEAP32[gb + 45080 + 16 >> 2] = $tbase$746$i;
   HEAP32[gb + 45080 + 448 >> 2] = $tbase$746$i;
   HEAP32[gb + 45080 + 452 >> 2] = $tsize$745$i;
   HEAP32[gb + 45080 + 460 >> 2] = 0;
   HEAP32[gb + 45080 + 36 >> 2] = HEAP32[gb + 45552 >> 2];
   HEAP32[gb + 45080 + 32 >> 2] = -1;
   $i$01$i$i = 0;
   do {
    $642 = gb + 45080 + 40 + ($i$01$i$i << 1 << 2) | 0;
    HEAP32[$642 + 12 >> 2] = $642;
    HEAP32[$642 + 8 >> 2] = $642;
    $i$01$i$i = $i$01$i$i + 1 | 0;
   } while (($i$01$i$i | 0) != 32);
   $648 = $tbase$746$i + 8 | 0;
   $653 = ($648 & 7 | 0) == 0 ? 0 : 0 - $648 & 7;
   $654 = $tbase$746$i + $653 | 0;
   $655 = $tsize$745$i + -40 - $653 | 0;
   HEAP32[gb + 45080 + 24 >> 2] = $654;
   HEAP32[gb + 45080 + 12 >> 2] = $655;
   HEAP32[$654 + 4 >> 2] = $655 | 1;
   HEAP32[$654 + $655 + 4 >> 2] = 40;
   HEAP32[gb + 45080 + 28 >> 2] = HEAP32[gb + 45552 + 16 >> 2];
  } else {
   $sp$068$i = gb + 45080 + 448 | 0;
   do {
    $661 = HEAP32[$sp$068$i >> 2] | 0;
    $662 = $sp$068$i + 4 | 0;
    $663 = HEAP32[$662 >> 2] | 0;
    if (($tbase$746$i | 0) == ($661 + $663 | 0)) {
     $$lcssa147 = $661;
     $$lcssa149 = $662;
     $$lcssa151 = $663;
     $sp$068$i$lcssa = $sp$068$i;
     label = 203;
     break;
    }
    $sp$068$i = HEAP32[$sp$068$i + 8 >> 2] | 0;
   } while (($sp$068$i | 0) != 0);
   if ((label | 0) == 203) if (!(HEAP32[$sp$068$i$lcssa + 12 >> 2] & 8)) if ($635 >>> 0 < $tbase$746$i >>> 0 & $635 >>> 0 >= $$lcssa147 >>> 0) {
    HEAP32[$$lcssa149 >> 2] = $$lcssa151 + $tsize$745$i;
    $678 = $635 + 8 | 0;
    $683 = ($678 & 7 | 0) == 0 ? 0 : 0 - $678 & 7;
    $684 = $635 + $683 | 0;
    $686 = $tsize$745$i - $683 + (HEAP32[gb + 45080 + 12 >> 2] | 0) | 0;
    HEAP32[gb + 45080 + 24 >> 2] = $684;
    HEAP32[gb + 45080 + 12 >> 2] = $686;
    HEAP32[$684 + 4 >> 2] = $686 | 1;
    HEAP32[$684 + $686 + 4 >> 2] = 40;
    HEAP32[gb + 45080 + 28 >> 2] = HEAP32[gb + 45552 + 16 >> 2];
    break;
   }
   $692 = HEAP32[gb + 45080 + 16 >> 2] | 0;
   if ($tbase$746$i >>> 0 < $692 >>> 0) {
    HEAP32[gb + 45080 + 16 >> 2] = $tbase$746$i;
    $757 = $tbase$746$i;
   } else $757 = $692;
   $694 = $tbase$746$i + $tsize$745$i | 0;
   $sp$167$i = gb + 45080 + 448 | 0;
   while (1) {
    if ((HEAP32[$sp$167$i >> 2] | 0) == ($694 | 0)) {
     $$lcssa144 = $sp$167$i;
     $sp$167$i$lcssa = $sp$167$i;
     label = 211;
     break;
    }
    $sp$167$i = HEAP32[$sp$167$i + 8 >> 2] | 0;
    if (!$sp$167$i) {
     $sp$0$i$i$i = gb + 45080 + 448 | 0;
     break;
    }
   }
   if ((label | 0) == 211) if (!(HEAP32[$sp$167$i$lcssa + 12 >> 2] & 8)) {
    HEAP32[$$lcssa144 >> 2] = $tbase$746$i;
    $704 = $sp$167$i$lcssa + 4 | 0;
    HEAP32[$704 >> 2] = (HEAP32[$704 >> 2] | 0) + $tsize$745$i;
    $708 = $tbase$746$i + 8 | 0;
    $714 = $tbase$746$i + (($708 & 7 | 0) == 0 ? 0 : 0 - $708 & 7) | 0;
    $716 = $694 + 8 | 0;
    $722 = $694 + (($716 & 7 | 0) == 0 ? 0 : 0 - $716 & 7) | 0;
    $726 = $714 + $nb$0 | 0;
    $727 = $722 - $714 - $nb$0 | 0;
    HEAP32[$714 + 4 >> 2] = $nb$0 | 3;
    do if (($722 | 0) == ($635 | 0)) {
     $732 = (HEAP32[gb + 45080 + 12 >> 2] | 0) + $727 | 0;
     HEAP32[gb + 45080 + 12 >> 2] = $732;
     HEAP32[gb + 45080 + 24 >> 2] = $726;
     HEAP32[$726 + 4 >> 2] = $732 | 1;
    } else {
     if (($722 | 0) == (HEAP32[gb + 45080 + 20 >> 2] | 0)) {
      $738 = (HEAP32[gb + 45080 + 8 >> 2] | 0) + $727 | 0;
      HEAP32[gb + 45080 + 8 >> 2] = $738;
      HEAP32[gb + 45080 + 20 >> 2] = $726;
      HEAP32[$726 + 4 >> 2] = $738 | 1;
      HEAP32[$726 + $738 >> 2] = $738;
      break;
     }
     $743 = HEAP32[$722 + 4 >> 2] | 0;
     if (($743 & 3 | 0) == 1) {
      $746 = $743 & -8;
      $747 = $743 >>> 3;
      L331 : do if ($743 >>> 0 < 256) {
       $750 = HEAP32[$722 + 8 >> 2] | 0;
       $752 = HEAP32[$722 + 12 >> 2] | 0;
       $754 = gb + 45080 + 40 + ($747 << 1 << 2) | 0;
       do if (($750 | 0) != ($754 | 0)) {
        if ($750 >>> 0 < $757 >>> 0) _abort();
        if ((HEAP32[$750 + 12 >> 2] | 0) == ($722 | 0)) break;
        _abort();
       } while (0);
       if (($752 | 0) == ($750 | 0)) {
        HEAP32[gb + 45080 >> 2] = HEAP32[gb + 45080 >> 2] & ~(1 << $747);
        break;
       }
       do if (($752 | 0) == ($754 | 0)) $$pre$phi10$i$iZ2D = $752 + 8 | 0; else {
        if ($752 >>> 0 < $757 >>> 0) _abort();
        $768 = $752 + 8 | 0;
        if ((HEAP32[$768 >> 2] | 0) == ($722 | 0)) {
         $$pre$phi10$i$iZ2D = $768;
         break;
        }
        _abort();
       } while (0);
       HEAP32[$750 + 12 >> 2] = $752;
       HEAP32[$$pre$phi10$i$iZ2D >> 2] = $750;
      } else {
       $773 = HEAP32[$722 + 24 >> 2] | 0;
       $775 = HEAP32[$722 + 12 >> 2] | 0;
       do if (($775 | 0) == ($722 | 0)) {
        $786 = $722 + 16 | 0;
        $787 = $786 + 4 | 0;
        $788 = HEAP32[$787 >> 2] | 0;
        if (!$788) {
         $790 = HEAP32[$786 >> 2] | 0;
         if (!$790) {
          $R$3$i$i = 0;
          break;
         } else {
          $R$1$i$i = $790;
          $RP$1$i$i = $786;
         }
        } else {
         $R$1$i$i = $788;
         $RP$1$i$i = $787;
        }
        while (1) {
         $792 = $R$1$i$i + 20 | 0;
         $793 = HEAP32[$792 >> 2] | 0;
         if ($793 | 0) {
          $R$1$i$i = $793;
          $RP$1$i$i = $792;
          continue;
         }
         $795 = $R$1$i$i + 16 | 0;
         $796 = HEAP32[$795 >> 2] | 0;
         if (!$796) {
          $R$1$i$i$lcssa = $R$1$i$i;
          $RP$1$i$i$lcssa = $RP$1$i$i;
          break;
         } else {
          $R$1$i$i = $796;
          $RP$1$i$i = $795;
         }
        }
        if ($RP$1$i$i$lcssa >>> 0 < $757 >>> 0) _abort(); else {
         HEAP32[$RP$1$i$i$lcssa >> 2] = 0;
         $R$3$i$i = $R$1$i$i$lcssa;
         break;
        }
       } else {
        $778 = HEAP32[$722 + 8 >> 2] | 0;
        if ($778 >>> 0 < $757 >>> 0) _abort();
        $780 = $778 + 12 | 0;
        if ((HEAP32[$780 >> 2] | 0) != ($722 | 0)) _abort();
        $783 = $775 + 8 | 0;
        if ((HEAP32[$783 >> 2] | 0) == ($722 | 0)) {
         HEAP32[$780 >> 2] = $775;
         HEAP32[$783 >> 2] = $778;
         $R$3$i$i = $775;
         break;
        } else _abort();
       } while (0);
       if (!$773) break;
       $801 = HEAP32[$722 + 28 >> 2] | 0;
       $802 = gb + 45080 + 304 + ($801 << 2) | 0;
       do if (($722 | 0) == (HEAP32[$802 >> 2] | 0)) {
        HEAP32[$802 >> 2] = $R$3$i$i;
        if ($R$3$i$i | 0) break;
        HEAP32[gb + 45080 + 4 >> 2] = HEAP32[gb + 45080 + 4 >> 2] & ~(1 << $801);
        break L331;
       } else {
        if ($773 >>> 0 < (HEAP32[gb + 45080 + 16 >> 2] | 0) >>> 0) _abort();
        $811 = $773 + 16 | 0;
        if ((HEAP32[$811 >> 2] | 0) == ($722 | 0)) HEAP32[$811 >> 2] = $R$3$i$i; else HEAP32[$773 + 20 >> 2] = $R$3$i$i;
        if (!$R$3$i$i) break L331;
       } while (0);
       $816 = HEAP32[gb + 45080 + 16 >> 2] | 0;
       if ($R$3$i$i >>> 0 < $816 >>> 0) _abort();
       HEAP32[$R$3$i$i + 24 >> 2] = $773;
       $819 = $722 + 16 | 0;
       $820 = HEAP32[$819 >> 2] | 0;
       do if ($820 | 0) if ($820 >>> 0 < $816 >>> 0) _abort(); else {
        HEAP32[$R$3$i$i + 16 >> 2] = $820;
        HEAP32[$820 + 24 >> 2] = $R$3$i$i;
        break;
       } while (0);
       $826 = HEAP32[$819 + 4 >> 2] | 0;
       if (!$826) break;
       if ($826 >>> 0 < (HEAP32[gb + 45080 + 16 >> 2] | 0) >>> 0) _abort(); else {
        HEAP32[$R$3$i$i + 20 >> 2] = $826;
        HEAP32[$826 + 24 >> 2] = $R$3$i$i;
        break;
       }
      } while (0);
      $oldfirst$0$i$i = $722 + $746 | 0;
      $qsize$0$i$i = $746 + $727 | 0;
     } else {
      $oldfirst$0$i$i = $722;
      $qsize$0$i$i = $727;
     }
     $834 = $oldfirst$0$i$i + 4 | 0;
     HEAP32[$834 >> 2] = HEAP32[$834 >> 2] & -2;
     HEAP32[$726 + 4 >> 2] = $qsize$0$i$i | 1;
     HEAP32[$726 + $qsize$0$i$i >> 2] = $qsize$0$i$i;
     $840 = $qsize$0$i$i >>> 3;
     if ($qsize$0$i$i >>> 0 < 256) {
      $843 = gb + 45080 + 40 + ($840 << 1 << 2) | 0;
      $844 = HEAP32[gb + 45080 >> 2] | 0;
      $845 = 1 << $840;
      do if (!($844 & $845)) {
       HEAP32[gb + 45080 >> 2] = $844 | $845;
       $$pre$phi$i17$iZ2D = $843 + 8 | 0;
       $F4$0$i$i = $843;
      } else {
       $849 = $843 + 8 | 0;
       $850 = HEAP32[$849 >> 2] | 0;
       if ($850 >>> 0 >= (HEAP32[gb + 45080 + 16 >> 2] | 0) >>> 0) {
        $$pre$phi$i17$iZ2D = $849;
        $F4$0$i$i = $850;
        break;
       }
       _abort();
      } while (0);
      HEAP32[$$pre$phi$i17$iZ2D >> 2] = $726;
      HEAP32[$F4$0$i$i + 12 >> 2] = $726;
      HEAP32[$726 + 8 >> 2] = $F4$0$i$i;
      HEAP32[$726 + 12 >> 2] = $843;
      break;
     }
     $856 = $qsize$0$i$i >>> 8;
     do if (!$856) $I7$0$i$i = 0; else {
      if ($qsize$0$i$i >>> 0 > 16777215) {
       $I7$0$i$i = 31;
       break;
      }
      $861 = ($856 + 1048320 | 0) >>> 16 & 8;
      $862 = $856 << $861;
      $865 = ($862 + 520192 | 0) >>> 16 & 4;
      $867 = $862 << $865;
      $870 = ($867 + 245760 | 0) >>> 16 & 2;
      $875 = 14 - ($865 | $861 | $870) + ($867 << $870 >>> 15) | 0;
      $I7$0$i$i = $qsize$0$i$i >>> ($875 + 7 | 0) & 1 | $875 << 1;
     } while (0);
     $881 = gb + 45080 + 304 + ($I7$0$i$i << 2) | 0;
     HEAP32[$726 + 28 >> 2] = $I7$0$i$i;
     $883 = $726 + 16 | 0;
     HEAP32[$883 + 4 >> 2] = 0;
     HEAP32[$883 >> 2] = 0;
     $885 = HEAP32[gb + 45080 + 4 >> 2] | 0;
     $886 = 1 << $I7$0$i$i;
     if (!($885 & $886)) {
      HEAP32[gb + 45080 + 4 >> 2] = $885 | $886;
      HEAP32[$881 >> 2] = $726;
      HEAP32[$726 + 24 >> 2] = $881;
      HEAP32[$726 + 12 >> 2] = $726;
      HEAP32[$726 + 8 >> 2] = $726;
      break;
     }
     $K8$0$i$i = $qsize$0$i$i << (($I7$0$i$i | 0) == 31 ? 0 : 25 - ($I7$0$i$i >>> 1) | 0);
     $T$0$i18$i = HEAP32[$881 >> 2] | 0;
     while (1) {
      if ((HEAP32[$T$0$i18$i + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) {
       $T$0$i18$i$lcssa = $T$0$i18$i;
       label = 281;
       break;
      }
      $904 = $T$0$i18$i + 16 + ($K8$0$i$i >>> 31 << 2) | 0;
      $906 = HEAP32[$904 >> 2] | 0;
      if (!$906) {
       $$lcssa = $904;
       $T$0$i18$i$lcssa139 = $T$0$i18$i;
       label = 278;
       break;
      } else {
       $K8$0$i$i = $K8$0$i$i << 1;
       $T$0$i18$i = $906;
      }
     }
     if ((label | 0) == 278) if ($$lcssa >>> 0 < (HEAP32[gb + 45080 + 16 >> 2] | 0) >>> 0) _abort(); else {
      HEAP32[$$lcssa >> 2] = $726;
      HEAP32[$726 + 24 >> 2] = $T$0$i18$i$lcssa139;
      HEAP32[$726 + 12 >> 2] = $726;
      HEAP32[$726 + 8 >> 2] = $726;
      break;
     } else if ((label | 0) == 281) {
      $913 = $T$0$i18$i$lcssa + 8 | 0;
      $914 = HEAP32[$913 >> 2] | 0;
      $915 = HEAP32[gb + 45080 + 16 >> 2] | 0;
      if ($914 >>> 0 >= $915 >>> 0 & $T$0$i18$i$lcssa >>> 0 >= $915 >>> 0) {
       HEAP32[$914 + 12 >> 2] = $726;
       HEAP32[$913 >> 2] = $726;
       HEAP32[$726 + 8 >> 2] = $914;
       HEAP32[$726 + 12 >> 2] = $T$0$i18$i$lcssa;
       HEAP32[$726 + 24 >> 2] = 0;
       break;
      } else _abort();
     }
    } while (0);
    $$0 = $714 + 8 | 0;
    return $$0 | 0;
   } else $sp$0$i$i$i = gb + 45080 + 448 | 0;
   while (1) {
    $922 = HEAP32[$sp$0$i$i$i >> 2] | 0;
    if ($922 >>> 0 <= $635 >>> 0) {
     $926 = $922 + (HEAP32[$sp$0$i$i$i + 4 >> 2] | 0) | 0;
     if ($926 >>> 0 > $635 >>> 0) {
      $$lcssa142 = $926;
      break;
     }
    }
    $sp$0$i$i$i = HEAP32[$sp$0$i$i$i + 8 >> 2] | 0;
   }
   $930 = $$lcssa142 + -47 | 0;
   $932 = $930 + 8 | 0;
   $938 = $930 + (($932 & 7 | 0) == 0 ? 0 : 0 - $932 & 7) | 0;
   $939 = $635 + 16 | 0;
   $941 = $938 >>> 0 < $939 >>> 0 ? $635 : $938;
   $942 = $941 + 8 | 0;
   $946 = $tbase$746$i + 8 | 0;
   $951 = ($946 & 7 | 0) == 0 ? 0 : 0 - $946 & 7;
   $952 = $tbase$746$i + $951 | 0;
   $953 = $tsize$745$i + -40 - $951 | 0;
   HEAP32[gb + 45080 + 24 >> 2] = $952;
   HEAP32[gb + 45080 + 12 >> 2] = $953;
   HEAP32[$952 + 4 >> 2] = $953 | 1;
   HEAP32[$952 + $953 + 4 >> 2] = 40;
   HEAP32[gb + 45080 + 28 >> 2] = HEAP32[gb + 45552 + 16 >> 2];
   $959 = $941 + 4 | 0;
   HEAP32[$959 >> 2] = 27;
   HEAP32[$942 >> 2] = HEAP32[gb + 45080 + 448 >> 2];
   HEAP32[$942 + 4 >> 2] = HEAP32[gb + 45080 + 448 + 4 >> 2];
   HEAP32[$942 + 8 >> 2] = HEAP32[gb + 45080 + 448 + 8 >> 2];
   HEAP32[$942 + 12 >> 2] = HEAP32[gb + 45080 + 448 + 12 >> 2];
   HEAP32[gb + 45080 + 448 >> 2] = $tbase$746$i;
   HEAP32[gb + 45080 + 452 >> 2] = $tsize$745$i;
   HEAP32[gb + 45080 + 460 >> 2] = 0;
   HEAP32[gb + 45080 + 456 >> 2] = $942;
   $p$0$i$i = $941 + 24 | 0;
   do {
    $p$0$i$i = $p$0$i$i + 4 | 0;
    HEAP32[$p$0$i$i >> 2] = 7;
   } while (($p$0$i$i + 4 | 0) >>> 0 < $$lcssa142 >>> 0);
   if (($941 | 0) != ($635 | 0)) {
    $966 = $941 - $635 | 0;
    HEAP32[$959 >> 2] = HEAP32[$959 >> 2] & -2;
    HEAP32[$635 + 4 >> 2] = $966 | 1;
    HEAP32[$941 >> 2] = $966;
    $971 = $966 >>> 3;
    if ($966 >>> 0 < 256) {
     $974 = gb + 45080 + 40 + ($971 << 1 << 2) | 0;
     $975 = HEAP32[gb + 45080 >> 2] | 0;
     $976 = 1 << $971;
     if (!($975 & $976)) {
      HEAP32[gb + 45080 >> 2] = $975 | $976;
      $$pre$phi$i$iZ2D = $974 + 8 | 0;
      $F$0$i$i = $974;
     } else {
      $980 = $974 + 8 | 0;
      $981 = HEAP32[$980 >> 2] | 0;
      if ($981 >>> 0 < (HEAP32[gb + 45080 + 16 >> 2] | 0) >>> 0) _abort(); else {
       $$pre$phi$i$iZ2D = $980;
       $F$0$i$i = $981;
      }
     }
     HEAP32[$$pre$phi$i$iZ2D >> 2] = $635;
     HEAP32[$F$0$i$i + 12 >> 2] = $635;
     HEAP32[$635 + 8 >> 2] = $F$0$i$i;
     HEAP32[$635 + 12 >> 2] = $974;
     break;
    }
    $987 = $966 >>> 8;
    if (!$987) $I1$0$i$i = 0; else if ($966 >>> 0 > 16777215) $I1$0$i$i = 31; else {
     $992 = ($987 + 1048320 | 0) >>> 16 & 8;
     $993 = $987 << $992;
     $996 = ($993 + 520192 | 0) >>> 16 & 4;
     $998 = $993 << $996;
     $1001 = ($998 + 245760 | 0) >>> 16 & 2;
     $1006 = 14 - ($996 | $992 | $1001) + ($998 << $1001 >>> 15) | 0;
     $I1$0$i$i = $966 >>> ($1006 + 7 | 0) & 1 | $1006 << 1;
    }
    $1012 = gb + 45080 + 304 + ($I1$0$i$i << 2) | 0;
    HEAP32[$635 + 28 >> 2] = $I1$0$i$i;
    HEAP32[$635 + 20 >> 2] = 0;
    HEAP32[$939 >> 2] = 0;
    $1015 = HEAP32[gb + 45080 + 4 >> 2] | 0;
    $1016 = 1 << $I1$0$i$i;
    if (!($1015 & $1016)) {
     HEAP32[gb + 45080 + 4 >> 2] = $1015 | $1016;
     HEAP32[$1012 >> 2] = $635;
     HEAP32[$635 + 24 >> 2] = $1012;
     HEAP32[$635 + 12 >> 2] = $635;
     HEAP32[$635 + 8 >> 2] = $635;
     break;
    }
    $K2$0$i$i = $966 << (($I1$0$i$i | 0) == 31 ? 0 : 25 - ($I1$0$i$i >>> 1) | 0);
    $T$0$i$i = HEAP32[$1012 >> 2] | 0;
    while (1) {
     if ((HEAP32[$T$0$i$i + 4 >> 2] & -8 | 0) == ($966 | 0)) {
      $T$0$i$i$lcssa = $T$0$i$i;
      label = 307;
      break;
     }
     $1034 = $T$0$i$i + 16 + ($K2$0$i$i >>> 31 << 2) | 0;
     $1036 = HEAP32[$1034 >> 2] | 0;
     if (!$1036) {
      $$lcssa141 = $1034;
      $T$0$i$i$lcssa140 = $T$0$i$i;
      label = 304;
      break;
     } else {
      $K2$0$i$i = $K2$0$i$i << 1;
      $T$0$i$i = $1036;
     }
    }
    if ((label | 0) == 304) if ($$lcssa141 >>> 0 < (HEAP32[gb + 45080 + 16 >> 2] | 0) >>> 0) _abort(); else {
     HEAP32[$$lcssa141 >> 2] = $635;
     HEAP32[$635 + 24 >> 2] = $T$0$i$i$lcssa140;
     HEAP32[$635 + 12 >> 2] = $635;
     HEAP32[$635 + 8 >> 2] = $635;
     break;
    } else if ((label | 0) == 307) {
     $1043 = $T$0$i$i$lcssa + 8 | 0;
     $1044 = HEAP32[$1043 >> 2] | 0;
     $1045 = HEAP32[gb + 45080 + 16 >> 2] | 0;
     if ($1044 >>> 0 >= $1045 >>> 0 & $T$0$i$i$lcssa >>> 0 >= $1045 >>> 0) {
      HEAP32[$1044 + 12 >> 2] = $635;
      HEAP32[$1043 >> 2] = $635;
      HEAP32[$635 + 8 >> 2] = $1044;
      HEAP32[$635 + 12 >> 2] = $T$0$i$i$lcssa;
      HEAP32[$635 + 24 >> 2] = 0;
      break;
     } else _abort();
    }
   }
  } while (0);
  $1053 = HEAP32[gb + 45080 + 12 >> 2] | 0;
  if ($1053 >>> 0 > $nb$0 >>> 0) {
   $1055 = $1053 - $nb$0 | 0;
   HEAP32[gb + 45080 + 12 >> 2] = $1055;
   $1056 = HEAP32[gb + 45080 + 24 >> 2] | 0;
   $1057 = $1056 + $nb$0 | 0;
   HEAP32[gb + 45080 + 24 >> 2] = $1057;
   HEAP32[$1057 + 4 >> 2] = $1055 | 1;
   HEAP32[$1056 + 4 >> 2] = $nb$0 | 3;
   $$0 = $1056 + 8 | 0;
   return $$0 | 0;
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12;
 $$0 = 0;
 return $$0 | 0;
}

function ___floatscan($f, $prec, $pok) {
 $f = $f | 0;
 $prec = $prec | 0;
 $pok = $pok | 0;
 var $$0 = 0.0, $$010$i = 0, $$012$i = 0, $$07$i = 0, $$0710$i = 0, $$0711$i = 0, $$1$i = 0.0, $$111$be$i = 0, $$111$ph$i = 0, $$2$i = 0, $$24$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3112$i = 0, $$in = 0, $$lcssa = 0, $$lcssa258 = 0, $$lcssa258$lcssa = 0, $$lcssa259 = 0, $$lcssa259$lcssa = 0, $$lcssa265 = 0, $$lcssa266 = 0, $$lcssa267 = 0, $$lcssa277 = 0, $$not$i = 0, $$pre$i = 0, $$pre$i17 = 0, $$pre$phi43$iZ2D = 0.0, $$sink$off0$i = 0, $0 = 0, $1 = 0, $115 = 0, $123 = 0, $125 = 0, $132 = 0, $139 = 0, $147 = 0, $15 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $159 = 0, $16 = 0, $160 = 0, $164 = 0, $169 = 0, $171 = 0, $183 = 0.0, $190 = 0, $192 = 0, $2 = 0, $201 = 0, $205 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $223 = 0, $224 = 0, $225 = 0, $235 = 0, $236 = 0, $249 = 0, $251 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $270 = 0, $272 = 0, $283 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $295 = 0, $297 = 0, $298 = 0, $299 = 0, $300 = 0, $310 = 0.0, $322 = 0.0, $330 = 0, $331 = 0, $338 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $358 = 0, $36 = 0, $360 = 0, $362 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $371 = 0, $376 = 0, $377 = 0, $381 = 0, $39 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $402 = 0, $403 = 0, $412 = 0, $413 = 0, $414 = 0, $42 = 0, $422 = 0, $427 = 0, $428 = 0, $430 = 0, $431 = 0, $444 = 0, $446 = 0, $456 = 0, $458 = 0, $470 = 0, $471 = 0, $472 = 0, $493 = 0, $505 = 0, $509 = 0, $512 = 0, $514 = 0, $515 = 0, $516 = 0, $519 = 0, $520 = 0, $532 = 0, $533 = 0, $534 = 0, $538 = 0, $540 = 0, $542 = 0, $543 = 0, $549 = 0, $551 = 0, $556 = 0, $559 = 0, $563 = 0, $566 = 0, $571 = 0, $575 = 0, $576 = 0, $578 = 0, $582 = 0, $584 = 0, $587 = 0, $588 = 0, $589 = 0, $590 = 0, $593 = 0, $594 = 0, $60 = 0, $603 = 0, $608 = 0, $609 = 0, $616 = 0, $618 = 0.0, $620 = 0, $624 = 0.0, $625 = 0.0, $628 = 0.0, $632 = 0, $635 = 0, $642 = 0.0, $660 = 0.0, $662 = 0, $668 = 0, $669 = 0, $67 = 0, $679 = 0, $69 = 0, $690 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $720 = 0, $721 = 0, $722 = 0, $77 = 0, $82 = 0, $9 = 0, $90 = 0, $99 = 0, $a$0$lcssa161$i = 0, $a$093$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph46$i = 0, $a$4$i = 0, $a$4$i$lcssa250 = 0, $a$4$i251 = 0, $a$4$ph$i = 0, $a$4$ph167$i = 0, $a$586$i = 0, $a$6$i = 0, $a$6$i$lcssa = 0, $a$6$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i25 = 0.0, $bits$0$ph = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$179 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$377 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$095$i = 0, $carry1$0$i = 0, $carry1$1$i = 0, $carry1$1$i$lcssa = 0, $carry1$1$i$lcssa$lcssa = 0, $carry4$089$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$2$i = 0, $e2$0$i19 = 0, $e2$0$ph$i = 0, $e2$1$i = 0, $e2$1$i248 = 0, $e2$1$ph$i = 0, $e2$1$ph166$i = 0, $e2$3$i = 0, $e2$4$i = 0, $emin$0$ph = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$3$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i$lcssa244 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa275 = 0, $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3108$i = 0, $gotdig$3108$i$lcssa = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i14 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1109$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$078 = 0, $i$1 = 0, $i$276 = 0, $i$3 = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0111$i = 0, $j$0111$i$lcssa = 0, $j$075$i = 0, $j$076$i = 0, $j$077$i = 0, $j$2$i = 0, $j$3102$i = 0, $k$0$lcssa$i = 0, $k$0110$i = 0, $k$0110$i$lcssa = 0, $k$071$i = 0, $k$072$i = 0, $k$073$i = 0, $k$2$i = 0, $k$3$i = 0, $k$494$i = 0, $k$5$i = 0, $k$5$in$i = 0, $k$687$i = 0, $lnz$0$lcssa$i = 0, $lnz$0107$i = 0, $lnz$0107$i$lcssa = 0, $lnz$065$i = 0, $lnz$066$i = 0, $lnz$067$i = 0, $lnz$2$i = 0, $or$cond21$i = 0, $or$cond25$i = 0, $or$cond9$i = 0, $rp$0$lcssa162$i = 0, $rp$092$i = 0, $rp$1$i18 = 0, $rp$1$i18$lcssa = 0, $rp$2$ph44$i = 0, $rp$4$ph$i = 0, $rp$4$ph42$i = 0, $rp$585$i = 0, $rp$6$i = 0, $rp$6$i$lcssa = 0, $rp$6$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$324$i = 0, $x$4$lcssa$i = 0, $x$419$i = 0, $x$5$i = 0, $x$i = 0, $y$0$i = 0.0, $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i24 = 0.0, $y$2$i = 0.0, $y$2$i26 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$320$i = 0.0, $y$4$i = 0.0, $z$0$i = 0, $z$1$i = 0, $z$1$ph45$i = 0, $z$10$1$i = 0, $z$10$i = 0, $z$2$i = 0, $z$3$i = 0, $z$3$i$lcssa = 0, $z$3$i$lcssa$lcssa = 0, $z$4$i = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $x$i = sp;
 switch ($prec | 0) {
 case 0:
  {
   $bits$0$ph = 24;
   $emin$0$ph = -149;
   label = 4;
   break;
  }
 case 1:
  {
   $bits$0$ph = 53;
   $emin$0$ph = -1074;
   label = 4;
   break;
  }
 case 2:
  {
   $bits$0$ph = 53;
   $emin$0$ph = -1074;
   label = 4;
   break;
  }
 default:
  $$0 = 0.0;
 }
 L4 : do if ((label | 0) == 4) {
  $0 = $f + 4 | 0;
  $1 = $f + 100 | 0;
  do {
   $2 = HEAP32[$0 >> 2] | 0;
   if ($2 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
    HEAP32[$0 >> 2] = $2 + 1;
    $9 = HEAPU8[$2 >> 0] | 0;
   } else $9 = ___shgetc($f) | 0;
  } while ((_isspace($9) | 0) != 0);
  $$lcssa277 = $9;
  L13 : do switch ($$lcssa277 | 0) {
  case 43:
  case 45:
   {
    $15 = 1 - ((($$lcssa277 | 0) == 45 & 1) << 1) | 0;
    $16 = HEAP32[$0 >> 2] | 0;
    if ($16 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $16 + 1;
     $c$0 = HEAPU8[$16 >> 0] | 0;
     $sign$0 = $15;
     break L13;
    } else {
     $c$0 = ___shgetc($f) | 0;
     $sign$0 = $15;
     break L13;
    }
    break;
   }
  default:
   {
    $c$0 = $$lcssa277;
    $sign$0 = 1;
   }
  } while (0);
  $c$179 = $c$0;
  $i$078 = 0;
  while (1) {
   if (($c$179 | 32 | 0) != (HEAP8[gb + 44858 + $i$078 >> 0] | 0)) {
    $c$1$lcssa = $c$179;
    $i$0$lcssa = $i$078;
    break;
   }
   do if ($i$078 >>> 0 < 7) {
    $29 = HEAP32[$0 >> 2] | 0;
    if ($29 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $29 + 1;
     $c$2 = HEAPU8[$29 >> 0] | 0;
     break;
    } else {
     $c$2 = ___shgetc($f) | 0;
     break;
    }
   } else $c$2 = $c$179; while (0);
   $36 = $i$078 + 1 | 0;
   if ($36 >>> 0 < 8) {
    $c$179 = $c$2;
    $i$078 = $36;
   } else {
    $c$1$lcssa = $c$2;
    $i$0$lcssa = $36;
    break;
   }
  }
  L29 : do switch ($i$0$lcssa | 0) {
  case 8:
   break;
  case 3:
   {
    label = 23;
    break;
   }
  default:
   {
    $39 = ($pok | 0) != 0;
    if ($39 & $i$0$lcssa >>> 0 > 3) if (($i$0$lcssa | 0) == 8) break L29; else {
     label = 23;
     break L29;
    }
    L34 : do if (!$i$0$lcssa) {
     $c$377 = $c$1$lcssa;
     $i$276 = 0;
     while (1) {
      if (($c$377 | 32 | 0) != (HEAP8[gb + 44867 + $i$276 >> 0] | 0)) {
       $c$5 = $c$377;
       $i$3 = $i$276;
       break L34;
      }
      do if ($i$276 >>> 0 < 2) {
       $60 = HEAP32[$0 >> 2] | 0;
       if ($60 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
        HEAP32[$0 >> 2] = $60 + 1;
        $c$4 = HEAPU8[$60 >> 0] | 0;
        break;
       } else {
        $c$4 = ___shgetc($f) | 0;
        break;
       }
      } else $c$4 = $c$377; while (0);
      $67 = $i$276 + 1 | 0;
      if ($67 >>> 0 < 3) {
       $c$377 = $c$4;
       $i$276 = $67;
      } else {
       $c$5 = $c$4;
       $i$3 = $67;
       break;
      }
     }
    } else {
     $c$5 = $c$1$lcssa;
     $i$3 = $i$0$lcssa;
    } while (0);
    switch ($i$3 | 0) {
    case 3:
     {
      $69 = HEAP32[$0 >> 2] | 0;
      if ($69 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
       HEAP32[$0 >> 2] = $69 + 1;
       $77 = HEAPU8[$69 >> 0] | 0;
      } else $77 = ___shgetc($f) | 0;
      if (($77 | 0) == 40) $i$4 = 1; else {
       if (!(HEAP32[$1 >> 2] | 0)) {
        $$0 = nan;
        break L4;
       }
       HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
       $$0 = nan;
       break L4;
      }
      while (1) {
       $82 = HEAP32[$0 >> 2] | 0;
       if ($82 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
        HEAP32[$0 >> 2] = $82 + 1;
        $90 = HEAPU8[$82 >> 0] | 0;
       } else $90 = ___shgetc($f) | 0;
       if (!(($90 + -48 | 0) >>> 0 < 10 | ($90 + -65 | 0) >>> 0 < 26)) if (!(($90 | 0) == 95 | ($90 + -97 | 0) >>> 0 < 26)) {
        $$lcssa = $90;
        $i$4$lcssa = $i$4;
        break;
       }
       $i$4 = $i$4 + 1 | 0;
      }
      if (($$lcssa | 0) == 41) {
       $$0 = nan;
       break L4;
      }
      $99 = (HEAP32[$1 >> 2] | 0) == 0;
      if (!$99) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
      if (!$39) {
       HEAP32[(___errno_location() | 0) >> 2] = 22;
       ___shlim($f, 0);
       $$0 = 0.0;
       break L4;
      }
      if (!$i$4$lcssa) {
       $$0 = nan;
       break L4;
      } else $$in = $i$4$lcssa;
      while (1) {
       $$in = $$in + -1 | 0;
       if (!$99) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
       if (!$$in) {
        $$0 = nan;
        break L4;
       }
      }
      break;
     }
    case 0:
     {
      do if (($c$5 | 0) == 48) {
       $115 = HEAP32[$0 >> 2] | 0;
       if ($115 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
        HEAP32[$0 >> 2] = $115 + 1;
        $123 = HEAPU8[$115 >> 0] | 0;
       } else $123 = ___shgetc($f) | 0;
       if (($123 | 32 | 0) != 120) {
        if (!(HEAP32[$1 >> 2] | 0)) {
         $c$6 = 48;
         break;
        }
        HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
        $c$6 = 48;
        break;
       }
       $125 = HEAP32[$0 >> 2] | 0;
       if ($125 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
        HEAP32[$0 >> 2] = $125 + 1;
        $c$0$i = HEAPU8[$125 >> 0] | 0;
        $gotdig$0$i = 0;
       } else {
        $c$0$i = ___shgetc($f) | 0;
        $gotdig$0$i = 0;
       }
       L94 : while (1) {
        switch ($c$0$i | 0) {
        case 46:
         {
          $gotdig$0$i$lcssa244 = $gotdig$0$i;
          label = 74;
          break L94;
          break;
         }
        case 48:
         break;
        default:
         {
          $169 = 0;
          $171 = 0;
          $693 = 0;
          $694 = 0;
          $c$2$i = $c$0$i;
          $gotdig$2$i = $gotdig$0$i;
          $gotrad$0$i = 0;
          $gottail$0$i = 0;
          $scale$0$i = 1.0;
          $x$0$i = 0;
          $y$0$i = 0.0;
          break L94;
         }
        }
        $132 = HEAP32[$0 >> 2] | 0;
        if ($132 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
         HEAP32[$0 >> 2] = $132 + 1;
         $c$0$i = HEAPU8[$132 >> 0] | 0;
         $gotdig$0$i = 1;
         continue;
        } else {
         $c$0$i = ___shgetc($f) | 0;
         $gotdig$0$i = 1;
         continue;
        }
       }
       if ((label | 0) == 74) {
        $139 = HEAP32[$0 >> 2] | 0;
        if ($139 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
         HEAP32[$0 >> 2] = $139 + 1;
         $c$1$ph$i = HEAPU8[$139 >> 0] | 0;
        } else $c$1$ph$i = ___shgetc($f) | 0;
        if (($c$1$ph$i | 0) == 48) {
         $154 = 0;
         $155 = 0;
         while (1) {
          $147 = HEAP32[$0 >> 2] | 0;
          if ($147 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
           HEAP32[$0 >> 2] = $147 + 1;
           $159 = HEAPU8[$147 >> 0] | 0;
          } else $159 = ___shgetc($f) | 0;
          $156 = _i64Add($154 | 0, $155 | 0, -1, -1) | 0;
          $157 = getTempRet0() | 0;
          if (($159 | 0) == 48) {
           $154 = $156;
           $155 = $157;
          } else {
           $169 = 0;
           $171 = 0;
           $693 = $156;
           $694 = $157;
           $c$2$i = $159;
           $gotdig$2$i = 1;
           $gotrad$0$i = 1;
           $gottail$0$i = 0;
           $scale$0$i = 1.0;
           $x$0$i = 0;
           $y$0$i = 0.0;
           break;
          }
         }
        } else {
         $169 = 0;
         $171 = 0;
         $693 = 0;
         $694 = 0;
         $c$2$i = $c$1$ph$i;
         $gotdig$2$i = $gotdig$0$i$lcssa244;
         $gotrad$0$i = 1;
         $gottail$0$i = 0;
         $scale$0$i = 1.0;
         $x$0$i = 0;
         $y$0$i = 0.0;
        }
       }
       while (1) {
        $160 = $c$2$i + -48 | 0;
        $$pre$i = $c$2$i | 32;
        if ($160 >>> 0 < 10) label = 86; else {
         $164 = ($c$2$i | 0) == 46;
         if (!($164 | ($$pre$i + -97 | 0) >>> 0 < 6)) {
          $213 = $171;
          $214 = $693;
          $216 = $169;
          $217 = $694;
          $c$2$lcssa$i = $c$2$i;
          $gotdig$2$i$lcssa = $gotdig$2$i;
          $gotrad$0$i$lcssa = $gotrad$0$i;
          $x$0$i$lcssa = $x$0$i;
          $y$0$i$lcssa = $y$0$i;
          break;
         }
         if ($164) if (!$gotrad$0$i) {
          $695 = $171;
          $696 = $169;
          $697 = $171;
          $698 = $169;
          $gotdig$3$i = $gotdig$2$i;
          $gotrad$1$i = 1;
          $gottail$2$i = $gottail$0$i;
          $scale$2$i = $scale$0$i;
          $x$2$i = $x$0$i;
          $y$2$i = $y$0$i;
         } else {
          $213 = $171;
          $214 = $693;
          $216 = $169;
          $217 = $694;
          $c$2$lcssa$i = 46;
          $gotdig$2$i$lcssa = $gotdig$2$i;
          $gotrad$0$i$lcssa = $gotrad$0$i;
          $x$0$i$lcssa = $x$0$i;
          $y$0$i$lcssa = $y$0$i;
          break;
         } else label = 86;
        }
        if ((label | 0) == 86) {
         label = 0;
         $d$0$i = ($c$2$i | 0) > 57 ? $$pre$i + -87 | 0 : $160;
         do if (($169 | 0) < 0 | ($169 | 0) == 0 & $171 >>> 0 < 8) {
          $gottail$1$i = $gottail$0$i;
          $scale$1$i = $scale$0$i;
          $x$1$i = $d$0$i + ($x$0$i << 4) | 0;
          $y$1$i = $y$0$i;
         } else {
          if (($169 | 0) < 0 | ($169 | 0) == 0 & $171 >>> 0 < 14) {
           $183 = $scale$0$i * .0625;
           $gottail$1$i = $gottail$0$i;
           $scale$1$i = $183;
           $x$1$i = $x$0$i;
           $y$1$i = $y$0$i + $183 * +($d$0$i | 0);
           break;
          }
          if (($gottail$0$i | 0) != 0 | ($d$0$i | 0) == 0) {
           $gottail$1$i = $gottail$0$i;
           $scale$1$i = $scale$0$i;
           $x$1$i = $x$0$i;
           $y$1$i = $y$0$i;
          } else {
           $gottail$1$i = 1;
           $scale$1$i = $scale$0$i;
           $x$1$i = $x$0$i;
           $y$1$i = $y$0$i + $scale$0$i * .5;
          }
         } while (0);
         $190 = _i64Add($171 | 0, $169 | 0, 1, 0) | 0;
         $695 = $693;
         $696 = $694;
         $697 = $190;
         $698 = getTempRet0() | 0;
         $gotdig$3$i = 1;
         $gotrad$1$i = $gotrad$0$i;
         $gottail$2$i = $gottail$1$i;
         $scale$2$i = $scale$1$i;
         $x$2$i = $x$1$i;
         $y$2$i = $y$1$i;
        }
        $192 = HEAP32[$0 >> 2] | 0;
        if ($192 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
         HEAP32[$0 >> 2] = $192 + 1;
         $169 = $698;
         $171 = $697;
         $693 = $695;
         $694 = $696;
         $c$2$i = HEAPU8[$192 >> 0] | 0;
         $gotdig$2$i = $gotdig$3$i;
         $gotrad$0$i = $gotrad$1$i;
         $gottail$0$i = $gottail$2$i;
         $scale$0$i = $scale$2$i;
         $x$0$i = $x$2$i;
         $y$0$i = $y$2$i;
         continue;
        } else {
         $169 = $698;
         $171 = $697;
         $693 = $695;
         $694 = $696;
         $c$2$i = ___shgetc($f) | 0;
         $gotdig$2$i = $gotdig$3$i;
         $gotrad$0$i = $gotrad$1$i;
         $gottail$0$i = $gottail$2$i;
         $scale$0$i = $scale$2$i;
         $x$0$i = $x$2$i;
         $y$0$i = $y$2$i;
         continue;
        }
       }
       if (!$gotdig$2$i$lcssa) {
        $201 = (HEAP32[$1 >> 2] | 0) == 0;
        if (!$201) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
        if (!$pok) ___shlim($f, 0); else if (!$201) {
         $205 = HEAP32[$0 >> 2] | 0;
         HEAP32[$0 >> 2] = $205 + -1;
         if ($gotrad$0$i$lcssa | 0) HEAP32[$0 >> 2] = $205 + -2;
        }
        $$0 = +($sign$0 | 0) * 0.0;
        break L4;
       }
       $211 = ($gotrad$0$i$lcssa | 0) == 0;
       $212 = $211 ? $213 : $214;
       $215 = $211 ? $216 : $217;
       if (($216 | 0) < 0 | ($216 | 0) == 0 & $213 >>> 0 < 8) {
        $224 = $213;
        $225 = $216;
        $x$324$i = $x$0$i$lcssa;
        while (1) {
         $223 = $x$324$i << 4;
         $224 = _i64Add($224 | 0, $225 | 0, 1, 0) | 0;
         $225 = getTempRet0() | 0;
         if (!(($225 | 0) < 0 | ($225 | 0) == 0 & $224 >>> 0 < 8)) {
          $x$3$lcssa$i = $223;
          break;
         } else $x$324$i = $223;
        }
       } else $x$3$lcssa$i = $x$0$i$lcssa;
       if (($c$2$lcssa$i | 32 | 0) == 112) {
        $235 = _scanexp($f, $pok) | 0;
        $236 = getTempRet0() | 0;
        if (($235 | 0) == 0 & ($236 | 0) == -2147483648) {
         if (!$pok) {
          ___shlim($f, 0);
          $$0 = 0.0;
          break L4;
         }
         if (!(HEAP32[$1 >> 2] | 0)) {
          $253 = 0;
          $254 = 0;
         } else {
          HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
          $253 = 0;
          $254 = 0;
         }
        } else {
         $253 = $235;
         $254 = $236;
        }
       } else if (!(HEAP32[$1 >> 2] | 0)) {
        $253 = 0;
        $254 = 0;
       } else {
        HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
        $253 = 0;
        $254 = 0;
       }
       $249 = _bitshift64Shl($212 | 0, $215 | 0, 2) | 0;
       $251 = _i64Add($249 | 0, getTempRet0() | 0, -32, -1) | 0;
       $255 = _i64Add($251 | 0, getTempRet0() | 0, $253 | 0, $254 | 0) | 0;
       $256 = getTempRet0() | 0;
       if (!$x$3$lcssa$i) {
        $$0 = +($sign$0 | 0) * 0.0;
        break L4;
       }
       if (($256 | 0) > 0 | ($256 | 0) == 0 & $255 >>> 0 > (0 - $emin$0$ph | 0) >>> 0) {
        HEAP32[(___errno_location() | 0) >> 2] = 34;
        $$0 = +($sign$0 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
        break L4;
       }
       $270 = $emin$0$ph + -106 | 0;
       $272 = (($270 | 0) < 0) << 31 >> 31;
       if (($256 | 0) < ($272 | 0) | ($256 | 0) == ($272 | 0) & $255 >>> 0 < $270 >>> 0) {
        HEAP32[(___errno_location() | 0) >> 2] = 34;
        $$0 = +($sign$0 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
        break L4;
       }
       if (($x$3$lcssa$i | 0) > -1) {
        $288 = $255;
        $289 = $256;
        $x$419$i = $x$3$lcssa$i;
        $y$320$i = $y$0$i$lcssa;
        while (1) {
         $283 = !($y$320$i >= .5);
         $287 = $283 & 1 | $x$419$i << 1;
         $x$5$i = $287 ^ 1;
         $y$4$i = $y$320$i + ($283 ? $y$320$i : $y$320$i + -1.0);
         $290 = _i64Add($288 | 0, $289 | 0, -1, -1) | 0;
         $291 = getTempRet0() | 0;
         if (($287 | 0) > -1) {
          $288 = $290;
          $289 = $291;
          $x$419$i = $x$5$i;
          $y$320$i = $y$4$i;
         } else {
          $297 = $290;
          $298 = $291;
          $x$4$lcssa$i = $x$5$i;
          $y$3$lcssa$i = $y$4$i;
          break;
         }
        }
       } else {
        $297 = $255;
        $298 = $256;
        $x$4$lcssa$i = $x$3$lcssa$i;
        $y$3$lcssa$i = $y$0$i$lcssa;
       }
       $295 = _i64Subtract(32, 0, $emin$0$ph | 0, (($emin$0$ph | 0) < 0) << 31 >> 31 | 0) | 0;
       $299 = _i64Add($297 | 0, $298 | 0, $295 | 0, getTempRet0() | 0) | 0;
       $300 = getTempRet0() | 0;
       if (0 > ($300 | 0) | 0 == ($300 | 0) & $bits$0$ph >>> 0 > $299 >>> 0) if (($299 | 0) < 0) {
        $$0710$i = 0;
        label = 127;
       } else {
        $$07$i = $299;
        label = 125;
       } else {
        $$07$i = $bits$0$ph;
        label = 125;
       }
       if ((label | 0) == 125) if (($$07$i | 0) < 53) {
        $$0710$i = $$07$i;
        label = 127;
       } else {
        $$0711$i = $$07$i;
        $$pre$phi43$iZ2D = +($sign$0 | 0);
        $bias$0$i = 0.0;
       }
       if ((label | 0) == 127) {
        $310 = +($sign$0 | 0);
        $$0711$i = $$0710$i;
        $$pre$phi43$iZ2D = $310;
        $bias$0$i = +_copysignl(+_scalbn(1.0, 84 - $$0710$i | 0), $310);
       }
       $or$cond9$i = ($x$4$lcssa$i & 1 | 0) == 0 & ($y$3$lcssa$i != 0.0 & ($$0711$i | 0) < 32);
       $322 = $$pre$phi43$iZ2D * ($or$cond9$i ? 0.0 : $y$3$lcssa$i) + ($bias$0$i + $$pre$phi43$iZ2D * +((($or$cond9$i & 1) + $x$4$lcssa$i | 0) >>> 0)) - $bias$0$i;
       if (!($322 != 0.0)) HEAP32[(___errno_location() | 0) >> 2] = 34;
       $$0 = +_scalbnl($322, $297);
       break L4;
      } else $c$6 = $c$5; while (0);
      $sum$i = $emin$0$ph + $bits$0$ph | 0;
      $330 = 0 - $sum$i | 0;
      $$010$i = $c$6;
      $gotdig$0$i12 = 0;
      L184 : while (1) {
       switch ($$010$i | 0) {
       case 46:
        {
         $gotdig$0$i12$lcssa275 = $gotdig$0$i12;
         label = 138;
         break L184;
         break;
        }
       case 48:
        break;
       default:
        {
         $$2$i = $$010$i;
         $699 = 0;
         $700 = 0;
         $gotdig$2$i13 = $gotdig$0$i12;
         $gotrad$0$i14 = 0;
         break L184;
        }
       }
       $331 = HEAP32[$0 >> 2] | 0;
       if ($331 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
        HEAP32[$0 >> 2] = $331 + 1;
        $$010$i = HEAPU8[$331 >> 0] | 0;
        $gotdig$0$i12 = 1;
        continue;
       } else {
        $$010$i = ___shgetc($f) | 0;
        $gotdig$0$i12 = 1;
        continue;
       }
      }
      if ((label | 0) == 138) {
       $338 = HEAP32[$0 >> 2] | 0;
       if ($338 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
        HEAP32[$0 >> 2] = $338 + 1;
        $$111$ph$i = HEAPU8[$338 >> 0] | 0;
       } else $$111$ph$i = ___shgetc($f) | 0;
       if (($$111$ph$i | 0) == 48) {
        $346 = 0;
        $347 = 0;
        while (1) {
         $348 = _i64Add($346 | 0, $347 | 0, -1, -1) | 0;
         $349 = getTempRet0() | 0;
         $350 = HEAP32[$0 >> 2] | 0;
         if ($350 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
          HEAP32[$0 >> 2] = $350 + 1;
          $$111$be$i = HEAPU8[$350 >> 0] | 0;
         } else $$111$be$i = ___shgetc($f) | 0;
         if (($$111$be$i | 0) == 48) {
          $346 = $348;
          $347 = $349;
         } else {
          $$2$i = $$111$be$i;
          $699 = $348;
          $700 = $349;
          $gotdig$2$i13 = 1;
          $gotrad$0$i14 = 1;
          break;
         }
        }
       } else {
        $$2$i = $$111$ph$i;
        $699 = 0;
        $700 = 0;
        $gotdig$2$i13 = $gotdig$0$i12$lcssa275;
        $gotrad$0$i14 = 1;
       }
      }
      HEAP32[$x$i >> 2] = 0;
      $358 = $$2$i + -48 | 0;
      $360 = ($$2$i | 0) == 46;
      L203 : do if ($360 | $358 >>> 0 < 10) {
       $362 = $x$i + 496 | 0;
       $$3112$i = $$2$i;
       $365 = 0;
       $366 = 0;
       $701 = $360;
       $702 = $358;
       $703 = $699;
       $704 = $700;
       $gotdig$3108$i = $gotdig$2$i13;
       $gotrad$1109$i = $gotrad$0$i14;
       $j$0111$i = 0;
       $k$0110$i = 0;
       $lnz$0107$i = 0;
       L205 : while (1) {
        do if ($701) if (!$gotrad$1109$i) {
         $705 = $365;
         $706 = $366;
         $707 = $365;
         $708 = $366;
         $gotdig$4$i = $gotdig$3108$i;
         $gotrad$2$i = 1;
         $j$2$i = $j$0111$i;
         $k$2$i = $k$0110$i;
         $lnz$2$i = $lnz$0107$i;
        } else {
         $709 = $703;
         $710 = $704;
         $711 = $365;
         $712 = $366;
         $gotdig$3108$i$lcssa = $gotdig$3108$i;
         $j$0111$i$lcssa = $j$0111$i;
         $k$0110$i$lcssa = $k$0110$i;
         $lnz$0107$i$lcssa = $lnz$0107$i;
         break L205;
        } else {
         $367 = _i64Add($365 | 0, $366 | 0, 1, 0) | 0;
         $368 = getTempRet0() | 0;
         $369 = ($$3112$i | 0) != 48;
         if (($k$0110$i | 0) >= 125) {
          if (!$369) {
           $705 = $703;
           $706 = $704;
           $707 = $367;
           $708 = $368;
           $gotdig$4$i = $gotdig$3108$i;
           $gotrad$2$i = $gotrad$1109$i;
           $j$2$i = $j$0111$i;
           $k$2$i = $k$0110$i;
           $lnz$2$i = $lnz$0107$i;
           break;
          }
          HEAP32[$362 >> 2] = HEAP32[$362 >> 2] | 1;
          $705 = $703;
          $706 = $704;
          $707 = $367;
          $708 = $368;
          $gotdig$4$i = $gotdig$3108$i;
          $gotrad$2$i = $gotrad$1109$i;
          $j$2$i = $j$0111$i;
          $k$2$i = $k$0110$i;
          $lnz$2$i = $lnz$0107$i;
          break;
         }
         $371 = $x$i + ($k$0110$i << 2) | 0;
         if (!$j$0111$i) $storemerge$i = $702; else $storemerge$i = $$3112$i + -48 + ((HEAP32[$371 >> 2] | 0) * 10 | 0) | 0;
         HEAP32[$371 >> 2] = $storemerge$i;
         $376 = $j$0111$i + 1 | 0;
         $377 = ($376 | 0) == 9;
         $705 = $703;
         $706 = $704;
         $707 = $367;
         $708 = $368;
         $gotdig$4$i = 1;
         $gotrad$2$i = $gotrad$1109$i;
         $j$2$i = $377 ? 0 : $376;
         $k$2$i = ($377 & 1) + $k$0110$i | 0;
         $lnz$2$i = $369 ? $367 : $lnz$0107$i;
        } while (0);
        $381 = HEAP32[$0 >> 2] | 0;
        if ($381 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
         HEAP32[$0 >> 2] = $381 + 1;
         $$3$be$i = HEAPU8[$381 >> 0] | 0;
        } else $$3$be$i = ___shgetc($f) | 0;
        $702 = $$3$be$i + -48 | 0;
        $701 = ($$3$be$i | 0) == 46;
        if (!($701 | $702 >>> 0 < 10)) {
         $$3$lcssa$i = $$3$be$i;
         $394 = $707;
         $395 = $705;
         $397 = $708;
         $398 = $706;
         $gotdig$3$lcssa$i = $gotdig$4$i;
         $gotrad$1$lcssa$i = $gotrad$2$i;
         $j$0$lcssa$i = $j$2$i;
         $k$0$lcssa$i = $k$2$i;
         $lnz$0$lcssa$i = $lnz$2$i;
         label = 161;
         break L203;
        } else {
         $$3112$i = $$3$be$i;
         $365 = $707;
         $366 = $708;
         $703 = $705;
         $704 = $706;
         $gotdig$3108$i = $gotdig$4$i;
         $gotrad$1109$i = $gotrad$2$i;
         $j$0111$i = $j$2$i;
         $k$0110$i = $k$2$i;
         $lnz$0107$i = $lnz$2$i;
        }
       }
       $713 = $711;
       $714 = $712;
       $715 = $709;
       $716 = $710;
       $717 = ($gotdig$3108$i$lcssa | 0) != 0;
       $j$077$i = $j$0111$i$lcssa;
       $k$073$i = $k$0110$i$lcssa;
       $lnz$067$i = $lnz$0107$i$lcssa;
       label = 169;
      } else {
       $$3$lcssa$i = $$2$i;
       $394 = 0;
       $395 = $699;
       $397 = 0;
       $398 = $700;
       $gotdig$3$lcssa$i = $gotdig$2$i13;
       $gotrad$1$lcssa$i = $gotrad$0$i14;
       $j$0$lcssa$i = 0;
       $k$0$lcssa$i = 0;
       $lnz$0$lcssa$i = 0;
       label = 161;
      } while (0);
      do if ((label | 0) == 161) {
       $392 = ($gotrad$1$lcssa$i | 0) == 0;
       $393 = $392 ? $394 : $395;
       $396 = $392 ? $397 : $398;
       $399 = ($gotdig$3$lcssa$i | 0) != 0;
       if (!(($$3$lcssa$i | 32 | 0) == 101 & $399)) if (($$3$lcssa$i | 0) > -1) {
        $713 = $394;
        $714 = $397;
        $715 = $393;
        $716 = $396;
        $717 = $399;
        $j$077$i = $j$0$lcssa$i;
        $k$073$i = $k$0$lcssa$i;
        $lnz$067$i = $lnz$0$lcssa$i;
        label = 169;
        break;
       } else {
        $718 = $394;
        $719 = $397;
        $720 = $399;
        $721 = $393;
        $722 = $396;
        $j$076$i = $j$0$lcssa$i;
        $k$072$i = $k$0$lcssa$i;
        $lnz$066$i = $lnz$0$lcssa$i;
        label = 171;
        break;
       }
       $402 = _scanexp($f, $pok) | 0;
       $403 = getTempRet0() | 0;
       if (($402 | 0) == 0 & ($403 | 0) == -2147483648) {
        if (!$pok) {
         ___shlim($f, 0);
         $$1$i = 0.0;
         break;
        }
        if (!(HEAP32[$1 >> 2] | 0)) {
         $412 = 0;
         $413 = 0;
        } else {
         HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
         $412 = 0;
         $413 = 0;
        }
       } else {
        $412 = $402;
        $413 = $403;
       }
       $414 = _i64Add($412 | 0, $413 | 0, $393 | 0, $396 | 0) | 0;
       $427 = $414;
       $428 = $394;
       $430 = getTempRet0() | 0;
       $431 = $397;
       $j$075$i = $j$0$lcssa$i;
       $k$071$i = $k$0$lcssa$i;
       $lnz$065$i = $lnz$0$lcssa$i;
       label = 173;
      } while (0);
      if ((label | 0) == 169) if (!(HEAP32[$1 >> 2] | 0)) {
       $718 = $713;
       $719 = $714;
       $720 = $717;
       $721 = $715;
       $722 = $716;
       $j$076$i = $j$077$i;
       $k$072$i = $k$073$i;
       $lnz$066$i = $lnz$067$i;
       label = 171;
      } else {
       HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
       if ($717) {
        $427 = $715;
        $428 = $713;
        $430 = $716;
        $431 = $714;
        $j$075$i = $j$077$i;
        $k$071$i = $k$073$i;
        $lnz$065$i = $lnz$067$i;
        label = 173;
       } else label = 172;
      }
      if ((label | 0) == 171) if ($720) {
       $427 = $721;
       $428 = $718;
       $430 = $722;
       $431 = $719;
       $j$075$i = $j$076$i;
       $k$071$i = $k$072$i;
       $lnz$065$i = $lnz$066$i;
       label = 173;
      } else label = 172;
      do if ((label | 0) == 172) {
       HEAP32[(___errno_location() | 0) >> 2] = 22;
       ___shlim($f, 0);
       $$1$i = 0.0;
      } else if ((label | 0) == 173) {
       $422 = HEAP32[$x$i >> 2] | 0;
       if (!$422) {
        $$1$i = +($sign$0 | 0) * 0.0;
        break;
       }
       if ((($431 | 0) < 0 | ($431 | 0) == 0 & $428 >>> 0 < 10) & (($427 | 0) == ($428 | 0) & ($430 | 0) == ($431 | 0))) if ($bits$0$ph >>> 0 > 30 | ($422 >>> $bits$0$ph | 0) == 0) {
        $$1$i = +($sign$0 | 0) * +($422 >>> 0);
        break;
       }
       $444 = ($emin$0$ph | 0) / -2 | 0;
       $446 = (($444 | 0) < 0) << 31 >> 31;
       if (($430 | 0) > ($446 | 0) | ($430 | 0) == ($446 | 0) & $427 >>> 0 > $444 >>> 0) {
        HEAP32[(___errno_location() | 0) >> 2] = 34;
        $$1$i = +($sign$0 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
        break;
       }
       $456 = $emin$0$ph + -106 | 0;
       $458 = (($456 | 0) < 0) << 31 >> 31;
       if (($430 | 0) < ($458 | 0) | ($430 | 0) == ($458 | 0) & $427 >>> 0 < $456 >>> 0) {
        HEAP32[(___errno_location() | 0) >> 2] = 34;
        $$1$i = +($sign$0 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
        break;
       }
       if (!$j$075$i) $k$3$i = $k$071$i; else {
        if (($j$075$i | 0) < 9) {
         $470 = $x$i + ($k$071$i << 2) | 0;
         $472 = HEAP32[$470 >> 2] | 0;
         $j$3102$i = $j$075$i;
         while (1) {
          $471 = $472 * 10 | 0;
          $j$3102$i = $j$3102$i + 1 | 0;
          if (($j$3102$i | 0) == 9) {
           $$lcssa267 = $471;
           break;
          } else $472 = $471;
         }
         HEAP32[$470 >> 2] = $$lcssa267;
        }
        $k$3$i = $k$071$i + 1 | 0;
       }
       if (($lnz$065$i | 0) < 9) if (($lnz$065$i | 0) <= ($427 | 0) & ($427 | 0) < 18) {
        if (($427 | 0) == 9) {
         $$1$i = +($sign$0 | 0) * +((HEAP32[$x$i >> 2] | 0) >>> 0);
         break;
        }
        if (($427 | 0) < 9) {
         $$1$i = +($sign$0 | 0) * +((HEAP32[$x$i >> 2] | 0) >>> 0) / +(HEAP32[gb + 9684 + (8 - $427 << 2) >> 2] | 0);
         break;
        }
        $493 = $bits$0$ph + 27 + (Math_imul($427, -3) | 0) | 0;
        $$pre$i17 = HEAP32[$x$i >> 2] | 0;
        if (($493 | 0) > 30 | ($$pre$i17 >>> $493 | 0) == 0) {
         $$1$i = +($sign$0 | 0) * +($$pre$i17 >>> 0) * +(HEAP32[gb + 9684 + ($427 + -10 << 2) >> 2] | 0);
         break;
        }
       }
       $505 = ($427 | 0) % 9 | 0;
       if (!$505) {
        $a$2$ph46$i = 0;
        $e2$0$ph$i = 0;
        $rp$2$ph44$i = $427;
        $z$1$ph45$i = $k$3$i;
       } else {
        $509 = ($427 | 0) > -1 ? $505 : $505 + 9 | 0;
        $512 = HEAP32[gb + 9684 + (8 - $509 << 2) >> 2] | 0;
        if (!$k$3$i) {
         $a$0$lcssa161$i = 0;
         $rp$0$lcssa162$i = $427;
         $z$0$i = 0;
        } else {
         $514 = 1e9 / ($512 | 0) | 0;
         $a$093$i = 0;
         $carry$095$i = 0;
         $k$494$i = 0;
         $rp$092$i = $427;
         while (1) {
          $515 = $x$i + ($k$494$i << 2) | 0;
          $516 = HEAP32[$515 >> 2] | 0;
          $519 = (($516 >>> 0) / ($512 >>> 0) | 0) + $carry$095$i | 0;
          HEAP32[$515 >> 2] = $519;
          $520 = Math_imul(($516 >>> 0) % ($512 >>> 0) | 0, $514) | 0;
          $or$cond21$i = ($k$494$i | 0) == ($a$093$i | 0) & ($519 | 0) == 0;
          $k$494$i = $k$494$i + 1 | 0;
          $rp$1$i18 = $or$cond21$i ? $rp$092$i + -9 | 0 : $rp$092$i;
          $a$1$i = $or$cond21$i ? $k$494$i & 127 : $a$093$i;
          if (($k$494$i | 0) == ($k$3$i | 0)) {
           $$lcssa266 = $520;
           $a$1$i$lcssa = $a$1$i;
           $rp$1$i18$lcssa = $rp$1$i18;
           break;
          } else {
           $a$093$i = $a$1$i;
           $carry$095$i = $520;
           $rp$092$i = $rp$1$i18;
          }
         }
         if (!$$lcssa266) {
          $a$0$lcssa161$i = $a$1$i$lcssa;
          $rp$0$lcssa162$i = $rp$1$i18$lcssa;
          $z$0$i = $k$3$i;
         } else {
          HEAP32[$x$i + ($k$3$i << 2) >> 2] = $$lcssa266;
          $a$0$lcssa161$i = $a$1$i$lcssa;
          $rp$0$lcssa162$i = $rp$1$i18$lcssa;
          $z$0$i = $k$3$i + 1 | 0;
         }
        }
        $a$2$ph46$i = $a$0$lcssa161$i;
        $e2$0$ph$i = 0;
        $rp$2$ph44$i = 9 - $509 + $rp$0$lcssa162$i | 0;
        $z$1$ph45$i = $z$0$i;
       }
       L284 : while (1) {
        $532 = ($rp$2$ph44$i | 0) < 18;
        $533 = ($rp$2$ph44$i | 0) == 18;
        $534 = $x$i + ($a$2$ph46$i << 2) | 0;
        $e2$0$i19 = $e2$0$ph$i;
        $z$1$i = $z$1$ph45$i;
        while (1) {
         if (!$532) {
          if (!$533) {
           $a$4$ph$i = $a$2$ph46$i;
           $e2$1$ph$i = $e2$0$i19;
           $rp$4$ph42$i = $rp$2$ph44$i;
           $z$6$ph$i = $z$1$i;
           break L284;
          }
          if ((HEAP32[$534 >> 2] | 0) >>> 0 >= 9007199) {
           $a$4$ph$i = $a$2$ph46$i;
           $e2$1$ph$i = $e2$0$i19;
           $rp$4$ph42$i = 18;
           $z$6$ph$i = $z$1$i;
           break L284;
          }
         }
         $carry1$0$i = 0;
         $k$5$in$i = $z$1$i + 127 | 0;
         $z$2$i = $z$1$i;
         while (1) {
          $k$5$i = $k$5$in$i & 127;
          $538 = $x$i + ($k$5$i << 2) | 0;
          $540 = _bitshift64Shl(HEAP32[$538 >> 2] | 0, 0, 29) | 0;
          $542 = _i64Add($540 | 0, getTempRet0() | 0, $carry1$0$i | 0, 0) | 0;
          $543 = getTempRet0() | 0;
          if ($543 >>> 0 > 0 | ($543 | 0) == 0 & $542 >>> 0 > 1e9) {
           $549 = ___udivdi3($542 | 0, $543 | 0, 1e9, 0) | 0;
           getTempRet0() | 0;
           $551 = ___uremdi3($542 | 0, $543 | 0, 1e9, 0) | 0;
           getTempRet0() | 0;
           $$sink$off0$i = $551;
           $carry1$1$i = $549;
          } else {
           $$sink$off0$i = $542;
           $carry1$1$i = 0;
          }
          HEAP32[$538 >> 2] = $$sink$off0$i;
          $556 = ($k$5$i | 0) == ($a$2$ph46$i | 0);
          $z$3$i = ($k$5$i | 0) != ($z$2$i + 127 & 127 | 0) | $556 ? $z$2$i : ($$sink$off0$i | 0) == 0 ? $k$5$i : $z$2$i;
          if ($556) {
           $carry1$1$i$lcssa = $carry1$1$i;
           $z$3$i$lcssa = $z$3$i;
           break;
          } else {
           $carry1$0$i = $carry1$1$i;
           $k$5$in$i = $k$5$i + -1 | 0;
           $z$2$i = $z$3$i;
          }
         }
         $559 = $e2$0$i19 + -29 | 0;
         if (!$carry1$1$i$lcssa) {
          $e2$0$i19 = $559;
          $z$1$i = $z$3$i$lcssa;
         } else {
          $$lcssa265 = $559;
          $carry1$1$i$lcssa$lcssa = $carry1$1$i$lcssa;
          $z$3$i$lcssa$lcssa = $z$3$i$lcssa;
          break;
         }
        }
        $563 = $a$2$ph46$i + 127 & 127;
        if (($563 | 0) == ($z$3$i$lcssa$lcssa | 0)) {
         $566 = $z$3$i$lcssa$lcssa + 127 & 127;
         $571 = $x$i + (($z$3$i$lcssa$lcssa + 126 & 127) << 2) | 0;
         HEAP32[$571 >> 2] = HEAP32[$571 >> 2] | HEAP32[$x$i + ($566 << 2) >> 2];
         $z$4$i = $566;
        } else $z$4$i = $z$3$i$lcssa$lcssa;
        HEAP32[$x$i + ($563 << 2) >> 2] = $carry1$1$i$lcssa$lcssa;
        $a$2$ph46$i = $563;
        $e2$0$ph$i = $$lcssa265;
        $rp$2$ph44$i = $rp$2$ph44$i + 9 | 0;
        $z$1$ph45$i = $z$4$i;
       }
       L302 : while (1) {
        $603 = $z$6$ph$i + 1 & 127;
        $608 = $x$i + (($z$6$ph$i + 127 & 127) << 2) | 0;
        $a$4$ph167$i = $a$4$ph$i;
        $e2$1$ph166$i = $e2$1$ph$i;
        $rp$4$ph$i = $rp$4$ph42$i;
        while (1) {
         $609 = ($rp$4$ph$i | 0) == 18;
         $$24$i = ($rp$4$ph$i | 0) > 27 ? 9 : 1;
         $$not$i = $609 ^ 1;
         $a$4$i = $a$4$ph167$i;
         $e2$1$i = $e2$1$ph166$i;
         while (1) {
          $575 = $a$4$i & 127;
          $576 = ($575 | 0) == ($z$6$ph$i | 0);
          do if ($576) label = 219; else {
           $578 = HEAP32[$x$i + ($575 << 2) >> 2] | 0;
           if ($578 >>> 0 < 9007199) {
            label = 219;
            break;
           }
           if ($578 >>> 0 > 9007199) break;
           $582 = $a$4$i + 1 & 127;
           if (($582 | 0) == ($z$6$ph$i | 0)) {
            label = 219;
            break;
           }
           $690 = HEAP32[$x$i + ($582 << 2) >> 2] | 0;
           if ($690 >>> 0 < 254740991) {
            label = 219;
            break;
           }
           if (!($690 >>> 0 > 254740991 | $$not$i)) {
            $616 = $575;
            $a$4$i251 = $a$4$i;
            $e2$1$i248 = $e2$1$i;
            $z$10$i = $z$6$ph$i;
            break L302;
           }
          } while (0);
          if ((label | 0) == 219) {
           label = 0;
           if ($609) {
            label = 220;
            break L302;
           }
          }
          $584 = $e2$1$i + $$24$i | 0;
          if (($a$4$i | 0) == ($z$6$ph$i | 0)) {
           $a$4$i = $z$6$ph$i;
           $e2$1$i = $584;
          } else {
           $$lcssa258 = $584;
           $a$4$i$lcssa250 = $a$4$i;
           break;
          }
         }
         $587 = (1 << $$24$i) + -1 | 0;
         $588 = 1e9 >>> $$24$i;
         $a$586$i = $a$4$i$lcssa250;
         $carry4$089$i = 0;
         $k$687$i = $a$4$i$lcssa250;
         $rp$585$i = $rp$4$ph$i;
         while (1) {
          $589 = $x$i + ($k$687$i << 2) | 0;
          $590 = HEAP32[$589 >> 2] | 0;
          $593 = ($590 >>> $$24$i) + $carry4$089$i | 0;
          HEAP32[$589 >> 2] = $593;
          $594 = Math_imul($590 & $587, $588) | 0;
          $or$cond25$i = ($k$687$i | 0) == ($a$586$i | 0) & ($593 | 0) == 0;
          $k$687$i = $k$687$i + 1 & 127;
          $rp$6$i = $or$cond25$i ? $rp$585$i + -9 | 0 : $rp$585$i;
          $a$6$i = $or$cond25$i ? $k$687$i : $a$586$i;
          if (($k$687$i | 0) == ($z$6$ph$i | 0)) {
           $$lcssa259 = $594;
           $a$6$i$lcssa = $a$6$i;
           $rp$6$i$lcssa = $rp$6$i;
           break;
          } else {
           $a$586$i = $a$6$i;
           $carry4$089$i = $594;
           $rp$585$i = $rp$6$i;
          }
         }
         if (!$$lcssa259) {
          $a$4$ph167$i = $a$6$i$lcssa;
          $e2$1$ph166$i = $$lcssa258;
          $rp$4$ph$i = $rp$6$i$lcssa;
          continue;
         }
         if (($603 | 0) != ($a$6$i$lcssa | 0)) {
          $$lcssa258$lcssa = $$lcssa258;
          $$lcssa259$lcssa = $$lcssa259;
          $a$6$i$lcssa$lcssa = $a$6$i$lcssa;
          $rp$6$i$lcssa$lcssa = $rp$6$i$lcssa;
          break;
         }
         HEAP32[$608 >> 2] = HEAP32[$608 >> 2] | 1;
         $a$4$ph167$i = $a$6$i$lcssa;
         $e2$1$ph166$i = $$lcssa258;
         $rp$4$ph$i = $rp$6$i$lcssa;
        }
        HEAP32[$x$i + ($z$6$ph$i << 2) >> 2] = $$lcssa259$lcssa;
        $a$4$ph$i = $a$6$i$lcssa$lcssa;
        $e2$1$ph$i = $$lcssa258$lcssa;
        $rp$4$ph42$i = $rp$6$i$lcssa$lcssa;
        $z$6$ph$i = $603;
       }
       if ((label | 0) == 220) if ($576) {
        HEAP32[$x$i + ($603 + -1 << 2) >> 2] = 0;
        $616 = $z$6$ph$i;
        $a$4$i251 = $a$4$i;
        $e2$1$i248 = $e2$1$i;
        $z$10$i = $603;
       } else {
        $616 = $575;
        $a$4$i251 = $a$4$i;
        $e2$1$i248 = $e2$1$i;
        $z$10$i = $z$6$ph$i;
       }
       $618 = +((HEAP32[$x$i + ($616 << 2) >> 2] | 0) >>> 0);
       $620 = $a$4$i251 + 1 & 127;
       if (($620 | 0) == ($z$10$i | 0)) {
        $679 = $a$4$i251 + 2 & 127;
        HEAP32[$x$i + ($679 + -1 << 2) >> 2] = 0;
        $z$10$1$i = $679;
       } else $z$10$1$i = $z$10$i;
       $642 = +($sign$0 | 0);
       $624 = $642 * ($618 * 1.0e9 + +((HEAP32[$x$i + ($620 << 2) >> 2] | 0) >>> 0));
       $662 = $e2$1$i248 + 53 | 0;
       $668 = $662 - $emin$0$ph | 0;
       $669 = ($668 | 0) < ($bits$0$ph | 0);
       $denormal$0$i = $669 & 1;
       $$012$i = $669 ? (($668 | 0) < 0 ? 0 : $668) : $bits$0$ph;
       if (($$012$i | 0) < 53) {
        $625 = +_copysignl(+_scalbn(1.0, 105 - $$012$i | 0), $624);
        $628 = +_fmodl($624, +_scalbn(1.0, 53 - $$012$i | 0));
        $bias$0$i25 = $625;
        $frac$0$i = $628;
        $y$1$i24 = $625 + ($624 - $628);
       } else {
        $bias$0$i25 = 0.0;
        $frac$0$i = 0.0;
        $y$1$i24 = $624;
       }
       $632 = $a$4$i251 + 2 & 127;
       do if (($632 | 0) == ($z$10$1$i | 0)) $frac$3$i = $frac$0$i; else {
        $635 = HEAP32[$x$i + ($632 << 2) >> 2] | 0;
        do if ($635 >>> 0 < 5e8) {
         if (!$635) if (($a$4$i251 + 3 & 127 | 0) == ($z$10$1$i | 0)) {
          $frac$1$i = $frac$0$i;
          break;
         }
         $frac$1$i = $642 * .25 + $frac$0$i;
        } else {
         if ($635 >>> 0 > 5e8) {
          $frac$1$i = $642 * .75 + $frac$0$i;
          break;
         }
         if (($a$4$i251 + 3 & 127 | 0) == ($z$10$1$i | 0)) {
          $frac$1$i = $642 * .5 + $frac$0$i;
          break;
         } else {
          $frac$1$i = $642 * .75 + $frac$0$i;
          break;
         }
        } while (0);
        if ((53 - $$012$i | 0) <= 1) {
         $frac$3$i = $frac$1$i;
         break;
        }
        if (+_fmodl($frac$1$i, 1.0) != 0.0) {
         $frac$3$i = $frac$1$i;
         break;
        }
        $frac$3$i = $frac$1$i + 1.0;
       } while (0);
       $660 = $y$1$i24 + $frac$3$i - $bias$0$i25;
       do if (($662 & 2147483647 | 0) > (-2 - $sum$i | 0)) {
        if (!(+Math_abs(+$660) >= 9007199254740992.0)) {
         $denormal$2$i = $denormal$0$i;
         $e2$3$i = $e2$1$i248;
         $y$2$i26 = $660;
        } else {
         $denormal$2$i = $669 & ($$012$i | 0) == ($668 | 0) ? 0 : $denormal$0$i;
         $e2$3$i = $e2$1$i248 + 1 | 0;
         $y$2$i26 = $660 * .5;
        }
        if (($e2$3$i + 50 | 0) <= ($330 | 0)) if (!($frac$3$i != 0.0 & ($denormal$2$i | 0) != 0)) {
         $e2$4$i = $e2$3$i;
         $y$3$i = $y$2$i26;
         break;
        }
        HEAP32[(___errno_location() | 0) >> 2] = 34;
        $e2$4$i = $e2$3$i;
        $y$3$i = $y$2$i26;
       } else {
        $e2$4$i = $e2$1$i248;
        $y$3$i = $660;
       } while (0);
       $$1$i = +_scalbnl($y$3$i, $e2$4$i);
      } while (0);
      $$0 = $$1$i;
      break L4;
      break;
     }
    default:
     {
      if (HEAP32[$1 >> 2] | 0) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
      HEAP32[(___errno_location() | 0) >> 2] = 22;
      ___shlim($f, 0);
      $$0 = 0.0;
      break L4;
     }
    }
   }
  } while (0);
  if ((label | 0) == 23) {
   $42 = (HEAP32[$1 >> 2] | 0) == 0;
   if (!$42) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
   if (($pok | 0) != 0 & $i$0$lcssa >>> 0 > 3) {
    $i$1 = $i$0$lcssa;
    do {
     if (!$42) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
     $i$1 = $i$1 + -1 | 0;
    } while ($i$1 >>> 0 > 3);
   }
  }
  $$0 = +($sign$0 | 0) * inf;
 } while (0);
 STACKTOP = sp;
 return +$$0;
}

function _printf_core($f, $fmt, $ap, $nl_arg, $nl_type) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 $nl_arg = $nl_arg | 0;
 $nl_type = $nl_type | 0;
 var $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$210$i = 0, $$23$i = 0, $$25$i = 0, $$3$i = 0.0, $$311$i = 0, $$33$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41278$i = 0, $$43 = 0, $$5$lcssa$i = 0, $$589$i = 0, $$a$3$i = 0, $$a$3192$i = 0, $$fl$4 = 0, $$lcssa = 0, $$lcssa162$i = 0, $$lcssa295 = 0, $$lcssa300 = 0, $$lcssa301 = 0, $$lcssa302 = 0, $$lcssa303 = 0, $$lcssa304 = 0, $$lcssa306 = 0, $$lcssa316 = 0, $$lcssa319 = 0.0, $$lcssa321 = 0, $$p$$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr50$i = 0, $$pre$phi190$iZ2D = 0, $$pre171 = 0, $$pre188$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $107 = 0, $108 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $134 = 0, $135 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $145 = 0, $147 = 0, $149 = 0, $15 = 0, $150 = 0, $155 = 0, $158 = 0, $16 = 0, $163 = 0, $164 = 0, $169 = 0, $176 = 0, $177 = 0, $188 = 0, $2 = 0, $200 = 0, $207 = 0, $209 = 0, $212 = 0, $213 = 0, $218 = 0, $22 = 0, $224 = 0, $225 = 0, $231 = 0, $24 = 0, $244 = 0, $246 = 0, $249 = 0, $25 = 0, $254 = 0, $257 = 0, $258 = 0, $267 = 0, $270 = 0, $272 = 0, $275 = 0, $277 = 0, $278 = 0, $279 = 0, $285 = 0, $287 = 0, $288 = 0, $29 = 0, $292 = 0, $3 = 0, $30 = 0, $300 = 0, $306 = 0, $318 = 0, $321 = 0, $322 = 0, $334 = 0, $336 = 0, $341 = 0, $345 = 0, $348 = 0, $35 = 0, $358 = 0.0, $365 = 0, $369 = 0, $376 = 0, $378 = 0, $380 = 0, $381 = 0, $385 = 0, $391 = 0.0, $392 = 0, $395 = 0, $397 = 0, $4 = 0, $40 = 0, $400 = 0, $402 = 0, $406 = 0.0, $41 = 0, $416 = 0, $419 = 0, $422 = 0, $431 = 0, $433 = 0, $434 = 0, $440 = 0, $45 = 0, $452 = 0, $457 = 0, $462 = 0, $466 = 0, $47 = 0, $476 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $488 = 0, $489 = 0, $492 = 0, $494 = 0, $495 = 0, $496 = 0, $498 = 0, $5 = 0, $502 = 0, $504 = 0, $508 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $518 = 0, $52 = 0, $524 = 0, $525 = 0, $526 = 0, $530 = 0, $538 = 0, $552 = 0, $553 = 0, $556 = 0, $561 = 0, $562 = 0, $564 = 0, $57 = 0, $572 = 0, $575 = 0, $578 = 0, $579 = 0, $580 = 0, $583 = 0, $587 = 0, $595 = 0, $598 = 0, $6 = 0, $60 = 0, $600 = 0, $602 = 0, $604 = 0, $609 = 0, $61 = 0, $610 = 0, $613 = 0, $615 = 0, $617 = 0, $619 = 0, $62 = 0, $630 = 0, $633 = 0, $638 = 0, $647 = 0, $648 = 0, $652 = 0, $655 = 0, $657 = 0, $659 = 0, $663 = 0, $666 = 0, $67 = 0, $670 = 0, $68 = 0, $680 = 0, $685 = 0, $692 = 0, $697 = 0, $7 = 0, $705 = 0, $715 = 0, $719 = 0, $727 = 0, $734 = 0, $736 = 0, $740 = 0, $742 = 0, $751 = 0, $757 = 0, $772 = 0, $774 = 0, $787 = 0, $798 = 0, $8 = 0, $9 = 0, $92 = 0, $93 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1149$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3136$i = 0, $a$5$lcssa$i = 0, $a$5111$i = 0, $a$6$i = 0, $a$8$i = 0, $a$9$ph$i = 0, $arg = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0142$i = 0, $carry3$0130$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0141$i = 0, $d$0143$i = 0, $d$1129$i = 0, $d$2$lcssa$i = 0, $d$2110$i = 0, $d$4$i = 0, $d$584$i = 0, $d$677$i = 0, $d$788$i = 0, $e$0125$i = 0, $e$1$i = 0, $e$2106$i = 0, $e$4$i = 0, $e$5$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$195$i = 0, $estr$2$i = 0, $fl$0100 = 0, $fl$053 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa178 = 0, $i$0105 = 0, $i$0124$i = 0, $i$03$i = 0, $i$03$i25 = 0, $i$1$lcssa$i = 0, $i$1116 = 0, $i$1118$i = 0, $i$2105$i = 0, $i$291 = 0, $i$291$lcssa = 0, $i$3101$i = 0, $i$389 = 0, $isdigittmp = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i24 = 0, $isdigittmp9 = 0, $j$0117$i = 0, $j$0119$i = 0, $j$1102$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1104 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notrhs$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$4176 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$9$i = 0, $re$171$i = 0, $round$070$i = 0.0, $round6$1$i = 0.0, $s$0 = 0, $s$0$i = 0, $s$1 = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s$2$lcssa = 0, $s$292 = 0, $s$4 = 0, $s$6 = 0, $s$7 = 0, $s$7$lcssa298 = 0, $s1$0$i = 0, $s7$081$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$072$i = 0, $s9$0$i = 0, $s9$185$i = 0, $s9$2$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa299 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge851 = 0, $storemerge899 = 0, $t$0 = 0, $t$1 = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $wc = 0, $ws$0106 = 0, $ws$1117 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$093 = 0, $z$1$lcssa$i = 0, $z$1148$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3135$i = 0, $z$4$i = 0, $z$7$$i = 0, $z$7$i = 0, $z$7$i$lcssa = 0, $z$7$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $big$i = sp + 24 | 0;
 $e2$i = sp + 16 | 0;
 $buf$i = sp + 588 | 0;
 $ebuf0$i = sp + 576 | 0;
 $arg = sp;
 $buf = sp + 536 | 0;
 $wc = sp + 8 | 0;
 $mb = sp + 528 | 0;
 $0 = ($f | 0) != 0;
 $1 = $buf + 40 | 0;
 $2 = $1;
 $3 = $buf + 39 | 0;
 $4 = $wc + 4 | 0;
 $5 = $buf$i;
 $6 = 0 - $5 | 0;
 $7 = $ebuf0$i + 12 | 0;
 $8 = $ebuf0$i + 11 | 0;
 $9 = $7;
 $10 = $9 - $5 | 0;
 $11 = -2 - $5 | 0;
 $12 = $9 + 2 | 0;
 $13 = $big$i + 288 | 0;
 $14 = $buf$i + 9 | 0;
 $15 = $14;
 $16 = $buf$i + 8 | 0;
 $cnt$0 = 0;
 $l$0 = 0;
 $l10n$0 = 0;
 $s$0 = $fmt;
 L1 : while (1) {
  do if (($cnt$0 | 0) > -1) if (($l$0 | 0) > (2147483647 - $cnt$0 | 0)) {
   HEAP32[(___errno_location() | 0) >> 2] = 75;
   $cnt$1 = -1;
   break;
  } else {
   $cnt$1 = $l$0 + $cnt$0 | 0;
   break;
  } else $cnt$1 = $cnt$0; while (0);
  $22 = HEAP8[$s$0 >> 0] | 0;
  if (!($22 << 24 >> 24)) {
   $cnt$1$lcssa = $cnt$1;
   $l10n$0$lcssa = $l10n$0;
   label = 244;
   break;
  } else {
   $24 = $22;
   $s$1 = $s$0;
  }
  L9 : while (1) {
   switch ($24 << 24 >> 24) {
   case 37:
    {
     $s$292 = $s$1;
     $z$093 = $s$1;
     label = 9;
     break L9;
     break;
    }
   case 0:
    {
     $s$2$lcssa = $s$1;
     $z$0$lcssa = $s$1;
     break L9;
     break;
    }
   default:
    {}
   }
   $25 = $s$1 + 1 | 0;
   $24 = HEAP8[$25 >> 0] | 0;
   $s$1 = $25;
  }
  L12 : do if ((label | 0) == 9) while (1) {
   label = 0;
   if ((HEAP8[$s$292 + 1 >> 0] | 0) != 37) {
    $s$2$lcssa = $s$292;
    $z$0$lcssa = $z$093;
    break L12;
   }
   $29 = $z$093 + 1 | 0;
   $30 = $s$292 + 2 | 0;
   if ((HEAP8[$30 >> 0] | 0) == 37) {
    $s$292 = $30;
    $z$093 = $29;
    label = 9;
   } else {
    $s$2$lcssa = $30;
    $z$0$lcssa = $29;
    break;
   }
  } while (0);
  $35 = $z$0$lcssa - $s$0 | 0;
  if ($0) if (!(HEAP32[$f >> 2] & 32)) ___fwritex($s$0, $35, $f) | 0;
  if (($z$0$lcssa | 0) != ($s$0 | 0)) {
   $cnt$0 = $cnt$1;
   $l$0 = $35;
   $s$0 = $s$2$lcssa;
   continue;
  }
  $40 = $s$2$lcssa + 1 | 0;
  $41 = HEAP8[$40 >> 0] | 0;
  $isdigittmp = ($41 << 24 >> 24) + -48 | 0;
  if ($isdigittmp >>> 0 < 10) {
   $45 = (HEAP8[$s$2$lcssa + 2 >> 0] | 0) == 36;
   $$43 = $45 ? $s$2$lcssa + 3 | 0 : $40;
   $48 = HEAP8[$$43 >> 0] | 0;
   $argpos$0 = $45 ? $isdigittmp : -1;
   $l10n$1 = $45 ? 1 : $l10n$0;
   $storemerge = $$43;
  } else {
   $48 = $41;
   $argpos$0 = -1;
   $l10n$1 = $l10n$0;
   $storemerge = $40;
  }
  $47 = $48 << 24 >> 24;
  L25 : do if (($47 & -32 | 0) == 32) {
   $52 = $47;
   $57 = $48;
   $fl$0100 = 0;
   $storemerge899 = $storemerge;
   while (1) {
    if (!(1 << $52 + -32 & 75913)) {
     $67 = $57;
     $fl$053 = $fl$0100;
     $storemerge851 = $storemerge899;
     break L25;
    }
    $60 = 1 << ($57 << 24 >> 24) + -32 | $fl$0100;
    $61 = $storemerge899 + 1 | 0;
    $62 = HEAP8[$61 >> 0] | 0;
    $52 = $62 << 24 >> 24;
    if (($52 & -32 | 0) != 32) {
     $67 = $62;
     $fl$053 = $60;
     $storemerge851 = $61;
     break;
    } else {
     $57 = $62;
     $fl$0100 = $60;
     $storemerge899 = $61;
    }
   }
  } else {
   $67 = $48;
   $fl$053 = 0;
   $storemerge851 = $storemerge;
  } while (0);
  do if ($67 << 24 >> 24 == 42) {
   $68 = $storemerge851 + 1 | 0;
   $isdigittmp11 = (HEAP8[$68 >> 0] | 0) + -48 | 0;
   if ($isdigittmp11 >>> 0 < 10) if ((HEAP8[$storemerge851 + 2 >> 0] | 0) == 36) {
    HEAP32[$nl_type + ($isdigittmp11 << 2) >> 2] = 10;
    $l10n$2 = 1;
    $storemerge13 = $storemerge851 + 3 | 0;
    $w$0 = HEAP32[$nl_arg + ((HEAP8[$68 >> 0] | 0) + -48 << 3) >> 2] | 0;
   } else label = 24; else label = 24;
   if ((label | 0) == 24) {
    label = 0;
    if ($l10n$1 | 0) {
     $$0 = -1;
     break L1;
    }
    if (!$0) {
     $fl$1 = $fl$053;
     $l10n$3 = 0;
     $s$4 = $68;
     $w$1 = 0;
     break;
    }
    $92 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
    $93 = HEAP32[$92 >> 2] | 0;
    HEAP32[$ap >> 2] = $92 + 4;
    $l10n$2 = 0;
    $storemerge13 = $68;
    $w$0 = $93;
   }
   if (($w$0 | 0) < 0) {
    $fl$1 = $fl$053 | 8192;
    $l10n$3 = $l10n$2;
    $s$4 = $storemerge13;
    $w$1 = 0 - $w$0 | 0;
   } else {
    $fl$1 = $fl$053;
    $l10n$3 = $l10n$2;
    $s$4 = $storemerge13;
    $w$1 = $w$0;
   }
  } else {
   $isdigittmp1$i = ($67 << 24 >> 24) + -48 | 0;
   if ($isdigittmp1$i >>> 0 < 10) {
    $101 = $storemerge851;
    $i$03$i = 0;
    $isdigittmp4$i = $isdigittmp1$i;
    while (1) {
     $99 = ($i$03$i * 10 | 0) + $isdigittmp4$i | 0;
     $100 = $101 + 1 | 0;
     $isdigittmp4$i = (HEAP8[$100 >> 0] | 0) + -48 | 0;
     if ($isdigittmp4$i >>> 0 >= 10) {
      $$lcssa = $99;
      $$lcssa295 = $100;
      break;
     } else {
      $101 = $100;
      $i$03$i = $99;
     }
    }
    if (($$lcssa | 0) < 0) {
     $$0 = -1;
     break L1;
    } else {
     $fl$1 = $fl$053;
     $l10n$3 = $l10n$1;
     $s$4 = $$lcssa295;
     $w$1 = $$lcssa;
    }
   } else {
    $fl$1 = $fl$053;
    $l10n$3 = $l10n$1;
    $s$4 = $storemerge851;
    $w$1 = 0;
   }
  } while (0);
  L46 : do if ((HEAP8[$s$4 >> 0] | 0) == 46) {
   $107 = $s$4 + 1 | 0;
   $108 = HEAP8[$107 >> 0] | 0;
   if ($108 << 24 >> 24 != 42) {
    $isdigittmp1$i22 = ($108 << 24 >> 24) + -48 | 0;
    if ($isdigittmp1$i22 >>> 0 < 10) {
     $140 = $107;
     $i$03$i25 = 0;
     $isdigittmp4$i24 = $isdigittmp1$i22;
    } else {
     $p$0 = 0;
     $s$6 = $107;
     break;
    }
    while (1) {
     $138 = ($i$03$i25 * 10 | 0) + $isdigittmp4$i24 | 0;
     $139 = $140 + 1 | 0;
     $isdigittmp4$i24 = (HEAP8[$139 >> 0] | 0) + -48 | 0;
     if ($isdigittmp4$i24 >>> 0 >= 10) {
      $p$0 = $138;
      $s$6 = $139;
      break L46;
     } else {
      $140 = $139;
      $i$03$i25 = $138;
     }
    }
   }
   $110 = $s$4 + 2 | 0;
   $isdigittmp9 = (HEAP8[$110 >> 0] | 0) + -48 | 0;
   if ($isdigittmp9 >>> 0 < 10) if ((HEAP8[$s$4 + 3 >> 0] | 0) == 36) {
    HEAP32[$nl_type + ($isdigittmp9 << 2) >> 2] = 10;
    $p$0 = HEAP32[$nl_arg + ((HEAP8[$110 >> 0] | 0) + -48 << 3) >> 2] | 0;
    $s$6 = $s$4 + 4 | 0;
    break;
   }
   if ($l10n$3 | 0) {
    $$0 = -1;
    break L1;
   }
   if ($0) {
    $134 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
    $135 = HEAP32[$134 >> 2] | 0;
    HEAP32[$ap >> 2] = $134 + 4;
    $p$0 = $135;
    $s$6 = $110;
   } else {
    $p$0 = 0;
    $s$6 = $110;
   }
  } else {
   $p$0 = -1;
   $s$6 = $s$4;
  } while (0);
  $s$7 = $s$6;
  $st$0 = 0;
  while (1) {
   $145 = (HEAP8[$s$7 >> 0] | 0) + -65 | 0;
   if ($145 >>> 0 > 57) {
    $$0 = -1;
    break L1;
   }
   $147 = $s$7 + 1 | 0;
   $149 = HEAP8[gb + 42438 + ($st$0 * 58 | 0) + $145 >> 0] | 0;
   $150 = $149 & 255;
   if (($150 + -1 | 0) >>> 0 < 8) {
    $s$7 = $147;
    $st$0 = $150;
   } else {
    $$lcssa300 = $147;
    $$lcssa301 = $149;
    $$lcssa302 = $150;
    $s$7$lcssa298 = $s$7;
    $st$0$lcssa299 = $st$0;
    break;
   }
  }
  if (!($$lcssa301 << 24 >> 24)) {
   $$0 = -1;
   break;
  }
  $155 = ($argpos$0 | 0) > -1;
  do if ($$lcssa301 << 24 >> 24 == 19) if ($155) {
   $$0 = -1;
   break L1;
  } else label = 52; else {
   if ($155) {
    HEAP32[$nl_type + ($argpos$0 << 2) >> 2] = $$lcssa302;
    $158 = $nl_arg + ($argpos$0 << 3) | 0;
    $163 = HEAP32[$158 + 4 >> 2] | 0;
    $164 = $arg;
    HEAP32[$164 >> 2] = HEAP32[$158 >> 2];
    HEAP32[$164 + 4 >> 2] = $163;
    label = 52;
    break;
   }
   if (!$0) {
    $$0 = 0;
    break L1;
   }
   _pop_arg($arg, $$lcssa302, $ap);
  } while (0);
  if ((label | 0) == 52) {
   label = 0;
   if (!$0) {
    $cnt$0 = $cnt$1;
    $l$0 = $35;
    $l10n$0 = $l10n$3;
    $s$0 = $$lcssa300;
    continue;
   }
  }
  $169 = HEAP8[$s$7$lcssa298 >> 0] | 0;
  $t$0 = ($st$0$lcssa299 | 0) != 0 & ($169 & 15 | 0) == 3 ? $169 & -33 : $169;
  $176 = $fl$1 & -65537;
  $fl$1$ = ($fl$1 & 8192 | 0) == 0 ? $fl$1 : $176;
  L75 : do switch ($t$0 | 0) {
  case 110:
   {
    switch ($st$0$lcssa299 | 0) {
    case 0:
     {
      HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1;
      $cnt$0 = $cnt$1;
      $l$0 = $35;
      $l10n$0 = $l10n$3;
      $s$0 = $$lcssa300;
      continue L1;
      break;
     }
    case 1:
     {
      HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1;
      $cnt$0 = $cnt$1;
      $l$0 = $35;
      $l10n$0 = $l10n$3;
      $s$0 = $$lcssa300;
      continue L1;
      break;
     }
    case 2:
     {
      $188 = HEAP32[$arg >> 2] | 0;
      HEAP32[$188 >> 2] = $cnt$1;
      HEAP32[$188 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31;
      $cnt$0 = $cnt$1;
      $l$0 = $35;
      $l10n$0 = $l10n$3;
      $s$0 = $$lcssa300;
      continue L1;
      break;
     }
    case 3:
     {
      HEAP16[HEAP32[$arg >> 2] >> 1] = $cnt$1;
      $cnt$0 = $cnt$1;
      $l$0 = $35;
      $l10n$0 = $l10n$3;
      $s$0 = $$lcssa300;
      continue L1;
      break;
     }
    case 4:
     {
      HEAP8[HEAP32[$arg >> 2] >> 0] = $cnt$1;
      $cnt$0 = $cnt$1;
      $l$0 = $35;
      $l10n$0 = $l10n$3;
      $s$0 = $$lcssa300;
      continue L1;
      break;
     }
    case 6:
     {
      HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1;
      $cnt$0 = $cnt$1;
      $l$0 = $35;
      $l10n$0 = $l10n$3;
      $s$0 = $$lcssa300;
      continue L1;
      break;
     }
    case 7:
     {
      $200 = HEAP32[$arg >> 2] | 0;
      HEAP32[$200 >> 2] = $cnt$1;
      HEAP32[$200 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31;
      $cnt$0 = $cnt$1;
      $l$0 = $35;
      $l10n$0 = $l10n$3;
      $s$0 = $$lcssa300;
      continue L1;
      break;
     }
    default:
     {
      $cnt$0 = $cnt$1;
      $l$0 = $35;
      $l10n$0 = $l10n$3;
      $s$0 = $$lcssa300;
      continue L1;
     }
    }
    break;
   }
  case 112:
   {
    $fl$3 = $fl$1$ | 8;
    $p$1 = $p$0 >>> 0 > 8 ? $p$0 : 8;
    $t$1 = 120;
    label = 64;
    break;
   }
  case 88:
  case 120:
   {
    $fl$3 = $fl$1$;
    $p$1 = $p$0;
    $t$1 = $t$0;
    label = 64;
    break;
   }
  case 111:
   {
    $244 = $arg;
    $246 = HEAP32[$244 >> 2] | 0;
    $249 = HEAP32[$244 + 4 >> 2] | 0;
    if (($246 | 0) == 0 & ($249 | 0) == 0) $$0$lcssa$i = $1; else {
     $$03$i33 = $1;
     $254 = $246;
     $258 = $249;
     while (1) {
      $257 = $$03$i33 + -1 | 0;
      HEAP8[$257 >> 0] = $254 & 7 | 48;
      $254 = _bitshift64Lshr($254 | 0, $258 | 0, 3) | 0;
      $258 = getTempRet0() | 0;
      if (($254 | 0) == 0 & ($258 | 0) == 0) {
       $$0$lcssa$i = $257;
       break;
      } else $$03$i33 = $257;
     }
    }
    if (!($fl$1$ & 8)) {
     $a$0 = $$0$lcssa$i;
     $fl$4 = $fl$1$;
     $p$2 = $p$0;
     $pl$1 = 0;
     $prefix$1 = gb + 42918 | 0;
     label = 77;
    } else {
     $267 = $2 - $$0$lcssa$i | 0;
     $a$0 = $$0$lcssa$i;
     $fl$4 = $fl$1$;
     $p$2 = ($p$0 | 0) > ($267 | 0) ? $p$0 : $267 + 1 | 0;
     $pl$1 = 0;
     $prefix$1 = gb + 42918 | 0;
     label = 77;
    }
    break;
   }
  case 105:
  case 100:
   {
    $270 = $arg;
    $272 = HEAP32[$270 >> 2] | 0;
    $275 = HEAP32[$270 + 4 >> 2] | 0;
    if (($275 | 0) < 0) {
     $277 = _i64Subtract(0, 0, $272 | 0, $275 | 0) | 0;
     $278 = getTempRet0() | 0;
     $279 = $arg;
     HEAP32[$279 >> 2] = $277;
     HEAP32[$279 + 4 >> 2] = $278;
     $287 = $277;
     $288 = $278;
     $pl$0 = 1;
     $prefix$0 = gb + 42918 | 0;
     label = 76;
     break L75;
    }
    if (!($fl$1$ & 2048)) {
     $285 = $fl$1$ & 1;
     $287 = $272;
     $288 = $275;
     $pl$0 = $285;
     $prefix$0 = ($285 | 0) == 0 ? gb + 42918 | 0 : gb + 42918 + 2 | 0;
     label = 76;
    } else {
     $287 = $272;
     $288 = $275;
     $pl$0 = 1;
     $prefix$0 = gb + 42918 + 1 | 0;
     label = 76;
    }
    break;
   }
  case 117:
   {
    $177 = $arg;
    $287 = HEAP32[$177 >> 2] | 0;
    $288 = HEAP32[$177 + 4 >> 2] | 0;
    $pl$0 = 0;
    $prefix$0 = gb + 42918 | 0;
    label = 76;
    break;
   }
  case 99:
   {
    HEAP8[$3 >> 0] = HEAP32[$arg >> 2];
    $a$2 = $3;
    $fl$6 = $176;
    $p$5 = 1;
    $pl$2 = 0;
    $prefix$2 = gb + 42918 | 0;
    $z$2 = $1;
    break;
   }
  case 109:
   {
    $a$1 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0;
    label = 82;
    break;
   }
  case 115:
   {
    $318 = HEAP32[$arg >> 2] | 0;
    $a$1 = $318 | 0 ? $318 : gb + 44820 | 0;
    label = 82;
    break;
   }
  case 67:
   {
    HEAP32[$wc >> 2] = HEAP32[$arg >> 2];
    HEAP32[$4 >> 2] = 0;
    HEAP32[$arg >> 2] = $wc;
    $798 = $wc;
    $p$4176 = -1;
    label = 86;
    break;
   }
  case 83:
   {
    $$pre171 = HEAP32[$arg >> 2] | 0;
    if (!$p$0) {
     _pad($f, 32, $w$1, 0, $fl$1$);
     $i$0$lcssa178 = 0;
     label = 97;
    } else {
     $798 = $$pre171;
     $p$4176 = $p$0;
     label = 86;
    }
    break;
   }
  case 65:
  case 71:
  case 70:
  case 69:
  case 97:
  case 103:
  case 102:
  case 101:
   {
    $358 = +HEAPF64[$arg >> 3];
    HEAP32[$e2$i >> 2] = 0;
    HEAPF64[tempDoublePtr >> 3] = $358;
    if ((HEAP32[tempDoublePtr + 4 >> 2] | 0) < 0) {
     $$07$i = -$358;
     $pl$0$i = 1;
     $prefix$0$i = gb + 44827 | 0;
    } else if (!($fl$1$ & 2048)) {
     $365 = $fl$1$ & 1;
     $$07$i = $358;
     $pl$0$i = $365;
     $prefix$0$i = ($365 | 0) == 0 ? gb + 44827 + 1 | 0 : gb + 44827 + 6 | 0;
    } else {
     $$07$i = $358;
     $pl$0$i = 1;
     $prefix$0$i = gb + 44827 + 3 | 0;
    }
    HEAPF64[tempDoublePtr >> 3] = $$07$i;
    $369 = HEAP32[tempDoublePtr + 4 >> 2] & 2146435072;
    do if ($369 >>> 0 < 2146435072 | ($369 | 0) == 2146435072 & 0 < 0) {
     $391 = +_frexpl($$07$i, $e2$i) * 2.0;
     $392 = $391 != 0.0;
     if ($392) HEAP32[$e2$i >> 2] = (HEAP32[$e2$i >> 2] | 0) + -1;
     $395 = $t$0 | 32;
     if (($395 | 0) == 97) {
      $397 = $t$0 & 32;
      $prefix$0$$i = ($397 | 0) == 0 ? $prefix$0$i : $prefix$0$i + 9 | 0;
      $400 = $pl$0$i | 2;
      $402 = 12 - $p$0 | 0;
      do if ($p$0 >>> 0 > 11 | ($402 | 0) == 0) $$1$i = $391; else {
       $re$171$i = $402;
       $round$070$i = 8.0;
       while (1) {
        $re$171$i = $re$171$i + -1 | 0;
        $406 = $round$070$i * 16.0;
        if (!$re$171$i) {
         $$lcssa319 = $406;
         break;
        } else $round$070$i = $406;
       }
       if ((HEAP8[$prefix$0$$i >> 0] | 0) == 45) {
        $$1$i = -($$lcssa319 + (-$391 - $$lcssa319));
        break;
       } else {
        $$1$i = $391 + $$lcssa319 - $$lcssa319;
        break;
       }
      } while (0);
      $416 = HEAP32[$e2$i >> 2] | 0;
      $419 = ($416 | 0) < 0 ? 0 - $416 | 0 : $416;
      $422 = _fmt_u($419, (($419 | 0) < 0) << 31 >> 31, $7) | 0;
      if (($422 | 0) == ($7 | 0)) {
       HEAP8[$8 >> 0] = 48;
       $estr$0$i = $8;
      } else $estr$0$i = $422;
      HEAP8[$estr$0$i + -1 >> 0] = ($416 >> 31 & 2) + 43;
      $431 = $estr$0$i + -2 | 0;
      HEAP8[$431 >> 0] = $t$0 + 15;
      $notrhs$i = ($p$0 | 0) < 1;
      $433 = ($fl$1$ & 8 | 0) == 0;
      $$2$i = $$1$i;
      $s$0$i = $buf$i;
      while (1) {
       $434 = ~~$$2$i;
       $440 = $s$0$i + 1 | 0;
       HEAP8[$s$0$i >> 0] = HEAPU8[gb + 42902 + $434 >> 0] | $397;
       $$2$i = ($$2$i - +($434 | 0)) * 16.0;
       do if (($440 - $5 | 0) == 1) {
        if ($433 & ($notrhs$i & $$2$i == 0.0)) {
         $s$1$i = $440;
         break;
        }
        HEAP8[$440 >> 0] = 46;
        $s$1$i = $s$0$i + 2 | 0;
       } else $s$1$i = $440; while (0);
       if (!($$2$i != 0.0)) {
        $s$1$i$lcssa = $s$1$i;
        break;
       } else $s$0$i = $s$1$i;
      }
      $$pre188$i = $s$1$i$lcssa;
      $452 = $431;
      $l$0$i = ($p$0 | 0) != 0 & ($11 + $$pre188$i | 0) < ($p$0 | 0) ? $12 + $p$0 - $452 | 0 : $10 - $452 + $$pre188$i | 0;
      $457 = $l$0$i + $400 | 0;
      _pad($f, 32, $w$1, $457, $fl$1$);
      if (!(HEAP32[$f >> 2] & 32)) ___fwritex($prefix$0$$i, $400, $f) | 0;
      _pad($f, 48, $w$1, $457, $fl$1$ ^ 65536);
      $462 = $$pre188$i - $5 | 0;
      if (!(HEAP32[$f >> 2] & 32)) ___fwritex($buf$i, $462, $f) | 0;
      $466 = $9 - $452 | 0;
      _pad($f, 48, $l$0$i - ($462 + $466) | 0, 0, 0);
      if (!(HEAP32[$f >> 2] & 32)) ___fwritex($431, $466, $f) | 0;
      _pad($f, 32, $w$1, $457, $fl$1$ ^ 8192);
      $$0$i = ($457 | 0) < ($w$1 | 0) ? $w$1 : $457;
      break;
     }
     $$p$i = ($p$0 | 0) < 0 ? 6 : $p$0;
     if ($392) {
      $476 = (HEAP32[$e2$i >> 2] | 0) + -28 | 0;
      HEAP32[$e2$i >> 2] = $476;
      $$3$i = $391 * 268435456.0;
      $478 = $476;
     } else {
      $$3$i = $391;
      $478 = HEAP32[$e2$i >> 2] | 0;
     }
     $$33$i = ($478 | 0) < 0 ? $big$i : $13;
     $479 = $$33$i;
     $$4$i = $$3$i;
     $z$0$i = $$33$i;
     while (1) {
      $480 = ~~$$4$i >>> 0;
      HEAP32[$z$0$i >> 2] = $480;
      $481 = $z$0$i + 4 | 0;
      $$4$i = ($$4$i - +($480 >>> 0)) * 1.0e9;
      if (!($$4$i != 0.0)) {
       $$lcssa303 = $481;
       break;
      } else $z$0$i = $481;
     }
     $$pr$i = HEAP32[$e2$i >> 2] | 0;
     if (($$pr$i | 0) > 0) {
      $488 = $$pr$i;
      $a$1149$i = $$33$i;
      $z$1148$i = $$lcssa303;
      while (1) {
       $489 = ($488 | 0) > 29 ? 29 : $488;
       $d$0141$i = $z$1148$i + -4 | 0;
       do if ($d$0141$i >>> 0 < $a$1149$i >>> 0) $a$2$ph$i = $a$1149$i; else {
        $carry$0142$i = 0;
        $d$0143$i = $d$0141$i;
        while (1) {
         $492 = _bitshift64Shl(HEAP32[$d$0143$i >> 2] | 0, 0, $489 | 0) | 0;
         $494 = _i64Add($492 | 0, getTempRet0() | 0, $carry$0142$i | 0, 0) | 0;
         $495 = getTempRet0() | 0;
         $496 = ___uremdi3($494 | 0, $495 | 0, 1e9, 0) | 0;
         getTempRet0() | 0;
         HEAP32[$d$0143$i >> 2] = $496;
         $498 = ___udivdi3($494 | 0, $495 | 0, 1e9, 0) | 0;
         getTempRet0() | 0;
         $d$0143$i = $d$0143$i + -4 | 0;
         if ($d$0143$i >>> 0 < $a$1149$i >>> 0) {
          $$lcssa304 = $498;
          break;
         } else $carry$0142$i = $498;
        }
        if (!$$lcssa304) {
         $a$2$ph$i = $a$1149$i;
         break;
        }
        $502 = $a$1149$i + -4 | 0;
        HEAP32[$502 >> 2] = $$lcssa304;
        $a$2$ph$i = $502;
       } while (0);
       $z$2$i = $z$1148$i;
       while (1) {
        if ($z$2$i >>> 0 <= $a$2$ph$i >>> 0) {
         $z$2$i$lcssa = $z$2$i;
         break;
        }
        $504 = $z$2$i + -4 | 0;
        if (!(HEAP32[$504 >> 2] | 0)) $z$2$i = $504; else {
         $z$2$i$lcssa = $z$2$i;
         break;
        }
       }
       $508 = (HEAP32[$e2$i >> 2] | 0) - $489 | 0;
       HEAP32[$e2$i >> 2] = $508;
       if (($508 | 0) > 0) {
        $488 = $508;
        $a$1149$i = $a$2$ph$i;
        $z$1148$i = $z$2$i$lcssa;
       } else {
        $$pr50$i = $508;
        $a$1$lcssa$i = $a$2$ph$i;
        $z$1$lcssa$i = $z$2$i$lcssa;
        break;
       }
      }
     } else {
      $$pr50$i = $$pr$i;
      $a$1$lcssa$i = $$33$i;
      $z$1$lcssa$i = $$lcssa303;
     }
     if (($$pr50$i | 0) < 0) {
      $513 = (($$p$i + 25 | 0) / 9 | 0) + 1 | 0;
      $514 = ($395 | 0) == 102;
      $516 = $$pr50$i;
      $a$3136$i = $a$1$lcssa$i;
      $z$3135$i = $z$1$lcssa$i;
      while (1) {
       $515 = 0 - $516 | 0;
       $518 = ($515 | 0) > 9 ? 9 : $515;
       do if ($a$3136$i >>> 0 < $z$3135$i >>> 0) {
        $524 = (1 << $518) + -1 | 0;
        $525 = 1e9 >>> $518;
        $carry3$0130$i = 0;
        $d$1129$i = $a$3136$i;
        while (1) {
         $526 = HEAP32[$d$1129$i >> 2] | 0;
         HEAP32[$d$1129$i >> 2] = ($526 >>> $518) + $carry3$0130$i;
         $530 = Math_imul($526 & $524, $525) | 0;
         $d$1129$i = $d$1129$i + 4 | 0;
         if ($d$1129$i >>> 0 >= $z$3135$i >>> 0) {
          $$lcssa306 = $530;
          break;
         } else $carry3$0130$i = $530;
        }
        $$a$3$i = (HEAP32[$a$3136$i >> 2] | 0) == 0 ? $a$3136$i + 4 | 0 : $a$3136$i;
        if (!$$lcssa306) {
         $$a$3192$i = $$a$3$i;
         $z$4$i = $z$3135$i;
         break;
        }
        HEAP32[$z$3135$i >> 2] = $$lcssa306;
        $$a$3192$i = $$a$3$i;
        $z$4$i = $z$3135$i + 4 | 0;
       } else {
        $$a$3192$i = (HEAP32[$a$3136$i >> 2] | 0) == 0 ? $a$3136$i + 4 | 0 : $a$3136$i;
        $z$4$i = $z$3135$i;
       } while (0);
       $538 = $514 ? $$33$i : $$a$3192$i;
       $$z$4$i = ($z$4$i - $538 >> 2 | 0) > ($513 | 0) ? $538 + ($513 << 2) | 0 : $z$4$i;
       $516 = (HEAP32[$e2$i >> 2] | 0) + $518 | 0;
       HEAP32[$e2$i >> 2] = $516;
       if (($516 | 0) >= 0) {
        $a$3$lcssa$i = $$a$3192$i;
        $z$3$lcssa$i = $$z$4$i;
        break;
       } else {
        $a$3136$i = $$a$3192$i;
        $z$3135$i = $$z$4$i;
       }
      }
     } else {
      $a$3$lcssa$i = $a$1$lcssa$i;
      $z$3$lcssa$i = $z$1$lcssa$i;
     }
     do if ($a$3$lcssa$i >>> 0 < $z$3$lcssa$i >>> 0) {
      $552 = ($479 - $a$3$lcssa$i >> 2) * 9 | 0;
      $553 = HEAP32[$a$3$lcssa$i >> 2] | 0;
      if ($553 >>> 0 < 10) {
       $e$1$i = $552;
       break;
      } else {
       $e$0125$i = $552;
       $i$0124$i = 10;
      }
      while (1) {
       $i$0124$i = $i$0124$i * 10 | 0;
       $556 = $e$0125$i + 1 | 0;
       if ($553 >>> 0 < $i$0124$i >>> 0) {
        $e$1$i = $556;
        break;
       } else $e$0125$i = $556;
      }
     } else $e$1$i = 0; while (0);
     $561 = ($395 | 0) == 103;
     $562 = ($$p$i | 0) != 0;
     $564 = $$p$i - (($395 | 0) != 102 ? $e$1$i : 0) + (($562 & $561) << 31 >> 31) | 0;
     if (($564 | 0) < ((($z$3$lcssa$i - $479 >> 2) * 9 | 0) + -9 | 0)) {
      $572 = $564 + 9216 | 0;
      $575 = $$33$i + 4 + ((($572 | 0) / 9 | 0) + -1024 << 2) | 0;
      $j$0117$i = (($572 | 0) % 9 | 0) + 1 | 0;
      if (($j$0117$i | 0) < 9) {
       $i$1118$i = 10;
       $j$0119$i = $j$0117$i;
       while (1) {
        $578 = $i$1118$i * 10 | 0;
        $j$0119$i = $j$0119$i + 1 | 0;
        if (($j$0119$i | 0) == 9) {
         $i$1$lcssa$i = $578;
         break;
        } else $i$1118$i = $578;
       }
      } else $i$1$lcssa$i = 10;
      $579 = HEAP32[$575 >> 2] | 0;
      $580 = ($579 >>> 0) % ($i$1$lcssa$i >>> 0) | 0;
      $583 = ($575 + 4 | 0) == ($z$3$lcssa$i | 0);
      do if ($583 & ($580 | 0) == 0) {
       $a$8$i = $a$3$lcssa$i;
       $d$4$i = $575;
       $e$4$i = $e$1$i;
      } else {
       $$20$i = ((($579 >>> 0) / ($i$1$lcssa$i >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
       $587 = ($i$1$lcssa$i | 0) / 2 | 0;
       if ($580 >>> 0 < $587 >>> 0) $small$0$i = .5; else $small$0$i = $583 & ($580 | 0) == ($587 | 0) ? 1.0 : 1.5;
       do if (!$pl$0$i) {
        $round6$1$i = $$20$i;
        $small$1$i = $small$0$i;
       } else {
        if ((HEAP8[$prefix$0$i >> 0] | 0) != 45) {
         $round6$1$i = $$20$i;
         $small$1$i = $small$0$i;
         break;
        }
        $round6$1$i = -$$20$i;
        $small$1$i = -$small$0$i;
       } while (0);
       $595 = $579 - $580 | 0;
       HEAP32[$575 >> 2] = $595;
       if (!($round6$1$i + $small$1$i != $round6$1$i)) {
        $a$8$i = $a$3$lcssa$i;
        $d$4$i = $575;
        $e$4$i = $e$1$i;
        break;
       }
       $598 = $595 + $i$1$lcssa$i | 0;
       HEAP32[$575 >> 2] = $598;
       if ($598 >>> 0 > 999999999) {
        $a$5111$i = $a$3$lcssa$i;
        $d$2110$i = $575;
        while (1) {
         $600 = $d$2110$i + -4 | 0;
         HEAP32[$d$2110$i >> 2] = 0;
         if ($600 >>> 0 < $a$5111$i >>> 0) {
          $602 = $a$5111$i + -4 | 0;
          HEAP32[$602 >> 2] = 0;
          $a$6$i = $602;
         } else $a$6$i = $a$5111$i;
         $604 = (HEAP32[$600 >> 2] | 0) + 1 | 0;
         HEAP32[$600 >> 2] = $604;
         if ($604 >>> 0 > 999999999) {
          $a$5111$i = $a$6$i;
          $d$2110$i = $600;
         } else {
          $a$5$lcssa$i = $a$6$i;
          $d$2$lcssa$i = $600;
          break;
         }
        }
       } else {
        $a$5$lcssa$i = $a$3$lcssa$i;
        $d$2$lcssa$i = $575;
       }
       $609 = ($479 - $a$5$lcssa$i >> 2) * 9 | 0;
       $610 = HEAP32[$a$5$lcssa$i >> 2] | 0;
       if ($610 >>> 0 < 10) {
        $a$8$i = $a$5$lcssa$i;
        $d$4$i = $d$2$lcssa$i;
        $e$4$i = $609;
        break;
       } else {
        $e$2106$i = $609;
        $i$2105$i = 10;
       }
       while (1) {
        $i$2105$i = $i$2105$i * 10 | 0;
        $613 = $e$2106$i + 1 | 0;
        if ($610 >>> 0 < $i$2105$i >>> 0) {
         $a$8$i = $a$5$lcssa$i;
         $d$4$i = $d$2$lcssa$i;
         $e$4$i = $613;
         break;
        } else $e$2106$i = $613;
       }
      } while (0);
      $615 = $d$4$i + 4 | 0;
      $a$9$ph$i = $a$8$i;
      $e$5$ph$i = $e$4$i;
      $z$7$ph$i = $z$3$lcssa$i >>> 0 > $615 >>> 0 ? $615 : $z$3$lcssa$i;
     } else {
      $a$9$ph$i = $a$3$lcssa$i;
      $e$5$ph$i = $e$1$i;
      $z$7$ph$i = $z$3$lcssa$i;
     }
     $617 = 0 - $e$5$ph$i | 0;
     $z$7$i = $z$7$ph$i;
     while (1) {
      if ($z$7$i >>> 0 <= $a$9$ph$i >>> 0) {
       $$lcssa162$i = 0;
       $z$7$i$lcssa = $z$7$i;
       break;
      }
      $619 = $z$7$i + -4 | 0;
      if (!(HEAP32[$619 >> 2] | 0)) $z$7$i = $619; else {
       $$lcssa162$i = 1;
       $z$7$i$lcssa = $z$7$i;
       break;
      }
     }
     do if ($561) {
      $$p$$i = ($562 & 1 ^ 1) + $$p$i | 0;
      if (($$p$$i | 0) > ($e$5$ph$i | 0) & ($e$5$ph$i | 0) > -5) {
       $$013$i = $t$0 + -1 | 0;
       $$210$i = $$p$$i + -1 - $e$5$ph$i | 0;
      } else {
       $$013$i = $t$0 + -2 | 0;
       $$210$i = $$p$$i + -1 | 0;
      }
      $630 = $fl$1$ & 8;
      if ($630 | 0) {
       $$114$i = $$013$i;
       $$311$i = $$210$i;
       $$pre$phi190$iZ2D = $630;
       break;
      }
      do if ($$lcssa162$i) {
       $633 = HEAP32[$z$7$i$lcssa + -4 >> 2] | 0;
       if (!$633) {
        $j$2$i = 9;
        break;
       }
       if (!(($633 >>> 0) % 10 | 0)) {
        $i$3101$i = 10;
        $j$1102$i = 0;
       } else {
        $j$2$i = 0;
        break;
       }
       while (1) {
        $i$3101$i = $i$3101$i * 10 | 0;
        $638 = $j$1102$i + 1 | 0;
        if (($633 >>> 0) % ($i$3101$i >>> 0) | 0 | 0) {
         $j$2$i = $638;
         break;
        } else $j$1102$i = $638;
       }
      } else $j$2$i = 9; while (0);
      $647 = (($z$7$i$lcssa - $479 >> 2) * 9 | 0) + -9 | 0;
      if (($$013$i | 32 | 0) == 102) {
       $648 = $647 - $j$2$i | 0;
       $$23$i = ($648 | 0) < 0 ? 0 : $648;
       $$114$i = $$013$i;
       $$311$i = ($$210$i | 0) < ($$23$i | 0) ? $$210$i : $$23$i;
       $$pre$phi190$iZ2D = 0;
       break;
      } else {
       $652 = $647 + $e$5$ph$i - $j$2$i | 0;
       $$25$i = ($652 | 0) < 0 ? 0 : $652;
       $$114$i = $$013$i;
       $$311$i = ($$210$i | 0) < ($$25$i | 0) ? $$210$i : $$25$i;
       $$pre$phi190$iZ2D = 0;
       break;
      }
     } else {
      $$114$i = $t$0;
      $$311$i = $$p$i;
      $$pre$phi190$iZ2D = $fl$1$ & 8;
     } while (0);
     $655 = $$311$i | $$pre$phi190$iZ2D;
     $657 = ($655 | 0) != 0 & 1;
     $659 = ($$114$i | 32 | 0) == 102;
     if ($659) {
      $$pn$i = ($e$5$ph$i | 0) > 0 ? $e$5$ph$i : 0;
      $estr$2$i = 0;
     } else {
      $663 = ($e$5$ph$i | 0) < 0 ? $617 : $e$5$ph$i;
      $666 = _fmt_u($663, (($663 | 0) < 0) << 31 >> 31, $7) | 0;
      if (($9 - $666 | 0) < 2) {
       $estr$195$i = $666;
       while (1) {
        $670 = $estr$195$i + -1 | 0;
        HEAP8[$670 >> 0] = 48;
        if (($9 - $670 | 0) < 2) $estr$195$i = $670; else {
         $estr$1$lcssa$i = $670;
         break;
        }
       }
      } else $estr$1$lcssa$i = $666;
      HEAP8[$estr$1$lcssa$i + -1 >> 0] = ($e$5$ph$i >> 31 & 2) + 43;
      $680 = $estr$1$lcssa$i + -2 | 0;
      HEAP8[$680 >> 0] = $$114$i;
      $$pn$i = $9 - $680 | 0;
      $estr$2$i = $680;
     }
     $685 = $pl$0$i + 1 + $$311$i + $657 + $$pn$i | 0;
     _pad($f, 32, $w$1, $685, $fl$1$);
     if (!(HEAP32[$f >> 2] & 32)) ___fwritex($prefix$0$i, $pl$0$i, $f) | 0;
     _pad($f, 48, $w$1, $685, $fl$1$ ^ 65536);
     do if ($659) {
      $r$0$a$9$i = $a$9$ph$i >>> 0 > $$33$i >>> 0 ? $$33$i : $a$9$ph$i;
      $d$584$i = $r$0$a$9$i;
      while (1) {
       $692 = _fmt_u(HEAP32[$d$584$i >> 2] | 0, 0, $14) | 0;
       do if (($d$584$i | 0) == ($r$0$a$9$i | 0)) {
        if (($692 | 0) != ($14 | 0)) {
         $s7$1$i = $692;
         break;
        }
        HEAP8[$16 >> 0] = 48;
        $s7$1$i = $16;
       } else {
        if ($692 >>> 0 <= $buf$i >>> 0) {
         $s7$1$i = $692;
         break;
        }
        _memset($buf$i | 0, 48, $692 - $5 | 0) | 0;
        $s7$081$i = $692;
        while (1) {
         $697 = $s7$081$i + -1 | 0;
         if ($697 >>> 0 > $buf$i >>> 0) $s7$081$i = $697; else {
          $s7$1$i = $697;
          break;
         }
        }
       } while (0);
       if (!(HEAP32[$f >> 2] & 32)) ___fwritex($s7$1$i, $15 - $s7$1$i | 0, $f) | 0;
       $705 = $d$584$i + 4 | 0;
       if ($705 >>> 0 > $$33$i >>> 0) {
        $$lcssa316 = $705;
        break;
       } else $d$584$i = $705;
      }
      do if ($655 | 0) {
       if (HEAP32[$f >> 2] & 32 | 0) break;
       ___fwritex(gb + 44871 | 0, 1, $f) | 0;
      } while (0);
      if (($$311$i | 0) > 0 & $$lcssa316 >>> 0 < $z$7$i$lcssa >>> 0) {
       $$41278$i = $$311$i;
       $d$677$i = $$lcssa316;
       while (1) {
        $715 = _fmt_u(HEAP32[$d$677$i >> 2] | 0, 0, $14) | 0;
        if ($715 >>> 0 > $buf$i >>> 0) {
         _memset($buf$i | 0, 48, $715 - $5 | 0) | 0;
         $s8$072$i = $715;
         while (1) {
          $719 = $s8$072$i + -1 | 0;
          if ($719 >>> 0 > $buf$i >>> 0) $s8$072$i = $719; else {
           $s8$0$lcssa$i = $719;
           break;
          }
         }
        } else $s8$0$lcssa$i = $715;
        if (!(HEAP32[$f >> 2] & 32)) ___fwritex($s8$0$lcssa$i, ($$41278$i | 0) > 9 ? 9 : $$41278$i, $f) | 0;
        $d$677$i = $d$677$i + 4 | 0;
        $727 = $$41278$i + -9 | 0;
        if (!(($$41278$i | 0) > 9 & $d$677$i >>> 0 < $z$7$i$lcssa >>> 0)) {
         $$412$lcssa$i = $727;
         break;
        } else $$41278$i = $727;
       }
      } else $$412$lcssa$i = $$311$i;
      _pad($f, 48, $$412$lcssa$i + 9 | 0, 9, 0);
     } else {
      $z$7$$i = $$lcssa162$i ? $z$7$i$lcssa : $a$9$ph$i + 4 | 0;
      if (($$311$i | 0) > -1) {
       $734 = ($$pre$phi190$iZ2D | 0) == 0;
       $$589$i = $$311$i;
       $d$788$i = $a$9$ph$i;
       while (1) {
        $736 = _fmt_u(HEAP32[$d$788$i >> 2] | 0, 0, $14) | 0;
        if (($736 | 0) == ($14 | 0)) {
         HEAP8[$16 >> 0] = 48;
         $s9$0$i = $16;
        } else $s9$0$i = $736;
        do if (($d$788$i | 0) == ($a$9$ph$i | 0)) {
         $742 = $s9$0$i + 1 | 0;
         if (!(HEAP32[$f >> 2] & 32)) ___fwritex($s9$0$i, 1, $f) | 0;
         if ($734 & ($$589$i | 0) < 1) {
          $s9$2$i = $742;
          break;
         }
         if (HEAP32[$f >> 2] & 32 | 0) {
          $s9$2$i = $742;
          break;
         }
         ___fwritex(gb + 44871 | 0, 1, $f) | 0;
         $s9$2$i = $742;
        } else {
         if ($s9$0$i >>> 0 <= $buf$i >>> 0) {
          $s9$2$i = $s9$0$i;
          break;
         }
         _memset($buf$i | 0, 48, $s9$0$i + $6 | 0) | 0;
         $s9$185$i = $s9$0$i;
         while (1) {
          $740 = $s9$185$i + -1 | 0;
          if ($740 >>> 0 > $buf$i >>> 0) $s9$185$i = $740; else {
           $s9$2$i = $740;
           break;
          }
         }
        } while (0);
        $751 = $15 - $s9$2$i | 0;
        if (!(HEAP32[$f >> 2] & 32)) ___fwritex($s9$2$i, ($$589$i | 0) > ($751 | 0) ? $751 : $$589$i, $f) | 0;
        $757 = $$589$i - $751 | 0;
        $d$788$i = $d$788$i + 4 | 0;
        if (!($d$788$i >>> 0 < $z$7$$i >>> 0 & ($757 | 0) > -1)) {
         $$5$lcssa$i = $757;
         break;
        } else $$589$i = $757;
       }
      } else $$5$lcssa$i = $$311$i;
      _pad($f, 48, $$5$lcssa$i + 18 | 0, 18, 0);
      if (HEAP32[$f >> 2] & 32 | 0) break;
      ___fwritex($estr$2$i, $9 - $estr$2$i | 0, $f) | 0;
     } while (0);
     _pad($f, 32, $w$1, $685, $fl$1$ ^ 8192);
     $$0$i = ($685 | 0) < ($w$1 | 0) ? $w$1 : $685;
    } else {
     $376 = ($t$0 & 32 | 0) != 0;
     $378 = $$07$i != $$07$i | 0.0 != 0.0;
     $pl$1$i = $378 ? 0 : $pl$0$i;
     $s1$0$i = $378 ? ($376 ? gb + 44867 | 0 : gb + 44854 | 0) : $376 ? gb + 44846 | 0 : gb + 44850 | 0;
     $380 = $pl$1$i + 3 | 0;
     _pad($f, 32, $w$1, $380, $176);
     $381 = HEAP32[$f >> 2] | 0;
     if (!($381 & 32)) {
      ___fwritex($prefix$0$i, $pl$1$i, $f) | 0;
      $385 = HEAP32[$f >> 2] | 0;
     } else $385 = $381;
     if (!($385 & 32)) ___fwritex($s1$0$i, 3, $f) | 0;
     _pad($f, 32, $w$1, $380, $fl$1$ ^ 8192);
     $$0$i = ($380 | 0) < ($w$1 | 0) ? $w$1 : $380;
    } while (0);
    $cnt$0 = $cnt$1;
    $l$0 = $$0$i;
    $l10n$0 = $l10n$3;
    $s$0 = $$lcssa300;
    continue L1;
    break;
   }
  default:
   {
    $a$2 = $s$0;
    $fl$6 = $fl$1$;
    $p$5 = $p$0;
    $pl$2 = 0;
    $prefix$2 = gb + 42918 | 0;
    $z$2 = $1;
   }
  } while (0);
  L311 : do if ((label | 0) == 64) {
   label = 0;
   $207 = $arg;
   $209 = HEAP32[$207 >> 2] | 0;
   $212 = HEAP32[$207 + 4 >> 2] | 0;
   $213 = $t$1 & 32;
   if (($209 | 0) == 0 & ($212 | 0) == 0) {
    $a$0 = $1;
    $fl$4 = $fl$3;
    $p$2 = $p$1;
    $pl$1 = 0;
    $prefix$1 = gb + 42918 | 0;
    label = 77;
   } else {
    $$012$i = $1;
    $218 = $209;
    $225 = $212;
    while (1) {
     $224 = $$012$i + -1 | 0;
     HEAP8[$224 >> 0] = HEAPU8[($218 & 15) + (gb + 42902) >> 0] | $213;
     $218 = _bitshift64Lshr($218 | 0, $225 | 0, 4) | 0;
     $225 = getTempRet0() | 0;
     if (($218 | 0) == 0 & ($225 | 0) == 0) {
      $$lcssa321 = $224;
      break;
     } else $$012$i = $224;
    }
    $231 = $arg;
    if (($fl$3 & 8 | 0) == 0 | (HEAP32[$231 >> 2] | 0) == 0 & (HEAP32[$231 + 4 >> 2] | 0) == 0) {
     $a$0 = $$lcssa321;
     $fl$4 = $fl$3;
     $p$2 = $p$1;
     $pl$1 = 0;
     $prefix$1 = gb + 42918 | 0;
     label = 77;
    } else {
     $a$0 = $$lcssa321;
     $fl$4 = $fl$3;
     $p$2 = $p$1;
     $pl$1 = 2;
     $prefix$1 = ($t$1 >> 4) + (gb + 42918) | 0;
     label = 77;
    }
   }
  } else if ((label | 0) == 76) {
   label = 0;
   $a$0 = _fmt_u($287, $288, $1) | 0;
   $fl$4 = $fl$1$;
   $p$2 = $p$0;
   $pl$1 = $pl$0;
   $prefix$1 = $prefix$0;
   label = 77;
  } else if ((label | 0) == 82) {
   label = 0;
   $321 = _memchr($a$1, 0, $p$0) | 0;
   $322 = ($321 | 0) == 0;
   $a$2 = $a$1;
   $fl$6 = $176;
   $p$5 = $322 ? $p$0 : $321 - $a$1 | 0;
   $pl$2 = 0;
   $prefix$2 = gb + 42918 | 0;
   $z$2 = $322 ? $a$1 + $p$0 | 0 : $321;
  } else if ((label | 0) == 86) {
   label = 0;
   $i$0105 = 0;
   $l$1104 = 0;
   $ws$0106 = $798;
   while (1) {
    $334 = HEAP32[$ws$0106 >> 2] | 0;
    if (!$334) {
     $i$0$lcssa = $i$0105;
     $l$2 = $l$1104;
     break;
    }
    $336 = _wctomb($mb, $334) | 0;
    if (($336 | 0) < 0 | $336 >>> 0 > ($p$4176 - $i$0105 | 0) >>> 0) {
     $i$0$lcssa = $i$0105;
     $l$2 = $336;
     break;
    }
    $341 = $336 + $i$0105 | 0;
    if ($p$4176 >>> 0 > $341 >>> 0) {
     $i$0105 = $341;
     $l$1104 = $336;
     $ws$0106 = $ws$0106 + 4 | 0;
    } else {
     $i$0$lcssa = $341;
     $l$2 = $336;
     break;
    }
   }
   if (($l$2 | 0) < 0) {
    $$0 = -1;
    break L1;
   }
   _pad($f, 32, $w$1, $i$0$lcssa, $fl$1$);
   if (!$i$0$lcssa) {
    $i$0$lcssa178 = 0;
    label = 97;
   } else {
    $i$1116 = 0;
    $ws$1117 = $798;
    while (1) {
     $345 = HEAP32[$ws$1117 >> 2] | 0;
     if (!$345) {
      $i$0$lcssa178 = $i$0$lcssa;
      label = 97;
      break L311;
     }
     $348 = _wctomb($mb, $345) | 0;
     $i$1116 = $348 + $i$1116 | 0;
     if (($i$1116 | 0) > ($i$0$lcssa | 0)) {
      $i$0$lcssa178 = $i$0$lcssa;
      label = 97;
      break L311;
     }
     if (!(HEAP32[$f >> 2] & 32)) ___fwritex($mb, $348, $f) | 0;
     if ($i$1116 >>> 0 >= $i$0$lcssa >>> 0) {
      $i$0$lcssa178 = $i$0$lcssa;
      label = 97;
      break;
     } else $ws$1117 = $ws$1117 + 4 | 0;
    }
   }
  } while (0);
  if ((label | 0) == 97) {
   label = 0;
   _pad($f, 32, $w$1, $i$0$lcssa178, $fl$1$ ^ 8192);
   $cnt$0 = $cnt$1;
   $l$0 = ($w$1 | 0) > ($i$0$lcssa178 | 0) ? $w$1 : $i$0$lcssa178;
   $l10n$0 = $l10n$3;
   $s$0 = $$lcssa300;
   continue;
  }
  if ((label | 0) == 77) {
   label = 0;
   $$fl$4 = ($p$2 | 0) > -1 ? $fl$4 & -65537 : $fl$4;
   $292 = $arg;
   $300 = (HEAP32[$292 >> 2] | 0) != 0 | (HEAP32[$292 + 4 >> 2] | 0) != 0;
   if (($p$2 | 0) != 0 | $300) {
    $306 = ($300 & 1 ^ 1) + ($2 - $a$0) | 0;
    $a$2 = $a$0;
    $fl$6 = $$fl$4;
    $p$5 = ($p$2 | 0) > ($306 | 0) ? $p$2 : $306;
    $pl$2 = $pl$1;
    $prefix$2 = $prefix$1;
    $z$2 = $1;
   } else {
    $a$2 = $1;
    $fl$6 = $$fl$4;
    $p$5 = 0;
    $pl$2 = $pl$1;
    $prefix$2 = $prefix$1;
    $z$2 = $1;
   }
  }
  $772 = $z$2 - $a$2 | 0;
  $$p$5 = ($p$5 | 0) < ($772 | 0) ? $772 : $p$5;
  $774 = $pl$2 + $$p$5 | 0;
  $w$2 = ($w$1 | 0) < ($774 | 0) ? $774 : $w$1;
  _pad($f, 32, $w$2, $774, $fl$6);
  if (!(HEAP32[$f >> 2] & 32)) ___fwritex($prefix$2, $pl$2, $f) | 0;
  _pad($f, 48, $w$2, $774, $fl$6 ^ 65536);
  _pad($f, 48, $$p$5, $772, 0);
  if (!(HEAP32[$f >> 2] & 32)) ___fwritex($a$2, $772, $f) | 0;
  _pad($f, 32, $w$2, $774, $fl$6 ^ 8192);
  $cnt$0 = $cnt$1;
  $l$0 = $w$2;
  $l10n$0 = $l10n$3;
  $s$0 = $$lcssa300;
 }
 L345 : do if ((label | 0) == 244) if (!$f) if (!$l10n$0$lcssa) $$0 = 0; else {
  $i$291 = 1;
  while (1) {
   $787 = HEAP32[$nl_type + ($i$291 << 2) >> 2] | 0;
   if (!$787) {
    $i$291$lcssa = $i$291;
    break;
   }
   _pop_arg($nl_arg + ($i$291 << 3) | 0, $787, $ap);
   $i$291 = $i$291 + 1 | 0;
   if (($i$291 | 0) >= 10) {
    $$0 = 1;
    break L345;
   }
  }
  if (($i$291$lcssa | 0) < 10) {
   $i$389 = $i$291$lcssa;
   while (1) {
    if (HEAP32[$nl_type + ($i$389 << 2) >> 2] | 0) {
     $$0 = -1;
     break L345;
    }
    $i$389 = $i$389 + 1 | 0;
    if (($i$389 | 0) >= 10) {
     $$0 = 1;
     break;
    }
   }
  } else $$0 = 1;
 } else $$0 = $cnt$1$lcssa; while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _modem_create($_scheme) {
 $_scheme = $_scheme | 0;
 var $$0 = 0, $$lcssa = 0, $$lcssa181 = 0, $$lcssa182 = 0, $$lcssa183 = 0, $$lcssa184 = 0, $$lcssa185 = 0, $$lcssa186 = 0, $$pre4$i14$pre = 0, $$pre4$i22$pre = 0, $$pre4$i30$pre = 0, $$pre4$i38$pre = 0, $$pre4$i46$pre = 0, $$pre4$i54$pre = 0, $$pre4$i6$pre = 0, $100 = 0, $105 = 0, $124 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $138 = 0, $157 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $171 = 0, $190 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $204 = 0, $223 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $237 = 0, $25 = 0, $256 = 0, $261 = 0, $272 = 0, $275 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $281 = 0, $284 = 0, $289 = 0, $29 = 0, $30 = 0, $300 = 0, $303 = 0, $305 = 0, $306 = 0, $307 = 0, $309 = 0, $31 = 0, $312 = 0, $317 = 0, $32 = 0, $328 = 0, $33 = 0, $331 = 0, $333 = 0, $334 = 0, $335 = 0, $337 = 0, $34 = 0, $340 = 0, $345 = 0, $356 = 0, $359 = 0, $361 = 0, $362 = 0, $363 = 0, $365 = 0, $368 = 0, $373 = 0, $384 = 0, $387 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $393 = 0, $396 = 0, $401 = 0, $412 = 0, $415 = 0, $417 = 0, $418 = 0, $419 = 0, $421 = 0, $424 = 0, $429 = 0, $440 = 0, $443 = 0, $445 = 0, $446 = 0, $447 = 0, $449 = 0, $452 = 0, $457 = 0, $490 = 0, $495 = 0, $504 = 0, $509 = 0, $518 = 0, $523 = 0, $532 = 0, $537 = 0, $538 = 0, $548 = 0, $553 = 0, $554 = 0, $564 = 0, $569 = 0, $572 = 0, $577 = 0, $58 = 0, $580 = 0, $585 = 0, $588 = 0, $593 = 0, $596 = 0, $601 = 0, $604 = 0, $609 = 0, $61 = 0, $612 = 0, $617 = 0, $62 = 0, $620 = 0, $625 = 0, $629 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $72 = 0, $8 = 0, $91 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 do switch ($_scheme | 0) {
 case 1:
  {
   $$0 = _modem_create_psk(1) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 2:
  {
   $$0 = _modem_create_psk(2) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 3:
  {
   $$0 = _modem_create_psk(3) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 4:
  {
   $$0 = _modem_create_psk(4) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 5:
  {
   $$0 = _modem_create_psk(5) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 6:
  {
   $$0 = _modem_create_psk(6) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 7:
  {
   $$0 = _modem_create_psk(7) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 8:
  {
   $$0 = _modem_create_psk(8) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 9:
  {
   $8 = _malloc(252) | 0;
   HEAP32[$8 >> 2] = 9;
   HEAP32[$8 + 76 >> 2] = 0;
   HEAP32[$8 + 80 >> 2] = 0;
   HEAP32[$8 + 4 >> 2] = 1;
   HEAP32[$8 + 8 >> 2] = 2;
   $13 = $8 + 236 | 0;
   HEAP32[$13 >> 2] = 0;
   HEAP32[$13 + 4 >> 2] = 0;
   HEAP32[$13 + 8 >> 2] = 0;
   HEAP32[$13 + 12 >> 2] = 0;
   HEAPF32[$8 + 108 >> 2] = 1.5707963705062866;
   $16 = $8 + 104 | 0;
   HEAPF32[$16 >> 2] = 0.0;
   HEAPF32[$8 + 12 >> 2] = 1.5707963705062866;
   HEAPF32[$8 + 100 >> 2] = 1.5707963705062866;
   HEAP32[$13 >> 2] = fb + 1;
   HEAP32[$8 + 240 >> 2] = fb + 2;
   HEAPF32[$8 + 84 >> 2] = 1.0;
   HEAPF32[$8 + 88 >> 2] = 0.0;
   HEAP32[$8 + 92 >> 2] = 1065353216;
   HEAPF32[$8 + 96 >> 2] = 0.0;
   if (!(_liquid_modem_is_dpsk(9) | 0)) {
    $$0 = $8;
    STACKTOP = sp;
    return $$0 | 0;
   }
   HEAPF32[$16 >> 2] = 0.0;
   $$0 = $8;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 10:
  {
   $25 = _malloc(252) | 0;
   HEAP32[$25 >> 2] = 10;
   HEAP32[$25 + 76 >> 2] = 0;
   HEAP32[$25 + 80 >> 2] = 0;
   $28 = $25 + 4 | 0;
   HEAP32[$28 >> 2] = 2;
   $29 = $25 + 8 | 0;
   HEAP32[$29 >> 2] = 4;
   $30 = $25 + 236 | 0;
   HEAP32[$30 >> 2] = 0;
   HEAP32[$30 + 4 >> 2] = 0;
   HEAP32[$30 + 8 >> 2] = 0;
   HEAP32[$30 + 12 >> 2] = 0;
   $31 = $25 + 100 | 0;
   $32 = $25 + 108 | 0;
   HEAPF32[$32 >> 2] = .7853981852531433;
   $33 = $25 + 104 | 0;
   HEAPF32[$33 >> 2] = 0.0;
   $34 = $25 + 12 | 0;
   HEAPF32[$34 >> 2] = .7853981852531433;
   HEAPF32[$25 + 16 >> 2] = 1.5707963705062866;
   if ((HEAP32[$28 >> 2] | 0) >>> 0 > 2) {
    $39 = 2;
    do {
     HEAPF32[$34 + ($39 << 2) >> 2] = +HEAPF32[$32 >> 2] * +(1 << $39 | 0);
     $39 = $39 + 1 | 0;
    } while ($39 >>> 0 < (HEAP32[$28 >> 2] | 0) >>> 0);
   }
   $$pre4$i6$pre = HEAP32[$25 >> 2] | 0;
   HEAPF32[$31 >> 2] = (1.0 - 1.0 / +((HEAP32[$29 >> 2] | 0) >>> 0)) * 3.141592653589793;
   HEAP32[$30 >> 2] = fb + 1;
   HEAP32[$25 + 240 >> 2] = fb + 2;
   HEAPF32[$25 + 84 >> 2] = 1.0;
   HEAPF32[$25 + 88 >> 2] = 0.0;
   HEAP32[$25 + 92 >> 2] = 1065353216;
   HEAPF32[$25 + 96 >> 2] = 0.0;
   if (!(_liquid_modem_is_dpsk($$pre4$i6$pre) | 0)) {
    $$0 = $25;
    STACKTOP = sp;
    return $$0 | 0;
   }
   HEAPF32[$33 >> 2] = 0.0;
   $$0 = $25;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 11:
  {
   $58 = _malloc(252) | 0;
   HEAP32[$58 >> 2] = 11;
   HEAP32[$58 + 76 >> 2] = 0;
   HEAP32[$58 + 80 >> 2] = 0;
   $61 = $58 + 4 | 0;
   HEAP32[$61 >> 2] = 3;
   $62 = $58 + 8 | 0;
   HEAP32[$62 >> 2] = 8;
   $63 = $58 + 236 | 0;
   HEAP32[$63 >> 2] = 0;
   HEAP32[$63 + 4 >> 2] = 0;
   HEAP32[$63 + 8 >> 2] = 0;
   HEAP32[$63 + 12 >> 2] = 0;
   $64 = $58 + 100 | 0;
   $65 = $58 + 108 | 0;
   HEAPF32[$65 >> 2] = .39269909262657166;
   $66 = $58 + 104 | 0;
   HEAPF32[$66 >> 2] = 0.0;
   $67 = $58 + 12 | 0;
   HEAPF32[$67 >> 2] = .39269909262657166;
   HEAPF32[$58 + 16 >> 2] = .7853981852531433;
   if ((HEAP32[$61 >> 2] | 0) >>> 0 > 2) {
    $72 = 2;
    do {
     HEAPF32[$67 + ($72 << 2) >> 2] = +HEAPF32[$65 >> 2] * +(1 << $72 | 0);
     $72 = $72 + 1 | 0;
    } while ($72 >>> 0 < (HEAP32[$61 >> 2] | 0) >>> 0);
   }
   $$pre4$i14$pre = HEAP32[$58 >> 2] | 0;
   HEAPF32[$64 >> 2] = (1.0 - 1.0 / +((HEAP32[$62 >> 2] | 0) >>> 0)) * 3.141592653589793;
   HEAP32[$63 >> 2] = fb + 1;
   HEAP32[$58 + 240 >> 2] = fb + 2;
   HEAPF32[$58 + 84 >> 2] = 1.0;
   HEAPF32[$58 + 88 >> 2] = 0.0;
   HEAP32[$58 + 92 >> 2] = 1065353216;
   HEAPF32[$58 + 96 >> 2] = 0.0;
   if (!(_liquid_modem_is_dpsk($$pre4$i14$pre) | 0)) {
    $$0 = $58;
    STACKTOP = sp;
    return $$0 | 0;
   }
   HEAPF32[$66 >> 2] = 0.0;
   $$0 = $58;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 12:
  {
   $91 = _malloc(252) | 0;
   HEAP32[$91 >> 2] = 12;
   HEAP32[$91 + 76 >> 2] = 0;
   HEAP32[$91 + 80 >> 2] = 0;
   $94 = $91 + 4 | 0;
   HEAP32[$94 >> 2] = 4;
   $95 = $91 + 8 | 0;
   HEAP32[$95 >> 2] = 16;
   $96 = $91 + 236 | 0;
   HEAP32[$96 >> 2] = 0;
   HEAP32[$96 + 4 >> 2] = 0;
   HEAP32[$96 + 8 >> 2] = 0;
   HEAP32[$96 + 12 >> 2] = 0;
   $97 = $91 + 100 | 0;
   $98 = $91 + 108 | 0;
   HEAPF32[$98 >> 2] = .19634954631328583;
   $99 = $91 + 104 | 0;
   HEAPF32[$99 >> 2] = 0.0;
   $100 = $91 + 12 | 0;
   HEAPF32[$100 >> 2] = .19634954631328583;
   HEAPF32[$91 + 16 >> 2] = .39269909262657166;
   if ((HEAP32[$94 >> 2] | 0) >>> 0 > 2) {
    $105 = 2;
    do {
     HEAPF32[$100 + ($105 << 2) >> 2] = +HEAPF32[$98 >> 2] * +(1 << $105 | 0);
     $105 = $105 + 1 | 0;
    } while ($105 >>> 0 < (HEAP32[$94 >> 2] | 0) >>> 0);
   }
   $$pre4$i22$pre = HEAP32[$91 >> 2] | 0;
   HEAPF32[$97 >> 2] = (1.0 - 1.0 / +((HEAP32[$95 >> 2] | 0) >>> 0)) * 3.141592653589793;
   HEAP32[$96 >> 2] = fb + 1;
   HEAP32[$91 + 240 >> 2] = fb + 2;
   HEAPF32[$91 + 84 >> 2] = 1.0;
   HEAPF32[$91 + 88 >> 2] = 0.0;
   HEAP32[$91 + 92 >> 2] = 1065353216;
   HEAPF32[$91 + 96 >> 2] = 0.0;
   if (!(_liquid_modem_is_dpsk($$pre4$i22$pre) | 0)) {
    $$0 = $91;
    STACKTOP = sp;
    return $$0 | 0;
   }
   HEAPF32[$99 >> 2] = 0.0;
   $$0 = $91;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 13:
  {
   $124 = _malloc(252) | 0;
   HEAP32[$124 >> 2] = 13;
   HEAP32[$124 + 76 >> 2] = 0;
   HEAP32[$124 + 80 >> 2] = 0;
   $127 = $124 + 4 | 0;
   HEAP32[$127 >> 2] = 5;
   $128 = $124 + 8 | 0;
   HEAP32[$128 >> 2] = 32;
   $129 = $124 + 236 | 0;
   HEAP32[$129 >> 2] = 0;
   HEAP32[$129 + 4 >> 2] = 0;
   HEAP32[$129 + 8 >> 2] = 0;
   HEAP32[$129 + 12 >> 2] = 0;
   $130 = $124 + 100 | 0;
   $131 = $124 + 108 | 0;
   HEAPF32[$131 >> 2] = .09817477315664291;
   $132 = $124 + 104 | 0;
   HEAPF32[$132 >> 2] = 0.0;
   $133 = $124 + 12 | 0;
   HEAPF32[$133 >> 2] = .09817477315664291;
   HEAPF32[$124 + 16 >> 2] = .19634954631328583;
   if ((HEAP32[$127 >> 2] | 0) >>> 0 > 2) {
    $138 = 2;
    do {
     HEAPF32[$133 + ($138 << 2) >> 2] = +HEAPF32[$131 >> 2] * +(1 << $138 | 0);
     $138 = $138 + 1 | 0;
    } while ($138 >>> 0 < (HEAP32[$127 >> 2] | 0) >>> 0);
   }
   $$pre4$i30$pre = HEAP32[$124 >> 2] | 0;
   HEAPF32[$130 >> 2] = (1.0 - 1.0 / +((HEAP32[$128 >> 2] | 0) >>> 0)) * 3.141592653589793;
   HEAP32[$129 >> 2] = fb + 1;
   HEAP32[$124 + 240 >> 2] = fb + 2;
   HEAPF32[$124 + 84 >> 2] = 1.0;
   HEAPF32[$124 + 88 >> 2] = 0.0;
   HEAP32[$124 + 92 >> 2] = 1065353216;
   HEAPF32[$124 + 96 >> 2] = 0.0;
   if (!(_liquid_modem_is_dpsk($$pre4$i30$pre) | 0)) {
    $$0 = $124;
    STACKTOP = sp;
    return $$0 | 0;
   }
   HEAPF32[$132 >> 2] = 0.0;
   $$0 = $124;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 14:
  {
   $157 = _malloc(252) | 0;
   HEAP32[$157 >> 2] = 14;
   HEAP32[$157 + 76 >> 2] = 0;
   HEAP32[$157 + 80 >> 2] = 0;
   $160 = $157 + 4 | 0;
   HEAP32[$160 >> 2] = 6;
   $161 = $157 + 8 | 0;
   HEAP32[$161 >> 2] = 64;
   $162 = $157 + 236 | 0;
   HEAP32[$162 >> 2] = 0;
   HEAP32[$162 + 4 >> 2] = 0;
   HEAP32[$162 + 8 >> 2] = 0;
   HEAP32[$162 + 12 >> 2] = 0;
   $163 = $157 + 100 | 0;
   $164 = $157 + 108 | 0;
   HEAPF32[$164 >> 2] = .04908738657832146;
   $165 = $157 + 104 | 0;
   HEAPF32[$165 >> 2] = 0.0;
   $166 = $157 + 12 | 0;
   HEAPF32[$166 >> 2] = .04908738657832146;
   HEAPF32[$157 + 16 >> 2] = .09817477315664291;
   if ((HEAP32[$160 >> 2] | 0) >>> 0 > 2) {
    $171 = 2;
    do {
     HEAPF32[$166 + ($171 << 2) >> 2] = +HEAPF32[$164 >> 2] * +(1 << $171 | 0);
     $171 = $171 + 1 | 0;
    } while ($171 >>> 0 < (HEAP32[$160 >> 2] | 0) >>> 0);
   }
   $$pre4$i38$pre = HEAP32[$157 >> 2] | 0;
   HEAPF32[$163 >> 2] = (1.0 - 1.0 / +((HEAP32[$161 >> 2] | 0) >>> 0)) * 3.141592653589793;
   HEAP32[$162 >> 2] = fb + 1;
   HEAP32[$157 + 240 >> 2] = fb + 2;
   HEAPF32[$157 + 84 >> 2] = 1.0;
   HEAPF32[$157 + 88 >> 2] = 0.0;
   HEAP32[$157 + 92 >> 2] = 1065353216;
   HEAPF32[$157 + 96 >> 2] = 0.0;
   if (!(_liquid_modem_is_dpsk($$pre4$i38$pre) | 0)) {
    $$0 = $157;
    STACKTOP = sp;
    return $$0 | 0;
   }
   HEAPF32[$165 >> 2] = 0.0;
   $$0 = $157;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 15:
  {
   $190 = _malloc(252) | 0;
   HEAP32[$190 >> 2] = 15;
   HEAP32[$190 + 76 >> 2] = 0;
   HEAP32[$190 + 80 >> 2] = 0;
   $193 = $190 + 4 | 0;
   HEAP32[$193 >> 2] = 7;
   $194 = $190 + 8 | 0;
   HEAP32[$194 >> 2] = 128;
   $195 = $190 + 236 | 0;
   HEAP32[$195 >> 2] = 0;
   HEAP32[$195 + 4 >> 2] = 0;
   HEAP32[$195 + 8 >> 2] = 0;
   HEAP32[$195 + 12 >> 2] = 0;
   $196 = $190 + 100 | 0;
   $197 = $190 + 108 | 0;
   HEAPF32[$197 >> 2] = .02454369328916073;
   $198 = $190 + 104 | 0;
   HEAPF32[$198 >> 2] = 0.0;
   $199 = $190 + 12 | 0;
   HEAPF32[$199 >> 2] = .02454369328916073;
   HEAPF32[$190 + 16 >> 2] = .04908738657832146;
   if ((HEAP32[$193 >> 2] | 0) >>> 0 > 2) {
    $204 = 2;
    do {
     HEAPF32[$199 + ($204 << 2) >> 2] = +HEAPF32[$197 >> 2] * +(1 << $204 | 0);
     $204 = $204 + 1 | 0;
    } while ($204 >>> 0 < (HEAP32[$193 >> 2] | 0) >>> 0);
   }
   $$pre4$i46$pre = HEAP32[$190 >> 2] | 0;
   HEAPF32[$196 >> 2] = (1.0 - 1.0 / +((HEAP32[$194 >> 2] | 0) >>> 0)) * 3.141592653589793;
   HEAP32[$195 >> 2] = fb + 1;
   HEAP32[$190 + 240 >> 2] = fb + 2;
   HEAPF32[$190 + 84 >> 2] = 1.0;
   HEAPF32[$190 + 88 >> 2] = 0.0;
   HEAP32[$190 + 92 >> 2] = 1065353216;
   HEAPF32[$190 + 96 >> 2] = 0.0;
   if (!(_liquid_modem_is_dpsk($$pre4$i46$pre) | 0)) {
    $$0 = $190;
    STACKTOP = sp;
    return $$0 | 0;
   }
   HEAPF32[$198 >> 2] = 0.0;
   $$0 = $190;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 16:
  {
   $223 = _malloc(252) | 0;
   HEAP32[$223 >> 2] = 16;
   HEAP32[$223 + 76 >> 2] = 0;
   HEAP32[$223 + 80 >> 2] = 0;
   $226 = $223 + 4 | 0;
   HEAP32[$226 >> 2] = 8;
   $227 = $223 + 8 | 0;
   HEAP32[$227 >> 2] = 256;
   $228 = $223 + 236 | 0;
   HEAP32[$228 >> 2] = 0;
   HEAP32[$228 + 4 >> 2] = 0;
   HEAP32[$228 + 8 >> 2] = 0;
   HEAP32[$228 + 12 >> 2] = 0;
   $229 = $223 + 100 | 0;
   $230 = $223 + 108 | 0;
   HEAPF32[$230 >> 2] = .012271846644580364;
   $231 = $223 + 104 | 0;
   HEAPF32[$231 >> 2] = 0.0;
   $232 = $223 + 12 | 0;
   HEAPF32[$232 >> 2] = .012271846644580364;
   HEAPF32[$223 + 16 >> 2] = .02454369328916073;
   if ((HEAP32[$226 >> 2] | 0) >>> 0 > 2) {
    $237 = 2;
    do {
     HEAPF32[$232 + ($237 << 2) >> 2] = +HEAPF32[$230 >> 2] * +(1 << $237 | 0);
     $237 = $237 + 1 | 0;
    } while ($237 >>> 0 < (HEAP32[$226 >> 2] | 0) >>> 0);
   }
   $$pre4$i54$pre = HEAP32[$223 >> 2] | 0;
   HEAPF32[$229 >> 2] = (1.0 - 1.0 / +((HEAP32[$227 >> 2] | 0) >>> 0)) * 3.141592653589793;
   HEAP32[$228 >> 2] = fb + 1;
   HEAP32[$223 + 240 >> 2] = fb + 2;
   HEAPF32[$223 + 84 >> 2] = 1.0;
   HEAPF32[$223 + 88 >> 2] = 0.0;
   HEAP32[$223 + 92 >> 2] = 1065353216;
   HEAPF32[$223 + 96 >> 2] = 0.0;
   if (!(_liquid_modem_is_dpsk($$pre4$i54$pre) | 0)) {
    $$0 = $223;
    STACKTOP = sp;
    return $$0 | 0;
   }
   HEAPF32[$231 >> 2] = 0.0;
   $$0 = $223;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 17:
  {
   $256 = _malloc(252) | 0;
   HEAP32[$256 + 76 >> 2] = 0;
   HEAP32[$256 + 80 >> 2] = 0;
   HEAP32[$256 + 4 >> 2] = 1;
   HEAP32[$256 + 8 >> 2] = 2;
   $261 = $256 + 236 | 0;
   HEAP32[$261 >> 2] = 0;
   HEAP32[$261 + 4 >> 2] = 0;
   HEAP32[$261 + 8 >> 2] = 0;
   HEAP32[$261 + 12 >> 2] = 0;
   HEAPF32[$256 + 100 >> 2] = 1.0;
   HEAP32[$256 >> 2] = 17;
   HEAPF32[$256 + 12 >> 2] = 1.0;
   HEAP32[$261 >> 2] = fb + 3;
   HEAP32[$256 + 240 >> 2] = fb + 4;
   HEAPF32[$256 + 84 >> 2] = 1.0;
   HEAPF32[$256 + 88 >> 2] = 0.0;
   HEAP32[$256 + 92 >> 2] = 1065353216;
   HEAPF32[$256 + 96 >> 2] = 0.0;
   if (!(_liquid_modem_is_dpsk(17) | 0)) {
    $$0 = $256;
    STACKTOP = sp;
    return $$0 | 0;
   }
   HEAPF32[$256 + 104 >> 2] = 0.0;
   $$0 = $256;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 18:
  {
   $272 = _malloc(252) | 0;
   HEAP32[$272 + 76 >> 2] = 0;
   HEAP32[$272 + 80 >> 2] = 0;
   $275 = $272 + 4 | 0;
   HEAP32[$275 >> 2] = 2;
   HEAP32[$272 + 8 >> 2] = 4;
   $277 = $272 + 236 | 0;
   HEAP32[$277 >> 2] = 0;
   HEAP32[$277 + 4 >> 2] = 0;
   HEAP32[$277 + 8 >> 2] = 0;
   HEAP32[$277 + 12 >> 2] = 0;
   $278 = $272 + 100 | 0;
   HEAPF32[$278 >> 2] = .4472135901451111;
   HEAP32[$272 >> 2] = 18;
   $279 = $272 + 12 | 0;
   HEAPF32[$279 >> 2] = .4472135901451111;
   HEAPF32[$272 + 16 >> 2] = .8944271802902222;
   $281 = HEAP32[$275 >> 2] | 0;
   if ($281 >>> 0 > 2) {
    $284 = 2;
    do {
     HEAPF32[$279 + ($284 << 2) >> 2] = +HEAPF32[$278 >> 2] * +(1 << $284 | 0);
     $284 = $284 + 1 | 0;
     $289 = HEAP32[$275 >> 2] | 0;
    } while ($284 >>> 0 < $289 >>> 0);
    $$lcssa = $289;
   } else $$lcssa = $281;
   HEAP32[$277 >> 2] = fb + 3;
   HEAP32[$272 + 240 >> 2] = fb + 4;
   if (($$lcssa + -2 | 0) >>> 0 < 6) _modem_demodsoft_gentab($272, 2);
   HEAPF32[$272 + 84 >> 2] = 1.0;
   HEAPF32[$272 + 88 >> 2] = 0.0;
   HEAP32[$272 + 92 >> 2] = 1065353216;
   HEAPF32[$272 + 96 >> 2] = 0.0;
   if (!(_liquid_modem_is_dpsk(HEAP32[$272 >> 2] | 0) | 0)) {
    $$0 = $272;
    STACKTOP = sp;
    return $$0 | 0;
   }
   HEAPF32[$272 + 104 >> 2] = 0.0;
   $$0 = $272;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 19:
  {
   $300 = _malloc(252) | 0;
   HEAP32[$300 + 76 >> 2] = 0;
   HEAP32[$300 + 80 >> 2] = 0;
   $303 = $300 + 4 | 0;
   HEAP32[$303 >> 2] = 3;
   HEAP32[$300 + 8 >> 2] = 8;
   $305 = $300 + 236 | 0;
   HEAP32[$305 >> 2] = 0;
   HEAP32[$305 + 4 >> 2] = 0;
   HEAP32[$305 + 8 >> 2] = 0;
   HEAP32[$305 + 12 >> 2] = 0;
   $306 = $300 + 100 | 0;
   HEAPF32[$306 >> 2] = .2182178944349289;
   HEAP32[$300 >> 2] = 19;
   $307 = $300 + 12 | 0;
   HEAPF32[$307 >> 2] = .2182178944349289;
   HEAPF32[$300 + 16 >> 2] = .4364357888698578;
   $309 = HEAP32[$303 >> 2] | 0;
   if ($309 >>> 0 > 2) {
    $312 = 2;
    do {
     HEAPF32[$307 + ($312 << 2) >> 2] = +HEAPF32[$306 >> 2] * +(1 << $312 | 0);
     $312 = $312 + 1 | 0;
     $317 = HEAP32[$303 >> 2] | 0;
    } while ($312 >>> 0 < $317 >>> 0);
    $$lcssa181 = $317;
   } else $$lcssa181 = $309;
   HEAP32[$305 >> 2] = fb + 3;
   HEAP32[$300 + 240 >> 2] = fb + 4;
   if (($$lcssa181 + -2 | 0) >>> 0 < 6) _modem_demodsoft_gentab($300, 2);
   HEAPF32[$300 + 84 >> 2] = 1.0;
   HEAPF32[$300 + 88 >> 2] = 0.0;
   HEAP32[$300 + 92 >> 2] = 1065353216;
   HEAPF32[$300 + 96 >> 2] = 0.0;
   if (!(_liquid_modem_is_dpsk(HEAP32[$300 >> 2] | 0) | 0)) {
    $$0 = $300;
    STACKTOP = sp;
    return $$0 | 0;
   }
   HEAPF32[$300 + 104 >> 2] = 0.0;
   $$0 = $300;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 20:
  {
   $328 = _malloc(252) | 0;
   HEAP32[$328 + 76 >> 2] = 0;
   HEAP32[$328 + 80 >> 2] = 0;
   $331 = $328 + 4 | 0;
   HEAP32[$331 >> 2] = 4;
   HEAP32[$328 + 8 >> 2] = 16;
   $333 = $328 + 236 | 0;
   HEAP32[$333 >> 2] = 0;
   HEAP32[$333 + 4 >> 2] = 0;
   HEAP32[$333 + 8 >> 2] = 0;
   HEAP32[$333 + 12 >> 2] = 0;
   $334 = $328 + 100 | 0;
   HEAPF32[$334 >> 2] = .10846523195505142;
   HEAP32[$328 >> 2] = 20;
   $335 = $328 + 12 | 0;
   HEAPF32[$335 >> 2] = .10846523195505142;
   HEAPF32[$328 + 16 >> 2] = .21693046391010284;
   $337 = HEAP32[$331 >> 2] | 0;
   if ($337 >>> 0 > 2) {
    $340 = 2;
    do {
     HEAPF32[$335 + ($340 << 2) >> 2] = +HEAPF32[$334 >> 2] * +(1 << $340 | 0);
     $340 = $340 + 1 | 0;
     $345 = HEAP32[$331 >> 2] | 0;
    } while ($340 >>> 0 < $345 >>> 0);
    $$lcssa182 = $345;
   } else $$lcssa182 = $337;
   HEAP32[$333 >> 2] = fb + 3;
   HEAP32[$328 + 240 >> 2] = fb + 4;
   if (($$lcssa182 + -2 | 0) >>> 0 < 6) _modem_demodsoft_gentab($328, 2);
   HEAPF32[$328 + 84 >> 2] = 1.0;
   HEAPF32[$328 + 88 >> 2] = 0.0;
   HEAP32[$328 + 92 >> 2] = 1065353216;
   HEAPF32[$328 + 96 >> 2] = 0.0;
   if (!(_liquid_modem_is_dpsk(HEAP32[$328 >> 2] | 0) | 0)) {
    $$0 = $328;
    STACKTOP = sp;
    return $$0 | 0;
   }
   HEAPF32[$328 + 104 >> 2] = 0.0;
   $$0 = $328;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 21:
  {
   $356 = _malloc(252) | 0;
   HEAP32[$356 + 76 >> 2] = 0;
   HEAP32[$356 + 80 >> 2] = 0;
   $359 = $356 + 4 | 0;
   HEAP32[$359 >> 2] = 5;
   HEAP32[$356 + 8 >> 2] = 32;
   $361 = $356 + 236 | 0;
   HEAP32[$361 >> 2] = 0;
   HEAP32[$361 + 4 >> 2] = 0;
   HEAP32[$361 + 8 >> 2] = 0;
   HEAP32[$361 + 12 >> 2] = 0;
   $362 = $356 + 100 | 0;
   HEAPF32[$362 >> 2] = .05415303632616997;
   HEAP32[$356 >> 2] = 21;
   $363 = $356 + 12 | 0;
   HEAPF32[$363 >> 2] = .05415303632616997;
   HEAPF32[$356 + 16 >> 2] = .10830607265233994;
   $365 = HEAP32[$359 >> 2] | 0;
   if ($365 >>> 0 > 2) {
    $368 = 2;
    do {
     HEAPF32[$363 + ($368 << 2) >> 2] = +HEAPF32[$362 >> 2] * +(1 << $368 | 0);
     $368 = $368 + 1 | 0;
     $373 = HEAP32[$359 >> 2] | 0;
    } while ($368 >>> 0 < $373 >>> 0);
    $$lcssa183 = $373;
   } else $$lcssa183 = $365;
   HEAP32[$361 >> 2] = fb + 3;
   HEAP32[$356 + 240 >> 2] = fb + 4;
   if (($$lcssa183 + -2 | 0) >>> 0 < 6) _modem_demodsoft_gentab($356, 2);
   HEAPF32[$356 + 84 >> 2] = 1.0;
   HEAPF32[$356 + 88 >> 2] = 0.0;
   HEAP32[$356 + 92 >> 2] = 1065353216;
   HEAPF32[$356 + 96 >> 2] = 0.0;
   if (!(_liquid_modem_is_dpsk(HEAP32[$356 >> 2] | 0) | 0)) {
    $$0 = $356;
    STACKTOP = sp;
    return $$0 | 0;
   }
   HEAPF32[$356 + 104 >> 2] = 0.0;
   $$0 = $356;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 22:
  {
   $384 = _malloc(252) | 0;
   HEAP32[$384 + 76 >> 2] = 0;
   HEAP32[$384 + 80 >> 2] = 0;
   $387 = $384 + 4 | 0;
   HEAP32[$387 >> 2] = 6;
   HEAP32[$384 + 8 >> 2] = 64;
   $389 = $384 + 236 | 0;
   HEAP32[$389 >> 2] = 0;
   HEAP32[$389 + 4 >> 2] = 0;
   HEAP32[$389 + 8 >> 2] = 0;
   HEAP32[$389 + 12 >> 2] = 0;
   $390 = $384 + 100 | 0;
   HEAPF32[$390 >> 2] = .02706659771502018;
   HEAP32[$384 >> 2] = 22;
   $391 = $384 + 12 | 0;
   HEAPF32[$391 >> 2] = .02706659771502018;
   HEAPF32[$384 + 16 >> 2] = .05413319543004036;
   $393 = HEAP32[$387 >> 2] | 0;
   if ($393 >>> 0 > 2) {
    $396 = 2;
    do {
     HEAPF32[$391 + ($396 << 2) >> 2] = +HEAPF32[$390 >> 2] * +(1 << $396 | 0);
     $396 = $396 + 1 | 0;
     $401 = HEAP32[$387 >> 2] | 0;
    } while ($396 >>> 0 < $401 >>> 0);
    $$lcssa184 = $401;
   } else $$lcssa184 = $393;
   HEAP32[$389 >> 2] = fb + 3;
   HEAP32[$384 + 240 >> 2] = fb + 4;
   if (($$lcssa184 + -2 | 0) >>> 0 < 6) _modem_demodsoft_gentab($384, 2);
   HEAPF32[$384 + 84 >> 2] = 1.0;
   HEAPF32[$384 + 88 >> 2] = 0.0;
   HEAP32[$384 + 92 >> 2] = 1065353216;
   HEAPF32[$384 + 96 >> 2] = 0.0;
   if (!(_liquid_modem_is_dpsk(HEAP32[$384 >> 2] | 0) | 0)) {
    $$0 = $384;
    STACKTOP = sp;
    return $$0 | 0;
   }
   HEAPF32[$384 + 104 >> 2] = 0.0;
   $$0 = $384;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 23:
  {
   $412 = _malloc(252) | 0;
   HEAP32[$412 + 76 >> 2] = 0;
   HEAP32[$412 + 80 >> 2] = 0;
   $415 = $412 + 4 | 0;
   HEAP32[$415 >> 2] = 7;
   HEAP32[$412 + 8 >> 2] = 128;
   $417 = $412 + 236 | 0;
   HEAP32[$417 >> 2] = 0;
   HEAP32[$417 + 4 >> 2] = 0;
   HEAP32[$417 + 8 >> 2] = 0;
   HEAP32[$417 + 12 >> 2] = 0;
   $418 = $412 + 100 | 0;
   HEAPF32[$418 >> 2] = .013532060198485851;
   HEAP32[$412 >> 2] = 23;
   $419 = $412 + 12 | 0;
   HEAPF32[$419 >> 2] = .013532060198485851;
   HEAPF32[$412 + 16 >> 2] = .027064120396971703;
   $421 = HEAP32[$415 >> 2] | 0;
   if ($421 >>> 0 > 2) {
    $424 = 2;
    do {
     HEAPF32[$419 + ($424 << 2) >> 2] = +HEAPF32[$418 >> 2] * +(1 << $424 | 0);
     $424 = $424 + 1 | 0;
     $429 = HEAP32[$415 >> 2] | 0;
    } while ($424 >>> 0 < $429 >>> 0);
    $$lcssa185 = $429;
   } else $$lcssa185 = $421;
   HEAP32[$417 >> 2] = fb + 3;
   HEAP32[$412 + 240 >> 2] = fb + 4;
   if (($$lcssa185 + -2 | 0) >>> 0 < 6) _modem_demodsoft_gentab($412, 2);
   HEAPF32[$412 + 84 >> 2] = 1.0;
   HEAPF32[$412 + 88 >> 2] = 0.0;
   HEAP32[$412 + 92 >> 2] = 1065353216;
   HEAPF32[$412 + 96 >> 2] = 0.0;
   if (!(_liquid_modem_is_dpsk(HEAP32[$412 >> 2] | 0) | 0)) {
    $$0 = $412;
    STACKTOP = sp;
    return $$0 | 0;
   }
   HEAPF32[$412 + 104 >> 2] = 0.0;
   $$0 = $412;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 24:
  {
   $440 = _malloc(252) | 0;
   HEAP32[$440 + 76 >> 2] = 0;
   HEAP32[$440 + 80 >> 2] = 0;
   $443 = $440 + 4 | 0;
   HEAP32[$443 >> 2] = 8;
   HEAP32[$440 + 8 >> 2] = 256;
   $445 = $440 + 236 | 0;
   HEAP32[$445 >> 2] = 0;
   HEAP32[$445 + 4 >> 2] = 0;
   HEAP32[$445 + 8 >> 2] = 0;
   HEAP32[$445 + 12 >> 2] = 0;
   $446 = $440 + 100 | 0;
   HEAPF32[$446 >> 2] = .006765875034034252;
   HEAP32[$440 >> 2] = 24;
   $447 = $440 + 12 | 0;
   HEAPF32[$447 >> 2] = .006765875034034252;
   HEAPF32[$440 + 16 >> 2] = .013531750068068504;
   $449 = HEAP32[$443 >> 2] | 0;
   if ($449 >>> 0 > 2) {
    $452 = 2;
    do {
     HEAPF32[$447 + ($452 << 2) >> 2] = +HEAPF32[$446 >> 2] * +(1 << $452 | 0);
     $452 = $452 + 1 | 0;
     $457 = HEAP32[$443 >> 2] | 0;
    } while ($452 >>> 0 < $457 >>> 0);
    $$lcssa186 = $457;
   } else $$lcssa186 = $449;
   HEAP32[$445 >> 2] = fb + 3;
   HEAP32[$440 + 240 >> 2] = fb + 4;
   if (($$lcssa186 + -2 | 0) >>> 0 < 6) _modem_demodsoft_gentab($440, 2);
   HEAPF32[$440 + 84 >> 2] = 1.0;
   HEAPF32[$440 + 88 >> 2] = 0.0;
   HEAP32[$440 + 92 >> 2] = 1065353216;
   HEAPF32[$440 + 96 >> 2] = 0.0;
   if (!(_liquid_modem_is_dpsk(HEAP32[$440 >> 2] | 0) | 0)) {
    $$0 = $440;
    STACKTOP = sp;
    return $$0 | 0;
   }
   HEAPF32[$440 + 104 >> 2] = 0.0;
   $$0 = $440;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 25:
  {
   $$0 = _modem_create_qam(2) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 26:
  {
   $$0 = _modem_create_qam(3) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 27:
  {
   $$0 = _modem_create_qam(4) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 28:
  {
   $$0 = _modem_create_qam(5) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 29:
  {
   $$0 = _modem_create_qam(6) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 30:
  {
   $$0 = _modem_create_qam(7) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 31:
  {
   $$0 = _modem_create_qam(8) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 32:
  {
   $$0 = _modem_create_qam(9) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 33:
  {
   $$0 = _modem_create_qam(10) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 34:
  {
   $$0 = _modem_create_qam(11) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 35:
  {
   $$0 = _modem_create_qam(12) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 36:
  {
   $$0 = _modem_create_qam(13) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 37:
  {
   $$0 = _modem_create_qam(14) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 38:
  {
   $$0 = _modem_create_qam(15) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 39:
  {
   $$0 = _modem_create_qam(16) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 40:
  {
   $$0 = _modem_create_apsk(2) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 41:
  {
   $$0 = _modem_create_apsk(3) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 42:
  {
   $$0 = _modem_create_apsk(4) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 43:
  {
   $$0 = _modem_create_apsk(5) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 44:
  {
   $$0 = _modem_create_apsk(6) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 45:
  {
   $$0 = _modem_create_apsk(7) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 46:
  {
   $$0 = _modem_create_apsk(8) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 47:
  {
   $490 = _malloc(252) | 0;
   HEAP32[$490 >> 2] = 47;
   HEAP32[$490 + 76 >> 2] = 0;
   HEAP32[$490 + 80 >> 2] = 0;
   HEAP32[$490 + 4 >> 2] = 1;
   HEAP32[$490 + 8 >> 2] = 2;
   $495 = $490 + 236 | 0;
   HEAP32[$495 >> 2] = 0;
   HEAP32[$495 + 4 >> 2] = 0;
   HEAP32[$495 + 8 >> 2] = 0;
   HEAP32[$495 + 12 >> 2] = 0;
   HEAP32[$495 >> 2] = fb + 5;
   HEAP32[$490 + 240 >> 2] = fb + 6;
   HEAPF32[$490 + 84 >> 2] = 1.0;
   HEAPF32[$490 + 88 >> 2] = 0.0;
   HEAP32[$490 + 92 >> 2] = 1065353216;
   HEAPF32[$490 + 96 >> 2] = 0.0;
   if (!(_liquid_modem_is_dpsk(47) | 0)) {
    $$0 = $490;
    STACKTOP = sp;
    return $$0 | 0;
   }
   HEAPF32[$490 + 104 >> 2] = 0.0;
   $$0 = $490;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 48:
  {
   $504 = _malloc(252) | 0;
   HEAP32[$504 >> 2] = 48;
   HEAP32[$504 + 76 >> 2] = 0;
   HEAP32[$504 + 80 >> 2] = 0;
   HEAP32[$504 + 4 >> 2] = 2;
   HEAP32[$504 + 8 >> 2] = 4;
   $509 = $504 + 236 | 0;
   HEAP32[$509 >> 2] = 0;
   HEAP32[$509 + 4 >> 2] = 0;
   HEAP32[$509 + 8 >> 2] = 0;
   HEAP32[$509 + 12 >> 2] = 0;
   HEAP32[$509 >> 2] = fb + 7;
   HEAP32[$504 + 240 >> 2] = fb + 8;
   HEAPF32[$504 + 84 >> 2] = 1.0;
   HEAPF32[$504 + 88 >> 2] = 0.0;
   HEAP32[$504 + 92 >> 2] = 1065353216;
   HEAPF32[$504 + 96 >> 2] = 0.0;
   if (!(_liquid_modem_is_dpsk(48) | 0)) {
    $$0 = $504;
    STACKTOP = sp;
    return $$0 | 0;
   }
   HEAPF32[$504 + 104 >> 2] = 0.0;
   $$0 = $504;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 49:
  {
   $518 = _malloc(252) | 0;
   HEAP32[$518 >> 2] = 49;
   HEAP32[$518 + 76 >> 2] = 0;
   HEAP32[$518 + 80 >> 2] = 0;
   HEAP32[$518 + 4 >> 2] = 1;
   HEAP32[$518 + 8 >> 2] = 2;
   $523 = $518 + 236 | 0;
   HEAP32[$523 >> 2] = 0;
   HEAP32[$523 + 4 >> 2] = 0;
   HEAP32[$523 + 8 >> 2] = 0;
   HEAP32[$523 + 12 >> 2] = 0;
   HEAP32[$523 >> 2] = fb + 9;
   HEAP32[$518 + 240 >> 2] = fb + 10;
   HEAPF32[$518 + 84 >> 2] = 1.0;
   HEAPF32[$518 + 88 >> 2] = 0.0;
   HEAP32[$518 + 92 >> 2] = 1065353216;
   HEAPF32[$518 + 96 >> 2] = 0.0;
   if (!(_liquid_modem_is_dpsk(49) | 0)) {
    $$0 = $518;
    STACKTOP = sp;
    return $$0 | 0;
   }
   HEAPF32[$518 + 104 >> 2] = 0.0;
   $$0 = $518;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 50:
  {
   $532 = _malloc(252) | 0;
   HEAP32[$532 >> 2] = 50;
   HEAP32[$532 + 76 >> 2] = 0;
   HEAP32[$532 + 80 >> 2] = 0;
   HEAP32[$532 + 4 >> 2] = 5;
   HEAP32[$532 + 8 >> 2] = 32;
   $537 = $532 + 236 | 0;
   HEAP32[$537 >> 2] = 0;
   HEAP32[$537 + 4 >> 2] = 0;
   HEAP32[$537 + 8 >> 2] = 0;
   HEAP32[$537 + 12 >> 2] = 0;
   $538 = _malloc(64) | 0;
   HEAP32[$532 + 100 >> 2] = $538;
   dest = $538;
   src = gb + 2024 | 0;
   stop = dest + 64 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP32[$537 >> 2] = fb + 11;
   HEAP32[$532 + 240 >> 2] = fb + 12;
   HEAPF32[$532 + 84 >> 2] = 1.0;
   HEAPF32[$532 + 88 >> 2] = 0.0;
   HEAP32[$532 + 92 >> 2] = 1065353216;
   HEAPF32[$532 + 96 >> 2] = 0.0;
   if (!(_liquid_modem_is_dpsk(50) | 0)) {
    $$0 = $532;
    STACKTOP = sp;
    return $$0 | 0;
   }
   HEAPF32[$532 + 104 >> 2] = 0.0;
   $$0 = $532;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 51:
  {
   $548 = _malloc(252) | 0;
   HEAP32[$548 >> 2] = 51;
   HEAP32[$548 + 76 >> 2] = 0;
   HEAP32[$548 + 80 >> 2] = 0;
   HEAP32[$548 + 4 >> 2] = 7;
   HEAP32[$548 + 8 >> 2] = 128;
   $553 = $548 + 236 | 0;
   HEAP32[$553 >> 2] = 0;
   HEAP32[$553 + 4 >> 2] = 0;
   HEAP32[$553 + 8 >> 2] = 0;
   HEAP32[$553 + 12 >> 2] = 0;
   $554 = _malloc(256) | 0;
   HEAP32[$548 + 100 >> 2] = $554;
   _memcpy($554 | 0, gb + 2088 | 0, 256) | 0;
   HEAP32[$553 >> 2] = fb + 13;
   HEAP32[$548 + 240 >> 2] = fb + 14;
   HEAPF32[$548 + 84 >> 2] = 1.0;
   HEAPF32[$548 + 88 >> 2] = 0.0;
   HEAP32[$548 + 92 >> 2] = 1065353216;
   HEAPF32[$548 + 96 >> 2] = 0.0;
   if (!(_liquid_modem_is_dpsk(51) | 0)) {
    $$0 = $548;
    STACKTOP = sp;
    return $$0 | 0;
   }
   HEAPF32[$548 + 104 >> 2] = 0.0;
   $$0 = $548;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 52:
  {
   $564 = _malloc(252) | 0;
   HEAP32[$564 >> 2] = 60;
   HEAP32[$564 + 80 >> 2] = 0;
   HEAP32[$564 + 4 >> 2] = 4;
   HEAP32[$564 + 8 >> 2] = 16;
   $569 = $564 + 236 | 0;
   HEAP32[$569 >> 2] = 0;
   HEAP32[$569 + 4 >> 2] = 0;
   HEAP32[$569 + 8 >> 2] = 0;
   HEAP32[$569 + 12 >> 2] = 0;
   HEAP32[$564 + 76 >> 2] = _calloc(16, 8) | 0;
   HEAP32[$569 >> 2] = fb + 15;
   HEAP32[$564 + 240 >> 2] = fb + 16;
   _modem_arb_init($564, gb + 2344 | 0, 16);
   $$0 = $564;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 53:
  {
   $572 = _malloc(252) | 0;
   HEAP32[$572 >> 2] = 60;
   HEAP32[$572 + 80 >> 2] = 0;
   HEAP32[$572 + 4 >> 2] = 4;
   HEAP32[$572 + 8 >> 2] = 16;
   $577 = $572 + 236 | 0;
   HEAP32[$577 >> 2] = 0;
   HEAP32[$577 + 4 >> 2] = 0;
   HEAP32[$577 + 8 >> 2] = 0;
   HEAP32[$577 + 12 >> 2] = 0;
   HEAP32[$572 + 76 >> 2] = _calloc(16, 8) | 0;
   HEAP32[$577 >> 2] = fb + 15;
   HEAP32[$572 + 240 >> 2] = fb + 16;
   _modem_arb_init($572, gb + 3496 | 0, 16);
   $$0 = $572;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 54:
  {
   $580 = _malloc(252) | 0;
   HEAP32[$580 >> 2] = 60;
   HEAP32[$580 + 80 >> 2] = 0;
   HEAP32[$580 + 4 >> 2] = 5;
   HEAP32[$580 + 8 >> 2] = 32;
   $585 = $580 + 236 | 0;
   HEAP32[$585 >> 2] = 0;
   HEAP32[$585 + 4 >> 2] = 0;
   HEAP32[$585 + 8 >> 2] = 0;
   HEAP32[$585 + 12 >> 2] = 0;
   HEAP32[$580 + 76 >> 2] = _calloc(32, 8) | 0;
   HEAP32[$585 >> 2] = fb + 15;
   HEAP32[$580 + 240 >> 2] = fb + 16;
   _modem_arb_init($580, gb + 3624 | 0, 32);
   $$0 = $580;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 55:
  {
   $588 = _malloc(252) | 0;
   HEAP32[$588 >> 2] = 60;
   HEAP32[$588 + 80 >> 2] = 0;
   HEAP32[$588 + 4 >> 2] = 6;
   HEAP32[$588 + 8 >> 2] = 64;
   $593 = $588 + 236 | 0;
   HEAP32[$593 >> 2] = 0;
   HEAP32[$593 + 4 >> 2] = 0;
   HEAP32[$593 + 8 >> 2] = 0;
   HEAP32[$593 + 12 >> 2] = 0;
   HEAP32[$588 + 76 >> 2] = _calloc(64, 8) | 0;
   HEAP32[$593 >> 2] = fb + 15;
   HEAP32[$588 + 240 >> 2] = fb + 16;
   _modem_arb_init($588, gb + 3880 | 0, 64);
   $$0 = $588;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 56:
  {
   $596 = _malloc(252) | 0;
   HEAP32[$596 >> 2] = 60;
   HEAP32[$596 + 80 >> 2] = 0;
   HEAP32[$596 + 4 >> 2] = 7;
   HEAP32[$596 + 8 >> 2] = 128;
   $601 = $596 + 236 | 0;
   HEAP32[$601 >> 2] = 0;
   HEAP32[$601 + 4 >> 2] = 0;
   HEAP32[$601 + 8 >> 2] = 0;
   HEAP32[$601 + 12 >> 2] = 0;
   HEAP32[$596 + 76 >> 2] = _calloc(128, 8) | 0;
   HEAP32[$601 >> 2] = fb + 15;
   HEAP32[$596 + 240 >> 2] = fb + 16;
   _modem_arb_init($596, gb + 4392 | 0, 128);
   $$0 = $596;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 57:
  {
   $604 = _malloc(252) | 0;
   HEAP32[$604 >> 2] = 60;
   HEAP32[$604 + 80 >> 2] = 0;
   HEAP32[$604 + 4 >> 2] = 8;
   HEAP32[$604 + 8 >> 2] = 256;
   $609 = $604 + 236 | 0;
   HEAP32[$609 >> 2] = 0;
   HEAP32[$609 + 4 >> 2] = 0;
   HEAP32[$609 + 8 >> 2] = 0;
   HEAP32[$609 + 12 >> 2] = 0;
   HEAP32[$604 + 76 >> 2] = _calloc(256, 8) | 0;
   HEAP32[$609 >> 2] = fb + 15;
   HEAP32[$604 + 240 >> 2] = fb + 16;
   _modem_arb_init($604, gb + 5416 | 0, 256);
   $$0 = $604;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 58:
  {
   $612 = _malloc(252) | 0;
   HEAP32[$612 >> 2] = 60;
   HEAP32[$612 + 80 >> 2] = 0;
   HEAP32[$612 + 4 >> 2] = 6;
   HEAP32[$612 + 8 >> 2] = 64;
   $617 = $612 + 236 | 0;
   HEAP32[$617 >> 2] = 0;
   HEAP32[$617 + 4 >> 2] = 0;
   HEAP32[$617 + 8 >> 2] = 0;
   HEAP32[$617 + 12 >> 2] = 0;
   HEAP32[$612 + 76 >> 2] = _calloc(64, 8) | 0;
   HEAP32[$617 >> 2] = fb + 15;
   HEAP32[$612 + 240 >> 2] = fb + 16;
   _modem_arb_init($612, gb + 2472 | 0, 64);
   $$0 = $612;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 59:
  {
   $620 = _malloc(252) | 0;
   HEAP32[$620 >> 2] = 60;
   HEAP32[$620 + 80 >> 2] = 0;
   HEAP32[$620 + 4 >> 2] = 6;
   HEAP32[$620 + 8 >> 2] = 64;
   $625 = $620 + 236 | 0;
   HEAP32[$625 >> 2] = 0;
   HEAP32[$625 + 4 >> 2] = 0;
   HEAP32[$625 + 8 >> 2] = 0;
   HEAP32[$625 + 12 >> 2] = 0;
   HEAP32[$620 + 76 >> 2] = _calloc(64, 8) | 0;
   HEAP32[$625 >> 2] = fb + 15;
   HEAP32[$620 + 240 >> 2] = fb + 16;
   _modem_arb_init($620, gb + 2984 | 0, 64);
   $$0 = $620;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 60:
  {
   _fwrite(gb + 32385 | 0, 105, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
   _exit(1);
   break;
  }
 default:
  {
   $629 = HEAP32[gb + 9336 >> 2] | 0;
   HEAP32[$vararg_buffer >> 2] = $_scheme;
   _fprintf($629, gb + 32491 | 0, $vararg_buffer) | 0;
   _exit(1);
  }
 } while (0);
 return 0;
}

function _fft_execute_dft_16($_q) {
 $_q = $_q | 0;
 var $0 = 0, $1 = 0, $10 = 0, $102 = 0, $103 = 0, $104 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $130 = 0.0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $14 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $18 = 0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $195 = 0.0, $196 = 0.0, $2 = 0, $20 = 0, $21 = 0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $217 = 0.0, $218 = 0.0, $22 = 0, $226 = 0.0, $227 = 0.0, $229 = 0.0, $23 = 0, $231 = 0.0, $235 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0, $247 = 0.0, $248 = 0.0, $25 = 0, $250 = 0.0, $252 = 0.0, $255 = 0.0, $256 = 0.0, $259 = 0.0, $26 = 0, $260 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $271 = 0.0, $273 = 0.0, $276 = 0.0, $277 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $289 = 0.0, $29 = 0, $290 = 0.0, $292 = 0.0, $294 = 0.0, $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0, $305 = 0.0, $306 = 0.0, $308 = 0.0, $31 = 0, $310 = 0.0, $314 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $32 = 0, $324 = 0.0, $325 = 0.0, $327 = 0.0, $329 = 0.0, $33 = 0, $332 = 0.0, $333 = 0.0, $336 = 0.0, $337 = 0.0, $343 = 0.0, $344 = 0.0, $346 = 0.0, $348 = 0.0, $35 = 0, $351 = 0.0, $352 = 0.0, $355 = 0.0, $356 = 0.0, $362 = 0.0, $363 = 0.0, $365 = 0.0, $367 = 0.0, $37 = 0, $370 = 0.0, $371 = 0.0, $372 = 0.0, $373 = 0.0, $378 = 0.0, $379 = 0.0, $380 = 0.0, $381 = 0.0, $388 = 0.0, $389 = 0.0, $390 = 0.0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $399 = 0.0, $4 = 0, $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0.0, $404 = 0.0, $409 = 0.0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $43 = 0, $432 = 0.0, $433 = 0.0, $436 = 0.0, $437 = 0.0, $44 = 0, $445 = 0.0, $446 = 0.0, $448 = 0.0, $450 = 0.0, $453 = 0.0, $454 = 0.0, $457 = 0.0, $458 = 0.0, $466 = 0.0, $467 = 0.0, $469 = 0.0, $471 = 0.0, $476 = 0.0, $477 = 0.0, $478 = 0.0, $479 = 0.0, $48 = 0, $480 = 0.0, $481 = 0.0, $487 = 0.0, $488 = 0.0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0.0, $492 = 0.0, $499 = 0.0, $5 = 0, $50 = 0, $500 = 0.0, $501 = 0.0, $502 = 0.0, $503 = 0.0, $504 = 0.0, $510 = 0.0, $511 = 0.0, $512 = 0.0, $513 = 0.0, $514 = 0.0, $515 = 0.0, $520 = 0.0, $521 = 0.0, $527 = 0.0, $528 = 0.0, $529 = 0.0, $530 = 0.0, $531 = 0.0, $532 = 0.0, $537 = 0.0, $538 = 0.0, $539 = 0.0, $54 = 0, $540 = 0.0, $541 = 0.0, $542 = 0.0, $543 = 0.0, $544 = 0.0, $55 = 0, $550 = 0.0, $551 = 0.0, $552 = 0.0, $553 = 0.0, $554 = 0.0, $555 = 0.0, $56 = 0, $560 = 0.0, $561 = 0.0, $564 = 0.0, $565 = 0.0, $571 = 0.0, $572 = 0.0, $574 = 0.0, $576 = 0.0, $579 = 0.0, $580 = 0.0, $583 = 0.0, $584 = 0.0, $590 = 0.0, $591 = 0.0, $593 = 0.0, $595 = 0.0, $6 = 0, $60 = 0, $600 = 0.0, $601 = 0.0, $603 = 0.0, $605 = 0.0, $606 = 0.0, $61 = 0, $612 = 0.0, $613 = 0.0, $614 = 0.0, $615 = 0.0, $616 = 0.0, $617 = 0.0, $62 = 0, $624 = 0.0, $625 = 0.0, $627 = 0.0, $629 = 0.0, $630 = 0.0, $636 = 0.0, $637 = 0.0, $638 = 0.0, $639 = 0.0, $640 = 0.0, $641 = 0.0, $646 = 0.0, $647 = 0.0, $648 = 0.0, $649 = 0.0, $656 = 0.0, $657 = 0.0, $658 = 0.0, $659 = 0.0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0.0, $663 = 0.0, $669 = 0.0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0.0, $673 = 0.0, $674 = 0.0, $68 = 0, $681 = 0.0, $682 = 0.0, $683 = 0.0, $684 = 0.0, $685 = 0.0, $686 = 0.0, $692 = 0.0, $693 = 0.0, $694 = 0.0, $695 = 0.0, $696 = 0.0, $697 = 0.0, $7 = 0, $704 = 0.0, $705 = 0.0, $710 = 0.0, $711 = 0.0, $717 = 0.0, $718 = 0.0, $719 = 0.0, $72 = 0, $720 = 0.0, $721 = 0.0, $722 = 0.0, $727 = 0.0, $728 = 0.0, $73 = 0, $731 = 0.0, $732 = 0.0, $74 = 0, $740 = 0.0, $741 = 0.0, $743 = 0.0, $745 = 0.0, $750 = 0.0, $751 = 0.0, $756 = 0.0, $757 = 0.0, $763 = 0.0, $764 = 0.0, $765 = 0.0, $766 = 0.0, $767 = 0.0, $768 = 0.0, $775 = 0.0, $776 = 0.0, $777 = 0.0, $778 = 0.0, $779 = 0.0, $78 = 0, $780 = 0.0, $786 = 0.0, $787 = 0.0, $788 = 0.0, $789 = 0.0, $79 = 0, $790 = 0.0, $791 = 0.0, $798 = 0.0, $799 = 0.0, $8 = 0, $80 = 0, $804 = 0.0, $805 = 0.0, $811 = 0.0, $812 = 0.0, $813 = 0.0, $814 = 0.0, $815 = 0.0, $816 = 0.0, $821 = 0.0, $822 = 0.0, $828 = 0.0, $829 = 0.0, $830 = 0.0, $831 = 0.0, $832 = 0.0, $833 = 0.0, $84 = 0, $840 = 0.0, $841 = 0.0, $842 = 0.0, $843 = 0.0, $844 = 0.0, $845 = 0.0, $85 = 0, $851 = 0.0, $852 = 0.0, $853 = 0.0, $854 = 0.0, $855 = 0.0, $856 = 0.0, $86 = 0, $863 = 0.0, $864 = 0.0, $869 = 0.0, $870 = 0.0, $876 = 0.0, $877 = 0.0, $878 = 0.0, $879 = 0.0, $880 = 0.0, $881 = 0.0, $886 = 0.0, $887 = 0.0, $890 = 0.0, $891 = 0.0, $897 = 0.0, $898 = 0.0, $9 = 0, $90 = 0, $900 = 0.0, $902 = 0.0, $907 = 0.0, $908 = 0.0, $91 = 0, $913 = 0.0, $914 = 0.0, $92 = 0, $920 = 0.0, $921 = 0.0, $922 = 0.0, $923 = 0.0, $924 = 0.0, $925 = 0.0, $932 = 0.0, $933 = 0.0, $935 = 0.0, $937 = 0.0, $938 = 0.0, $944 = 0.0, $945 = 0.0, $946 = 0.0, $947 = 0.0, $948 = 0.0, $949 = 0.0, $956 = 0.0, $957 = 0.0, $96 = 0, $962 = 0.0, $963 = 0.0, $969 = 0.0, $97 = 0, $970 = 0.0, $971 = 0.0, $972 = 0.0, $973 = 0.0, $974 = 0.0, $98 = 0, $storemerge = 0.0, $storemerge34 = 0.0, $storemerge35 = 0.0, $storemerge36 = 0.0, $storemerge37 = 0.0, $storemerge38 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 424 | 0;
 $1 = sp + 416 | 0;
 $2 = sp + 408 | 0;
 $3 = sp + 400 | 0;
 $4 = sp + 392 | 0;
 $5 = sp + 384 | 0;
 $6 = sp + 376 | 0;
 $7 = sp + 368 | 0;
 $8 = sp + 304 | 0;
 $9 = sp + 288 | 0;
 $10 = sp + 360 | 0;
 $11 = sp + 352 | 0;
 $12 = sp + 272 | 0;
 $13 = sp + 256 | 0;
 $14 = sp + 240 | 0;
 $15 = sp + 224 | 0;
 $16 = sp + 344 | 0;
 $17 = sp + 336 | 0;
 $18 = sp + 208 | 0;
 $19 = sp + 192 | 0;
 $20 = sp + 176 | 0;
 $21 = sp + 160 | 0;
 $22 = sp + 144 | 0;
 $23 = sp + 328 | 0;
 $24 = sp + 128 | 0;
 $25 = sp + 112 | 0;
 $26 = sp + 96 | 0;
 $27 = sp + 80 | 0;
 $28 = sp + 64 | 0;
 $29 = sp + 48 | 0;
 $30 = sp + 320 | 0;
 $31 = sp + 32 | 0;
 $32 = sp + 16 | 0;
 $33 = sp;
 $35 = HEAP32[$_q + 4 >> 2] | 0;
 $37 = HEAP32[$_q + 8 >> 2] | 0;
 $40 = (HEAP32[$_q + 12 >> 2] | 0) == 1;
 $43 = HEAP32[$35 + 4 >> 2] | 0;
 $44 = $37 + 4 | 0;
 HEAP32[$37 >> 2] = HEAP32[$35 >> 2];
 HEAP32[$44 >> 2] = $43;
 $48 = HEAP32[$35 + 68 >> 2] | 0;
 $49 = $37 + 8 | 0;
 $50 = $37 + 12 | 0;
 HEAP32[$49 >> 2] = HEAP32[$35 + 64 >> 2];
 HEAP32[$50 >> 2] = $48;
 $54 = HEAP32[$35 + 36 >> 2] | 0;
 $55 = $37 + 16 | 0;
 $56 = $37 + 20 | 0;
 HEAP32[$55 >> 2] = HEAP32[$35 + 32 >> 2];
 HEAP32[$56 >> 2] = $54;
 $60 = HEAP32[$35 + 100 >> 2] | 0;
 $61 = $37 + 24 | 0;
 $62 = $37 + 28 | 0;
 HEAP32[$61 >> 2] = HEAP32[$35 + 96 >> 2];
 HEAP32[$62 >> 2] = $60;
 $66 = HEAP32[$35 + 20 >> 2] | 0;
 $67 = $37 + 32 | 0;
 $68 = $37 + 36 | 0;
 HEAP32[$67 >> 2] = HEAP32[$35 + 16 >> 2];
 HEAP32[$68 >> 2] = $66;
 $72 = HEAP32[$35 + 84 >> 2] | 0;
 $73 = $37 + 40 | 0;
 $74 = $37 + 44 | 0;
 HEAP32[$73 >> 2] = HEAP32[$35 + 80 >> 2];
 HEAP32[$74 >> 2] = $72;
 $78 = HEAP32[$35 + 52 >> 2] | 0;
 $79 = $37 + 48 | 0;
 $80 = $37 + 52 | 0;
 HEAP32[$79 >> 2] = HEAP32[$35 + 48 >> 2];
 HEAP32[$80 >> 2] = $78;
 $84 = HEAP32[$35 + 116 >> 2] | 0;
 $85 = $37 + 56 | 0;
 $86 = $37 + 60 | 0;
 HEAP32[$85 >> 2] = HEAP32[$35 + 112 >> 2];
 HEAP32[$86 >> 2] = $84;
 $90 = HEAP32[$35 + 12 >> 2] | 0;
 $91 = $37 + 64 | 0;
 $92 = $37 + 68 | 0;
 HEAP32[$91 >> 2] = HEAP32[$35 + 8 >> 2];
 HEAP32[$92 >> 2] = $90;
 $96 = HEAP32[$35 + 76 >> 2] | 0;
 $97 = $37 + 72 | 0;
 $98 = $37 + 76 | 0;
 HEAP32[$97 >> 2] = HEAP32[$35 + 72 >> 2];
 HEAP32[$98 >> 2] = $96;
 $102 = HEAP32[$35 + 44 >> 2] | 0;
 $103 = $37 + 80 | 0;
 $104 = $37 + 84 | 0;
 HEAP32[$103 >> 2] = HEAP32[$35 + 40 >> 2];
 HEAP32[$104 >> 2] = $102;
 $108 = HEAP32[$35 + 108 >> 2] | 0;
 $109 = $37 + 88 | 0;
 $110 = $37 + 92 | 0;
 HEAP32[$109 >> 2] = HEAP32[$35 + 104 >> 2];
 HEAP32[$110 >> 2] = $108;
 $114 = HEAP32[$35 + 28 >> 2] | 0;
 $115 = $37 + 96 | 0;
 $116 = $37 + 100 | 0;
 HEAP32[$115 >> 2] = HEAP32[$35 + 24 >> 2];
 HEAP32[$116 >> 2] = $114;
 $120 = HEAP32[$35 + 92 >> 2] | 0;
 $121 = $37 + 104 | 0;
 $122 = $37 + 108 | 0;
 HEAP32[$121 >> 2] = HEAP32[$35 + 88 >> 2];
 HEAP32[$122 >> 2] = $120;
 $126 = HEAP32[$35 + 60 >> 2] | 0;
 $127 = $37 + 112 | 0;
 $128 = $37 + 116 | 0;
 HEAP32[$127 >> 2] = HEAP32[$35 + 56 >> 2];
 HEAP32[$128 >> 2] = $126;
 $130 = +HEAPF32[$35 + 120 >> 2];
 $132 = +HEAPF32[$35 + 124 >> 2];
 $133 = $37 + 120 | 0;
 $134 = $37 + 124 | 0;
 $135 = +HEAPF32[$49 >> 2];
 $136 = +HEAPF32[$50 >> 2];
 $137 = +HEAPF32[$37 >> 2];
 $138 = +HEAPF32[$44 >> 2];
 HEAPF32[$49 >> 2] = $137 - $135;
 HEAPF32[$50 >> 2] = $138 - $136;
 $141 = $135 + $137;
 $142 = $136 + $138;
 $143 = +HEAPF32[$61 >> 2];
 $144 = +HEAPF32[$62 >> 2];
 $145 = +HEAPF32[$55 >> 2];
 $146 = +HEAPF32[$56 >> 2];
 HEAPF32[$61 >> 2] = $145 - $143;
 HEAPF32[$62 >> 2] = $146 - $144;
 $149 = $143 + $145;
 $150 = $144 + $146;
 $151 = +HEAPF32[$73 >> 2];
 $152 = +HEAPF32[$74 >> 2];
 $153 = +HEAPF32[$67 >> 2];
 $154 = +HEAPF32[$68 >> 2];
 HEAPF32[$73 >> 2] = $153 - $151;
 HEAPF32[$74 >> 2] = $154 - $152;
 $157 = $151 + $153;
 $158 = $152 + $154;
 $159 = +HEAPF32[$85 >> 2];
 $160 = +HEAPF32[$86 >> 2];
 $161 = +HEAPF32[$79 >> 2];
 $162 = +HEAPF32[$80 >> 2];
 $163 = $161 - $159;
 $164 = $162 - $160;
 HEAPF32[$85 >> 2] = $163;
 HEAPF32[$86 >> 2] = $164;
 $165 = $159 + $161;
 $166 = $160 + $162;
 $167 = +HEAPF32[$97 >> 2];
 $168 = +HEAPF32[$98 >> 2];
 $169 = +HEAPF32[$91 >> 2];
 $170 = +HEAPF32[$92 >> 2];
 HEAPF32[$97 >> 2] = $169 - $167;
 HEAPF32[$98 >> 2] = $170 - $168;
 $173 = $167 + $169;
 $174 = $168 + $170;
 $175 = +HEAPF32[$109 >> 2];
 $176 = +HEAPF32[$110 >> 2];
 $177 = +HEAPF32[$103 >> 2];
 $178 = +HEAPF32[$104 >> 2];
 HEAPF32[$109 >> 2] = $177 - $175;
 HEAPF32[$110 >> 2] = $178 - $176;
 $181 = $175 + $177;
 $182 = $176 + $178;
 $183 = +HEAPF32[$121 >> 2];
 $184 = +HEAPF32[$122 >> 2];
 $185 = +HEAPF32[$115 >> 2];
 $186 = +HEAPF32[$116 >> 2];
 HEAPF32[$121 >> 2] = $185 - $183;
 HEAPF32[$122 >> 2] = $186 - $184;
 $189 = $183 + $185;
 $190 = $184 + $186;
 $191 = +HEAPF32[$127 >> 2];
 $192 = +HEAPF32[$128 >> 2];
 HEAPF32[$133 >> 2] = $191 - $130;
 HEAPF32[$134 >> 2] = $192 - $132;
 $195 = $130 + $191;
 $196 = $132 + $192;
 HEAPF32[$55 >> 2] = $141 - $149;
 HEAPF32[$56 >> 2] = $142 - $150;
 HEAPF32[$37 >> 2] = $149 + $141;
 HEAPF32[$44 >> 2] = $150 + $142;
 HEAPF32[$79 >> 2] = $157 - $165;
 HEAPF32[$80 >> 2] = $158 - $166;
 HEAPF32[$67 >> 2] = $165 + $157;
 HEAPF32[$68 >> 2] = $166 + $158;
 HEAPF32[$103 >> 2] = $173 - $181;
 HEAPF32[$104 >> 2] = $174 - $182;
 HEAPF32[$91 >> 2] = $181 + $173;
 HEAPF32[$92 >> 2] = $182 + $174;
 HEAPF32[$127 >> 2] = $189 - $195;
 HEAPF32[$128 >> 2] = $190 - $196;
 HEAPF32[$115 >> 2] = $195 + $189;
 HEAPF32[$116 >> 2] = $196 + $190;
 $213 = +HEAPF32[$61 >> 2];
 $214 = +HEAPF32[$62 >> 2];
 $215 = $213 * 0.0;
 if ($40) {
  $217 = $214 - $215;
  $218 = $214 * -0.0 - $213;
  if (($217 != $217 | 0.0 != 0.0) & ($218 != $218 | 0.0 != 0.0)) {
   ___mulsc3($0, -$213, -$214, 0.0, 1.0);
   $229 = +HEAPF32[$0 >> 2];
   $231 = +HEAPF32[$0 + 4 >> 2];
   $235 = +HEAPF32[$85 >> 2];
   $237 = +HEAPF32[$86 >> 2];
  } else {
   $229 = $217;
   $231 = $218;
   $235 = $163;
   $237 = $164;
  }
  $226 = +HEAPF32[$49 >> 2];
  $227 = +HEAPF32[$50 >> 2];
  HEAPF32[$61 >> 2] = $226 - $229;
  HEAPF32[$62 >> 2] = $227 - $231;
  HEAPF32[$49 >> 2] = $229 + $226;
  HEAPF32[$50 >> 2] = $231 + $227;
  $238 = $237 - $235 * 0.0;
  $239 = $237 * -0.0 - $235;
  if (($238 != $238 | 0.0 != 0.0) & ($239 != $239 | 0.0 != 0.0)) {
   ___mulsc3($1, -$235, -$237, 0.0, 1.0);
   $250 = +HEAPF32[$1 >> 2];
   $252 = +HEAPF32[$1 + 4 >> 2];
  } else {
   $250 = $238;
   $252 = $239;
  }
  $247 = +HEAPF32[$73 >> 2];
  $248 = +HEAPF32[$74 >> 2];
  HEAPF32[$85 >> 2] = $247 - $250;
  HEAPF32[$86 >> 2] = $248 - $252;
  HEAPF32[$73 >> 2] = $250 + $247;
  HEAPF32[$74 >> 2] = $252 + $248;
  $255 = +HEAPF32[$109 >> 2];
  $256 = +HEAPF32[$110 >> 2];
  $259 = $256 - $255 * 0.0;
  $260 = $256 * -0.0 - $255;
  if (($259 != $259 | 0.0 != 0.0) & ($260 != $260 | 0.0 != 0.0)) {
   ___mulsc3($2, -$255, -$256, 0.0, 1.0);
   $271 = +HEAPF32[$2 >> 2];
   $273 = +HEAPF32[$2 + 4 >> 2];
  } else {
   $271 = $259;
   $273 = $260;
  }
  $268 = +HEAPF32[$97 >> 2];
  $269 = +HEAPF32[$98 >> 2];
  HEAPF32[$109 >> 2] = $268 - $271;
  HEAPF32[$110 >> 2] = $269 - $273;
  HEAPF32[$97 >> 2] = $271 + $268;
  HEAPF32[$98 >> 2] = $273 + $269;
  $276 = +HEAPF32[$133 >> 2];
  $277 = +HEAPF32[$134 >> 2];
  $280 = $277 - $276 * 0.0;
  $281 = $277 * -0.0 - $276;
  if (($280 != $280 | 0.0 != 0.0) & ($281 != $281 | 0.0 != 0.0)) {
   ___mulsc3($3, -$276, -$277, 0.0, 1.0);
   $292 = +HEAPF32[$3 >> 2];
   $294 = +HEAPF32[$3 + 4 >> 2];
  } else {
   $292 = $280;
   $294 = $281;
  }
  $289 = +HEAPF32[$121 >> 2];
  $290 = +HEAPF32[$122 >> 2];
  HEAPF32[$133 >> 2] = $289 - $292;
  HEAPF32[$134 >> 2] = $290 - $294;
  $storemerge = $294 + $290;
  $storemerge38 = $292 + $289;
 } else {
  $298 = $215 - $214;
  $299 = $213 + $214 * 0.0;
  if (($298 != $298 | 0.0 != 0.0) & ($299 != $299 | 0.0 != 0.0)) {
   ___mulsc3($4, $213, $214, 0.0, 1.0);
   $308 = +HEAPF32[$4 >> 2];
   $310 = +HEAPF32[$4 + 4 >> 2];
   $314 = +HEAPF32[$85 >> 2];
   $316 = +HEAPF32[$86 >> 2];
  } else {
   $308 = $298;
   $310 = $299;
   $314 = $163;
   $316 = $164;
  }
  $305 = +HEAPF32[$49 >> 2];
  $306 = +HEAPF32[$50 >> 2];
  HEAPF32[$61 >> 2] = $305 - $308;
  HEAPF32[$62 >> 2] = $306 - $310;
  HEAPF32[$49 >> 2] = $308 + $305;
  HEAPF32[$50 >> 2] = $310 + $306;
  $317 = $314 * 0.0 - $316;
  $318 = $314 + $316 * 0.0;
  if (($317 != $317 | 0.0 != 0.0) & ($318 != $318 | 0.0 != 0.0)) {
   ___mulsc3($5, $314, $316, 0.0, 1.0);
   $327 = +HEAPF32[$5 >> 2];
   $329 = +HEAPF32[$5 + 4 >> 2];
  } else {
   $327 = $317;
   $329 = $318;
  }
  $324 = +HEAPF32[$73 >> 2];
  $325 = +HEAPF32[$74 >> 2];
  HEAPF32[$85 >> 2] = $324 - $327;
  HEAPF32[$86 >> 2] = $325 - $329;
  HEAPF32[$73 >> 2] = $327 + $324;
  HEAPF32[$74 >> 2] = $329 + $325;
  $332 = +HEAPF32[$109 >> 2];
  $333 = +HEAPF32[$110 >> 2];
  $336 = $332 * 0.0 - $333;
  $337 = $332 + $333 * 0.0;
  if (($336 != $336 | 0.0 != 0.0) & ($337 != $337 | 0.0 != 0.0)) {
   ___mulsc3($6, $332, $333, 0.0, 1.0);
   $346 = +HEAPF32[$6 >> 2];
   $348 = +HEAPF32[$6 + 4 >> 2];
  } else {
   $346 = $336;
   $348 = $337;
  }
  $343 = +HEAPF32[$97 >> 2];
  $344 = +HEAPF32[$98 >> 2];
  HEAPF32[$109 >> 2] = $343 - $346;
  HEAPF32[$110 >> 2] = $344 - $348;
  HEAPF32[$97 >> 2] = $346 + $343;
  HEAPF32[$98 >> 2] = $348 + $344;
  $351 = +HEAPF32[$133 >> 2];
  $352 = +HEAPF32[$134 >> 2];
  $355 = $351 * 0.0 - $352;
  $356 = $351 + $352 * 0.0;
  if (($355 != $355 | 0.0 != 0.0) & ($356 != $356 | 0.0 != 0.0)) {
   ___mulsc3($7, $351, $352, 0.0, 1.0);
   $365 = +HEAPF32[$7 >> 2];
   $367 = +HEAPF32[$7 + 4 >> 2];
  } else {
   $365 = $355;
   $367 = $356;
  }
  $362 = +HEAPF32[$121 >> 2];
  $363 = +HEAPF32[$122 >> 2];
  HEAPF32[$133 >> 2] = $362 - $365;
  HEAPF32[$134 >> 2] = $363 - $367;
  $storemerge = $367 + $363;
  $storemerge38 = $365 + $362;
 }
 HEAPF32[$121 >> 2] = $storemerge38;
 HEAPF32[$122 >> 2] = $storemerge;
 $370 = +HEAPF32[$67 >> 2];
 $371 = +HEAPF32[$68 >> 2];
 $372 = +HEAPF32[$37 >> 2];
 $373 = +HEAPF32[$44 >> 2];
 HEAPF32[$67 >> 2] = $372 - $370;
 HEAPF32[$68 >> 2] = $373 - $371;
 HEAPF32[$37 >> 2] = $370 + $372;
 HEAPF32[$44 >> 2] = $371 + $373;
 $378 = +HEAPF32[$115 >> 2];
 $379 = +HEAPF32[$116 >> 2];
 $380 = +HEAPF32[$91 >> 2];
 $381 = +HEAPF32[$92 >> 2];
 HEAPF32[$115 >> 2] = $380 - $378;
 HEAPF32[$116 >> 2] = $381 - $379;
 HEAPF32[$91 >> 2] = $378 + $380;
 HEAPF32[$92 >> 2] = $379 + $381;
 $388 = +HEAPF32[$73 >> 2];
 $389 = +HEAPF32[$74 >> 2];
 $390 = $388 * .70710677;
 $391 = $389 * .70710677;
 if ($40) {
  $392 = $390 + $391;
  $393 = $391 - $390;
  if (($392 != $392 | 0.0 != 0.0) & ($393 != $393 | 0.0 != 0.0)) {
   ___muldc3($8, $388, $389, .70710677, -.70710677);
   $400 = +HEAPF64[$8 >> 3];
   $402 = +HEAPF64[$8 + 8 >> 3];
   $410 = +HEAPF32[$121 >> 2];
   $412 = +HEAPF32[$122 >> 2];
  } else {
   $400 = $392;
   $402 = $393;
   $410 = $storemerge38;
   $412 = $storemerge;
  }
  $399 = $400;
  $401 = $402;
  $403 = +HEAPF32[$49 >> 2];
  $404 = +HEAPF32[$50 >> 2];
  HEAPF32[$73 >> 2] = $403 - $399;
  HEAPF32[$74 >> 2] = $404 - $401;
  HEAPF32[$49 >> 2] = $399 + $403;
  HEAPF32[$50 >> 2] = $401 + $404;
  $409 = $410;
  $411 = $412;
  $413 = $409 * .70710677;
  $414 = $411 * .70710677;
  $415 = $413 + $414;
  $416 = $414 - $413;
  if (($415 != $415 | 0.0 != 0.0) & ($416 != $416 | 0.0 != 0.0)) {
   ___muldc3($9, $409, $411, .70710677, -.70710677);
   $423 = +HEAPF64[$9 >> 3];
   $425 = +HEAPF64[$9 + 8 >> 3];
  } else {
   $423 = $415;
   $425 = $416;
  }
  $422 = $423;
  $424 = $425;
  $426 = +HEAPF32[$97 >> 2];
  $427 = +HEAPF32[$98 >> 2];
  HEAPF32[$121 >> 2] = $426 - $422;
  HEAPF32[$122 >> 2] = $427 - $424;
  HEAPF32[$97 >> 2] = $422 + $426;
  HEAPF32[$98 >> 2] = $424 + $427;
  $432 = +HEAPF32[$79 >> 2];
  $433 = +HEAPF32[$80 >> 2];
  $436 = $433 - $432 * 0.0;
  $437 = $433 * -0.0 - $432;
  if (($436 != $436 | 0.0 != 0.0) & ($437 != $437 | 0.0 != 0.0)) {
   ___mulsc3($10, -$432, -$433, 0.0, 1.0);
   $448 = +HEAPF32[$10 >> 2];
   $450 = +HEAPF32[$10 + 4 >> 2];
  } else {
   $448 = $436;
   $450 = $437;
  }
  $445 = +HEAPF32[$55 >> 2];
  $446 = +HEAPF32[$56 >> 2];
  HEAPF32[$79 >> 2] = $445 - $448;
  HEAPF32[$80 >> 2] = $446 - $450;
  HEAPF32[$55 >> 2] = $448 + $445;
  HEAPF32[$56 >> 2] = $450 + $446;
  $453 = +HEAPF32[$127 >> 2];
  $454 = +HEAPF32[$128 >> 2];
  $457 = $454 - $453 * 0.0;
  $458 = $454 * -0.0 - $453;
  if (($457 != $457 | 0.0 != 0.0) & ($458 != $458 | 0.0 != 0.0)) {
   ___mulsc3($11, -$453, -$454, 0.0, 1.0);
   $469 = +HEAPF32[$11 >> 2];
   $471 = +HEAPF32[$11 + 4 >> 2];
  } else {
   $469 = $457;
   $471 = $458;
  }
  $466 = +HEAPF32[$103 >> 2];
  $467 = +HEAPF32[$104 >> 2];
  HEAPF32[$127 >> 2] = $466 - $469;
  HEAPF32[$128 >> 2] = $467 - $471;
  HEAPF32[$103 >> 2] = $469 + $466;
  HEAPF32[$104 >> 2] = $471 + $467;
  $476 = +HEAPF32[$85 >> 2];
  $477 = +HEAPF32[$86 >> 2];
  $478 = $476 * -.70710677;
  $479 = $477 * -.70710677;
  $480 = $478 - $479;
  $481 = $478 + $479;
  if (($480 != $480 | 0.0 != 0.0) & ($481 != $481 | 0.0 != 0.0)) {
   ___muldc3($12, $476, $477, -.70710677, -.70710677);
   $488 = +HEAPF64[$12 >> 3];
   $490 = +HEAPF64[$12 + 8 >> 3];
  } else {
   $488 = $480;
   $490 = $481;
  }
  $487 = $488;
  $489 = $490;
  $491 = +HEAPF32[$61 >> 2];
  $492 = +HEAPF32[$62 >> 2];
  HEAPF32[$85 >> 2] = $491 - $487;
  HEAPF32[$86 >> 2] = $492 - $489;
  HEAPF32[$61 >> 2] = $487 + $491;
  HEAPF32[$62 >> 2] = $489 + $492;
  $499 = +HEAPF32[$133 >> 2];
  $500 = +HEAPF32[$134 >> 2];
  $501 = $499 * -.70710677;
  $502 = $500 * -.70710677;
  $503 = $501 - $502;
  $504 = $501 + $502;
  if (($503 != $503 | 0.0 != 0.0) & ($504 != $504 | 0.0 != 0.0)) {
   ___muldc3($13, $499, $500, -.70710677, -.70710677);
   $511 = +HEAPF64[$13 >> 3];
   $513 = +HEAPF64[$13 + 8 >> 3];
  } else {
   $511 = $503;
   $513 = $504;
  }
  $510 = $511;
  $512 = $513;
  $514 = +HEAPF32[$109 >> 2];
  $515 = +HEAPF32[$110 >> 2];
  HEAPF32[$133 >> 2] = $514 - $510;
  HEAPF32[$134 >> 2] = $515 - $512;
  $storemerge34 = $512 + $515;
  $storemerge37 = $510 + $514;
 } else {
  $520 = $390 - $391;
  $521 = $390 + $391;
  if (($520 != $520 | 0.0 != 0.0) & ($521 != $521 | 0.0 != 0.0)) {
   ___muldc3($14, $388, $389, .70710677, .70710677);
   $528 = +HEAPF64[$14 >> 3];
   $530 = +HEAPF64[$14 + 8 >> 3];
   $538 = +HEAPF32[$121 >> 2];
   $540 = +HEAPF32[$122 >> 2];
  } else {
   $528 = $520;
   $530 = $521;
   $538 = $storemerge38;
   $540 = $storemerge;
  }
  $527 = $528;
  $529 = $530;
  $531 = +HEAPF32[$49 >> 2];
  $532 = +HEAPF32[$50 >> 2];
  HEAPF32[$73 >> 2] = $531 - $527;
  HEAPF32[$74 >> 2] = $532 - $529;
  HEAPF32[$49 >> 2] = $527 + $531;
  HEAPF32[$50 >> 2] = $529 + $532;
  $537 = $538;
  $539 = $540;
  $541 = $537 * .70710677;
  $542 = $539 * .70710677;
  $543 = $541 - $542;
  $544 = $541 + $542;
  if (($543 != $543 | 0.0 != 0.0) & ($544 != $544 | 0.0 != 0.0)) {
   ___muldc3($15, $537, $539, .70710677, .70710677);
   $551 = +HEAPF64[$15 >> 3];
   $553 = +HEAPF64[$15 + 8 >> 3];
  } else {
   $551 = $543;
   $553 = $544;
  }
  $550 = $551;
  $552 = $553;
  $554 = +HEAPF32[$97 >> 2];
  $555 = +HEAPF32[$98 >> 2];
  HEAPF32[$121 >> 2] = $554 - $550;
  HEAPF32[$122 >> 2] = $555 - $552;
  HEAPF32[$97 >> 2] = $550 + $554;
  HEAPF32[$98 >> 2] = $552 + $555;
  $560 = +HEAPF32[$79 >> 2];
  $561 = +HEAPF32[$80 >> 2];
  $564 = $560 * 0.0 - $561;
  $565 = $560 + $561 * 0.0;
  if (($564 != $564 | 0.0 != 0.0) & ($565 != $565 | 0.0 != 0.0)) {
   ___mulsc3($16, $560, $561, 0.0, 1.0);
   $574 = +HEAPF32[$16 >> 2];
   $576 = +HEAPF32[$16 + 4 >> 2];
  } else {
   $574 = $564;
   $576 = $565;
  }
  $571 = +HEAPF32[$55 >> 2];
  $572 = +HEAPF32[$56 >> 2];
  HEAPF32[$79 >> 2] = $571 - $574;
  HEAPF32[$80 >> 2] = $572 - $576;
  HEAPF32[$55 >> 2] = $574 + $571;
  HEAPF32[$56 >> 2] = $576 + $572;
  $579 = +HEAPF32[$127 >> 2];
  $580 = +HEAPF32[$128 >> 2];
  $583 = $579 * 0.0 - $580;
  $584 = $579 + $580 * 0.0;
  if (($583 != $583 | 0.0 != 0.0) & ($584 != $584 | 0.0 != 0.0)) {
   ___mulsc3($17, $579, $580, 0.0, 1.0);
   $593 = +HEAPF32[$17 >> 2];
   $595 = +HEAPF32[$17 + 4 >> 2];
  } else {
   $593 = $583;
   $595 = $584;
  }
  $590 = +HEAPF32[$103 >> 2];
  $591 = +HEAPF32[$104 >> 2];
  HEAPF32[$127 >> 2] = $590 - $593;
  HEAPF32[$128 >> 2] = $591 - $595;
  HEAPF32[$103 >> 2] = $593 + $590;
  HEAPF32[$104 >> 2] = $595 + $591;
  $600 = +HEAPF32[$85 >> 2];
  $601 = +HEAPF32[$86 >> 2];
  $603 = $601 * .70710677;
  $605 = $600 * -.70710677 - $603;
  $606 = $600 * .70710677 - $603;
  if (($605 != $605 | 0.0 != 0.0) & ($606 != $606 | 0.0 != 0.0)) {
   ___muldc3($18, $600, $601, -.70710677, .70710677);
   $613 = +HEAPF64[$18 >> 3];
   $615 = +HEAPF64[$18 + 8 >> 3];
  } else {
   $613 = $605;
   $615 = $606;
  }
  $612 = $613;
  $614 = $615;
  $616 = +HEAPF32[$61 >> 2];
  $617 = +HEAPF32[$62 >> 2];
  HEAPF32[$85 >> 2] = $616 - $612;
  HEAPF32[$86 >> 2] = $617 - $614;
  HEAPF32[$61 >> 2] = $612 + $616;
  HEAPF32[$62 >> 2] = $614 + $617;
  $624 = +HEAPF32[$133 >> 2];
  $625 = +HEAPF32[$134 >> 2];
  $627 = $625 * .70710677;
  $629 = $624 * -.70710677 - $627;
  $630 = $624 * .70710677 - $627;
  if (($629 != $629 | 0.0 != 0.0) & ($630 != $630 | 0.0 != 0.0)) {
   ___muldc3($19, $624, $625, -.70710677, .70710677);
   $637 = +HEAPF64[$19 >> 3];
   $639 = +HEAPF64[$19 + 8 >> 3];
  } else {
   $637 = $629;
   $639 = $630;
  }
  $636 = $637;
  $638 = $639;
  $640 = +HEAPF32[$109 >> 2];
  $641 = +HEAPF32[$110 >> 2];
  HEAPF32[$133 >> 2] = $640 - $636;
  HEAPF32[$134 >> 2] = $641 - $638;
  $storemerge34 = $638 + $641;
  $storemerge37 = $636 + $640;
 }
 HEAPF32[$109 >> 2] = $storemerge37;
 HEAPF32[$110 >> 2] = $storemerge34;
 $646 = +HEAPF32[$91 >> 2];
 $647 = +HEAPF32[$92 >> 2];
 $648 = +HEAPF32[$37 >> 2];
 $649 = +HEAPF32[$44 >> 2];
 HEAPF32[$91 >> 2] = $648 - $646;
 HEAPF32[$92 >> 2] = $649 - $647;
 HEAPF32[$37 >> 2] = $646 + $648;
 HEAPF32[$44 >> 2] = $647 + $649;
 $656 = +HEAPF32[$97 >> 2];
 $657 = +HEAPF32[$98 >> 2];
 $658 = $656 * .9238795;
 $659 = $657 * .38268346;
 $660 = $656 * .38268346;
 $661 = $657 * .9238795;
 if ($40) {
  $662 = $658 + $659;
  $663 = $661 - $660;
  if (($662 != $662 | 0.0 != 0.0) & ($663 != $663 | 0.0 != 0.0)) {
   ___muldc3($20, $656, $657, .9238795, -.38268346);
   $670 = +HEAPF64[$20 >> 3];
   $672 = +HEAPF64[$20 + 8 >> 3];
  } else {
   $670 = $662;
   $672 = $663;
  }
  $669 = $670;
  $671 = $672;
  $673 = +HEAPF32[$49 >> 2];
  $674 = +HEAPF32[$50 >> 2];
  HEAPF32[$97 >> 2] = $673 - $669;
  HEAPF32[$98 >> 2] = $674 - $671;
  HEAPF32[$49 >> 2] = $669 + $673;
  HEAPF32[$50 >> 2] = $671 + $674;
  $681 = +HEAPF32[$103 >> 2];
  $682 = +HEAPF32[$104 >> 2];
  $683 = $681 * .70710677;
  $684 = $682 * .70710677;
  $685 = $683 + $684;
  $686 = $684 - $683;
  if (($685 != $685 | 0.0 != 0.0) & ($686 != $686 | 0.0 != 0.0)) {
   ___muldc3($21, $681, $682, .70710677, -.70710677);
   $693 = +HEAPF64[$21 >> 3];
   $695 = +HEAPF64[$21 + 8 >> 3];
  } else {
   $693 = $685;
   $695 = $686;
  }
  $692 = $693;
  $694 = $695;
  $696 = +HEAPF32[$55 >> 2];
  $697 = +HEAPF32[$56 >> 2];
  HEAPF32[$103 >> 2] = $696 - $692;
  HEAPF32[$104 >> 2] = $697 - $694;
  HEAPF32[$55 >> 2] = $692 + $696;
  HEAPF32[$56 >> 2] = $694 + $697;
  $704 = +HEAPF32[$109 >> 2];
  $705 = +HEAPF32[$110 >> 2];
  $710 = $704 * .38268343 + $705 * .9238795;
  $711 = $705 * .38268343 - $704 * .9238795;
  if (($710 != $710 | 0.0 != 0.0) & ($711 != $711 | 0.0 != 0.0)) {
   ___muldc3($22, $704, $705, .38268343, -.9238795);
   $718 = +HEAPF64[$22 >> 3];
   $720 = +HEAPF64[$22 + 8 >> 3];
  } else {
   $718 = $710;
   $720 = $711;
  }
  $717 = $718;
  $719 = $720;
  $721 = +HEAPF32[$61 >> 2];
  $722 = +HEAPF32[$62 >> 2];
  HEAPF32[$109 >> 2] = $721 - $717;
  HEAPF32[$110 >> 2] = $722 - $719;
  HEAPF32[$61 >> 2] = $717 + $721;
  HEAPF32[$62 >> 2] = $719 + $722;
  $727 = +HEAPF32[$115 >> 2];
  $728 = +HEAPF32[$116 >> 2];
  $731 = $728 - $727 * 0.0;
  $732 = $728 * -0.0 - $727;
  if (($731 != $731 | 0.0 != 0.0) & ($732 != $732 | 0.0 != 0.0)) {
   ___mulsc3($23, -$727, -$728, 0.0, 1.0);
   $743 = +HEAPF32[$23 >> 2];
   $745 = +HEAPF32[$23 + 4 >> 2];
  } else {
   $743 = $731;
   $745 = $732;
  }
  $740 = +HEAPF32[$67 >> 2];
  $741 = +HEAPF32[$68 >> 2];
  HEAPF32[$115 >> 2] = $740 - $743;
  HEAPF32[$116 >> 2] = $741 - $745;
  HEAPF32[$67 >> 2] = $743 + $740;
  HEAPF32[$68 >> 2] = $745 + $741;
  $750 = +HEAPF32[$121 >> 2];
  $751 = +HEAPF32[$122 >> 2];
  $756 = $751 * .92387956 - $750 * .3826834;
  $757 = $751 * -.3826834 - $750 * .92387956;
  if (($756 != $756 | 0.0 != 0.0) & ($757 != $757 | 0.0 != 0.0)) {
   ___muldc3($24, $750, $751, -.3826834, -.92387956);
   $764 = +HEAPF64[$24 >> 3];
   $766 = +HEAPF64[$24 + 8 >> 3];
  } else {
   $764 = $756;
   $766 = $757;
  }
  $763 = $764;
  $765 = $766;
  $767 = +HEAPF32[$73 >> 2];
  $768 = +HEAPF32[$74 >> 2];
  HEAPF32[$121 >> 2] = $767 - $763;
  HEAPF32[$122 >> 2] = $768 - $765;
  HEAPF32[$73 >> 2] = $763 + $767;
  HEAPF32[$74 >> 2] = $765 + $768;
  $775 = +HEAPF32[$127 >> 2];
  $776 = +HEAPF32[$128 >> 2];
  $777 = $775 * -.70710677;
  $778 = $776 * -.70710677;
  $779 = $777 - $778;
  $780 = $777 + $778;
  if (($779 != $779 | 0.0 != 0.0) & ($780 != $780 | 0.0 != 0.0)) {
   ___muldc3($25, $775, $776, -.70710677, -.70710677);
   $787 = +HEAPF64[$25 >> 3];
   $789 = +HEAPF64[$25 + 8 >> 3];
  } else {
   $787 = $779;
   $789 = $780;
  }
  $786 = $787;
  $788 = $789;
  $790 = +HEAPF32[$79 >> 2];
  $791 = +HEAPF32[$80 >> 2];
  HEAPF32[$127 >> 2] = $790 - $786;
  HEAPF32[$128 >> 2] = $791 - $788;
  HEAPF32[$79 >> 2] = $786 + $790;
  HEAPF32[$80 >> 2] = $788 + $791;
  $798 = +HEAPF32[$133 >> 2];
  $799 = +HEAPF32[$134 >> 2];
  $804 = $799 * .38268349 - $798 * .9238795;
  $805 = $799 * -.9238795 - $798 * .38268349;
  if (($804 != $804 | 0.0 != 0.0) & ($805 != $805 | 0.0 != 0.0)) {
   ___muldc3($26, $798, $799, -.9238795, -.38268349);
   $812 = +HEAPF64[$26 >> 3];
   $814 = +HEAPF64[$26 + 8 >> 3];
  } else {
   $812 = $804;
   $814 = $805;
  }
  $811 = $812;
  $813 = $814;
  $815 = +HEAPF32[$85 >> 2];
  $816 = +HEAPF32[$86 >> 2];
  HEAPF32[$133 >> 2] = $815 - $811;
  HEAPF32[$134 >> 2] = $816 - $813;
  $storemerge35 = $813 + $816;
  $storemerge36 = $811 + $815;
  HEAPF32[$85 >> 2] = $storemerge36;
  HEAPF32[$86 >> 2] = $storemerge35;
  STACKTOP = sp;
  return;
 } else {
  $821 = $658 - $659;
  $822 = $660 + $661;
  if (($821 != $821 | 0.0 != 0.0) & ($822 != $822 | 0.0 != 0.0)) {
   ___muldc3($27, $656, $657, .9238795, .38268346);
   $829 = +HEAPF64[$27 >> 3];
   $831 = +HEAPF64[$27 + 8 >> 3];
  } else {
   $829 = $821;
   $831 = $822;
  }
  $828 = $829;
  $830 = $831;
  $832 = +HEAPF32[$49 >> 2];
  $833 = +HEAPF32[$50 >> 2];
  HEAPF32[$97 >> 2] = $832 - $828;
  HEAPF32[$98 >> 2] = $833 - $830;
  HEAPF32[$49 >> 2] = $828 + $832;
  HEAPF32[$50 >> 2] = $830 + $833;
  $840 = +HEAPF32[$103 >> 2];
  $841 = +HEAPF32[$104 >> 2];
  $842 = $840 * .70710677;
  $843 = $841 * .70710677;
  $844 = $842 - $843;
  $845 = $842 + $843;
  if (($844 != $844 | 0.0 != 0.0) & ($845 != $845 | 0.0 != 0.0)) {
   ___muldc3($28, $840, $841, .70710677, .70710677);
   $852 = +HEAPF64[$28 >> 3];
   $854 = +HEAPF64[$28 + 8 >> 3];
  } else {
   $852 = $844;
   $854 = $845;
  }
  $851 = $852;
  $853 = $854;
  $855 = +HEAPF32[$55 >> 2];
  $856 = +HEAPF32[$56 >> 2];
  HEAPF32[$103 >> 2] = $855 - $851;
  HEAPF32[$104 >> 2] = $856 - $853;
  HEAPF32[$55 >> 2] = $851 + $855;
  HEAPF32[$56 >> 2] = $853 + $856;
  $863 = +HEAPF32[$109 >> 2];
  $864 = +HEAPF32[$110 >> 2];
  $869 = $863 * .38268343 - $864 * .9238795;
  $870 = $863 * .9238795 + $864 * .38268343;
  if (($869 != $869 | 0.0 != 0.0) & ($870 != $870 | 0.0 != 0.0)) {
   ___muldc3($29, $863, $864, .38268343, .9238795);
   $877 = +HEAPF64[$29 >> 3];
   $879 = +HEAPF64[$29 + 8 >> 3];
  } else {
   $877 = $869;
   $879 = $870;
  }
  $876 = $877;
  $878 = $879;
  $880 = +HEAPF32[$61 >> 2];
  $881 = +HEAPF32[$62 >> 2];
  HEAPF32[$109 >> 2] = $880 - $876;
  HEAPF32[$110 >> 2] = $881 - $878;
  HEAPF32[$61 >> 2] = $876 + $880;
  HEAPF32[$62 >> 2] = $878 + $881;
  $886 = +HEAPF32[$115 >> 2];
  $887 = +HEAPF32[$116 >> 2];
  $890 = $886 * 0.0 - $887;
  $891 = $886 + $887 * 0.0;
  if (($890 != $890 | 0.0 != 0.0) & ($891 != $891 | 0.0 != 0.0)) {
   ___mulsc3($30, $886, $887, 0.0, 1.0);
   $900 = +HEAPF32[$30 >> 2];
   $902 = +HEAPF32[$30 + 4 >> 2];
  } else {
   $900 = $890;
   $902 = $891;
  }
  $897 = +HEAPF32[$67 >> 2];
  $898 = +HEAPF32[$68 >> 2];
  HEAPF32[$115 >> 2] = $897 - $900;
  HEAPF32[$116 >> 2] = $898 - $902;
  HEAPF32[$67 >> 2] = $900 + $897;
  HEAPF32[$68 >> 2] = $902 + $898;
  $907 = +HEAPF32[$121 >> 2];
  $908 = +HEAPF32[$122 >> 2];
  $913 = $907 * -.3826834 - $908 * .92387956;
  $914 = $907 * .92387956 - $908 * .3826834;
  if (($913 != $913 | 0.0 != 0.0) & ($914 != $914 | 0.0 != 0.0)) {
   ___muldc3($31, $907, $908, -.3826834, .92387956);
   $921 = +HEAPF64[$31 >> 3];
   $923 = +HEAPF64[$31 + 8 >> 3];
  } else {
   $921 = $913;
   $923 = $914;
  }
  $920 = $921;
  $922 = $923;
  $924 = +HEAPF32[$73 >> 2];
  $925 = +HEAPF32[$74 >> 2];
  HEAPF32[$121 >> 2] = $924 - $920;
  HEAPF32[$122 >> 2] = $925 - $922;
  HEAPF32[$73 >> 2] = $920 + $924;
  HEAPF32[$74 >> 2] = $922 + $925;
  $932 = +HEAPF32[$127 >> 2];
  $933 = +HEAPF32[$128 >> 2];
  $935 = $933 * .70710677;
  $937 = $932 * -.70710677 - $935;
  $938 = $932 * .70710677 - $935;
  if (($937 != $937 | 0.0 != 0.0) & ($938 != $938 | 0.0 != 0.0)) {
   ___muldc3($32, $932, $933, -.70710677, .70710677);
   $945 = +HEAPF64[$32 >> 3];
   $947 = +HEAPF64[$32 + 8 >> 3];
  } else {
   $945 = $937;
   $947 = $938;
  }
  $944 = $945;
  $946 = $947;
  $948 = +HEAPF32[$79 >> 2];
  $949 = +HEAPF32[$80 >> 2];
  HEAPF32[$127 >> 2] = $948 - $944;
  HEAPF32[$128 >> 2] = $949 - $946;
  HEAPF32[$79 >> 2] = $944 + $948;
  HEAPF32[$80 >> 2] = $946 + $949;
  $956 = +HEAPF32[$133 >> 2];
  $957 = +HEAPF32[$134 >> 2];
  $962 = $956 * -.9238795 - $957 * .38268349;
  $963 = $956 * .38268349 - $957 * .9238795;
  if (($962 != $962 | 0.0 != 0.0) & ($963 != $963 | 0.0 != 0.0)) {
   ___muldc3($33, $956, $957, -.9238795, .38268349);
   $970 = +HEAPF64[$33 >> 3];
   $972 = +HEAPF64[$33 + 8 >> 3];
  } else {
   $970 = $962;
   $972 = $963;
  }
  $969 = $970;
  $971 = $972;
  $973 = +HEAPF32[$85 >> 2];
  $974 = +HEAPF32[$86 >> 2];
  HEAPF32[$133 >> 2] = $973 - $969;
  HEAPF32[$134 >> 2] = $974 - $971;
  $storemerge35 = $971 + $974;
  $storemerge36 = $969 + $973;
  HEAPF32[$85 >> 2] = $storemerge36;
  HEAPF32[$86 >> 2] = $storemerge35;
  STACKTOP = sp;
  return;
 }
}

function _fft_execute_dft_7($_q) {
 $_q = $_q | 0;
 var $$byval_copy5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $102 = 0.0, $108 = 0.0, $11 = 0, $110 = 0.0, $112 = 0.0, $114 = 0.0, $116 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $127 = 0.0, $128 = 0.0, $13 = 0, $135 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $144 = 0.0, $145 = 0.0, $15 = 0, $152 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $16 = 0, $161 = 0.0, $162 = 0.0, $169 = 0.0, $17 = 0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $186 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0.0, $195 = 0.0, $196 = 0.0, $2 = 0, $20 = 0, $203 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $21 = 0, $212 = 0.0, $213 = 0.0, $22 = 0, $220 = 0.0, $222 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $23 = 0, $233 = 0.0, $234 = 0.0, $24 = 0, $241 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $258 = 0.0, $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0.0, $267 = 0.0, $268 = 0.0, $27 = 0, $275 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0, $284 = 0.0, $285 = 0.0, $29 = 0, $292 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $3 = 0, $30 = 0, $301 = 0.0, $302 = 0.0, $309 = 0.0, $31 = 0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $326 = 0.0, $328 = 0.0, $33 = 0, $331 = 0.0, $332 = 0.0, $333 = 0.0, $334 = 0.0, $339 = 0.0, $34 = 0, $340 = 0.0, $347 = 0.0, $349 = 0.0, $35 = 0, $350 = 0.0, $351 = 0.0, $356 = 0.0, $357 = 0.0, $36 = 0, $364 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0, $37 = 0, $373 = 0.0, $374 = 0.0, $38 = 0, $381 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $39 = 0, $390 = 0.0, $391 = 0.0, $398 = 0.0, $4 = 0, $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $407 = 0.0, $408 = 0.0, $41 = 0, $415 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0, $424 = 0.0, $425 = 0.0, $43 = 0, $432 = 0.0, $434 = 0.0, $437 = 0.0, $438 = 0.0, $439 = 0.0, $44 = 0, $440 = 0.0, $445 = 0.0, $446 = 0.0, $45 = 0, $453 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0.0, $46 = 0, $462 = 0.0, $463 = 0.0, $47 = 0, $470 = 0.0, $472 = 0.0, $473 = 0.0, $474 = 0.0, $479 = 0.0, $480 = 0.0, $487 = 0.0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0.0, $496 = 0.0, $497 = 0.0, $5 = 0, $504 = 0.0, $506 = 0.0, $507 = 0.0, $508 = 0.0, $51 = 0, $513 = 0.0, $514 = 0.0, $521 = 0.0, $523 = 0.0, $524 = 0.0, $525 = 0.0, $53 = 0, $530 = 0.0, $531 = 0.0, $538 = 0.0, $540 = 0.0, $543 = 0.0, $544 = 0.0, $545 = 0.0, $546 = 0.0, $55 = 0, $551 = 0.0, $552 = 0.0, $559 = 0.0, $561 = 0.0, $562 = 0.0, $563 = 0.0, $568 = 0.0, $569 = 0.0, $57 = 0, $576 = 0.0, $578 = 0.0, $579 = 0.0, $580 = 0.0, $585 = 0.0, $586 = 0.0, $593 = 0.0, $595 = 0.0, $596 = 0.0, $597 = 0.0, $6 = 0, $602 = 0.0, $603 = 0.0, $61 = 0, $610 = 0.0, $612 = 0.0, $613 = 0.0, $614 = 0.0, $619 = 0.0, $620 = 0.0, $627 = 0.0, $629 = 0.0, $63 = 0, $630 = 0.0, $631 = 0.0, $636 = 0.0, $637 = 0.0, $644 = 0.0, $646 = 0.0, $649 = 0.0, $650 = 0.0, $651 = 0.0, $652 = 0.0, $657 = 0.0, $658 = 0.0, $665 = 0.0, $667 = 0.0, $668 = 0.0, $669 = 0.0, $67 = 0, $674 = 0.0, $675 = 0.0, $682 = 0.0, $684 = 0.0, $685 = 0.0, $686 = 0.0, $69 = 0, $691 = 0.0, $692 = 0.0, $699 = 0.0, $7 = 0, $701 = 0.0, $702 = 0.0, $703 = 0.0, $708 = 0.0, $709 = 0.0, $716 = 0.0, $718 = 0.0, $719 = 0.0, $720 = 0.0, $725 = 0.0, $726 = 0.0, $73 = 0, $732 = 0.0, $733 = 0.0, $734 = 0.0, $735 = 0.0, $736 = 0.0, $737 = 0.0, $742 = 0.0, $743 = 0.0, $749 = 0.0, $75 = 0, $750 = 0.0, $751 = 0.0, $752 = 0.0, $753 = 0, $754 = 0, $79 = 0, $8 = 0, $81 = 0, $85 = 0, $87 = 0, $9 = 0, $90 = 0.0, $96 = 0.0, $98 = 0.0, $g1$sroa$0$0 = 0.0, $g1$sroa$12$0 = 0.0, $g2$sroa$0$0 = 0.0, $g2$sroa$12$0 = 0.0, $g3$sroa$0$0 = 0.0, $g3$sroa$12$0 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy5 = sp + 384 | 0;
 $0 = sp + 376 | 0;
 $1 = sp + 368 | 0;
 $2 = sp + 360 | 0;
 $3 = sp + 352 | 0;
 $4 = sp + 344 | 0;
 $5 = sp + 336 | 0;
 $6 = sp + 328 | 0;
 $7 = sp + 320 | 0;
 $8 = sp + 312 | 0;
 $9 = sp + 304 | 0;
 $10 = sp + 296 | 0;
 $11 = sp + 288 | 0;
 $12 = sp + 280 | 0;
 $13 = sp + 272 | 0;
 $14 = sp + 264 | 0;
 $15 = sp + 256 | 0;
 $16 = sp + 248 | 0;
 $17 = sp + 240 | 0;
 $18 = sp + 232 | 0;
 $19 = sp + 224 | 0;
 $20 = sp + 216 | 0;
 $21 = sp + 208 | 0;
 $22 = sp + 200 | 0;
 $23 = sp + 192 | 0;
 $24 = sp + 184 | 0;
 $25 = sp + 176 | 0;
 $26 = sp + 168 | 0;
 $27 = sp + 160 | 0;
 $28 = sp + 152 | 0;
 $29 = sp + 144 | 0;
 $30 = sp + 136 | 0;
 $31 = sp + 128 | 0;
 $32 = sp + 120 | 0;
 $33 = sp + 112 | 0;
 $34 = sp + 104 | 0;
 $35 = sp + 96 | 0;
 $36 = sp + 88 | 0;
 $37 = sp + 80 | 0;
 $38 = sp + 72 | 0;
 $39 = sp + 64 | 0;
 $40 = sp + 56 | 0;
 $41 = sp + 48 | 0;
 $42 = sp + 40 | 0;
 $43 = sp + 32 | 0;
 $44 = sp + 24 | 0;
 $45 = sp + 16 | 0;
 $46 = sp + 8 | 0;
 $47 = sp;
 $49 = HEAP32[$_q + 4 >> 2] | 0;
 $51 = HEAP32[$_q + 8 >> 2] | 0;
 $53 = $49 + 4 | 0;
 $55 = $49 + 8 | 0;
 $57 = $49 + 12 | 0;
 $61 = $49 + 16 | 0;
 $63 = $49 + 20 | 0;
 $67 = $49 + 24 | 0;
 $69 = $49 + 28 | 0;
 $73 = $49 + 32 | 0;
 $75 = $49 + 36 | 0;
 $79 = $49 + 40 | 0;
 $81 = $49 + 44 | 0;
 $85 = $49 + 48 | 0;
 $87 = $49 + 52 | 0;
 $90 = +HEAPF32[$53 >> 2] + +HEAPF32[$57 >> 2] + +HEAPF32[$63 >> 2] + +HEAPF32[$69 >> 2] + +HEAPF32[$75 >> 2] + +HEAPF32[$81 >> 2] + +HEAPF32[$87 >> 2];
 HEAPF32[$51 >> 2] = +HEAPF32[$49 >> 2] + +HEAPF32[$55 >> 2] + +HEAPF32[$61 >> 2] + +HEAPF32[$67 >> 2] + +HEAPF32[$73 >> 2] + +HEAPF32[$79 >> 2] + +HEAPF32[$85 >> 2];
 HEAPF32[$51 + 4 >> 2] = $90;
 if ((HEAP32[$_q + 12 >> 2] | 0) == 1) {
  $g1$sroa$0$0 = .6234897971153259;
  $g1$sroa$12$0 = -.7818315029144287;
  $g2$sroa$0$0 = -.22252093255519867;
  $g2$sroa$12$0 = -.9749279022216797;
  $g3$sroa$0$0 = -.9009688496589661;
  $g3$sroa$12$0 = -.4338837265968323;
 } else {
  HEAPF32[$1 >> 2] = .6234897971153259;
  HEAPF32[$1 + 4 >> 2] = -.7818315029144287;
  HEAP32[$$byval_copy5 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$$byval_copy5 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  _conjf($0, $$byval_copy5);
  $96 = +HEAPF32[$0 >> 2];
  $98 = +HEAPF32[$0 + 4 >> 2];
  HEAPF32[$3 >> 2] = -.22252093255519867;
  HEAPF32[$3 + 4 >> 2] = -.9749279022216797;
  HEAP32[$$byval_copy5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$$byval_copy5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  _conjf($2, $$byval_copy5);
  $100 = +HEAPF32[$2 >> 2];
  $102 = +HEAPF32[$2 + 4 >> 2];
  HEAPF32[$5 >> 2] = -.9009688496589661;
  HEAPF32[$5 + 4 >> 2] = -.4338837265968323;
  HEAP32[$$byval_copy5 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$$byval_copy5 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
  _conjf($4, $$byval_copy5);
  $g1$sroa$0$0 = $96;
  $g1$sroa$12$0 = $98;
  $g2$sroa$0$0 = $100;
  $g2$sroa$12$0 = $102;
  $g3$sroa$0$0 = +HEAPF32[$4 >> 2];
  $g3$sroa$12$0 = +HEAPF32[$4 + 4 >> 2];
 }
 HEAPF32[$7 >> 2] = $g3$sroa$0$0;
 HEAPF32[$7 + 4 >> 2] = $g3$sroa$12$0;
 HEAP32[$$byval_copy5 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$$byval_copy5 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
 _conjf($6, $$byval_copy5);
 $108 = +HEAPF32[$6 >> 2];
 $110 = +HEAPF32[$6 + 4 >> 2];
 HEAPF32[$9 >> 2] = $g2$sroa$0$0;
 HEAPF32[$9 + 4 >> 2] = $g2$sroa$12$0;
 HEAP32[$$byval_copy5 >> 2] = HEAP32[$9 >> 2];
 HEAP32[$$byval_copy5 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
 _conjf($8, $$byval_copy5);
 $112 = +HEAPF32[$8 >> 2];
 $114 = +HEAPF32[$8 + 4 >> 2];
 HEAPF32[$11 >> 2] = $g1$sroa$0$0;
 HEAPF32[$11 + 4 >> 2] = $g1$sroa$12$0;
 HEAP32[$$byval_copy5 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$$byval_copy5 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
 _conjf($10, $$byval_copy5);
 $116 = +HEAPF32[$10 >> 2];
 $118 = +HEAPF32[$10 + 4 >> 2];
 $119 = +HEAPF32[$49 >> 2];
 $120 = +HEAPF32[$53 >> 2];
 $121 = +HEAPF32[$55 >> 2];
 $122 = +HEAPF32[$57 >> 2];
 $127 = $g1$sroa$0$0 * $121 - $g1$sroa$12$0 * $122;
 $128 = $g1$sroa$12$0 * $121 + $g1$sroa$0$0 * $122;
 if (($127 != $127 | 0.0 != 0.0) & ($128 != $128 | 0.0 != 0.0)) {
  ___mulsc3($12, $121, $122, $g1$sroa$0$0, $g1$sroa$12$0);
  $135 = +HEAPF32[$12 >> 2];
  $137 = +HEAPF32[$12 + 4 >> 2];
 } else {
  $135 = $127;
  $137 = $128;
 }
 $138 = +HEAPF32[$61 >> 2];
 $139 = +HEAPF32[$63 >> 2];
 $144 = $g2$sroa$0$0 * $138 - $g2$sroa$12$0 * $139;
 $145 = $g2$sroa$12$0 * $138 + $g2$sroa$0$0 * $139;
 if (($144 != $144 | 0.0 != 0.0) & ($145 != $145 | 0.0 != 0.0)) {
  ___mulsc3($13, $138, $139, $g2$sroa$0$0, $g2$sroa$12$0);
  $152 = +HEAPF32[$13 >> 2];
  $154 = +HEAPF32[$13 + 4 >> 2];
 } else {
  $152 = $144;
  $154 = $145;
 }
 $155 = +HEAPF32[$67 >> 2];
 $156 = +HEAPF32[$69 >> 2];
 $161 = $g3$sroa$0$0 * $155 - $g3$sroa$12$0 * $156;
 $162 = $g3$sroa$12$0 * $155 + $g3$sroa$0$0 * $156;
 if (($161 != $161 | 0.0 != 0.0) & ($162 != $162 | 0.0 != 0.0)) {
  ___mulsc3($14, $155, $156, $g3$sroa$0$0, $g3$sroa$12$0);
  $169 = +HEAPF32[$14 >> 2];
  $171 = +HEAPF32[$14 + 4 >> 2];
 } else {
  $169 = $161;
  $171 = $162;
 }
 $172 = +HEAPF32[$73 >> 2];
 $173 = +HEAPF32[$75 >> 2];
 $178 = $108 * $172 - $110 * $173;
 $179 = $110 * $172 + $108 * $173;
 if (($178 != $178 | 0.0 != 0.0) & ($179 != $179 | 0.0 != 0.0)) {
  ___mulsc3($15, $172, $173, $108, $110);
  $186 = +HEAPF32[$15 >> 2];
  $188 = +HEAPF32[$15 + 4 >> 2];
 } else {
  $186 = $178;
  $188 = $179;
 }
 $189 = +HEAPF32[$79 >> 2];
 $190 = +HEAPF32[$81 >> 2];
 $195 = $112 * $189 - $114 * $190;
 $196 = $114 * $189 + $112 * $190;
 if (($195 != $195 | 0.0 != 0.0) & ($196 != $196 | 0.0 != 0.0)) {
  ___mulsc3($16, $189, $190, $112, $114);
  $203 = +HEAPF32[$16 >> 2];
  $205 = +HEAPF32[$16 + 4 >> 2];
 } else {
  $203 = $195;
  $205 = $196;
 }
 $206 = +HEAPF32[$85 >> 2];
 $207 = +HEAPF32[$87 >> 2];
 $212 = $116 * $206 - $118 * $207;
 $213 = $118 * $206 + $116 * $207;
 if (($212 != $212 | 0.0 != 0.0) & ($213 != $213 | 0.0 != 0.0)) {
  ___mulsc3($17, $206, $207, $116, $118);
  $220 = +HEAPF32[$17 >> 2];
  $222 = +HEAPF32[$17 + 4 >> 2];
 } else {
  $220 = $212;
  $222 = $213;
 }
 HEAPF32[$51 + 8 >> 2] = $119 + $135 + $152 + $169 + $186 + $203 + $220;
 HEAPF32[$51 + 12 >> 2] = $120 + $137 + $154 + $171 + $188 + $205 + $222;
 $225 = +HEAPF32[$49 >> 2];
 $226 = +HEAPF32[$53 >> 2];
 $227 = +HEAPF32[$55 >> 2];
 $228 = +HEAPF32[$57 >> 2];
 $233 = $g2$sroa$0$0 * $227 - $g2$sroa$12$0 * $228;
 $234 = $g2$sroa$12$0 * $227 + $g2$sroa$0$0 * $228;
 if (($233 != $233 | 0.0 != 0.0) & ($234 != $234 | 0.0 != 0.0)) {
  ___mulsc3($18, $227, $228, $g2$sroa$0$0, $g2$sroa$12$0);
  $241 = +HEAPF32[$18 >> 2];
  $243 = +HEAPF32[$18 + 4 >> 2];
 } else {
  $241 = $233;
  $243 = $234;
 }
 $244 = +HEAPF32[$61 >> 2];
 $245 = +HEAPF32[$63 >> 2];
 $250 = $108 * $244 - $110 * $245;
 $251 = $110 * $244 + $108 * $245;
 if (($250 != $250 | 0.0 != 0.0) & ($251 != $251 | 0.0 != 0.0)) {
  ___mulsc3($19, $244, $245, $108, $110);
  $258 = +HEAPF32[$19 >> 2];
  $260 = +HEAPF32[$19 + 4 >> 2];
 } else {
  $258 = $250;
  $260 = $251;
 }
 $261 = +HEAPF32[$67 >> 2];
 $262 = +HEAPF32[$69 >> 2];
 $267 = $116 * $261 - $118 * $262;
 $268 = $118 * $261 + $116 * $262;
 if (($267 != $267 | 0.0 != 0.0) & ($268 != $268 | 0.0 != 0.0)) {
  ___mulsc3($20, $261, $262, $116, $118);
  $275 = +HEAPF32[$20 >> 2];
  $277 = +HEAPF32[$20 + 4 >> 2];
 } else {
  $275 = $267;
  $277 = $268;
 }
 $278 = +HEAPF32[$73 >> 2];
 $279 = +HEAPF32[$75 >> 2];
 $284 = $g1$sroa$0$0 * $278 - $g1$sroa$12$0 * $279;
 $285 = $g1$sroa$12$0 * $278 + $g1$sroa$0$0 * $279;
 if (($284 != $284 | 0.0 != 0.0) & ($285 != $285 | 0.0 != 0.0)) {
  ___mulsc3($21, $278, $279, $g1$sroa$0$0, $g1$sroa$12$0);
  $292 = +HEAPF32[$21 >> 2];
  $294 = +HEAPF32[$21 + 4 >> 2];
 } else {
  $292 = $284;
  $294 = $285;
 }
 $295 = +HEAPF32[$79 >> 2];
 $296 = +HEAPF32[$81 >> 2];
 $301 = $g3$sroa$0$0 * $295 - $g3$sroa$12$0 * $296;
 $302 = $g3$sroa$12$0 * $295 + $g3$sroa$0$0 * $296;
 if (($301 != $301 | 0.0 != 0.0) & ($302 != $302 | 0.0 != 0.0)) {
  ___mulsc3($22, $295, $296, $g3$sroa$0$0, $g3$sroa$12$0);
  $309 = +HEAPF32[$22 >> 2];
  $311 = +HEAPF32[$22 + 4 >> 2];
 } else {
  $309 = $301;
  $311 = $302;
 }
 $312 = +HEAPF32[$85 >> 2];
 $313 = +HEAPF32[$87 >> 2];
 $318 = $112 * $312 - $114 * $313;
 $319 = $114 * $312 + $112 * $313;
 if (($318 != $318 | 0.0 != 0.0) & ($319 != $319 | 0.0 != 0.0)) {
  ___mulsc3($23, $312, $313, $112, $114);
  $326 = +HEAPF32[$23 >> 2];
  $328 = +HEAPF32[$23 + 4 >> 2];
 } else {
  $326 = $318;
  $328 = $319;
 }
 HEAPF32[$51 + 16 >> 2] = $225 + $241 + $258 + $275 + $292 + $309 + $326;
 HEAPF32[$51 + 20 >> 2] = $226 + $243 + $260 + $277 + $294 + $311 + $328;
 $331 = +HEAPF32[$49 >> 2];
 $332 = +HEAPF32[$53 >> 2];
 $333 = +HEAPF32[$55 >> 2];
 $334 = +HEAPF32[$57 >> 2];
 $339 = $g3$sroa$0$0 * $333 - $g3$sroa$12$0 * $334;
 $340 = $g3$sroa$12$0 * $333 + $g3$sroa$0$0 * $334;
 if (($339 != $339 | 0.0 != 0.0) & ($340 != $340 | 0.0 != 0.0)) {
  ___mulsc3($24, $333, $334, $g3$sroa$0$0, $g3$sroa$12$0);
  $347 = +HEAPF32[$24 >> 2];
  $349 = +HEAPF32[$24 + 4 >> 2];
 } else {
  $347 = $339;
  $349 = $340;
 }
 $350 = +HEAPF32[$61 >> 2];
 $351 = +HEAPF32[$63 >> 2];
 $356 = $116 * $350 - $118 * $351;
 $357 = $118 * $350 + $116 * $351;
 if (($356 != $356 | 0.0 != 0.0) & ($357 != $357 | 0.0 != 0.0)) {
  ___mulsc3($25, $350, $351, $116, $118);
  $364 = +HEAPF32[$25 >> 2];
  $366 = +HEAPF32[$25 + 4 >> 2];
 } else {
  $364 = $356;
  $366 = $357;
 }
 $367 = +HEAPF32[$67 >> 2];
 $368 = +HEAPF32[$69 >> 2];
 $373 = $g2$sroa$0$0 * $367 - $g2$sroa$12$0 * $368;
 $374 = $g2$sroa$12$0 * $367 + $g2$sroa$0$0 * $368;
 if (($373 != $373 | 0.0 != 0.0) & ($374 != $374 | 0.0 != 0.0)) {
  ___mulsc3($26, $367, $368, $g2$sroa$0$0, $g2$sroa$12$0);
  $381 = +HEAPF32[$26 >> 2];
  $383 = +HEAPF32[$26 + 4 >> 2];
 } else {
  $381 = $373;
  $383 = $374;
 }
 $384 = +HEAPF32[$73 >> 2];
 $385 = +HEAPF32[$75 >> 2];
 $390 = $112 * $384 - $114 * $385;
 $391 = $114 * $384 + $112 * $385;
 if (($390 != $390 | 0.0 != 0.0) & ($391 != $391 | 0.0 != 0.0)) {
  ___mulsc3($27, $384, $385, $112, $114);
  $398 = +HEAPF32[$27 >> 2];
  $400 = +HEAPF32[$27 + 4 >> 2];
 } else {
  $398 = $390;
  $400 = $391;
 }
 $401 = +HEAPF32[$79 >> 2];
 $402 = +HEAPF32[$81 >> 2];
 $407 = $g1$sroa$0$0 * $401 - $g1$sroa$12$0 * $402;
 $408 = $g1$sroa$12$0 * $401 + $g1$sroa$0$0 * $402;
 if (($407 != $407 | 0.0 != 0.0) & ($408 != $408 | 0.0 != 0.0)) {
  ___mulsc3($28, $401, $402, $g1$sroa$0$0, $g1$sroa$12$0);
  $415 = +HEAPF32[$28 >> 2];
  $417 = +HEAPF32[$28 + 4 >> 2];
 } else {
  $415 = $407;
  $417 = $408;
 }
 $418 = +HEAPF32[$85 >> 2];
 $419 = +HEAPF32[$87 >> 2];
 $424 = $108 * $418 - $110 * $419;
 $425 = $110 * $418 + $108 * $419;
 if (($424 != $424 | 0.0 != 0.0) & ($425 != $425 | 0.0 != 0.0)) {
  ___mulsc3($29, $418, $419, $108, $110);
  $432 = +HEAPF32[$29 >> 2];
  $434 = +HEAPF32[$29 + 4 >> 2];
 } else {
  $432 = $424;
  $434 = $425;
 }
 HEAPF32[$51 + 24 >> 2] = $331 + $347 + $364 + $381 + $398 + $415 + $432;
 HEAPF32[$51 + 28 >> 2] = $332 + $349 + $366 + $383 + $400 + $417 + $434;
 $437 = +HEAPF32[$49 >> 2];
 $438 = +HEAPF32[$53 >> 2];
 $439 = +HEAPF32[$55 >> 2];
 $440 = +HEAPF32[$57 >> 2];
 $445 = $108 * $439 - $110 * $440;
 $446 = $110 * $439 + $108 * $440;
 if (($445 != $445 | 0.0 != 0.0) & ($446 != $446 | 0.0 != 0.0)) {
  ___mulsc3($30, $439, $440, $108, $110);
  $453 = +HEAPF32[$30 >> 2];
  $455 = +HEAPF32[$30 + 4 >> 2];
 } else {
  $453 = $445;
  $455 = $446;
 }
 $456 = +HEAPF32[$61 >> 2];
 $457 = +HEAPF32[$63 >> 2];
 $462 = $g1$sroa$0$0 * $456 - $g1$sroa$12$0 * $457;
 $463 = $g1$sroa$12$0 * $456 + $g1$sroa$0$0 * $457;
 if (($462 != $462 | 0.0 != 0.0) & ($463 != $463 | 0.0 != 0.0)) {
  ___mulsc3($31, $456, $457, $g1$sroa$0$0, $g1$sroa$12$0);
  $470 = +HEAPF32[$31 >> 2];
  $472 = +HEAPF32[$31 + 4 >> 2];
 } else {
  $470 = $462;
  $472 = $463;
 }
 $473 = +HEAPF32[$67 >> 2];
 $474 = +HEAPF32[$69 >> 2];
 $479 = $112 * $473 - $114 * $474;
 $480 = $114 * $473 + $112 * $474;
 if (($479 != $479 | 0.0 != 0.0) & ($480 != $480 | 0.0 != 0.0)) {
  ___mulsc3($32, $473, $474, $112, $114);
  $487 = +HEAPF32[$32 >> 2];
  $489 = +HEAPF32[$32 + 4 >> 2];
 } else {
  $487 = $479;
  $489 = $480;
 }
 $490 = +HEAPF32[$73 >> 2];
 $491 = +HEAPF32[$75 >> 2];
 $496 = $g2$sroa$0$0 * $490 - $g2$sroa$12$0 * $491;
 $497 = $g2$sroa$12$0 * $490 + $g2$sroa$0$0 * $491;
 if (($496 != $496 | 0.0 != 0.0) & ($497 != $497 | 0.0 != 0.0)) {
  ___mulsc3($33, $490, $491, $g2$sroa$0$0, $g2$sroa$12$0);
  $504 = +HEAPF32[$33 >> 2];
  $506 = +HEAPF32[$33 + 4 >> 2];
 } else {
  $504 = $496;
  $506 = $497;
 }
 $507 = +HEAPF32[$79 >> 2];
 $508 = +HEAPF32[$81 >> 2];
 $513 = $116 * $507 - $118 * $508;
 $514 = $118 * $507 + $116 * $508;
 if (($513 != $513 | 0.0 != 0.0) & ($514 != $514 | 0.0 != 0.0)) {
  ___mulsc3($34, $507, $508, $116, $118);
  $521 = +HEAPF32[$34 >> 2];
  $523 = +HEAPF32[$34 + 4 >> 2];
 } else {
  $521 = $513;
  $523 = $514;
 }
 $524 = +HEAPF32[$85 >> 2];
 $525 = +HEAPF32[$87 >> 2];
 $530 = $g3$sroa$0$0 * $524 - $g3$sroa$12$0 * $525;
 $531 = $g3$sroa$12$0 * $524 + $g3$sroa$0$0 * $525;
 if (($530 != $530 | 0.0 != 0.0) & ($531 != $531 | 0.0 != 0.0)) {
  ___mulsc3($35, $524, $525, $g3$sroa$0$0, $g3$sroa$12$0);
  $538 = +HEAPF32[$35 >> 2];
  $540 = +HEAPF32[$35 + 4 >> 2];
 } else {
  $538 = $530;
  $540 = $531;
 }
 HEAPF32[$51 + 32 >> 2] = $437 + $453 + $470 + $487 + $504 + $521 + $538;
 HEAPF32[$51 + 36 >> 2] = $438 + $455 + $472 + $489 + $506 + $523 + $540;
 $543 = +HEAPF32[$49 >> 2];
 $544 = +HEAPF32[$53 >> 2];
 $545 = +HEAPF32[$55 >> 2];
 $546 = +HEAPF32[$57 >> 2];
 $551 = $112 * $545 - $114 * $546;
 $552 = $114 * $545 + $112 * $546;
 if (($551 != $551 | 0.0 != 0.0) & ($552 != $552 | 0.0 != 0.0)) {
  ___mulsc3($36, $545, $546, $112, $114);
  $559 = +HEAPF32[$36 >> 2];
  $561 = +HEAPF32[$36 + 4 >> 2];
 } else {
  $559 = $551;
  $561 = $552;
 }
 $562 = +HEAPF32[$61 >> 2];
 $563 = +HEAPF32[$63 >> 2];
 $568 = $g3$sroa$0$0 * $562 - $g3$sroa$12$0 * $563;
 $569 = $g3$sroa$12$0 * $562 + $g3$sroa$0$0 * $563;
 if (($568 != $568 | 0.0 != 0.0) & ($569 != $569 | 0.0 != 0.0)) {
  ___mulsc3($37, $562, $563, $g3$sroa$0$0, $g3$sroa$12$0);
  $576 = +HEAPF32[$37 >> 2];
  $578 = +HEAPF32[$37 + 4 >> 2];
 } else {
  $576 = $568;
  $578 = $569;
 }
 $579 = +HEAPF32[$67 >> 2];
 $580 = +HEAPF32[$69 >> 2];
 $585 = $g1$sroa$0$0 * $579 - $g1$sroa$12$0 * $580;
 $586 = $g1$sroa$12$0 * $579 + $g1$sroa$0$0 * $580;
 if (($585 != $585 | 0.0 != 0.0) & ($586 != $586 | 0.0 != 0.0)) {
  ___mulsc3($38, $579, $580, $g1$sroa$0$0, $g1$sroa$12$0);
  $593 = +HEAPF32[$38 >> 2];
  $595 = +HEAPF32[$38 + 4 >> 2];
 } else {
  $593 = $585;
  $595 = $586;
 }
 $596 = +HEAPF32[$73 >> 2];
 $597 = +HEAPF32[$75 >> 2];
 $602 = $116 * $596 - $118 * $597;
 $603 = $118 * $596 + $116 * $597;
 if (($602 != $602 | 0.0 != 0.0) & ($603 != $603 | 0.0 != 0.0)) {
  ___mulsc3($39, $596, $597, $116, $118);
  $610 = +HEAPF32[$39 >> 2];
  $612 = +HEAPF32[$39 + 4 >> 2];
 } else {
  $610 = $602;
  $612 = $603;
 }
 $613 = +HEAPF32[$79 >> 2];
 $614 = +HEAPF32[$81 >> 2];
 $619 = $108 * $613 - $110 * $614;
 $620 = $110 * $613 + $108 * $614;
 if (($619 != $619 | 0.0 != 0.0) & ($620 != $620 | 0.0 != 0.0)) {
  ___mulsc3($40, $613, $614, $108, $110);
  $627 = +HEAPF32[$40 >> 2];
  $629 = +HEAPF32[$40 + 4 >> 2];
 } else {
  $627 = $619;
  $629 = $620;
 }
 $630 = +HEAPF32[$85 >> 2];
 $631 = +HEAPF32[$87 >> 2];
 $636 = $g2$sroa$0$0 * $630 - $g2$sroa$12$0 * $631;
 $637 = $g2$sroa$12$0 * $630 + $g2$sroa$0$0 * $631;
 if (($636 != $636 | 0.0 != 0.0) & ($637 != $637 | 0.0 != 0.0)) {
  ___mulsc3($41, $630, $631, $g2$sroa$0$0, $g2$sroa$12$0);
  $644 = +HEAPF32[$41 >> 2];
  $646 = +HEAPF32[$41 + 4 >> 2];
 } else {
  $644 = $636;
  $646 = $637;
 }
 HEAPF32[$51 + 40 >> 2] = $543 + $559 + $576 + $593 + $610 + $627 + $644;
 HEAPF32[$51 + 44 >> 2] = $544 + $561 + $578 + $595 + $612 + $629 + $646;
 $649 = +HEAPF32[$49 >> 2];
 $650 = +HEAPF32[$53 >> 2];
 $651 = +HEAPF32[$55 >> 2];
 $652 = +HEAPF32[$57 >> 2];
 $657 = $116 * $651 - $118 * $652;
 $658 = $118 * $651 + $116 * $652;
 if (($657 != $657 | 0.0 != 0.0) & ($658 != $658 | 0.0 != 0.0)) {
  ___mulsc3($42, $651, $652, $116, $118);
  $665 = +HEAPF32[$42 >> 2];
  $667 = +HEAPF32[$42 + 4 >> 2];
 } else {
  $665 = $657;
  $667 = $658;
 }
 $668 = +HEAPF32[$61 >> 2];
 $669 = +HEAPF32[$63 >> 2];
 $674 = $112 * $668 - $114 * $669;
 $675 = $114 * $668 + $112 * $669;
 if (($674 != $674 | 0.0 != 0.0) & ($675 != $675 | 0.0 != 0.0)) {
  ___mulsc3($43, $668, $669, $112, $114);
  $682 = +HEAPF32[$43 >> 2];
  $684 = +HEAPF32[$43 + 4 >> 2];
 } else {
  $682 = $674;
  $684 = $675;
 }
 $685 = +HEAPF32[$67 >> 2];
 $686 = +HEAPF32[$69 >> 2];
 $691 = $108 * $685 - $110 * $686;
 $692 = $110 * $685 + $108 * $686;
 if (($691 != $691 | 0.0 != 0.0) & ($692 != $692 | 0.0 != 0.0)) {
  ___mulsc3($44, $685, $686, $108, $110);
  $699 = +HEAPF32[$44 >> 2];
  $701 = +HEAPF32[$44 + 4 >> 2];
 } else {
  $699 = $691;
  $701 = $692;
 }
 $702 = +HEAPF32[$73 >> 2];
 $703 = +HEAPF32[$75 >> 2];
 $708 = $g3$sroa$0$0 * $702 - $g3$sroa$12$0 * $703;
 $709 = $g3$sroa$12$0 * $702 + $g3$sroa$0$0 * $703;
 if (($708 != $708 | 0.0 != 0.0) & ($709 != $709 | 0.0 != 0.0)) {
  ___mulsc3($45, $702, $703, $g3$sroa$0$0, $g3$sroa$12$0);
  $716 = +HEAPF32[$45 >> 2];
  $718 = +HEAPF32[$45 + 4 >> 2];
 } else {
  $716 = $708;
  $718 = $709;
 }
 $719 = +HEAPF32[$79 >> 2];
 $720 = +HEAPF32[$81 >> 2];
 $725 = $g2$sroa$0$0 * $719 - $g2$sroa$12$0 * $720;
 $726 = $g2$sroa$12$0 * $719 + $g2$sroa$0$0 * $720;
 if (($725 != $725 | 0.0 != 0.0) & ($726 != $726 | 0.0 != 0.0)) {
  ___mulsc3($46, $719, $720, $g2$sroa$0$0, $g2$sroa$12$0);
  $733 = +HEAPF32[$46 >> 2];
  $735 = +HEAPF32[$46 + 4 >> 2];
 } else {
  $733 = $725;
  $735 = $726;
 }
 $732 = $649 + $665 + $682 + $699 + $716 + $733;
 $734 = $650 + $667 + $684 + $701 + $718 + $735;
 $736 = +HEAPF32[$85 >> 2];
 $737 = +HEAPF32[$87 >> 2];
 $742 = $g1$sroa$0$0 * $736 - $g1$sroa$12$0 * $737;
 $743 = $g1$sroa$12$0 * $736 + $g1$sroa$0$0 * $737;
 if (!(($742 != $742 | 0.0 != 0.0) & ($743 != $743 | 0.0 != 0.0))) {
  $750 = $742;
  $752 = $743;
  $749 = $732 + $750;
  $751 = $734 + $752;
  $753 = $51 + 48 | 0;
  $754 = $51 + 52 | 0;
  HEAPF32[$753 >> 2] = $749;
  HEAPF32[$754 >> 2] = $751;
  STACKTOP = sp;
  return;
 }
 ___mulsc3($47, $736, $737, $g1$sroa$0$0, $g1$sroa$12$0);
 $750 = +HEAPF32[$47 >> 2];
 $752 = +HEAPF32[$47 + 4 >> 2];
 $749 = $732 + $750;
 $751 = $734 + $752;
 $753 = $51 + 48 | 0;
 $754 = $51 + 52 | 0;
 HEAPF32[$753 >> 2] = $749;
 HEAPF32[$754 >> 2] = $751;
 STACKTOP = sp;
 return;
}

function _hashlittle($key, $length, $initval) {
 $key = $key | 0;
 $length = $length | 0;
 $initval = $initval | 0;
 var $0 = 0, $1 = 0, $2 = 0, $233 = 0, $236 = 0, $3 = 0, $7 = 0, $830 = 0, $a = 0, $b = 0, $c = 0, $k = 0, $k1 = 0, $k2 = 0, $k8 = 0, $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 44 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 36 | 0;
 $3 = sp + 32 | 0;
 $a = sp + 28 | 0;
 $b = sp + 24 | 0;
 $c = sp + 20 | 0;
 $u = sp + 16 | 0;
 $k = sp + 12 | 0;
 $k1 = sp + 8 | 0;
 $k8 = sp + 4 | 0;
 $k2 = sp;
 HEAP32[$1 >> 2] = $key;
 HEAP32[$2 >> 2] = $length;
 HEAP32[$3 >> 2] = $initval;
 $7 = (HEAP32[$2 >> 2] | 0) + -559038737 + (HEAP32[$3 >> 2] | 0) | 0;
 HEAP32[$c >> 2] = $7;
 HEAP32[$b >> 2] = $7;
 HEAP32[$a >> 2] = $7;
 HEAP32[$u >> 2] = HEAP32[$1 >> 2];
 L1 : do if (!(HEAP32[$u >> 2] & 3)) {
  HEAP32[$k >> 2] = HEAP32[$1 >> 2];
  while (1) {
   if ((HEAP32[$2 >> 2] | 0) >>> 0 <= 12) break;
   HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + (HEAP32[HEAP32[$k >> 2] >> 2] | 0);
   HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) + (HEAP32[(HEAP32[$k >> 2] | 0) + 4 >> 2] | 0);
   HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + (HEAP32[(HEAP32[$k >> 2] | 0) + 8 >> 2] | 0);
   HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) - (HEAP32[$c >> 2] | 0);
   HEAP32[$a >> 2] = HEAP32[$a >> 2] ^ (HEAP32[$c >> 2] << 4 | (HEAP32[$c >> 2] | 0) >>> 28);
   HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + (HEAP32[$b >> 2] | 0);
   HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) - (HEAP32[$a >> 2] | 0);
   HEAP32[$b >> 2] = HEAP32[$b >> 2] ^ (HEAP32[$a >> 2] << 6 | (HEAP32[$a >> 2] | 0) >>> 26);
   HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + (HEAP32[$c >> 2] | 0);
   HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) - (HEAP32[$b >> 2] | 0);
   HEAP32[$c >> 2] = HEAP32[$c >> 2] ^ (HEAP32[$b >> 2] << 8 | (HEAP32[$b >> 2] | 0) >>> 24);
   HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) + (HEAP32[$a >> 2] | 0);
   HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) - (HEAP32[$c >> 2] | 0);
   HEAP32[$a >> 2] = HEAP32[$a >> 2] ^ (HEAP32[$c >> 2] << 16 | (HEAP32[$c >> 2] | 0) >>> 16);
   HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + (HEAP32[$b >> 2] | 0);
   HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) - (HEAP32[$a >> 2] | 0);
   HEAP32[$b >> 2] = HEAP32[$b >> 2] ^ (HEAP32[$a >> 2] << 19 | (HEAP32[$a >> 2] | 0) >>> 13);
   HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + (HEAP32[$c >> 2] | 0);
   HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) - (HEAP32[$b >> 2] | 0);
   HEAP32[$c >> 2] = HEAP32[$c >> 2] ^ (HEAP32[$b >> 2] << 4 | (HEAP32[$b >> 2] | 0) >>> 28);
   HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) + (HEAP32[$a >> 2] | 0);
   HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) - 12;
   HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 12;
  }
  do switch (HEAP32[$2 >> 2] | 0) {
  case 12:
   {
    HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + (HEAP32[(HEAP32[$k >> 2] | 0) + 8 >> 2] | 0);
    HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) + (HEAP32[(HEAP32[$k >> 2] | 0) + 4 >> 2] | 0);
    HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + (HEAP32[HEAP32[$k >> 2] >> 2] | 0);
    break L1;
    break;
   }
  case 11:
   {
    HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + (HEAP32[(HEAP32[$k >> 2] | 0) + 8 >> 2] & 16777215);
    HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) + (HEAP32[(HEAP32[$k >> 2] | 0) + 4 >> 2] | 0);
    HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + (HEAP32[HEAP32[$k >> 2] >> 2] | 0);
    break L1;
    break;
   }
  case 10:
   {
    HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + (HEAP32[(HEAP32[$k >> 2] | 0) + 8 >> 2] & 65535);
    HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) + (HEAP32[(HEAP32[$k >> 2] | 0) + 4 >> 2] | 0);
    HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + (HEAP32[HEAP32[$k >> 2] >> 2] | 0);
    break L1;
    break;
   }
  case 9:
   {
    HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + (HEAP32[(HEAP32[$k >> 2] | 0) + 8 >> 2] & 255);
    HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) + (HEAP32[(HEAP32[$k >> 2] | 0) + 4 >> 2] | 0);
    HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + (HEAP32[HEAP32[$k >> 2] >> 2] | 0);
    break L1;
    break;
   }
  case 8:
   {
    HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) + (HEAP32[(HEAP32[$k >> 2] | 0) + 4 >> 2] | 0);
    HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + (HEAP32[HEAP32[$k >> 2] >> 2] | 0);
    break L1;
    break;
   }
  case 7:
   {
    HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) + (HEAP32[(HEAP32[$k >> 2] | 0) + 4 >> 2] & 16777215);
    HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + (HEAP32[HEAP32[$k >> 2] >> 2] | 0);
    break L1;
    break;
   }
  case 6:
   {
    HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) + (HEAP32[(HEAP32[$k >> 2] | 0) + 4 >> 2] & 65535);
    HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + (HEAP32[HEAP32[$k >> 2] >> 2] | 0);
    break L1;
    break;
   }
  case 5:
   {
    HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) + (HEAP32[(HEAP32[$k >> 2] | 0) + 4 >> 2] & 255);
    HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + (HEAP32[HEAP32[$k >> 2] >> 2] | 0);
    break L1;
    break;
   }
  case 4:
   {
    HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + (HEAP32[HEAP32[$k >> 2] >> 2] | 0);
    break L1;
    break;
   }
  case 3:
   {
    HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + (HEAP32[HEAP32[$k >> 2] >> 2] & 16777215);
    break L1;
    break;
   }
  case 2:
   {
    HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + (HEAP32[HEAP32[$k >> 2] >> 2] & 65535);
    break L1;
    break;
   }
  case 1:
   {
    HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + (HEAP32[HEAP32[$k >> 2] >> 2] & 255);
    break L1;
    break;
   }
  case 0:
   {
    HEAP32[$0 >> 2] = HEAP32[$c >> 2];
    $830 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $830 | 0;
   }
  default:
   break L1;
  } while (0);
 } else {
  $233 = HEAP32[$1 >> 2] | 0;
  if (!(HEAP32[$u >> 2] & 1)) {
   HEAP32[$k1 >> 2] = $233;
   while (1) {
    $236 = HEAP32[$k1 >> 2] | 0;
    if ((HEAP32[$2 >> 2] | 0) >>> 0 <= 12) break;
    HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + ((HEAPU16[$236 >> 1] | 0) + ((HEAPU16[(HEAP32[$k1 >> 2] | 0) + 2 >> 1] | 0) << 16));
    HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) + ((HEAPU16[(HEAP32[$k1 >> 2] | 0) + 4 >> 1] | 0) + ((HEAPU16[(HEAP32[$k1 >> 2] | 0) + 6 >> 1] | 0) << 16));
    HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + ((HEAPU16[(HEAP32[$k1 >> 2] | 0) + 8 >> 1] | 0) + ((HEAPU16[(HEAP32[$k1 >> 2] | 0) + 10 >> 1] | 0) << 16));
    HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) - (HEAP32[$c >> 2] | 0);
    HEAP32[$a >> 2] = HEAP32[$a >> 2] ^ (HEAP32[$c >> 2] << 4 | (HEAP32[$c >> 2] | 0) >>> 28);
    HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + (HEAP32[$b >> 2] | 0);
    HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) - (HEAP32[$a >> 2] | 0);
    HEAP32[$b >> 2] = HEAP32[$b >> 2] ^ (HEAP32[$a >> 2] << 6 | (HEAP32[$a >> 2] | 0) >>> 26);
    HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + (HEAP32[$c >> 2] | 0);
    HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) - (HEAP32[$b >> 2] | 0);
    HEAP32[$c >> 2] = HEAP32[$c >> 2] ^ (HEAP32[$b >> 2] << 8 | (HEAP32[$b >> 2] | 0) >>> 24);
    HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) + (HEAP32[$a >> 2] | 0);
    HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) - (HEAP32[$c >> 2] | 0);
    HEAP32[$a >> 2] = HEAP32[$a >> 2] ^ (HEAP32[$c >> 2] << 16 | (HEAP32[$c >> 2] | 0) >>> 16);
    HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + (HEAP32[$b >> 2] | 0);
    HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) - (HEAP32[$a >> 2] | 0);
    HEAP32[$b >> 2] = HEAP32[$b >> 2] ^ (HEAP32[$a >> 2] << 19 | (HEAP32[$a >> 2] | 0) >>> 13);
    HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + (HEAP32[$c >> 2] | 0);
    HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) - (HEAP32[$b >> 2] | 0);
    HEAP32[$c >> 2] = HEAP32[$c >> 2] ^ (HEAP32[$b >> 2] << 4 | (HEAP32[$b >> 2] | 0) >>> 28);
    HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) + (HEAP32[$a >> 2] | 0);
    HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) - 12;
    HEAP32[$k1 >> 2] = (HEAP32[$k1 >> 2] | 0) + 12;
   }
   HEAP32[$k8 >> 2] = $236;
   switch (HEAP32[$2 >> 2] | 0) {
   case 12:
    {
     HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + ((HEAPU16[(HEAP32[$k1 >> 2] | 0) + 8 >> 1] | 0) + ((HEAPU16[(HEAP32[$k1 >> 2] | 0) + 10 >> 1] | 0) << 16));
     HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) + ((HEAPU16[(HEAP32[$k1 >> 2] | 0) + 4 >> 1] | 0) + ((HEAPU16[(HEAP32[$k1 >> 2] | 0) + 6 >> 1] | 0) << 16));
     HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + ((HEAPU16[HEAP32[$k1 >> 2] >> 1] | 0) + ((HEAPU16[(HEAP32[$k1 >> 2] | 0) + 2 >> 1] | 0) << 16));
     break L1;
     break;
    }
   case 11:
    {
     HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + ((HEAPU8[(HEAP32[$k8 >> 2] | 0) + 10 >> 0] | 0) << 16);
     label = 26;
     break;
    }
   case 10:
    {
     label = 26;
     break;
    }
   case 9:
    {
     HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + (HEAPU8[(HEAP32[$k8 >> 2] | 0) + 8 >> 0] | 0);
     label = 28;
     break;
    }
   case 8:
    {
     label = 28;
     break;
    }
   case 7:
    {
     HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) + ((HEAPU8[(HEAP32[$k8 >> 2] | 0) + 6 >> 0] | 0) << 16);
     label = 30;
     break;
    }
   case 6:
    {
     label = 30;
     break;
    }
   case 5:
    {
     HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) + (HEAPU8[(HEAP32[$k8 >> 2] | 0) + 4 >> 0] | 0);
     label = 32;
     break;
    }
   case 4:
    {
     label = 32;
     break;
    }
   case 3:
    {
     HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + ((HEAPU8[(HEAP32[$k8 >> 2] | 0) + 2 >> 0] | 0) << 16);
     label = 34;
     break;
    }
   case 2:
    {
     label = 34;
     break;
    }
   case 1:
    {
     HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + (HEAPU8[HEAP32[$k8 >> 2] >> 0] | 0);
     break L1;
     break;
    }
   case 0:
    {
     HEAP32[$0 >> 2] = HEAP32[$c >> 2];
     $830 = HEAP32[$0 >> 2] | 0;
     STACKTOP = sp;
     return $830 | 0;
    }
   default:
    break L1;
   }
   if ((label | 0) == 26) {
    HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + (HEAPU16[(HEAP32[$k1 >> 2] | 0) + 8 >> 1] | 0);
    HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) + ((HEAPU16[(HEAP32[$k1 >> 2] | 0) + 4 >> 1] | 0) + ((HEAPU16[(HEAP32[$k1 >> 2] | 0) + 6 >> 1] | 0) << 16));
    HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + ((HEAPU16[HEAP32[$k1 >> 2] >> 1] | 0) + ((HEAPU16[(HEAP32[$k1 >> 2] | 0) + 2 >> 1] | 0) << 16));
    break;
   } else if ((label | 0) == 28) {
    HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) + ((HEAPU16[(HEAP32[$k1 >> 2] | 0) + 4 >> 1] | 0) + ((HEAPU16[(HEAP32[$k1 >> 2] | 0) + 6 >> 1] | 0) << 16));
    HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + ((HEAPU16[HEAP32[$k1 >> 2] >> 1] | 0) + ((HEAPU16[(HEAP32[$k1 >> 2] | 0) + 2 >> 1] | 0) << 16));
    break;
   } else if ((label | 0) == 30) {
    HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) + (HEAPU16[(HEAP32[$k1 >> 2] | 0) + 4 >> 1] | 0);
    HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + ((HEAPU16[HEAP32[$k1 >> 2] >> 1] | 0) + ((HEAPU16[(HEAP32[$k1 >> 2] | 0) + 2 >> 1] | 0) << 16));
    break;
   } else if ((label | 0) == 32) {
    HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + ((HEAPU16[HEAP32[$k1 >> 2] >> 1] | 0) + ((HEAPU16[(HEAP32[$k1 >> 2] | 0) + 2 >> 1] | 0) << 16));
    break;
   } else if ((label | 0) == 34) {
    HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + (HEAPU16[HEAP32[$k1 >> 2] >> 1] | 0);
    break;
   }
  } else {
   HEAP32[$k2 >> 2] = $233;
   while (1) {
    if ((HEAP32[$2 >> 2] | 0) >>> 0 <= 12) break;
    HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + (HEAPU8[HEAP32[$k2 >> 2] >> 0] | 0);
    HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + ((HEAPU8[(HEAP32[$k2 >> 2] | 0) + 1 >> 0] | 0) << 8);
    HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + ((HEAPU8[(HEAP32[$k2 >> 2] | 0) + 2 >> 0] | 0) << 16);
    HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + ((HEAPU8[(HEAP32[$k2 >> 2] | 0) + 3 >> 0] | 0) << 24);
    HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) + (HEAPU8[(HEAP32[$k2 >> 2] | 0) + 4 >> 0] | 0);
    HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) + ((HEAPU8[(HEAP32[$k2 >> 2] | 0) + 5 >> 0] | 0) << 8);
    HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) + ((HEAPU8[(HEAP32[$k2 >> 2] | 0) + 6 >> 0] | 0) << 16);
    HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) + ((HEAPU8[(HEAP32[$k2 >> 2] | 0) + 7 >> 0] | 0) << 24);
    HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + (HEAPU8[(HEAP32[$k2 >> 2] | 0) + 8 >> 0] | 0);
    HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + ((HEAPU8[(HEAP32[$k2 >> 2] | 0) + 9 >> 0] | 0) << 8);
    HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + ((HEAPU8[(HEAP32[$k2 >> 2] | 0) + 10 >> 0] | 0) << 16);
    HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + ((HEAPU8[(HEAP32[$k2 >> 2] | 0) + 11 >> 0] | 0) << 24);
    HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) - (HEAP32[$c >> 2] | 0);
    HEAP32[$a >> 2] = HEAP32[$a >> 2] ^ (HEAP32[$c >> 2] << 4 | (HEAP32[$c >> 2] | 0) >>> 28);
    HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + (HEAP32[$b >> 2] | 0);
    HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) - (HEAP32[$a >> 2] | 0);
    HEAP32[$b >> 2] = HEAP32[$b >> 2] ^ (HEAP32[$a >> 2] << 6 | (HEAP32[$a >> 2] | 0) >>> 26);
    HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + (HEAP32[$c >> 2] | 0);
    HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) - (HEAP32[$b >> 2] | 0);
    HEAP32[$c >> 2] = HEAP32[$c >> 2] ^ (HEAP32[$b >> 2] << 8 | (HEAP32[$b >> 2] | 0) >>> 24);
    HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) + (HEAP32[$a >> 2] | 0);
    HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) - (HEAP32[$c >> 2] | 0);
    HEAP32[$a >> 2] = HEAP32[$a >> 2] ^ (HEAP32[$c >> 2] << 16 | (HEAP32[$c >> 2] | 0) >>> 16);
    HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + (HEAP32[$b >> 2] | 0);
    HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) - (HEAP32[$a >> 2] | 0);
    HEAP32[$b >> 2] = HEAP32[$b >> 2] ^ (HEAP32[$a >> 2] << 19 | (HEAP32[$a >> 2] | 0) >>> 13);
    HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + (HEAP32[$c >> 2] | 0);
    HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) - (HEAP32[$b >> 2] | 0);
    HEAP32[$c >> 2] = HEAP32[$c >> 2] ^ (HEAP32[$b >> 2] << 4 | (HEAP32[$b >> 2] | 0) >>> 28);
    HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) + (HEAP32[$a >> 2] | 0);
    HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) - 12;
    HEAP32[$k2 >> 2] = (HEAP32[$k2 >> 2] | 0) + 12;
   }
   switch (HEAP32[$2 >> 2] | 0) {
   case 12:
    {
     HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + ((HEAPU8[(HEAP32[$k2 >> 2] | 0) + 11 >> 0] | 0) << 24);
     label = 42;
     break;
    }
   case 11:
    {
     label = 42;
     break;
    }
   case 10:
    {
     label = 43;
     break;
    }
   case 9:
    {
     label = 44;
     break;
    }
   case 8:
    {
     label = 45;
     break;
    }
   case 7:
    {
     label = 46;
     break;
    }
   case 6:
    {
     label = 47;
     break;
    }
   case 5:
    {
     label = 48;
     break;
    }
   case 4:
    {
     label = 49;
     break;
    }
   case 3:
    {
     label = 50;
     break;
    }
   case 2:
    {
     label = 51;
     break;
    }
   case 1:
    break;
   case 0:
    {
     HEAP32[$0 >> 2] = HEAP32[$c >> 2];
     $830 = HEAP32[$0 >> 2] | 0;
     STACKTOP = sp;
     return $830 | 0;
    }
   default:
    break L1;
   }
   if ((label | 0) == 42) {
    HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + ((HEAPU8[(HEAP32[$k2 >> 2] | 0) + 10 >> 0] | 0) << 16);
    label = 43;
   }
   if ((label | 0) == 43) {
    HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + ((HEAPU8[(HEAP32[$k2 >> 2] | 0) + 9 >> 0] | 0) << 8);
    label = 44;
   }
   if ((label | 0) == 44) {
    HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + (HEAPU8[(HEAP32[$k2 >> 2] | 0) + 8 >> 0] | 0);
    label = 45;
   }
   if ((label | 0) == 45) {
    HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) + ((HEAPU8[(HEAP32[$k2 >> 2] | 0) + 7 >> 0] | 0) << 24);
    label = 46;
   }
   if ((label | 0) == 46) {
    HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) + ((HEAPU8[(HEAP32[$k2 >> 2] | 0) + 6 >> 0] | 0) << 16);
    label = 47;
   }
   if ((label | 0) == 47) {
    HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) + ((HEAPU8[(HEAP32[$k2 >> 2] | 0) + 5 >> 0] | 0) << 8);
    label = 48;
   }
   if ((label | 0) == 48) {
    HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) + (HEAPU8[(HEAP32[$k2 >> 2] | 0) + 4 >> 0] | 0);
    label = 49;
   }
   if ((label | 0) == 49) {
    HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + ((HEAPU8[(HEAP32[$k2 >> 2] | 0) + 3 >> 0] | 0) << 24);
    label = 50;
   }
   if ((label | 0) == 50) {
    HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + ((HEAPU8[(HEAP32[$k2 >> 2] | 0) + 2 >> 0] | 0) << 16);
    label = 51;
   }
   if ((label | 0) == 51) HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + ((HEAPU8[(HEAP32[$k2 >> 2] | 0) + 1 >> 0] | 0) << 8);
   HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) + (HEAPU8[HEAP32[$k2 >> 2] >> 0] | 0);
   break;
  }
 } while (0);
 HEAP32[$c >> 2] = HEAP32[$c >> 2] ^ HEAP32[$b >> 2];
 HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) - (HEAP32[$b >> 2] << 14 | (HEAP32[$b >> 2] | 0) >>> 18);
 HEAP32[$a >> 2] = HEAP32[$a >> 2] ^ HEAP32[$c >> 2];
 HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) - (HEAP32[$c >> 2] << 11 | (HEAP32[$c >> 2] | 0) >>> 21);
 HEAP32[$b >> 2] = HEAP32[$b >> 2] ^ HEAP32[$a >> 2];
 HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) - (HEAP32[$a >> 2] << 25 | (HEAP32[$a >> 2] | 0) >>> 7);
 HEAP32[$c >> 2] = HEAP32[$c >> 2] ^ HEAP32[$b >> 2];
 HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) - (HEAP32[$b >> 2] << 16 | (HEAP32[$b >> 2] | 0) >>> 16);
 HEAP32[$a >> 2] = HEAP32[$a >> 2] ^ HEAP32[$c >> 2];
 HEAP32[$a >> 2] = (HEAP32[$a >> 2] | 0) - (HEAP32[$c >> 2] << 4 | (HEAP32[$c >> 2] | 0) >>> 28);
 HEAP32[$b >> 2] = HEAP32[$b >> 2] ^ HEAP32[$a >> 2];
 HEAP32[$b >> 2] = (HEAP32[$b >> 2] | 0) - (HEAP32[$a >> 2] << 14 | (HEAP32[$a >> 2] | 0) >>> 18);
 HEAP32[$c >> 2] = HEAP32[$c >> 2] ^ HEAP32[$b >> 2];
 HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) - (HEAP32[$b >> 2] << 24 | (HEAP32[$b >> 2] | 0) >>> 8);
 HEAP32[$0 >> 2] = HEAP32[$c >> 2];
 $830 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $830 | 0;
}

function _ofdmframesync_debug_print($_q, $_filename) {
 $_q = $_q | 0;
 $_filename = $_filename | 0;
 var $10 = 0, $100 = 0, $101 = 0, $103 = 0, $106 = 0.0, $109 = 0.0, $110 = 0, $113 = 0.0, $116 = 0.0, $117 = 0, $120 = 0.0, $123 = 0.0, $124 = 0, $127 = 0.0, $130 = 0.0, $135 = 0, $136 = 0, $141 = 0.0, $145 = 0.0, $16 = 0, $160 = 0.0, $167 = 0.0, $171 = 0, $174 = 0.0, $177 = 0.0, $21 = 0, $26 = 0, $27 = 0, $29 = 0, $32 = 0.0, $35 = 0.0, $36 = 0, $39 = 0.0, $4 = 0, $42 = 0.0, $48 = 0, $51 = 0.0, $54 = 0.0, $57 = 0, $59 = 0, $6 = 0, $62 = 0.0, $65 = 0.0, $74 = 0.0, $77 = 0, $78 = 0, $80 = 0, $83 = 0.0, $86 = 0.0, $87 = 0, $90 = 0.0, $93 = 0.0, $98 = 0, $99 = 0, $i$043 = 0, $i$1021 = 0, $i$139 = 0, $i$238 = 0, $i$334 = 0, $i$433 = 0, $i$529 = 0, $i$625 = 0, $i$724 = 0, $i$823 = 0, $i$922 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer100 = 0, $vararg_buffer103 = 0, $vararg_buffer107 = 0, $vararg_buffer111 = 0, $vararg_buffer116 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer32 = 0, $vararg_buffer37 = 0, $vararg_buffer4 = 0, $vararg_buffer42 = 0, $vararg_buffer47 = 0, $vararg_buffer52 = 0, $vararg_buffer55 = 0, $vararg_buffer59 = 0, $vararg_buffer64 = 0, $vararg_buffer69 = 0, $vararg_buffer7 = 0, $vararg_buffer74 = 0, $vararg_buffer79 = 0, $vararg_buffer84 = 0, $vararg_buffer89 = 0, $vararg_buffer93 = 0, $vararg_buffer97 = 0, sp = 0, $i$139$looptemp = 0, $i$529$looptemp = 0, $i$625$looptemp = 0, $i$724$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 464 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer116 = sp + 456 | 0;
 $vararg_buffer111 = sp + 432 | 0;
 $vararg_buffer107 = sp + 416 | 0;
 $vararg_buffer103 = sp + 400 | 0;
 $vararg_buffer100 = sp + 392 | 0;
 $vararg_buffer97 = sp + 384 | 0;
 $vararg_buffer93 = sp + 368 | 0;
 $vararg_buffer89 = sp + 352 | 0;
 $vararg_buffer84 = sp + 328 | 0;
 $vararg_buffer79 = sp + 304 | 0;
 $vararg_buffer74 = sp + 280 | 0;
 $vararg_buffer69 = sp + 256 | 0;
 $vararg_buffer64 = sp + 232 | 0;
 $vararg_buffer59 = sp + 208 | 0;
 $vararg_buffer55 = sp + 192 | 0;
 $vararg_buffer52 = sp + 184 | 0;
 $vararg_buffer47 = sp + 160 | 0;
 $vararg_buffer42 = sp + 136 | 0;
 $vararg_buffer37 = sp + 112 | 0;
 $vararg_buffer32 = sp + 88 | 0;
 $vararg_buffer29 = sp + 80 | 0;
 $vararg_buffer26 = sp + 72 | 0;
 $vararg_buffer23 = sp + 64 | 0;
 $vararg_buffer19 = sp + 56 | 0;
 $vararg_buffer16 = sp + 48 | 0;
 $vararg_buffer13 = sp + 40 | 0;
 $vararg_buffer10 = sp + 32 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 if (!(HEAP32[$_q + 172 >> 2] | 0)) {
  _fwrite(gb + 36769 | 0, 86, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  STACKTOP = sp;
  return;
 }
 $4 = _fopen($_filename, gb + 36856 | 0) | 0;
 if (!$4) {
  $6 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = $_filename;
  _fprintf($6, gb + 36858 | 0, $vararg_buffer) | 0;
  STACKTOP = sp;
  return;
 }
 HEAP32[$vararg_buffer1 >> 2] = gb + 36952;
 _fprintf($4, gb + 36923 | 0, $vararg_buffer1) | 0;
 _fwrite(gb + 36983 | 0, 11, 1, $4) | 0;
 _fwrite(gb + 36995 | 0, 11, 1, $4) | 0;
 HEAP32[$vararg_buffer4 >> 2] = 2048;
 _fprintf($4, gb + 37007 | 0, $vararg_buffer4) | 0;
 HEAP32[$vararg_buffer7 >> 2] = HEAP32[$_q >> 2];
 _fprintf($4, gb + 37016 | 0, $vararg_buffer7) | 0;
 HEAP32[$vararg_buffer10 >> 2] = HEAP32[$_q + 16 >> 2];
 _fprintf($4, gb + 37025 | 0, $vararg_buffer10) | 0;
 $10 = $_q + 20 | 0;
 HEAP32[$vararg_buffer13 >> 2] = HEAP32[$10 >> 2];
 _fprintf($4, gb + 37040 | 0, $vararg_buffer13) | 0;
 HEAP32[$vararg_buffer16 >> 2] = HEAP32[$_q + 24 >> 2];
 _fprintf($4, gb + 37055 | 0, $vararg_buffer16) | 0;
 _fwrite(gb + 37070 | 0, 16, 1, $4) | 0;
 if (HEAP32[$_q >> 2] | 0) {
  $16 = $_q + 12 | 0;
  $i$043 = 0;
  do {
   $21 = HEAPU8[(HEAP32[$16 >> 2] | 0) + $i$043 >> 0] | 0;
   $i$043 = $i$043 + 1 | 0;
   HEAP32[$vararg_buffer19 >> 2] = $i$043;
   HEAP32[$vararg_buffer19 + 4 >> 2] = $21;
   _fprintf($4, gb + 37087 | 0, $vararg_buffer19) | 0;
  } while ($i$043 >>> 0 < (HEAP32[$_q >> 2] | 0) >>> 0);
 }
 HEAP32[$vararg_buffer23 >> 2] = 0;
 _fprintf($4, gb + 37101 | 0, $vararg_buffer23) | 0;
 HEAP32[$vararg_buffer26 >> 2] = 1;
 _fprintf($4, gb + 37125 | 0, $vararg_buffer26) | 0;
 HEAP32[$vararg_buffer29 >> 2] = 2;
 _fprintf($4, gb + 37149 | 0, $vararg_buffer29) | 0;
 if (HEAP32[$_q >> 2] | 0) {
  $26 = $_q + 64 | 0;
  $27 = $_q + 72 | 0;
  $i$139 = 0;
  do {
   $i$139$looptemp = $i$139;
   $i$139 = $i$139 + 1 | 0;
   $29 = HEAP32[$26 >> 2] | 0;
   $32 = +HEAPF32[$29 + ($i$139$looptemp << 3) >> 2];
   $35 = +HEAPF32[$29 + ($i$139$looptemp << 3) + 4 >> 2];
   HEAP32[$vararg_buffer32 >> 2] = $i$139;
   HEAPF64[$vararg_buffer32 + 8 >> 3] = $32;
   HEAPF64[$vararg_buffer32 + 16 >> 3] = $35;
   _fprintf($4, gb + 37173 | 0, $vararg_buffer32) | 0;
   $36 = HEAP32[$27 >> 2] | 0;
   $39 = +HEAPF32[$36 + ($i$139$looptemp << 3) >> 2];
   $42 = +HEAPF32[$36 + ($i$139$looptemp << 3) + 4 >> 2];
   HEAP32[$vararg_buffer37 >> 2] = $i$139;
   HEAPF64[$vararg_buffer37 + 8 >> 3] = $39;
   HEAPF64[$vararg_buffer37 + 16 >> 3] = $42;
   _fprintf($4, gb + 37203 | 0, $vararg_buffer37) | 0;
  } while ($i$139 >>> 0 < (HEAP32[$_q >> 2] | 0) >>> 0);
 }
 _fwrite(gb + 37233 | 0, 16, 1, $4) | 0;
 _windowcf_read(HEAP32[$_q + 176 >> 2] | 0, $vararg_buffer16);
 $i$238 = 0;
 do {
  $48 = HEAP32[$vararg_buffer16 >> 2] | 0;
  $51 = +HEAPF32[$48 + ($i$238 << 3) >> 2];
  $54 = +HEAPF32[$48 + ($i$238 << 3) + 4 >> 2];
  $i$238 = $i$238 + 1 | 0;
  HEAP32[$vararg_buffer42 >> 2] = $i$238;
  HEAPF64[$vararg_buffer42 + 8 >> 3] = $51;
  HEAPF64[$vararg_buffer42 + 16 >> 3] = $54;
  _fprintf($4, gb + 37250 | 0, $vararg_buffer42) | 0;
 } while (($i$238 | 0) != 2048);
 _fwrite(gb + 37279 | 0, 8, 1, $4) | 0;
 _fwrite(gb + 37288 | 0, 39, 1, $4) | 0;
 _fwrite(gb + 37328 | 0, 24, 1, $4) | 0;
 _fwrite(gb + 37353 | 0, 30, 1, $4) | 0;
 _fwrite(gb + 37384 | 0, 9, 1, $4) | 0;
 if (HEAP32[$_q >> 2] | 0) {
  $57 = $_q + 76 | 0;
  $i$334 = 0;
  do {
   $59 = HEAP32[$57 >> 2] | 0;
   $62 = +HEAPF32[$59 + ($i$334 << 3) >> 2];
   $65 = +HEAPF32[$59 + ($i$334 << 3) + 4 >> 2];
   $i$334 = $i$334 + 1 | 0;
   HEAP32[$vararg_buffer47 >> 2] = $i$334;
   HEAPF64[$vararg_buffer47 + 8 >> 3] = $62;
   HEAPF64[$vararg_buffer47 + 16 >> 3] = $65;
   _fprintf($4, gb + 37394 | 0, $vararg_buffer47) | 0;
  } while ($i$334 >>> 0 < (HEAP32[$_q >> 2] | 0) >>> 0);
 }
 _fwrite(gb + 37424 | 0, 2, 1, $4) | 0;
 HEAP32[$vararg_buffer52 >> 2] = 2048;
 _fprintf($4, gb + 37427 | 0, $vararg_buffer52) | 0;
 _windowf_read(HEAP32[$_q + 180 >> 2] | 0, $vararg_buffer13);
 $i$433 = 0;
 do {
  $74 = +HEAPF32[(HEAP32[$vararg_buffer13 >> 2] | 0) + ($i$433 << 2) >> 2];
  $i$433 = $i$433 + 1 | 0;
  HEAP32[$vararg_buffer55 >> 2] = $i$433;
  HEAPF64[$vararg_buffer55 + 8 >> 3] = $74;
  _fprintf($4, gb + 37452 | 0, $vararg_buffer55) | 0;
 } while (($i$433 | 0) != 2048);
 _fwrite(gb + 37477 | 0, 91, 1, $4) | 0;
 _fwrite(gb + 37569 | 0, 33, 1, $4) | 0;
 _fwrite(gb + 37279 | 0, 8, 1, $4) | 0;
 _fwrite(gb + 37603 | 0, 15, 1, $4) | 0;
 _fwrite(gb + 37619 | 0, 21, 1, $4) | 0;
 _fwrite(gb + 37424 | 0, 2, 1, $4) | 0;
 _fwrite(gb + 37641 | 0, 17, 1, $4) | 0;
 _fwrite(gb + 37659 | 0, 17, 1, $4) | 0;
 if (HEAP32[$_q >> 2] | 0) {
  $77 = $_q + 64 | 0;
  $78 = $_q + 72 | 0;
  $i$529 = 0;
  do {
   $i$529$looptemp = $i$529;
   $i$529 = $i$529 + 1 | 0;
   $80 = HEAP32[$77 >> 2] | 0;
   $83 = +HEAPF32[$80 + ($i$529$looptemp << 3) >> 2];
   $86 = +HEAPF32[$80 + ($i$529$looptemp << 3) + 4 >> 2];
   HEAP32[$vararg_buffer59 >> 2] = $i$529;
   HEAPF64[$vararg_buffer59 + 8 >> 3] = $83;
   HEAPF64[$vararg_buffer59 + 16 >> 3] = $86;
   _fprintf($4, gb + 37677 | 0, $vararg_buffer59) | 0;
   $87 = HEAP32[$78 >> 2] | 0;
   $90 = +HEAPF32[$87 + ($i$529$looptemp << 3) >> 2];
   $93 = +HEAPF32[$87 + ($i$529$looptemp << 3) + 4 >> 2];
   HEAP32[$vararg_buffer64 >> 2] = $i$529;
   HEAPF64[$vararg_buffer64 + 8 >> 3] = $90;
   HEAPF64[$vararg_buffer64 + 16 >> 3] = $93;
   _fprintf($4, gb + 37707 | 0, $vararg_buffer64) | 0;
  } while ($i$529 >>> 0 < (HEAP32[$_q >> 2] | 0) >>> 0);
 }
 _fwrite(gb + 37424 | 0, 2, 1, $4) | 0;
 _fwrite(gb + 37737 | 0, 21, 1, $4) | 0;
 _fwrite(gb + 37759 | 0, 21, 1, $4) | 0;
 _fwrite(gb + 37781 | 0, 21, 1, $4) | 0;
 _fwrite(gb + 37803 | 0, 21, 1, $4) | 0;
 if (HEAP32[$_q >> 2] | 0) {
  $98 = $_q + 84 | 0;
  $99 = $_q + 88 | 0;
  $100 = $_q + 188 | 0;
  $101 = $_q + 92 | 0;
  $i$625 = 0;
  do {
   $i$625$looptemp = $i$625;
   $i$625 = $i$625 + 1 | 0;
   $103 = HEAP32[$98 >> 2] | 0;
   $106 = +HEAPF32[$103 + ($i$625$looptemp << 3) >> 2];
   $109 = +HEAPF32[$103 + ($i$625$looptemp << 3) + 4 >> 2];
   HEAP32[$vararg_buffer69 >> 2] = $i$625;
   HEAPF64[$vararg_buffer69 + 8 >> 3] = $106;
   HEAPF64[$vararg_buffer69 + 16 >> 3] = $109;
   _fprintf($4, gb + 37825 | 0, $vararg_buffer69) | 0;
   $110 = HEAP32[$99 >> 2] | 0;
   $113 = +HEAPF32[$110 + ($i$625$looptemp << 3) >> 2];
   $116 = +HEAPF32[$110 + ($i$625$looptemp << 3) + 4 >> 2];
   HEAP32[$vararg_buffer74 >> 2] = $i$625;
   HEAPF64[$vararg_buffer74 + 8 >> 3] = $113;
   HEAPF64[$vararg_buffer74 + 16 >> 3] = $116;
   _fprintf($4, gb + 37858 | 0, $vararg_buffer74) | 0;
   $117 = HEAP32[$100 >> 2] | 0;
   $120 = +HEAPF32[$117 + ($i$625$looptemp << 3) >> 2];
   $123 = +HEAPF32[$117 + ($i$625$looptemp << 3) + 4 >> 2];
   HEAP32[$vararg_buffer79 >> 2] = $i$625;
   HEAPF64[$vararg_buffer79 + 8 >> 3] = $120;
   HEAPF64[$vararg_buffer79 + 16 >> 3] = $123;
   _fprintf($4, gb + 37891 | 0, $vararg_buffer79) | 0;
   $124 = HEAP32[$101 >> 2] | 0;
   $127 = +HEAPF32[$124 + ($i$625$looptemp << 3) >> 2];
   $130 = +HEAPF32[$124 + ($i$625$looptemp << 3) + 4 >> 2];
   HEAP32[$vararg_buffer84 >> 2] = $i$625;
   HEAPF64[$vararg_buffer84 + 8 >> 3] = $127;
   HEAPF64[$vararg_buffer84 + 16 >> 3] = $130;
   _fprintf($4, gb + 37924 | 0, $vararg_buffer84) | 0;
  } while ($i$625 >>> 0 < (HEAP32[$_q >> 2] | 0) >>> 0);
 }
 _fwrite(gb + 37957 | 0, 15, 1, $4) | 0;
 _fwrite(gb + 37279 | 0, 8, 1, $4) | 0;
 _fwrite(gb + 37973 | 0, 16, 1, $4) | 0;
 _fwrite(gb + 37990 | 0, 40, 1, $4) | 0;
 _fwrite(gb + 38031 | 0, 48, 1, $4) | 0;
 _fwrite(gb + 38080 | 0, 11, 1, $4) | 0;
 _fwrite(gb + 38092 | 0, 30, 1, $4) | 0;
 _fwrite(gb + 38123 | 0, 33, 1, $4) | 0;
 _fwrite(gb + 38157 | 0, 16, 1, $4) | 0;
 _fwrite(gb + 38174 | 0, 58, 1, $4) | 0;
 _fwrite(gb + 38233 | 0, 48, 1, $4) | 0;
 _fwrite(gb + 38080 | 0, 11, 1, $4) | 0;
 _fwrite(gb + 38092 | 0, 30, 1, $4) | 0;
 _fwrite(gb + 38282 | 0, 35, 1, $4) | 0;
 _fwrite(gb + 37424 | 0, 2, 1, $4) | 0;
 _fwrite(gb + 38318 | 0, 23, 1, $4) | 0;
 _fwrite(gb + 38342 | 0, 23, 1, $4) | 0;
 if (HEAP32[$10 >> 2] | 0) {
  $135 = $_q + 192 | 0;
  $136 = $_q + 196 | 0;
  $i$724 = 0;
  do {
   $i$724$looptemp = $i$724;
   $i$724 = $i$724 + 1 | 0;
   $141 = +HEAPF32[(HEAP32[$135 >> 2] | 0) + ($i$724$looptemp << 2) >> 2];
   HEAP32[$vararg_buffer89 >> 2] = $i$724;
   HEAPF64[$vararg_buffer89 + 8 >> 3] = $141;
   _fprintf($4, gb + 38366 | 0, $vararg_buffer89) | 0;
   $145 = +HEAPF32[(HEAP32[$136 >> 2] | 0) + ($i$724$looptemp << 2) >> 2];
   HEAP32[$vararg_buffer93 >> 2] = $i$724;
   HEAPF64[$vararg_buffer93 + 8 >> 3] = $145;
   _fprintf($4, gb + 38385 | 0, $vararg_buffer93) | 0;
  } while ($i$724 >>> 0 < (HEAP32[$10 >> 2] | 0) >>> 0);
 }
 HEAPF64[$vararg_buffer97 >> 3] = +HEAPF32[$_q + 200 >> 2];
 _fprintf($4, gb + 38404 | 0, $vararg_buffer97) | 0;
 HEAPF64[$vararg_buffer100 >> 3] = +HEAPF32[$_q + 204 >> 2];
 _fprintf($4, gb + 38426 | 0, $vararg_buffer100) | 0;
 _fwrite(gb + 38448 | 0, 17, 1, $4) | 0;
 _windowf_read(HEAP32[$_q + 208 >> 2] | 0, $vararg_buffer13);
 $i$823 = 0;
 do {
  $160 = +HEAPF32[(HEAP32[$vararg_buffer13 >> 2] | 0) + ($i$823 << 2) >> 2];
  $i$823 = $i$823 + 1 | 0;
  HEAP32[$vararg_buffer103 >> 2] = $i$823;
  HEAPF64[$vararg_buffer103 + 8 >> 3] = $160;
  _fprintf($4, gb + 38466 | 0, $vararg_buffer103) | 0;
 } while (($i$823 | 0) != 2048);
 _fwrite(gb + 38485 | 0, 17, 1, $4) | 0;
 _windowf_read(HEAP32[$_q + 212 >> 2] | 0, $vararg_buffer13);
 $i$922 = 0;
 do {
  $167 = +HEAPF32[(HEAP32[$vararg_buffer13 >> 2] | 0) + ($i$922 << 2) >> 2];
  $i$922 = $i$922 + 1 | 0;
  HEAP32[$vararg_buffer107 >> 2] = $i$922;
  HEAPF64[$vararg_buffer107 + 8 >> 3] = $167;
  _fprintf($4, gb + 38503 | 0, $vararg_buffer107) | 0;
 } while (($i$922 | 0) != 2048);
 _fwrite(gb + 37279 | 0, 8, 1, $4) | 0;
 _fwrite(gb + 38522 | 0, 19, 1, $4) | 0;
 _fwrite(gb + 38542 | 0, 16, 1, $4) | 0;
 _fwrite(gb + 38559 | 0, 24, 1, $4) | 0;
 _fwrite(gb + 38584 | 0, 40, 1, $4) | 0;
 _fwrite(gb + 38080 | 0, 11, 1, $4) | 0;
 _fwrite(gb + 38625 | 0, 32, 1, $4) | 0;
 _fwrite(gb + 38658 | 0, 24, 1, $4) | 0;
 _fwrite(gb + 38683 | 0, 19, 1, $4) | 0;
 _fwrite(gb + 38703 | 0, 16, 1, $4) | 0;
 _fwrite(gb + 38720 | 0, 26, 1, $4) | 0;
 _fwrite(gb + 38080 | 0, 11, 1, $4) | 0;
 _fwrite(gb + 38747 | 0, 31, 1, $4) | 0;
 _fwrite(gb + 38779 | 0, 16, 1, $4) | 0;
 _fwrite(gb + 38796 | 0, 26, 1, $4) | 0;
 _fwrite(gb + 38080 | 0, 11, 1, $4) | 0;
 _fwrite(gb + 38823 | 0, 30, 1, $4) | 0;
 _fwrite(gb + 38854 | 0, 24, 1, $4) | 0;
 _windowcf_read(HEAP32[$_q + 184 >> 2] | 0, $vararg_buffer16);
 $i$1021 = 0;
 do {
  $171 = HEAP32[$vararg_buffer16 >> 2] | 0;
  $174 = +HEAPF32[$171 + ($i$1021 << 3) >> 2];
  $177 = +HEAPF32[$171 + ($i$1021 << 3) + 4 >> 2];
  $i$1021 = $i$1021 + 1 | 0;
  HEAP32[$vararg_buffer111 >> 2] = $i$1021;
  HEAPF64[$vararg_buffer111 + 8 >> 3] = $174;
  HEAPF64[$vararg_buffer111 + 16 >> 3] = $177;
  _fprintf($4, gb + 38879 | 0, $vararg_buffer111) | 0;
 } while (($i$1021 | 0) != 2048);
 _fwrite(gb + 37279 | 0, 8, 1, $4) | 0;
 _fwrite(gb + 38916 | 0, 45, 1, $4) | 0;
 _fwrite(gb + 38962 | 0, 13, 1, $4) | 0;
 _fwrite(gb + 38976 | 0, 13, 1, $4) | 0;
 _fwrite(gb + 38990 | 0, 23, 1, $4) | 0;
 _fwrite(gb + 39014 | 0, 13, 1, $4) | 0;
 _fwrite(gb + 39028 | 0, 9, 1, $4) | 0;
 _fclose($4) | 0;
 HEAP32[$vararg_buffer116 >> 2] = $_filename;
 _printf(gb + 39038 | 0, $vararg_buffer116) | 0;
 STACKTOP = sp;
 return;
}

function _free($mem) {
 $mem = $mem | 0;
 var $$lcssa = 0, $$pre$phi41Z2D = 0, $$pre$phi43Z2D = 0, $$pre$phiZ2D = 0, $1 = 0, $104 = 0, $105 = 0, $113 = 0, $114 = 0, $12 = 0, $122 = 0, $130 = 0, $135 = 0, $136 = 0, $139 = 0, $141 = 0, $143 = 0, $15 = 0, $158 = 0, $16 = 0, $163 = 0, $165 = 0, $168 = 0, $171 = 0, $174 = 0, $177 = 0, $178 = 0, $179 = 0, $181 = 0, $183 = 0, $184 = 0, $186 = 0, $187 = 0, $193 = 0, $194 = 0, $2 = 0, $20 = 0, $203 = 0, $208 = 0, $211 = 0, $212 = 0, $218 = 0, $23 = 0, $233 = 0, $236 = 0, $237 = 0, $238 = 0, $242 = 0, $243 = 0, $249 = 0, $25 = 0, $254 = 0, $255 = 0, $258 = 0, $260 = 0, $263 = 0, $268 = 0, $27 = 0, $274 = 0, $278 = 0, $279 = 0, $297 = 0, $299 = 0, $306 = 0, $307 = 0, $308 = 0, $316 = 0, $40 = 0, $45 = 0, $47 = 0, $5 = 0, $50 = 0, $52 = 0, $55 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $65 = 0, $67 = 0, $68 = 0, $73 = 0, $74 = 0, $8 = 0, $83 = 0, $88 = 0, $9 = 0, $91 = 0, $92 = 0, $98 = 0, $F18$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0, $R$3 = 0, $R8$1 = 0, $R8$1$lcssa = 0, $R8$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP10$1 = 0, $RP10$1$lcssa = 0, $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa48 = 0, $p$1 = 0, $psize$1 = 0, $psize$2 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0;
 if (!$mem) return;
 $1 = $mem + -8 | 0;
 $2 = HEAP32[gb + 45080 + 16 >> 2] | 0;
 if ($1 >>> 0 < $2 >>> 0) _abort();
 $5 = HEAP32[$mem + -4 >> 2] | 0;
 $6 = $5 & 3;
 if (($6 | 0) == 1) _abort();
 $8 = $5 & -8;
 $9 = $1 + $8 | 0;
 do if (!($5 & 1)) {
  $12 = HEAP32[$1 >> 2] | 0;
  if (!$6) return;
  $15 = $1 + (0 - $12) | 0;
  $16 = $12 + $8 | 0;
  if ($15 >>> 0 < $2 >>> 0) _abort();
  if (($15 | 0) == (HEAP32[gb + 45080 + 20 >> 2] | 0)) {
   $104 = $9 + 4 | 0;
   $105 = HEAP32[$104 >> 2] | 0;
   if (($105 & 3 | 0) != 3) {
    $p$1 = $15;
    $psize$1 = $16;
    break;
   }
   HEAP32[gb + 45080 + 8 >> 2] = $16;
   HEAP32[$104 >> 2] = $105 & -2;
   HEAP32[$15 + 4 >> 2] = $16 | 1;
   HEAP32[$15 + $16 >> 2] = $16;
   return;
  }
  $20 = $12 >>> 3;
  if ($12 >>> 0 < 256) {
   $23 = HEAP32[$15 + 8 >> 2] | 0;
   $25 = HEAP32[$15 + 12 >> 2] | 0;
   $27 = gb + 45080 + 40 + ($20 << 1 << 2) | 0;
   if (($23 | 0) != ($27 | 0)) {
    if ($23 >>> 0 < $2 >>> 0) _abort();
    if ((HEAP32[$23 + 12 >> 2] | 0) != ($15 | 0)) _abort();
   }
   if (($25 | 0) == ($23 | 0)) {
    HEAP32[gb + 45080 >> 2] = HEAP32[gb + 45080 >> 2] & ~(1 << $20);
    $p$1 = $15;
    $psize$1 = $16;
    break;
   }
   if (($25 | 0) == ($27 | 0)) $$pre$phi43Z2D = $25 + 8 | 0; else {
    if ($25 >>> 0 < $2 >>> 0) _abort();
    $40 = $25 + 8 | 0;
    if ((HEAP32[$40 >> 2] | 0) == ($15 | 0)) $$pre$phi43Z2D = $40; else _abort();
   }
   HEAP32[$23 + 12 >> 2] = $25;
   HEAP32[$$pre$phi43Z2D >> 2] = $23;
   $p$1 = $15;
   $psize$1 = $16;
   break;
  }
  $45 = HEAP32[$15 + 24 >> 2] | 0;
  $47 = HEAP32[$15 + 12 >> 2] | 0;
  do if (($47 | 0) == ($15 | 0)) {
   $58 = $15 + 16 | 0;
   $59 = $58 + 4 | 0;
   $60 = HEAP32[$59 >> 2] | 0;
   if (!$60) {
    $62 = HEAP32[$58 >> 2] | 0;
    if (!$62) {
     $R$3 = 0;
     break;
    } else {
     $R$1 = $62;
     $RP$1 = $58;
    }
   } else {
    $R$1 = $60;
    $RP$1 = $59;
   }
   while (1) {
    $64 = $R$1 + 20 | 0;
    $65 = HEAP32[$64 >> 2] | 0;
    if ($65 | 0) {
     $R$1 = $65;
     $RP$1 = $64;
     continue;
    }
    $67 = $R$1 + 16 | 0;
    $68 = HEAP32[$67 >> 2] | 0;
    if (!$68) {
     $R$1$lcssa = $R$1;
     $RP$1$lcssa = $RP$1;
     break;
    } else {
     $R$1 = $68;
     $RP$1 = $67;
    }
   }
   if ($RP$1$lcssa >>> 0 < $2 >>> 0) _abort(); else {
    HEAP32[$RP$1$lcssa >> 2] = 0;
    $R$3 = $R$1$lcssa;
    break;
   }
  } else {
   $50 = HEAP32[$15 + 8 >> 2] | 0;
   if ($50 >>> 0 < $2 >>> 0) _abort();
   $52 = $50 + 12 | 0;
   if ((HEAP32[$52 >> 2] | 0) != ($15 | 0)) _abort();
   $55 = $47 + 8 | 0;
   if ((HEAP32[$55 >> 2] | 0) == ($15 | 0)) {
    HEAP32[$52 >> 2] = $47;
    HEAP32[$55 >> 2] = $50;
    $R$3 = $47;
    break;
   } else _abort();
  } while (0);
  if (!$45) {
   $p$1 = $15;
   $psize$1 = $16;
  } else {
   $73 = HEAP32[$15 + 28 >> 2] | 0;
   $74 = gb + 45080 + 304 + ($73 << 2) | 0;
   if (($15 | 0) == (HEAP32[$74 >> 2] | 0)) {
    HEAP32[$74 >> 2] = $R$3;
    if (!$R$3) {
     HEAP32[gb + 45080 + 4 >> 2] = HEAP32[gb + 45080 + 4 >> 2] & ~(1 << $73);
     $p$1 = $15;
     $psize$1 = $16;
     break;
    }
   } else {
    if ($45 >>> 0 < (HEAP32[gb + 45080 + 16 >> 2] | 0) >>> 0) _abort();
    $83 = $45 + 16 | 0;
    if ((HEAP32[$83 >> 2] | 0) == ($15 | 0)) HEAP32[$83 >> 2] = $R$3; else HEAP32[$45 + 20 >> 2] = $R$3;
    if (!$R$3) {
     $p$1 = $15;
     $psize$1 = $16;
     break;
    }
   }
   $88 = HEAP32[gb + 45080 + 16 >> 2] | 0;
   if ($R$3 >>> 0 < $88 >>> 0) _abort();
   HEAP32[$R$3 + 24 >> 2] = $45;
   $91 = $15 + 16 | 0;
   $92 = HEAP32[$91 >> 2] | 0;
   do if ($92 | 0) if ($92 >>> 0 < $88 >>> 0) _abort(); else {
    HEAP32[$R$3 + 16 >> 2] = $92;
    HEAP32[$92 + 24 >> 2] = $R$3;
    break;
   } while (0);
   $98 = HEAP32[$91 + 4 >> 2] | 0;
   if (!$98) {
    $p$1 = $15;
    $psize$1 = $16;
   } else if ($98 >>> 0 < (HEAP32[gb + 45080 + 16 >> 2] | 0) >>> 0) _abort(); else {
    HEAP32[$R$3 + 20 >> 2] = $98;
    HEAP32[$98 + 24 >> 2] = $R$3;
    $p$1 = $15;
    $psize$1 = $16;
    break;
   }
  }
 } else {
  $p$1 = $1;
  $psize$1 = $8;
 } while (0);
 if ($p$1 >>> 0 >= $9 >>> 0) _abort();
 $113 = $9 + 4 | 0;
 $114 = HEAP32[$113 >> 2] | 0;
 if (!($114 & 1)) _abort();
 if (!($114 & 2)) {
  if (($9 | 0) == (HEAP32[gb + 45080 + 24 >> 2] | 0)) {
   $122 = (HEAP32[gb + 45080 + 12 >> 2] | 0) + $psize$1 | 0;
   HEAP32[gb + 45080 + 12 >> 2] = $122;
   HEAP32[gb + 45080 + 24 >> 2] = $p$1;
   HEAP32[$p$1 + 4 >> 2] = $122 | 1;
   if (($p$1 | 0) != (HEAP32[gb + 45080 + 20 >> 2] | 0)) return;
   HEAP32[gb + 45080 + 20 >> 2] = 0;
   HEAP32[gb + 45080 + 8 >> 2] = 0;
   return;
  }
  if (($9 | 0) == (HEAP32[gb + 45080 + 20 >> 2] | 0)) {
   $130 = (HEAP32[gb + 45080 + 8 >> 2] | 0) + $psize$1 | 0;
   HEAP32[gb + 45080 + 8 >> 2] = $130;
   HEAP32[gb + 45080 + 20 >> 2] = $p$1;
   HEAP32[$p$1 + 4 >> 2] = $130 | 1;
   HEAP32[$p$1 + $130 >> 2] = $130;
   return;
  }
  $135 = ($114 & -8) + $psize$1 | 0;
  $136 = $114 >>> 3;
  do if ($114 >>> 0 < 256) {
   $139 = HEAP32[$9 + 8 >> 2] | 0;
   $141 = HEAP32[$9 + 12 >> 2] | 0;
   $143 = gb + 45080 + 40 + ($136 << 1 << 2) | 0;
   if (($139 | 0) != ($143 | 0)) {
    if ($139 >>> 0 < (HEAP32[gb + 45080 + 16 >> 2] | 0) >>> 0) _abort();
    if ((HEAP32[$139 + 12 >> 2] | 0) != ($9 | 0)) _abort();
   }
   if (($141 | 0) == ($139 | 0)) {
    HEAP32[gb + 45080 >> 2] = HEAP32[gb + 45080 >> 2] & ~(1 << $136);
    break;
   }
   if (($141 | 0) == ($143 | 0)) $$pre$phi41Z2D = $141 + 8 | 0; else {
    if ($141 >>> 0 < (HEAP32[gb + 45080 + 16 >> 2] | 0) >>> 0) _abort();
    $158 = $141 + 8 | 0;
    if ((HEAP32[$158 >> 2] | 0) == ($9 | 0)) $$pre$phi41Z2D = $158; else _abort();
   }
   HEAP32[$139 + 12 >> 2] = $141;
   HEAP32[$$pre$phi41Z2D >> 2] = $139;
  } else {
   $163 = HEAP32[$9 + 24 >> 2] | 0;
   $165 = HEAP32[$9 + 12 >> 2] | 0;
   do if (($165 | 0) == ($9 | 0)) {
    $177 = $9 + 16 | 0;
    $178 = $177 + 4 | 0;
    $179 = HEAP32[$178 >> 2] | 0;
    if (!$179) {
     $181 = HEAP32[$177 >> 2] | 0;
     if (!$181) {
      $R8$3 = 0;
      break;
     } else {
      $R8$1 = $181;
      $RP10$1 = $177;
     }
    } else {
     $R8$1 = $179;
     $RP10$1 = $178;
    }
    while (1) {
     $183 = $R8$1 + 20 | 0;
     $184 = HEAP32[$183 >> 2] | 0;
     if ($184 | 0) {
      $R8$1 = $184;
      $RP10$1 = $183;
      continue;
     }
     $186 = $R8$1 + 16 | 0;
     $187 = HEAP32[$186 >> 2] | 0;
     if (!$187) {
      $R8$1$lcssa = $R8$1;
      $RP10$1$lcssa = $RP10$1;
      break;
     } else {
      $R8$1 = $187;
      $RP10$1 = $186;
     }
    }
    if ($RP10$1$lcssa >>> 0 < (HEAP32[gb + 45080 + 16 >> 2] | 0) >>> 0) _abort(); else {
     HEAP32[$RP10$1$lcssa >> 2] = 0;
     $R8$3 = $R8$1$lcssa;
     break;
    }
   } else {
    $168 = HEAP32[$9 + 8 >> 2] | 0;
    if ($168 >>> 0 < (HEAP32[gb + 45080 + 16 >> 2] | 0) >>> 0) _abort();
    $171 = $168 + 12 | 0;
    if ((HEAP32[$171 >> 2] | 0) != ($9 | 0)) _abort();
    $174 = $165 + 8 | 0;
    if ((HEAP32[$174 >> 2] | 0) == ($9 | 0)) {
     HEAP32[$171 >> 2] = $165;
     HEAP32[$174 >> 2] = $168;
     $R8$3 = $165;
     break;
    } else _abort();
   } while (0);
   if ($163 | 0) {
    $193 = HEAP32[$9 + 28 >> 2] | 0;
    $194 = gb + 45080 + 304 + ($193 << 2) | 0;
    if (($9 | 0) == (HEAP32[$194 >> 2] | 0)) {
     HEAP32[$194 >> 2] = $R8$3;
     if (!$R8$3) {
      HEAP32[gb + 45080 + 4 >> 2] = HEAP32[gb + 45080 + 4 >> 2] & ~(1 << $193);
      break;
     }
    } else {
     if ($163 >>> 0 < (HEAP32[gb + 45080 + 16 >> 2] | 0) >>> 0) _abort();
     $203 = $163 + 16 | 0;
     if ((HEAP32[$203 >> 2] | 0) == ($9 | 0)) HEAP32[$203 >> 2] = $R8$3; else HEAP32[$163 + 20 >> 2] = $R8$3;
     if (!$R8$3) break;
    }
    $208 = HEAP32[gb + 45080 + 16 >> 2] | 0;
    if ($R8$3 >>> 0 < $208 >>> 0) _abort();
    HEAP32[$R8$3 + 24 >> 2] = $163;
    $211 = $9 + 16 | 0;
    $212 = HEAP32[$211 >> 2] | 0;
    do if ($212 | 0) if ($212 >>> 0 < $208 >>> 0) _abort(); else {
     HEAP32[$R8$3 + 16 >> 2] = $212;
     HEAP32[$212 + 24 >> 2] = $R8$3;
     break;
    } while (0);
    $218 = HEAP32[$211 + 4 >> 2] | 0;
    if ($218 | 0) if ($218 >>> 0 < (HEAP32[gb + 45080 + 16 >> 2] | 0) >>> 0) _abort(); else {
     HEAP32[$R8$3 + 20 >> 2] = $218;
     HEAP32[$218 + 24 >> 2] = $R8$3;
     break;
    }
   }
  } while (0);
  HEAP32[$p$1 + 4 >> 2] = $135 | 1;
  HEAP32[$p$1 + $135 >> 2] = $135;
  if (($p$1 | 0) == (HEAP32[gb + 45080 + 20 >> 2] | 0)) {
   HEAP32[gb + 45080 + 8 >> 2] = $135;
   return;
  } else $psize$2 = $135;
 } else {
  HEAP32[$113 >> 2] = $114 & -2;
  HEAP32[$p$1 + 4 >> 2] = $psize$1 | 1;
  HEAP32[$p$1 + $psize$1 >> 2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $233 = $psize$2 >>> 3;
 if ($psize$2 >>> 0 < 256) {
  $236 = gb + 45080 + 40 + ($233 << 1 << 2) | 0;
  $237 = HEAP32[gb + 45080 >> 2] | 0;
  $238 = 1 << $233;
  if (!($237 & $238)) {
   HEAP32[gb + 45080 >> 2] = $237 | $238;
   $$pre$phiZ2D = $236 + 8 | 0;
   $F18$0 = $236;
  } else {
   $242 = $236 + 8 | 0;
   $243 = HEAP32[$242 >> 2] | 0;
   if ($243 >>> 0 < (HEAP32[gb + 45080 + 16 >> 2] | 0) >>> 0) _abort(); else {
    $$pre$phiZ2D = $242;
    $F18$0 = $243;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $p$1;
  HEAP32[$F18$0 + 12 >> 2] = $p$1;
  HEAP32[$p$1 + 8 >> 2] = $F18$0;
  HEAP32[$p$1 + 12 >> 2] = $236;
  return;
 }
 $249 = $psize$2 >>> 8;
 if (!$249) $I20$0 = 0; else if ($psize$2 >>> 0 > 16777215) $I20$0 = 31; else {
  $254 = ($249 + 1048320 | 0) >>> 16 & 8;
  $255 = $249 << $254;
  $258 = ($255 + 520192 | 0) >>> 16 & 4;
  $260 = $255 << $258;
  $263 = ($260 + 245760 | 0) >>> 16 & 2;
  $268 = 14 - ($258 | $254 | $263) + ($260 << $263 >>> 15) | 0;
  $I20$0 = $psize$2 >>> ($268 + 7 | 0) & 1 | $268 << 1;
 }
 $274 = gb + 45080 + 304 + ($I20$0 << 2) | 0;
 HEAP32[$p$1 + 28 >> 2] = $I20$0;
 HEAP32[$p$1 + 20 >> 2] = 0;
 HEAP32[$p$1 + 16 >> 2] = 0;
 $278 = HEAP32[gb + 45080 + 4 >> 2] | 0;
 $279 = 1 << $I20$0;
 do if (!($278 & $279)) {
  HEAP32[gb + 45080 + 4 >> 2] = $278 | $279;
  HEAP32[$274 >> 2] = $p$1;
  HEAP32[$p$1 + 24 >> 2] = $274;
  HEAP32[$p$1 + 12 >> 2] = $p$1;
  HEAP32[$p$1 + 8 >> 2] = $p$1;
 } else {
  $K21$0 = $psize$2 << (($I20$0 | 0) == 31 ? 0 : 25 - ($I20$0 >>> 1) | 0);
  $T$0 = HEAP32[$274 >> 2] | 0;
  while (1) {
   if ((HEAP32[$T$0 + 4 >> 2] & -8 | 0) == ($psize$2 | 0)) {
    $T$0$lcssa = $T$0;
    label = 130;
    break;
   }
   $297 = $T$0 + 16 + ($K21$0 >>> 31 << 2) | 0;
   $299 = HEAP32[$297 >> 2] | 0;
   if (!$299) {
    $$lcssa = $297;
    $T$0$lcssa48 = $T$0;
    label = 127;
    break;
   } else {
    $K21$0 = $K21$0 << 1;
    $T$0 = $299;
   }
  }
  if ((label | 0) == 127) if ($$lcssa >>> 0 < (HEAP32[gb + 45080 + 16 >> 2] | 0) >>> 0) _abort(); else {
   HEAP32[$$lcssa >> 2] = $p$1;
   HEAP32[$p$1 + 24 >> 2] = $T$0$lcssa48;
   HEAP32[$p$1 + 12 >> 2] = $p$1;
   HEAP32[$p$1 + 8 >> 2] = $p$1;
   break;
  } else if ((label | 0) == 130) {
   $306 = $T$0$lcssa + 8 | 0;
   $307 = HEAP32[$306 >> 2] | 0;
   $308 = HEAP32[gb + 45080 + 16 >> 2] | 0;
   if ($307 >>> 0 >= $308 >>> 0 & $T$0$lcssa >>> 0 >= $308 >>> 0) {
    HEAP32[$307 + 12 >> 2] = $p$1;
    HEAP32[$306 >> 2] = $p$1;
    HEAP32[$p$1 + 8 >> 2] = $307;
    HEAP32[$p$1 + 12 >> 2] = $T$0$lcssa;
    HEAP32[$p$1 + 24 >> 2] = 0;
    break;
   } else _abort();
  }
 } while (0);
 $316 = (HEAP32[gb + 45080 + 32 >> 2] | 0) + -1 | 0;
 HEAP32[gb + 45080 + 32 >> 2] = $316;
 if (!$316) $sp$0$in$i = gb + 45080 + 456 | 0; else return;
 while (1) {
  $sp$0$i = HEAP32[$sp$0$in$i >> 2] | 0;
  if (!$sp$0$i) break; else $sp$0$in$i = $sp$0$i + 8 | 0;
 }
 HEAP32[gb + 45080 + 32 >> 2] = -1;
 return;
}

function _fft_execute_dft_6($_q) {
 $_q = $_q | 0;
 var $$byval_copy3 = 0, $0 = 0, $1 = 0, $10 = 0, $101 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $118 = 0.0, $12 = 0, $120 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $13 = 0, $131 = 0.0, $132 = 0.0, $139 = 0.0, $14 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $156 = 0.0, $158 = 0.0, $16 = 0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $177 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $186 = 0.0, $187 = 0.0, $19 = 0, $194 = 0.0, $196 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $207 = 0.0, $208 = 0.0, $21 = 0, $215 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $224 = 0.0, $225 = 0.0, $23 = 0, $232 = 0.0, $234 = 0.0, $25 = 0, $258 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $277 = 0.0, $279 = 0.0, $280 = 0.0, $281 = 0.0, $286 = 0.0, $287 = 0.0, $29 = 0, $294 = 0.0, $296 = 0.0, $299 = 0.0, $3 = 0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $307 = 0.0, $308 = 0.0, $31 = 0, $315 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $324 = 0.0, $325 = 0.0, $33 = 0, $332 = 0.0, $334 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $340 = 0.0, $345 = 0.0, $346 = 0.0, $353 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0.0, $362 = 0.0, $363 = 0.0, $37 = 0, $370 = 0.0, $372 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0.0, $383 = 0.0, $384 = 0.0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $4 = 0, $400 = 0.0, $401 = 0.0, $407 = 0.0, $408 = 0.0, $409 = 0.0, $410 = 0.0, $411 = 0, $412 = 0, $43 = 0, $45 = 0, $49 = 0, $5 = 0, $51 = 0, $55 = 0, $57 = 0, $6 = 0, $60 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $76 = 0.0, $78 = 0.0, $8 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $9 = 0, $93 = 0.0, $94 = 0.0, $g1$sroa$0$0 = 0.0, $g1$sroa$6$0 = 0.0, $g2$sroa$0$0 = 0.0, $g2$sroa$10$0 = 0.0, $g4$sroa$0$0 = 0.0, $g4$sroa$10$0 = 0.0, $g5$sroa$0$0 = 0.0, $g5$sroa$6$0 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy3 = sp + 192 | 0;
 $0 = sp + 184 | 0;
 $1 = sp + 176 | 0;
 $2 = sp + 168 | 0;
 $3 = sp + 160 | 0;
 $4 = sp + 152 | 0;
 $5 = sp + 144 | 0;
 $6 = sp + 136 | 0;
 $7 = sp + 128 | 0;
 $8 = sp + 120 | 0;
 $9 = sp + 112 | 0;
 $10 = sp + 104 | 0;
 $11 = sp + 96 | 0;
 $12 = sp + 88 | 0;
 $13 = sp + 80 | 0;
 $14 = sp + 72 | 0;
 $15 = sp + 64 | 0;
 $16 = sp + 56 | 0;
 $17 = sp + 48 | 0;
 $18 = sp + 40 | 0;
 $19 = sp + 32 | 0;
 $20 = sp + 24 | 0;
 $21 = sp + 16 | 0;
 $22 = sp + 8 | 0;
 $23 = sp;
 $25 = HEAP32[$_q + 4 >> 2] | 0;
 $27 = HEAP32[$_q + 8 >> 2] | 0;
 $29 = $25 + 4 | 0;
 $31 = $25 + 8 | 0;
 $33 = $25 + 12 | 0;
 $37 = $25 + 16 | 0;
 $39 = $25 + 20 | 0;
 $43 = $25 + 24 | 0;
 $45 = $25 + 28 | 0;
 $49 = $25 + 32 | 0;
 $51 = $25 + 36 | 0;
 $55 = $25 + 40 | 0;
 $57 = $25 + 44 | 0;
 $60 = +HEAPF32[$29 >> 2] + +HEAPF32[$33 >> 2] + +HEAPF32[$39 >> 2] + +HEAPF32[$45 >> 2] + +HEAPF32[$51 >> 2] + +HEAPF32[$57 >> 2];
 HEAPF32[$27 >> 2] = +HEAPF32[$25 >> 2] + +HEAPF32[$31 >> 2] + +HEAPF32[$37 >> 2] + +HEAPF32[$43 >> 2] + +HEAPF32[$49 >> 2] + +HEAPF32[$55 >> 2];
 HEAPF32[$27 + 4 >> 2] = $60;
 if ((HEAP32[$_q + 12 >> 2] | 0) == 1) {
  HEAPF32[$1 >> 2] = .5;
  HEAPF32[$1 + 4 >> 2] = -.8660253882408142;
  HEAP32[$$byval_copy3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  _conjf($0, $$byval_copy3);
  $69 = -+HEAPF32[$0 >> 2];
  $70 = -+HEAPF32[$0 + 4 >> 2];
  HEAPF32[$3 >> 2] = .5;
  HEAPF32[$3 + 4 >> 2] = -.8660253882408142;
  HEAP32[$$byval_copy3 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  _conjf($2, $$byval_copy3);
  $g1$sroa$0$0 = .5;
  $g1$sroa$6$0 = -.8660253882408142;
  $g2$sroa$0$0 = $69;
  $g2$sroa$10$0 = $70;
  $g4$sroa$0$0 = -.5;
  $g4$sroa$10$0 = .8660253882408142;
  $g5$sroa$0$0 = +HEAPF32[$2 >> 2];
  $g5$sroa$6$0 = +HEAPF32[$2 + 4 >> 2];
 } else {
  HEAPF32[$5 >> 2] = .5;
  HEAPF32[$5 + 4 >> 2] = -.8660253882408142;
  HEAP32[$$byval_copy3 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
  _conjf($4, $$byval_copy3);
  $76 = +HEAPF32[$4 >> 2];
  $78 = +HEAPF32[$4 + 4 >> 2];
  HEAPF32[$7 >> 2] = .5;
  HEAPF32[$7 + 4 >> 2] = -.8660253882408142;
  HEAP32[$$byval_copy3 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
  _conjf($6, $$byval_copy3);
  $g1$sroa$0$0 = $76;
  $g1$sroa$6$0 = $78;
  $g2$sroa$0$0 = -.5;
  $g2$sroa$10$0 = .8660253882408142;
  $g4$sroa$0$0 = -+HEAPF32[$6 >> 2];
  $g4$sroa$10$0 = -+HEAPF32[$6 + 4 >> 2];
  $g5$sroa$0$0 = .5;
  $g5$sroa$6$0 = -.8660253882408142;
 }
 $85 = +HEAPF32[$25 >> 2];
 $86 = +HEAPF32[$29 >> 2];
 $87 = +HEAPF32[$31 >> 2];
 $88 = +HEAPF32[$33 >> 2];
 $93 = $g1$sroa$0$0 * $87 - $g1$sroa$6$0 * $88;
 $94 = $g1$sroa$6$0 * $87 + $g1$sroa$0$0 * $88;
 if (($93 != $93 | 0.0 != 0.0) & ($94 != $94 | 0.0 != 0.0)) {
  ___mulsc3($8, $87, $88, $g1$sroa$0$0, $g1$sroa$6$0);
  $101 = +HEAPF32[$8 >> 2];
  $103 = +HEAPF32[$8 + 4 >> 2];
 } else {
  $101 = $93;
  $103 = $94;
 }
 $104 = +HEAPF32[$37 >> 2];
 $105 = +HEAPF32[$39 >> 2];
 $110 = $g2$sroa$0$0 * $104 - $g2$sroa$10$0 * $105;
 $111 = $g2$sroa$10$0 * $104 + $g2$sroa$0$0 * $105;
 if (($110 != $110 | 0.0 != 0.0) & ($111 != $111 | 0.0 != 0.0)) {
  ___mulsc3($9, $104, $105, $g2$sroa$0$0, $g2$sroa$10$0);
  $118 = +HEAPF32[$9 >> 2];
  $120 = +HEAPF32[$9 + 4 >> 2];
 } else {
  $118 = $110;
  $120 = $111;
 }
 $123 = $85 + $101 + $118 - +HEAPF32[$43 >> 2];
 $124 = $86 + $103 + $120 - +HEAPF32[$45 >> 2];
 $125 = +HEAPF32[$49 >> 2];
 $126 = +HEAPF32[$51 >> 2];
 $131 = $g4$sroa$0$0 * $125 - $g4$sroa$10$0 * $126;
 $132 = $g4$sroa$10$0 * $125 + $g4$sroa$0$0 * $126;
 if (($131 != $131 | 0.0 != 0.0) & ($132 != $132 | 0.0 != 0.0)) {
  ___mulsc3($10, $125, $126, $g4$sroa$0$0, $g4$sroa$10$0);
  $139 = +HEAPF32[$10 >> 2];
  $141 = +HEAPF32[$10 + 4 >> 2];
 } else {
  $139 = $131;
  $141 = $132;
 }
 $142 = +HEAPF32[$55 >> 2];
 $143 = +HEAPF32[$57 >> 2];
 $148 = $g5$sroa$0$0 * $142 - $g5$sroa$6$0 * $143;
 $149 = $g5$sroa$6$0 * $142 + $g5$sroa$0$0 * $143;
 if (($148 != $148 | 0.0 != 0.0) & ($149 != $149 | 0.0 != 0.0)) {
  ___mulsc3($11, $142, $143, $g5$sroa$0$0, $g5$sroa$6$0);
  $156 = +HEAPF32[$11 >> 2];
  $158 = +HEAPF32[$11 + 4 >> 2];
 } else {
  $156 = $148;
  $158 = $149;
 }
 HEAPF32[$27 + 8 >> 2] = $123 + $139 + $156;
 HEAPF32[$27 + 12 >> 2] = $124 + $141 + $158;
 $161 = +HEAPF32[$25 >> 2];
 $162 = +HEAPF32[$29 >> 2];
 $163 = +HEAPF32[$31 >> 2];
 $164 = +HEAPF32[$33 >> 2];
 $169 = $g2$sroa$0$0 * $163 - $g2$sroa$10$0 * $164;
 $170 = $g2$sroa$10$0 * $163 + $g2$sroa$0$0 * $164;
 if (($169 != $169 | 0.0 != 0.0) & ($170 != $170 | 0.0 != 0.0)) {
  ___mulsc3($12, $163, $164, $g2$sroa$0$0, $g2$sroa$10$0);
  $177 = +HEAPF32[$12 >> 2];
  $179 = +HEAPF32[$12 + 4 >> 2];
 } else {
  $177 = $169;
  $179 = $170;
 }
 $180 = +HEAPF32[$37 >> 2];
 $181 = +HEAPF32[$39 >> 2];
 $186 = $g4$sroa$0$0 * $180 - $g4$sroa$10$0 * $181;
 $187 = $g4$sroa$10$0 * $180 + $g4$sroa$0$0 * $181;
 if (($186 != $186 | 0.0 != 0.0) & ($187 != $187 | 0.0 != 0.0)) {
  ___mulsc3($13, $180, $181, $g4$sroa$0$0, $g4$sroa$10$0);
  $194 = +HEAPF32[$13 >> 2];
  $196 = +HEAPF32[$13 + 4 >> 2];
 } else {
  $194 = $186;
  $196 = $187;
 }
 $199 = $161 + $177 + $194 + +HEAPF32[$43 >> 2];
 $200 = $162 + $179 + $196 + +HEAPF32[$45 >> 2];
 $201 = +HEAPF32[$49 >> 2];
 $202 = +HEAPF32[$51 >> 2];
 $207 = $g2$sroa$0$0 * $201 - $g2$sroa$10$0 * $202;
 $208 = $g2$sroa$10$0 * $201 + $g2$sroa$0$0 * $202;
 if (($207 != $207 | 0.0 != 0.0) & ($208 != $208 | 0.0 != 0.0)) {
  ___mulsc3($14, $201, $202, $g2$sroa$0$0, $g2$sroa$10$0);
  $215 = +HEAPF32[$14 >> 2];
  $217 = +HEAPF32[$14 + 4 >> 2];
 } else {
  $215 = $207;
  $217 = $208;
 }
 $218 = +HEAPF32[$55 >> 2];
 $219 = +HEAPF32[$57 >> 2];
 $224 = $g4$sroa$0$0 * $218 - $g4$sroa$10$0 * $219;
 $225 = $g4$sroa$10$0 * $218 + $g4$sroa$0$0 * $219;
 if (($224 != $224 | 0.0 != 0.0) & ($225 != $225 | 0.0 != 0.0)) {
  ___mulsc3($15, $218, $219, $g4$sroa$0$0, $g4$sroa$10$0);
  $232 = +HEAPF32[$15 >> 2];
  $234 = +HEAPF32[$15 + 4 >> 2];
 } else {
  $232 = $224;
  $234 = $225;
 }
 HEAPF32[$27 + 16 >> 2] = $199 + $215 + $232;
 HEAPF32[$27 + 20 >> 2] = $200 + $217 + $234;
 $258 = +HEAPF32[$29 >> 2] - +HEAPF32[$33 >> 2] + +HEAPF32[$39 >> 2] - +HEAPF32[$45 >> 2] + +HEAPF32[$51 >> 2] - +HEAPF32[$57 >> 2];
 HEAPF32[$27 + 24 >> 2] = +HEAPF32[$25 >> 2] - +HEAPF32[$31 >> 2] + +HEAPF32[$37 >> 2] - +HEAPF32[$43 >> 2] + +HEAPF32[$49 >> 2] - +HEAPF32[$55 >> 2];
 HEAPF32[$27 + 28 >> 2] = $258;
 $261 = +HEAPF32[$25 >> 2];
 $262 = +HEAPF32[$29 >> 2];
 $263 = +HEAPF32[$31 >> 2];
 $264 = +HEAPF32[$33 >> 2];
 $269 = $g4$sroa$0$0 * $263 - $g4$sroa$10$0 * $264;
 $270 = $g4$sroa$10$0 * $263 + $g4$sroa$0$0 * $264;
 if (($269 != $269 | 0.0 != 0.0) & ($270 != $270 | 0.0 != 0.0)) {
  ___mulsc3($16, $263, $264, $g4$sroa$0$0, $g4$sroa$10$0);
  $277 = +HEAPF32[$16 >> 2];
  $279 = +HEAPF32[$16 + 4 >> 2];
 } else {
  $277 = $269;
  $279 = $270;
 }
 $280 = +HEAPF32[$37 >> 2];
 $281 = +HEAPF32[$39 >> 2];
 $286 = $g2$sroa$0$0 * $280 - $g2$sroa$10$0 * $281;
 $287 = $g2$sroa$10$0 * $280 + $g2$sroa$0$0 * $281;
 if (($286 != $286 | 0.0 != 0.0) & ($287 != $287 | 0.0 != 0.0)) {
  ___mulsc3($17, $280, $281, $g2$sroa$0$0, $g2$sroa$10$0);
  $294 = +HEAPF32[$17 >> 2];
  $296 = +HEAPF32[$17 + 4 >> 2];
 } else {
  $294 = $286;
  $296 = $287;
 }
 $299 = $261 + $277 + $294 + +HEAPF32[$43 >> 2];
 $300 = $262 + $279 + $296 + +HEAPF32[$45 >> 2];
 $301 = +HEAPF32[$49 >> 2];
 $302 = +HEAPF32[$51 >> 2];
 $307 = $g4$sroa$0$0 * $301 - $g4$sroa$10$0 * $302;
 $308 = $g4$sroa$10$0 * $301 + $g4$sroa$0$0 * $302;
 if (($307 != $307 | 0.0 != 0.0) & ($308 != $308 | 0.0 != 0.0)) {
  ___mulsc3($18, $301, $302, $g4$sroa$0$0, $g4$sroa$10$0);
  $315 = +HEAPF32[$18 >> 2];
  $317 = +HEAPF32[$18 + 4 >> 2];
 } else {
  $315 = $307;
  $317 = $308;
 }
 $318 = +HEAPF32[$55 >> 2];
 $319 = +HEAPF32[$57 >> 2];
 $324 = $g2$sroa$0$0 * $318 - $g2$sroa$10$0 * $319;
 $325 = $g2$sroa$10$0 * $318 + $g2$sroa$0$0 * $319;
 if (($324 != $324 | 0.0 != 0.0) & ($325 != $325 | 0.0 != 0.0)) {
  ___mulsc3($19, $318, $319, $g2$sroa$0$0, $g2$sroa$10$0);
  $332 = +HEAPF32[$19 >> 2];
  $334 = +HEAPF32[$19 + 4 >> 2];
 } else {
  $332 = $324;
  $334 = $325;
 }
 HEAPF32[$27 + 32 >> 2] = $299 + $315 + $332;
 HEAPF32[$27 + 36 >> 2] = $300 + $317 + $334;
 $337 = +HEAPF32[$25 >> 2];
 $338 = +HEAPF32[$29 >> 2];
 $339 = +HEAPF32[$31 >> 2];
 $340 = +HEAPF32[$33 >> 2];
 $345 = $g5$sroa$0$0 * $339 - $g5$sroa$6$0 * $340;
 $346 = $g5$sroa$6$0 * $339 + $g5$sroa$0$0 * $340;
 if (($345 != $345 | 0.0 != 0.0) & ($346 != $346 | 0.0 != 0.0)) {
  ___mulsc3($20, $339, $340, $g5$sroa$0$0, $g5$sroa$6$0);
  $353 = +HEAPF32[$20 >> 2];
  $355 = +HEAPF32[$20 + 4 >> 2];
 } else {
  $353 = $345;
  $355 = $346;
 }
 $356 = +HEAPF32[$37 >> 2];
 $357 = +HEAPF32[$39 >> 2];
 $362 = $g4$sroa$0$0 * $356 - $g4$sroa$10$0 * $357;
 $363 = $g4$sroa$10$0 * $356 + $g4$sroa$0$0 * $357;
 if (($362 != $362 | 0.0 != 0.0) & ($363 != $363 | 0.0 != 0.0)) {
  ___mulsc3($21, $356, $357, $g4$sroa$0$0, $g4$sroa$10$0);
  $370 = +HEAPF32[$21 >> 2];
  $372 = +HEAPF32[$21 + 4 >> 2];
 } else {
  $370 = $362;
  $372 = $363;
 }
 $375 = $337 + $353 + $370 - +HEAPF32[$43 >> 2];
 $376 = $338 + $355 + $372 - +HEAPF32[$45 >> 2];
 $377 = +HEAPF32[$49 >> 2];
 $378 = +HEAPF32[$51 >> 2];
 $383 = $g2$sroa$0$0 * $377 - $g2$sroa$10$0 * $378;
 $384 = $g2$sroa$10$0 * $377 + $g2$sroa$0$0 * $378;
 if (($383 != $383 | 0.0 != 0.0) & ($384 != $384 | 0.0 != 0.0)) {
  ___mulsc3($22, $377, $378, $g2$sroa$0$0, $g2$sroa$10$0);
  $391 = +HEAPF32[$22 >> 2];
  $393 = +HEAPF32[$22 + 4 >> 2];
 } else {
  $391 = $383;
  $393 = $384;
 }
 $390 = $375 + $391;
 $392 = $376 + $393;
 $394 = +HEAPF32[$55 >> 2];
 $395 = +HEAPF32[$57 >> 2];
 $400 = $g1$sroa$0$0 * $394 - $g1$sroa$6$0 * $395;
 $401 = $g1$sroa$6$0 * $394 + $g1$sroa$0$0 * $395;
 if (!(($400 != $400 | 0.0 != 0.0) & ($401 != $401 | 0.0 != 0.0))) {
  $408 = $400;
  $410 = $401;
  $407 = $390 + $408;
  $409 = $392 + $410;
  $411 = $27 + 40 | 0;
  $412 = $27 + 44 | 0;
  HEAPF32[$411 >> 2] = $407;
  HEAPF32[$412 >> 2] = $409;
  STACKTOP = sp;
  return;
 }
 ___mulsc3($23, $394, $395, $g1$sroa$0$0, $g1$sroa$6$0);
 $408 = +HEAPF32[$23 >> 2];
 $410 = +HEAPF32[$23 + 4 >> 2];
 $407 = $390 + $408;
 $409 = $392 + $410;
 $411 = $27 + 40 | 0;
 $412 = $27 + 44 | 0;
 HEAPF32[$411 >> 2] = $407;
 HEAPF32[$412 >> 2] = $409;
 STACKTOP = sp;
 return;
}

function _dispose_chunk($p, $psize) {
 $p = $p | 0;
 $psize = $psize | 0;
 var $$1 = 0, $$14 = 0, $$2 = 0, $$lcssa = 0, $$pre$phi22Z2D = 0, $$pre$phi24Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $10 = 0, $100 = 0, $107 = 0, $109 = 0, $11 = 0, $110 = 0, $116 = 0, $124 = 0, $129 = 0, $130 = 0, $133 = 0, $135 = 0, $137 = 0, $15 = 0, $150 = 0, $155 = 0, $157 = 0, $160 = 0, $162 = 0, $165 = 0, $168 = 0, $169 = 0, $170 = 0, $172 = 0, $174 = 0, $175 = 0, $177 = 0, $178 = 0, $18 = 0, $183 = 0, $184 = 0, $193 = 0, $198 = 0, $2 = 0, $20 = 0, $201 = 0, $202 = 0, $208 = 0, $22 = 0, $223 = 0, $226 = 0, $227 = 0, $228 = 0, $232 = 0, $233 = 0, $239 = 0, $244 = 0, $245 = 0, $248 = 0, $250 = 0, $253 = 0, $258 = 0, $264 = 0, $268 = 0, $269 = 0, $287 = 0, $289 = 0, $296 = 0, $297 = 0, $298 = 0, $35 = 0, $40 = 0, $42 = 0, $45 = 0, $47 = 0, $5 = 0, $50 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $59 = 0, $60 = 0, $62 = 0, $63 = 0, $68 = 0, $69 = 0, $78 = 0, $83 = 0, $86 = 0, $87 = 0, $9 = 0, $93 = 0, $99 = 0, $F17$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0, $R$3 = 0, $R7$1 = 0, $R7$1$lcssa = 0, $R7$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP9$1 = 0, $RP9$1$lcssa = 0, $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa30 = 0, label = 0;
 $0 = $p + $psize | 0;
 $2 = HEAP32[$p + 4 >> 2] | 0;
 do if (!($2 & 1)) {
  $5 = HEAP32[$p >> 2] | 0;
  if (!($2 & 3)) return;
  $9 = $p + (0 - $5) | 0;
  $10 = $5 + $psize | 0;
  $11 = HEAP32[gb + 45080 + 16 >> 2] | 0;
  if ($9 >>> 0 < $11 >>> 0) _abort();
  if (($9 | 0) == (HEAP32[gb + 45080 + 20 >> 2] | 0)) {
   $99 = $0 + 4 | 0;
   $100 = HEAP32[$99 >> 2] | 0;
   if (($100 & 3 | 0) != 3) {
    $$1 = $9;
    $$14 = $10;
    break;
   }
   HEAP32[gb + 45080 + 8 >> 2] = $10;
   HEAP32[$99 >> 2] = $100 & -2;
   HEAP32[$9 + 4 >> 2] = $10 | 1;
   HEAP32[$9 + $10 >> 2] = $10;
   return;
  }
  $15 = $5 >>> 3;
  if ($5 >>> 0 < 256) {
   $18 = HEAP32[$9 + 8 >> 2] | 0;
   $20 = HEAP32[$9 + 12 >> 2] | 0;
   $22 = gb + 45080 + 40 + ($15 << 1 << 2) | 0;
   if (($18 | 0) != ($22 | 0)) {
    if ($18 >>> 0 < $11 >>> 0) _abort();
    if ((HEAP32[$18 + 12 >> 2] | 0) != ($9 | 0)) _abort();
   }
   if (($20 | 0) == ($18 | 0)) {
    HEAP32[gb + 45080 >> 2] = HEAP32[gb + 45080 >> 2] & ~(1 << $15);
    $$1 = $9;
    $$14 = $10;
    break;
   }
   if (($20 | 0) == ($22 | 0)) $$pre$phi24Z2D = $20 + 8 | 0; else {
    if ($20 >>> 0 < $11 >>> 0) _abort();
    $35 = $20 + 8 | 0;
    if ((HEAP32[$35 >> 2] | 0) == ($9 | 0)) $$pre$phi24Z2D = $35; else _abort();
   }
   HEAP32[$18 + 12 >> 2] = $20;
   HEAP32[$$pre$phi24Z2D >> 2] = $18;
   $$1 = $9;
   $$14 = $10;
   break;
  }
  $40 = HEAP32[$9 + 24 >> 2] | 0;
  $42 = HEAP32[$9 + 12 >> 2] | 0;
  do if (($42 | 0) == ($9 | 0)) {
   $53 = $9 + 16 | 0;
   $54 = $53 + 4 | 0;
   $55 = HEAP32[$54 >> 2] | 0;
   if (!$55) {
    $57 = HEAP32[$53 >> 2] | 0;
    if (!$57) {
     $R$3 = 0;
     break;
    } else {
     $R$1 = $57;
     $RP$1 = $53;
    }
   } else {
    $R$1 = $55;
    $RP$1 = $54;
   }
   while (1) {
    $59 = $R$1 + 20 | 0;
    $60 = HEAP32[$59 >> 2] | 0;
    if ($60 | 0) {
     $R$1 = $60;
     $RP$1 = $59;
     continue;
    }
    $62 = $R$1 + 16 | 0;
    $63 = HEAP32[$62 >> 2] | 0;
    if (!$63) {
     $R$1$lcssa = $R$1;
     $RP$1$lcssa = $RP$1;
     break;
    } else {
     $R$1 = $63;
     $RP$1 = $62;
    }
   }
   if ($RP$1$lcssa >>> 0 < $11 >>> 0) _abort(); else {
    HEAP32[$RP$1$lcssa >> 2] = 0;
    $R$3 = $R$1$lcssa;
    break;
   }
  } else {
   $45 = HEAP32[$9 + 8 >> 2] | 0;
   if ($45 >>> 0 < $11 >>> 0) _abort();
   $47 = $45 + 12 | 0;
   if ((HEAP32[$47 >> 2] | 0) != ($9 | 0)) _abort();
   $50 = $42 + 8 | 0;
   if ((HEAP32[$50 >> 2] | 0) == ($9 | 0)) {
    HEAP32[$47 >> 2] = $42;
    HEAP32[$50 >> 2] = $45;
    $R$3 = $42;
    break;
   } else _abort();
  } while (0);
  if (!$40) {
   $$1 = $9;
   $$14 = $10;
  } else {
   $68 = HEAP32[$9 + 28 >> 2] | 0;
   $69 = gb + 45080 + 304 + ($68 << 2) | 0;
   if (($9 | 0) == (HEAP32[$69 >> 2] | 0)) {
    HEAP32[$69 >> 2] = $R$3;
    if (!$R$3) {
     HEAP32[gb + 45080 + 4 >> 2] = HEAP32[gb + 45080 + 4 >> 2] & ~(1 << $68);
     $$1 = $9;
     $$14 = $10;
     break;
    }
   } else {
    if ($40 >>> 0 < (HEAP32[gb + 45080 + 16 >> 2] | 0) >>> 0) _abort();
    $78 = $40 + 16 | 0;
    if ((HEAP32[$78 >> 2] | 0) == ($9 | 0)) HEAP32[$78 >> 2] = $R$3; else HEAP32[$40 + 20 >> 2] = $R$3;
    if (!$R$3) {
     $$1 = $9;
     $$14 = $10;
     break;
    }
   }
   $83 = HEAP32[gb + 45080 + 16 >> 2] | 0;
   if ($R$3 >>> 0 < $83 >>> 0) _abort();
   HEAP32[$R$3 + 24 >> 2] = $40;
   $86 = $9 + 16 | 0;
   $87 = HEAP32[$86 >> 2] | 0;
   do if ($87 | 0) if ($87 >>> 0 < $83 >>> 0) _abort(); else {
    HEAP32[$R$3 + 16 >> 2] = $87;
    HEAP32[$87 + 24 >> 2] = $R$3;
    break;
   } while (0);
   $93 = HEAP32[$86 + 4 >> 2] | 0;
   if (!$93) {
    $$1 = $9;
    $$14 = $10;
   } else if ($93 >>> 0 < (HEAP32[gb + 45080 + 16 >> 2] | 0) >>> 0) _abort(); else {
    HEAP32[$R$3 + 20 >> 2] = $93;
    HEAP32[$93 + 24 >> 2] = $R$3;
    $$1 = $9;
    $$14 = $10;
    break;
   }
  }
 } else {
  $$1 = $p;
  $$14 = $psize;
 } while (0);
 $107 = HEAP32[gb + 45080 + 16 >> 2] | 0;
 if ($0 >>> 0 < $107 >>> 0) _abort();
 $109 = $0 + 4 | 0;
 $110 = HEAP32[$109 >> 2] | 0;
 if (!($110 & 2)) {
  if (($0 | 0) == (HEAP32[gb + 45080 + 24 >> 2] | 0)) {
   $116 = (HEAP32[gb + 45080 + 12 >> 2] | 0) + $$14 | 0;
   HEAP32[gb + 45080 + 12 >> 2] = $116;
   HEAP32[gb + 45080 + 24 >> 2] = $$1;
   HEAP32[$$1 + 4 >> 2] = $116 | 1;
   if (($$1 | 0) != (HEAP32[gb + 45080 + 20 >> 2] | 0)) return;
   HEAP32[gb + 45080 + 20 >> 2] = 0;
   HEAP32[gb + 45080 + 8 >> 2] = 0;
   return;
  }
  if (($0 | 0) == (HEAP32[gb + 45080 + 20 >> 2] | 0)) {
   $124 = (HEAP32[gb + 45080 + 8 >> 2] | 0) + $$14 | 0;
   HEAP32[gb + 45080 + 8 >> 2] = $124;
   HEAP32[gb + 45080 + 20 >> 2] = $$1;
   HEAP32[$$1 + 4 >> 2] = $124 | 1;
   HEAP32[$$1 + $124 >> 2] = $124;
   return;
  }
  $129 = ($110 & -8) + $$14 | 0;
  $130 = $110 >>> 3;
  do if ($110 >>> 0 < 256) {
   $133 = HEAP32[$0 + 8 >> 2] | 0;
   $135 = HEAP32[$0 + 12 >> 2] | 0;
   $137 = gb + 45080 + 40 + ($130 << 1 << 2) | 0;
   if (($133 | 0) != ($137 | 0)) {
    if ($133 >>> 0 < $107 >>> 0) _abort();
    if ((HEAP32[$133 + 12 >> 2] | 0) != ($0 | 0)) _abort();
   }
   if (($135 | 0) == ($133 | 0)) {
    HEAP32[gb + 45080 >> 2] = HEAP32[gb + 45080 >> 2] & ~(1 << $130);
    break;
   }
   if (($135 | 0) == ($137 | 0)) $$pre$phi22Z2D = $135 + 8 | 0; else {
    if ($135 >>> 0 < $107 >>> 0) _abort();
    $150 = $135 + 8 | 0;
    if ((HEAP32[$150 >> 2] | 0) == ($0 | 0)) $$pre$phi22Z2D = $150; else _abort();
   }
   HEAP32[$133 + 12 >> 2] = $135;
   HEAP32[$$pre$phi22Z2D >> 2] = $133;
  } else {
   $155 = HEAP32[$0 + 24 >> 2] | 0;
   $157 = HEAP32[$0 + 12 >> 2] | 0;
   do if (($157 | 0) == ($0 | 0)) {
    $168 = $0 + 16 | 0;
    $169 = $168 + 4 | 0;
    $170 = HEAP32[$169 >> 2] | 0;
    if (!$170) {
     $172 = HEAP32[$168 >> 2] | 0;
     if (!$172) {
      $R7$3 = 0;
      break;
     } else {
      $R7$1 = $172;
      $RP9$1 = $168;
     }
    } else {
     $R7$1 = $170;
     $RP9$1 = $169;
    }
    while (1) {
     $174 = $R7$1 + 20 | 0;
     $175 = HEAP32[$174 >> 2] | 0;
     if ($175 | 0) {
      $R7$1 = $175;
      $RP9$1 = $174;
      continue;
     }
     $177 = $R7$1 + 16 | 0;
     $178 = HEAP32[$177 >> 2] | 0;
     if (!$178) {
      $R7$1$lcssa = $R7$1;
      $RP9$1$lcssa = $RP9$1;
      break;
     } else {
      $R7$1 = $178;
      $RP9$1 = $177;
     }
    }
    if ($RP9$1$lcssa >>> 0 < $107 >>> 0) _abort(); else {
     HEAP32[$RP9$1$lcssa >> 2] = 0;
     $R7$3 = $R7$1$lcssa;
     break;
    }
   } else {
    $160 = HEAP32[$0 + 8 >> 2] | 0;
    if ($160 >>> 0 < $107 >>> 0) _abort();
    $162 = $160 + 12 | 0;
    if ((HEAP32[$162 >> 2] | 0) != ($0 | 0)) _abort();
    $165 = $157 + 8 | 0;
    if ((HEAP32[$165 >> 2] | 0) == ($0 | 0)) {
     HEAP32[$162 >> 2] = $157;
     HEAP32[$165 >> 2] = $160;
     $R7$3 = $157;
     break;
    } else _abort();
   } while (0);
   if ($155 | 0) {
    $183 = HEAP32[$0 + 28 >> 2] | 0;
    $184 = gb + 45080 + 304 + ($183 << 2) | 0;
    if (($0 | 0) == (HEAP32[$184 >> 2] | 0)) {
     HEAP32[$184 >> 2] = $R7$3;
     if (!$R7$3) {
      HEAP32[gb + 45080 + 4 >> 2] = HEAP32[gb + 45080 + 4 >> 2] & ~(1 << $183);
      break;
     }
    } else {
     if ($155 >>> 0 < (HEAP32[gb + 45080 + 16 >> 2] | 0) >>> 0) _abort();
     $193 = $155 + 16 | 0;
     if ((HEAP32[$193 >> 2] | 0) == ($0 | 0)) HEAP32[$193 >> 2] = $R7$3; else HEAP32[$155 + 20 >> 2] = $R7$3;
     if (!$R7$3) break;
    }
    $198 = HEAP32[gb + 45080 + 16 >> 2] | 0;
    if ($R7$3 >>> 0 < $198 >>> 0) _abort();
    HEAP32[$R7$3 + 24 >> 2] = $155;
    $201 = $0 + 16 | 0;
    $202 = HEAP32[$201 >> 2] | 0;
    do if ($202 | 0) if ($202 >>> 0 < $198 >>> 0) _abort(); else {
     HEAP32[$R7$3 + 16 >> 2] = $202;
     HEAP32[$202 + 24 >> 2] = $R7$3;
     break;
    } while (0);
    $208 = HEAP32[$201 + 4 >> 2] | 0;
    if ($208 | 0) if ($208 >>> 0 < (HEAP32[gb + 45080 + 16 >> 2] | 0) >>> 0) _abort(); else {
     HEAP32[$R7$3 + 20 >> 2] = $208;
     HEAP32[$208 + 24 >> 2] = $R7$3;
     break;
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $129 | 1;
  HEAP32[$$1 + $129 >> 2] = $129;
  if (($$1 | 0) == (HEAP32[gb + 45080 + 20 >> 2] | 0)) {
   HEAP32[gb + 45080 + 8 >> 2] = $129;
   return;
  } else $$2 = $129;
 } else {
  HEAP32[$109 >> 2] = $110 & -2;
  HEAP32[$$1 + 4 >> 2] = $$14 | 1;
  HEAP32[$$1 + $$14 >> 2] = $$14;
  $$2 = $$14;
 }
 $223 = $$2 >>> 3;
 if ($$2 >>> 0 < 256) {
  $226 = gb + 45080 + 40 + ($223 << 1 << 2) | 0;
  $227 = HEAP32[gb + 45080 >> 2] | 0;
  $228 = 1 << $223;
  if (!($227 & $228)) {
   HEAP32[gb + 45080 >> 2] = $227 | $228;
   $$pre$phiZ2D = $226 + 8 | 0;
   $F17$0 = $226;
  } else {
   $232 = $226 + 8 | 0;
   $233 = HEAP32[$232 >> 2] | 0;
   if ($233 >>> 0 < (HEAP32[gb + 45080 + 16 >> 2] | 0) >>> 0) _abort(); else {
    $$pre$phiZ2D = $232;
    $F17$0 = $233;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1;
  HEAP32[$F17$0 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $F17$0;
  HEAP32[$$1 + 12 >> 2] = $226;
  return;
 }
 $239 = $$2 >>> 8;
 if (!$239) $I20$0 = 0; else if ($$2 >>> 0 > 16777215) $I20$0 = 31; else {
  $244 = ($239 + 1048320 | 0) >>> 16 & 8;
  $245 = $239 << $244;
  $248 = ($245 + 520192 | 0) >>> 16 & 4;
  $250 = $245 << $248;
  $253 = ($250 + 245760 | 0) >>> 16 & 2;
  $258 = 14 - ($248 | $244 | $253) + ($250 << $253 >>> 15) | 0;
  $I20$0 = $$2 >>> ($258 + 7 | 0) & 1 | $258 << 1;
 }
 $264 = gb + 45080 + 304 + ($I20$0 << 2) | 0;
 HEAP32[$$1 + 28 >> 2] = $I20$0;
 HEAP32[$$1 + 20 >> 2] = 0;
 HEAP32[$$1 + 16 >> 2] = 0;
 $268 = HEAP32[gb + 45080 + 4 >> 2] | 0;
 $269 = 1 << $I20$0;
 if (!($268 & $269)) {
  HEAP32[gb + 45080 + 4 >> 2] = $268 | $269;
  HEAP32[$264 >> 2] = $$1;
  HEAP32[$$1 + 24 >> 2] = $264;
  HEAP32[$$1 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$1;
  return;
 }
 $K21$0 = $$2 << (($I20$0 | 0) == 31 ? 0 : 25 - ($I20$0 >>> 1) | 0);
 $T$0 = HEAP32[$264 >> 2] | 0;
 while (1) {
  if ((HEAP32[$T$0 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
   $T$0$lcssa = $T$0;
   label = 127;
   break;
  }
  $287 = $T$0 + 16 + ($K21$0 >>> 31 << 2) | 0;
  $289 = HEAP32[$287 >> 2] | 0;
  if (!$289) {
   $$lcssa = $287;
   $T$0$lcssa30 = $T$0;
   label = 124;
   break;
  } else {
   $K21$0 = $K21$0 << 1;
   $T$0 = $289;
  }
 }
 if ((label | 0) == 124) {
  if ($$lcssa >>> 0 < (HEAP32[gb + 45080 + 16 >> 2] | 0) >>> 0) _abort();
  HEAP32[$$lcssa >> 2] = $$1;
  HEAP32[$$1 + 24 >> 2] = $T$0$lcssa30;
  HEAP32[$$1 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$1;
  return;
 } else if ((label | 0) == 127) {
  $296 = $T$0$lcssa + 8 | 0;
  $297 = HEAP32[$296 >> 2] | 0;
  $298 = HEAP32[gb + 45080 + 16 >> 2] | 0;
  if (!($297 >>> 0 >= $298 >>> 0 & $T$0$lcssa >>> 0 >= $298 >>> 0)) _abort();
  HEAP32[$297 + 12 >> 2] = $$1;
  HEAP32[$296 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $297;
  HEAP32[$$1 + 12 >> 2] = $T$0$lcssa;
  HEAP32[$$1 + 24 >> 2] = 0;
  return;
 }
}

function ___intscan($f, $base, $pok, $0, $1) {
 $f = $f | 0;
 $base = $base | 0;
 $pok = $pok | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $$115 = 0, $$116 = 0, $$base14 = 0, $$lcssa = 0, $$lcssa108 = 0, $$lcssa109 = 0, $$lcssa110 = 0, $$lcssa111 = 0, $$lcssa112 = 0, $$lcssa113 = 0, $100 = 0, $101 = 0, $108 = 0, $120 = 0, $121 = 0, $128 = 0, $13 = 0, $130 = 0, $131 = 0, $134 = 0, $135 = 0, $136 = 0, $144 = 0, $149 = 0, $150 = 0, $152 = 0, $155 = 0, $157 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0, $185 = 0, $186 = 0, $187 = 0, $195 = 0, $201 = 0, $203 = 0, $204 = 0, $206 = 0, $208 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $222 = 0, $223 = 0, $224 = 0, $239 = 0, $25 = 0, $260 = 0, $262 = 0, $272 = 0, $281 = 0, $284 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $3 = 0, $37 = 0, $39 = 0, $4 = 0, $47 = 0, $51 = 0, $6 = 0, $67 = 0, $70 = 0, $71 = 0, $72 = 0, $83 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $90 = 0, $91 = 0, $93 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$117 = 0, $c$2$be = 0, $c$2$be$lcssa = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$359 = 0, $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$be$lcssa = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$742 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $neg$1 = 0, $x$070 = 0, $x$136 = 0, $x$254 = 0, label = 0;
 L1 : do if ($base >>> 0 > 36) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  $286 = 0;
  $287 = 0;
 } else {
  $3 = $f + 4 | 0;
  $4 = $f + 100 | 0;
  do {
   $6 = HEAP32[$3 >> 2] | 0;
   if ($6 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = $6 + 1;
    $13 = HEAPU8[$6 >> 0] | 0;
   } else $13 = ___shgetc($f) | 0;
  } while ((_isspace($13) | 0) != 0);
  $$lcssa113 = $13;
  L11 : do switch ($$lcssa113 | 0) {
  case 43:
  case 45:
   {
    $17 = (($$lcssa113 | 0) == 45) << 31 >> 31;
    $18 = HEAP32[$3 >> 2] | 0;
    if ($18 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $18 + 1;
     $c$0 = HEAPU8[$18 >> 0] | 0;
     $neg$0 = $17;
     break L11;
    } else {
     $c$0 = ___shgetc($f) | 0;
     $neg$0 = $17;
     break L11;
    }
    break;
   }
  default:
   {
    $c$0 = $$lcssa113;
    $neg$0 = 0;
   }
  } while (0);
  $25 = ($base | 0) == 0;
  do if (($base | 16 | 0) == 16 & ($c$0 | 0) == 48) {
   $29 = HEAP32[$3 >> 2] | 0;
   if ($29 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = $29 + 1;
    $37 = HEAPU8[$29 >> 0] | 0;
   } else $37 = ___shgetc($f) | 0;
   if (($37 | 32 | 0) != 120) if ($25) {
    $$116 = 8;
    $c$117 = $37;
    label = 46;
    break;
   } else {
    $$1 = $base;
    $c$1 = $37;
    label = 32;
    break;
   }
   $39 = HEAP32[$3 >> 2] | 0;
   if ($39 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = $39 + 1;
    $47 = HEAPU8[$39 >> 0] | 0;
   } else $47 = ___shgetc($f) | 0;
   if ((HEAPU8[gb + 42172 + 1 + $47 >> 0] | 0) > 15) {
    $51 = (HEAP32[$4 >> 2] | 0) == 0;
    if (!$51) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
    if (!$pok) {
     ___shlim($f, 0);
     $286 = 0;
     $287 = 0;
     break L1;
    }
    if ($51) {
     $286 = 0;
     $287 = 0;
     break L1;
    }
    HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
    $286 = 0;
    $287 = 0;
    break L1;
   } else {
    $$116 = 16;
    $c$117 = $47;
    label = 46;
   }
  } else {
   $$base14 = $25 ? 10 : $base;
   if ((HEAPU8[gb + 42172 + 1 + $c$0 >> 0] | 0) >>> 0 < $$base14 >>> 0) {
    $$1 = $$base14;
    $c$1 = $c$0;
    label = 32;
   } else {
    if (HEAP32[$4 >> 2] | 0) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
    ___shlim($f, 0);
    HEAP32[(___errno_location() | 0) >> 2] = 22;
    $286 = 0;
    $287 = 0;
    break L1;
   }
  } while (0);
  if ((label | 0) == 32) if (($$1 | 0) == 10) {
   $67 = $c$1 + -48 | 0;
   if ($67 >>> 0 < 10) {
    $71 = $67;
    $x$070 = 0;
    while (1) {
     $70 = ($x$070 * 10 | 0) + $71 | 0;
     $72 = HEAP32[$3 >> 2] | 0;
     if ($72 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$3 >> 2] = $72 + 1;
      $c$2$be = HEAPU8[$72 >> 0] | 0;
     } else $c$2$be = ___shgetc($f) | 0;
     $71 = $c$2$be + -48 | 0;
     if (!($71 >>> 0 < 10 & $70 >>> 0 < 429496729)) {
      $$lcssa112 = $70;
      $c$2$be$lcssa = $c$2$be;
      break;
     } else $x$070 = $70;
    }
    $288 = $$lcssa112;
    $289 = 0;
    $c$2$lcssa = $c$2$be$lcssa;
   } else {
    $288 = 0;
    $289 = 0;
    $c$2$lcssa = $c$1;
   }
   $83 = $c$2$lcssa + -48 | 0;
   if ($83 >>> 0 < 10) {
    $85 = $288;
    $86 = $289;
    $90 = $83;
    $c$359 = $c$2$lcssa;
    while (1) {
     $87 = ___muldi3($85 | 0, $86 | 0, 10, 0) | 0;
     $88 = getTempRet0() | 0;
     $91 = (($90 | 0) < 0) << 31 >> 31;
     $93 = ~$91;
     if ($88 >>> 0 > $93 >>> 0 | ($88 | 0) == ($93 | 0) & $87 >>> 0 > ~$90 >>> 0) {
      $$lcssa = $90;
      $290 = $85;
      $291 = $86;
      $c$3$lcssa = $c$359;
      break;
     }
     $99 = _i64Add($87 | 0, $88 | 0, $90 | 0, $91 | 0) | 0;
     $100 = getTempRet0() | 0;
     $101 = HEAP32[$3 >> 2] | 0;
     if ($101 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$3 >> 2] = $101 + 1;
      $c$3$be = HEAPU8[$101 >> 0] | 0;
     } else $c$3$be = ___shgetc($f) | 0;
     $108 = $c$3$be + -48 | 0;
     if ($108 >>> 0 < 10 & ($100 >>> 0 < 429496729 | ($100 | 0) == 429496729 & $99 >>> 0 < 2576980378)) {
      $85 = $99;
      $86 = $100;
      $90 = $108;
      $c$359 = $c$3$be;
     } else {
      $$lcssa = $108;
      $290 = $99;
      $291 = $100;
      $c$3$lcssa = $c$3$be;
      break;
     }
    }
    if ($$lcssa >>> 0 > 9) {
     $260 = $291;
     $262 = $290;
     $neg$1 = $neg$0;
    } else {
     $$115 = 10;
     $292 = $290;
     $293 = $291;
     $c$8 = $c$3$lcssa;
     label = 72;
    }
   } else {
    $260 = $289;
    $262 = $288;
    $neg$1 = $neg$0;
   }
  } else {
   $$116 = $$1;
   $c$117 = $c$1;
   label = 46;
  }
  L63 : do if ((label | 0) == 46) {
   if (!($$116 + -1 & $$116)) {
    $128 = HEAP8[(($$116 * 23 | 0) >>> 5 & 7) + (gb + 42429) >> 0] | 0;
    $130 = HEAP8[gb + 42172 + 1 + $c$117 >> 0] | 0;
    $131 = $130 & 255;
    if ($131 >>> 0 < $$116 >>> 0) {
     $135 = $131;
     $x$136 = 0;
     while (1) {
      $134 = $135 | $x$136 << $128;
      $136 = HEAP32[$3 >> 2] | 0;
      if ($136 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
       HEAP32[$3 >> 2] = $136 + 1;
       $c$4$be = HEAPU8[$136 >> 0] | 0;
      } else $c$4$be = ___shgetc($f) | 0;
      $144 = HEAP8[gb + 42172 + 1 + $c$4$be >> 0] | 0;
      $135 = $144 & 255;
      if (!($134 >>> 0 < 134217728 & $135 >>> 0 < $$116 >>> 0)) {
       $$lcssa108 = $134;
       $$lcssa109 = $144;
       $c$4$be$lcssa = $c$4$be;
       break;
      } else $x$136 = $134;
     }
     $152 = $$lcssa109;
     $155 = 0;
     $157 = $$lcssa108;
     $c$4$lcssa = $c$4$be$lcssa;
    } else {
     $152 = $130;
     $155 = 0;
     $157 = 0;
     $c$4$lcssa = $c$117;
    }
    $149 = _bitshift64Lshr(-1, -1, $128 | 0) | 0;
    $150 = getTempRet0() | 0;
    if (($152 & 255) >>> 0 >= $$116 >>> 0 | ($155 >>> 0 > $150 >>> 0 | ($155 | 0) == ($150 | 0) & $157 >>> 0 > $149 >>> 0)) {
     $$115 = $$116;
     $292 = $157;
     $293 = $155;
     $c$8 = $c$4$lcssa;
     label = 72;
     break;
    } else {
     $161 = $157;
     $162 = $155;
     $166 = $152;
    }
    while (1) {
     $163 = _bitshift64Shl($161 | 0, $162 | 0, $128 | 0) | 0;
     $164 = getTempRet0() | 0;
     $167 = $166 & 255 | $163;
     $168 = HEAP32[$3 >> 2] | 0;
     if ($168 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$3 >> 2] = $168 + 1;
      $c$5$be = HEAPU8[$168 >> 0] | 0;
     } else $c$5$be = ___shgetc($f) | 0;
     $166 = HEAP8[gb + 42172 + 1 + $c$5$be >> 0] | 0;
     if (($166 & 255) >>> 0 >= $$116 >>> 0 | ($164 >>> 0 > $150 >>> 0 | ($164 | 0) == ($150 | 0) & $167 >>> 0 > $149 >>> 0)) {
      $$115 = $$116;
      $292 = $167;
      $293 = $164;
      $c$8 = $c$5$be;
      label = 72;
      break L63;
     } else {
      $161 = $167;
      $162 = $164;
     }
    }
   }
   $120 = HEAP8[gb + 42172 + 1 + $c$117 >> 0] | 0;
   $121 = $120 & 255;
   if ($121 >>> 0 < $$116 >>> 0) {
    $186 = $121;
    $x$254 = 0;
    while (1) {
     $185 = $186 + (Math_imul($x$254, $$116) | 0) | 0;
     $187 = HEAP32[$3 >> 2] | 0;
     if ($187 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$3 >> 2] = $187 + 1;
      $c$6$be = HEAPU8[$187 >> 0] | 0;
     } else $c$6$be = ___shgetc($f) | 0;
     $195 = HEAP8[gb + 42172 + 1 + $c$6$be >> 0] | 0;
     $186 = $195 & 255;
     if (!($185 >>> 0 < 119304647 & $186 >>> 0 < $$116 >>> 0)) {
      $$lcssa110 = $185;
      $$lcssa111 = $195;
      $c$6$be$lcssa = $c$6$be;
      break;
     } else $x$254 = $185;
    }
    $201 = $$lcssa111;
    $294 = $$lcssa110;
    $295 = 0;
    $c$6$lcssa = $c$6$be$lcssa;
   } else {
    $201 = $120;
    $294 = 0;
    $295 = 0;
    $c$6$lcssa = $c$117;
   }
   if (($201 & 255) >>> 0 < $$116 >>> 0) {
    $203 = ___udivdi3(-1, -1, $$116 | 0, 0) | 0;
    $204 = getTempRet0() | 0;
    $206 = $295;
    $208 = $294;
    $215 = $201;
    $c$742 = $c$6$lcssa;
    while (1) {
     if ($206 >>> 0 > $204 >>> 0 | ($206 | 0) == ($204 | 0) & $208 >>> 0 > $203 >>> 0) {
      $$115 = $$116;
      $292 = $208;
      $293 = $206;
      $c$8 = $c$742;
      label = 72;
      break L63;
     }
     $212 = ___muldi3($208 | 0, $206 | 0, $$116 | 0, 0) | 0;
     $213 = getTempRet0() | 0;
     $214 = $215 & 255;
     if ($213 >>> 0 > 4294967295 | ($213 | 0) == -1 & $212 >>> 0 > ~$214 >>> 0) {
      $$115 = $$116;
      $292 = $208;
      $293 = $206;
      $c$8 = $c$742;
      label = 72;
      break L63;
     }
     $222 = _i64Add($214 | 0, 0, $212 | 0, $213 | 0) | 0;
     $223 = getTempRet0() | 0;
     $224 = HEAP32[$3 >> 2] | 0;
     if ($224 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$3 >> 2] = $224 + 1;
      $c$7$be = HEAPU8[$224 >> 0] | 0;
     } else $c$7$be = ___shgetc($f) | 0;
     $215 = HEAP8[gb + 42172 + 1 + $c$7$be >> 0] | 0;
     if (($215 & 255) >>> 0 >= $$116 >>> 0) {
      $$115 = $$116;
      $292 = $222;
      $293 = $223;
      $c$8 = $c$7$be;
      label = 72;
      break;
     } else {
      $206 = $223;
      $208 = $222;
      $c$742 = $c$7$be;
     }
    }
   } else {
    $$115 = $$116;
    $292 = $294;
    $293 = $295;
    $c$8 = $c$6$lcssa;
    label = 72;
   }
  } while (0);
  if ((label | 0) == 72) if ((HEAPU8[gb + 42172 + 1 + $c$8 >> 0] | 0) >>> 0 < $$115 >>> 0) {
   do {
    $239 = HEAP32[$3 >> 2] | 0;
    if ($239 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $239 + 1;
     $c$9$be = HEAPU8[$239 >> 0] | 0;
    } else $c$9$be = ___shgetc($f) | 0;
   } while ((HEAPU8[gb + 42172 + 1 + $c$9$be >> 0] | 0) >>> 0 < $$115 >>> 0);
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   $260 = $1;
   $262 = $0;
   $neg$1 = ($0 & 1 | 0) == 0 & 0 == 0 ? $neg$0 : 0;
  } else {
   $260 = $293;
   $262 = $292;
   $neg$1 = $neg$0;
  }
  if (HEAP32[$4 >> 2] | 0) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
  if (!($260 >>> 0 < $1 >>> 0 | ($260 | 0) == ($1 | 0) & $262 >>> 0 < $0 >>> 0)) {
   if (!(($0 & 1 | 0) != 0 | 0 != 0 | ($neg$1 | 0) != 0)) {
    HEAP32[(___errno_location() | 0) >> 2] = 34;
    $272 = _i64Add($0 | 0, $1 | 0, -1, -1) | 0;
    $286 = getTempRet0() | 0;
    $287 = $272;
    break;
   }
   if ($260 >>> 0 > $1 >>> 0 | ($260 | 0) == ($1 | 0) & $262 >>> 0 > $0 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34;
    $286 = $1;
    $287 = $0;
    break;
   }
  }
  $281 = (($neg$1 | 0) < 0) << 31 >> 31;
  $284 = _i64Subtract($262 ^ $neg$1 | 0, $260 ^ $281 | 0, $neg$1 | 0, $281 | 0) | 0;
  $286 = getTempRet0() | 0;
  $287 = $284;
 } while (0);
 setTempRet0($286 | 0);
 return $287 | 0;
}

function _ellip_azpkf($_n, $_ep, $_es, $_za, $_pa, $_ka) {
 $_n = $_n | 0;
 $_ep = +$_ep;
 $_es = +$_es;
 $_za = $_za | 0;
 $_pa = $_pa | 0;
 $_ka = $_ka | 0;
 var $$byval_copy6 = 0, $$pre$phi6061Z2D = 0, $$pre55 = 0.0, $$pre57 = 0.0, $0 = 0, $1 = 0, $10 = 0, $102 = 0.0, $103 = 0.0, $106 = 0.0, $107 = 0.0, $11 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0, $12 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $127 = 0.0, $13 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $146 = 0.0, $147 = 0.0, $15 = 0, $152 = 0.0, $153 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $166 = 0.0, $167 = 0.0, $17 = 0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $179 = 0.0, $18 = 0, $184 = 0.0, $185 = 0.0, $19 = 0, $191 = 0, $192 = 0, $194 = 0, $196 = 0, $197 = 0, $2 = 0, $20 = 0.0, $201 = 0, $207 = 0, $21 = 0.0, $211 = 0.0, $212 = 0.0, $214 = 0, $215 = 0, $217 = 0, $218 = 0, $220 = 0, $221 = 0, $225 = 0, $236 = 0, $237 = 0.0, $239 = 0, $241 = 0, $243 = 0.0, $245 = 0.0, $247 = 0.0, $249 = 0.0, $252 = 0.0, $253 = 0.0, $258 = 0.0, $259 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0, $268 = 0, $272 = 0.0, $273 = 0.0, $3 = 0, $31 = 0.0, $4 = 0, $5 = 0, $54 = 0.0, $58 = 0.0, $6 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $73 = 0, $74 = 0, $75 = 0, $79 = 0, $8 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $93 = 0, $i$038 = 0, $i$134 = 0, $i$230 = 0, $i$326 = 0, $i$326$us = 0, $i$420 = 0, $i$516 = 0, $i$613 = 0, $i$712 = 0, $t1$0$lcssa = 0, $t1$021 = 0, $t1$1 = 0, $t1$217 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy6 = sp + 176 | 0;
 $0 = sp + 144 | 0;
 $1 = sp + 128 | 0;
 $2 = sp + 168 | 0;
 $3 = sp + 160 | 0;
 $4 = sp + 152 | 0;
 $5 = sp + 136 | 0;
 $6 = sp + 120 | 0;
 $7 = sp + 112 | 0;
 $8 = sp + 96 | 0;
 $9 = sp + 88 | 0;
 $10 = sp + 72 | 0;
 $11 = sp + 64 | 0;
 $12 = sp + 56 | 0;
 $13 = sp + 48 | 0;
 $14 = sp + 40 | 0;
 $15 = sp + 32 | 0;
 $16 = sp + 24 | 0;
 $17 = sp + 16 | 0;
 $18 = sp + 8 | 0;
 $19 = sp;
 $20 = $_ep / $_es;
 _llvm_stackrestore(_llvm_stacksave() | 0);
 _ellipkf($20, 7, sp + 104 | 0, sp + 80 | 0);
 $21 = +($_n >>> 0);
 _ellipkf($20, 7, $$byval_copy6, $0);
 $31 = +Math_pow(+(+Math_exp(+(+HEAPF32[$0 >> 2] * -3.141592653589793 / +HEAPF32[$$byval_copy6 >> 2]))), +(1.0 / $21));
 $54 = ($31 * $31 + 1.0 + +Math_pow(+$31, 6.0) + +Math_pow(+$31, 12.0) + +Math_pow(+$31, 20.0) + +Math_pow(+$31, 30.0) + +Math_pow(+$31, 42.0)) / (($31 + 0.0 + +Math_pow(+$31, 4.0) + +Math_pow(+$31, 9.0) + +Math_pow(+$31, 16.0) + +Math_pow(+$31, 25.0) + +Math_pow(+$31, 36.0)) * 2.0 + 1.0);
 $58 = $54 * ($54 * (+Math_sqrt(+$31) * 4.0));
 $61 = ~~+Math_floor(+($21 * .5)) >>> 0;
 $63 = ~~$21 >>> 0 & 1;
 $64 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($61 << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $65 = ($61 | 0) == 0;
 if ($65) label = 6; else {
  $i$038 = 0;
  do {
   HEAPF32[$64 + ($i$038 << 2) >> 2] = ((+($i$038 >>> 0) + 1.0) * 2.0 + -1.0) / $21;
   $i$038 = $i$038 + 1 | 0;
  } while (($i$038 | 0) != ($61 | 0));
  $73 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($61 << 3) | 0) + 15 & -16) | 0;
  if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
  if ($65) label = 6; else {
   $74 = $3 + 4 | 0;
   $75 = $2 + 4 | 0;
   $i$134 = 0;
   do {
    HEAP32[$3 >> 2] = HEAP32[$64 + ($i$134 << 2) >> 2];
    HEAPF32[$74 >> 2] = 0.0;
    HEAP32[$$byval_copy6 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
    _ellip_cdf($2, $$byval_copy6, $58, 7);
    $79 = HEAP32[$75 >> 2] | 0;
    HEAP32[$73 + ($i$134 << 3) >> 2] = HEAP32[$2 >> 2];
    HEAP32[$73 + ($i$134 << 3) + 4 >> 2] = $79;
    $i$134 = $i$134 + 1 | 0;
   } while (($i$134 | 0) != ($61 | 0));
   $84 = STACKTOP;
   STACKTOP = STACKTOP + ((1 * ($61 << 3) | 0) + 15 & -16) | 0;
   if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
   if ($65) $217 = $84; else {
    $85 = $4 + 4 | 0;
    $i$230 = 0;
    do {
     ___divsc3($4, 0.0, .9999999403953552, $58 * +HEAPF32[$73 + ($i$230 << 3) >> 2], $58 * +HEAPF32[$73 + ($i$230 << 3) + 4 >> 2]);
     $93 = HEAP32[$85 >> 2] | 0;
     HEAP32[$84 + ($i$230 << 3) >> 2] = HEAP32[$4 >> 2];
     HEAP32[$84 + ($i$230 << 3) + 4 >> 2] = $93;
     $i$230 = $i$230 + 1 | 0;
    } while (($i$230 | 0) != ($61 | 0));
    $217 = $84;
   }
  }
 }
 if ((label | 0) == 6) {
  $83 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($61 << 3) | 0) + 15 & -16) | 0;
  if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
  $217 = $83;
 }
 HEAPF32[$1 >> 2] = 0.0 / $_ep;
 HEAPF32[$1 + 4 >> 2] = 1.0 / $_ep;
 HEAP32[$$byval_copy6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 _ellip_acdf($0, $$byval_copy6, $20, 7);
 $102 = +HEAPF32[$0 + 4 >> 2];
 $103 = 1.0 - +HEAPF32[$0 >> 2];
 $106 = $103 * -0.0 - $102;
 $107 = $102 * 0.0 - $103;
 if (($106 != $106 | 0.0 != 0.0) & ($107 != $107 | 0.0 != 0.0)) {
  ___mulsc3($5, -0.0, -1.0, $103, -$102);
  $115 = +HEAPF32[$5 >> 2];
  $117 = +HEAPF32[$5 + 4 >> 2];
 } else {
  $115 = $106;
  $117 = $107;
 }
 $114 = $115 / $21;
 $116 = $117 / $21;
 $118 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($61 << 3) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$pre55 = $114 * 0.0 - $116;
 $$pre57 = $114 + $116 * 0.0;
 L18 : do if (!$65) {
  $121 = $6 + 4 | 0;
  $122 = $8 + 4 | 0;
  $123 = $7 + 4 | 0;
  $124 = $9 + 4 | 0;
  if (($$pre55 != $$pre55 | 0.0 != 0.0) & ($$pre57 != $$pre57 | 0.0 != 0.0)) {
   $i$326$us = 0;
   while (1) {
    $127 = +HEAPF32[$64 + ($i$326$us << 2) >> 2];
    ___mulsc3($6, 0.0, 1.0, $114, $116);
    $131 = -+HEAPF32[$121 >> 2];
    HEAPF32[$8 >> 2] = $127 - +HEAPF32[$6 >> 2];
    HEAPF32[$122 >> 2] = $131;
    HEAP32[$$byval_copy6 >> 2] = HEAP32[$8 >> 2];
    HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
    _ellip_cdf($7, $$byval_copy6, $58, 7);
    $132 = +HEAPF32[$7 >> 2];
    $133 = +HEAPF32[$123 >> 2];
    $138 = $132 * 0.0 - $133 * .9999999403953552;
    $139 = $132 * .9999999403953552 + $133 * 0.0;
    if (($138 != $138 | 0.0 != 0.0) & ($139 != $139 | 0.0 != 0.0)) {
     ___mulsc3($9, 0.0, .9999999403953552, $132, $133);
     $146 = +HEAPF32[$9 >> 2];
     $147 = +HEAPF32[$124 >> 2];
    } else {
     $146 = $138;
     $147 = $139;
    }
    HEAPF32[$118 + ($i$326$us << 3) >> 2] = $146;
    HEAPF32[$118 + ($i$326$us << 3) + 4 >> 2] = $147;
    $i$326$us = $i$326$us + 1 | 0;
    if (($i$326$us | 0) == ($61 | 0)) break L18;
   }
  }
  $125 = -$$pre57;
  $i$326 = 0;
  do {
   HEAPF32[$8 >> 2] = +HEAPF32[$64 + ($i$326 << 2) >> 2] - $$pre55;
   HEAPF32[$122 >> 2] = $125;
   HEAP32[$$byval_copy6 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
   _ellip_cdf($7, $$byval_copy6, $58, 7);
   $152 = +HEAPF32[$7 >> 2];
   $153 = +HEAPF32[$123 >> 2];
   $158 = $152 * 0.0 - $153 * .9999999403953552;
   $159 = $152 * .9999999403953552 + $153 * 0.0;
   if (($158 != $158 | 0.0 != 0.0) & ($159 != $159 | 0.0 != 0.0)) {
    ___mulsc3($9, 0.0, .9999999403953552, $152, $153);
    $166 = +HEAPF32[$9 >> 2];
    $167 = +HEAPF32[$124 >> 2];
   } else {
    $166 = $158;
    $167 = $159;
   }
   HEAPF32[$118 + ($i$326 << 3) >> 2] = $166;
   HEAPF32[$118 + ($i$326 << 3) + 4 >> 2] = $167;
   $i$326 = $i$326 + 1 | 0;
  } while (($i$326 | 0) != ($61 | 0));
 } while (0);
 if (($$pre55 != $$pre55 | 0.0 != 0.0) & ($$pre57 != $$pre57 | 0.0 != 0.0)) {
  ___mulsc3($10, 0.0, 1.0, $114, $116);
  $175 = +HEAPF32[$10 >> 2];
  $176 = +HEAPF32[$10 + 4 >> 2];
 } else {
  $175 = $$pre55;
  $176 = $$pre57;
 }
 HEAPF32[$12 >> 2] = $175;
 HEAPF32[$12 + 4 >> 2] = $176;
 HEAP32[$$byval_copy6 >> 2] = HEAP32[$12 >> 2];
 HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$12 + 4 >> 2];
 _ellip_snf($11, $$byval_copy6, $58, 7);
 $177 = +HEAPF32[$11 >> 2];
 $179 = +HEAPF32[$11 + 4 >> 2];
 $184 = $177 * 0.0 - $179 * .9999999403953552;
 $185 = $177 * .9999999403953552 + $179 * 0.0;
 if (($184 != $184 | 0.0 != 0.0) & ($185 != $185 | 0.0 != 0.0)) {
  ___mulsc3($13, 0.0, .9999999403953552, $177, $179);
  $211 = +HEAPF32[$13 >> 2];
  $212 = +HEAPF32[$13 + 4 >> 2];
 } else {
  $211 = $184;
  $212 = $185;
 }
 if ($65) $t1$0$lcssa = 0; else {
  $191 = $15 + 4 | 0;
  $192 = $14 + 4 | 0;
  $i$420 = 0;
  $t1$021 = 0;
  while (1) {
   $194 = HEAP32[$118 + ($i$420 << 3) >> 2] | 0;
   $196 = HEAP32[$118 + ($i$420 << 3) + 4 >> 2] | 0;
   $197 = $t1$021 | 1;
   HEAP32[$_pa + ($t1$021 << 3) >> 2] = $194;
   HEAP32[$_pa + ($t1$021 << 3) + 4 >> 2] = $196;
   HEAP32[$15 >> 2] = $194;
   HEAP32[$191 >> 2] = $196;
   HEAP32[$$byval_copy6 >> 2] = HEAP32[$15 >> 2];
   HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$15 + 4 >> 2];
   _conjf($14, $$byval_copy6);
   $201 = HEAP32[$192 >> 2] | 0;
   HEAP32[$_pa + ($197 << 3) >> 2] = HEAP32[$14 >> 2];
   HEAP32[$_pa + ($197 << 3) + 4 >> 2] = $201;
   $i$420 = $i$420 + 1 | 0;
   if (($i$420 | 0) == ($61 | 0)) break; else $t1$021 = $t1$021 + 2 | 0;
  }
  $t1$0$lcssa = $61 << 1;
 }
 $207 = ($63 | 0) != 0;
 if ($207) {
  HEAPF32[$_pa + ($t1$0$lcssa << 3) >> 2] = $211;
  HEAPF32[$_pa + ($t1$0$lcssa << 3) + 4 >> 2] = $212;
  $t1$1 = $t1$0$lcssa | 1;
 } else $t1$1 = $t1$0$lcssa;
 if (($t1$1 | 0) != ($_n | 0)) ___assert_fail(gb + 40951 | 0, gb + 40957 | 0, 383, gb + 40980 | 0);
 if ($65) if (!($61 & 2147483647)) $$pre$phi6061Z2D = 0; else ___assert_fail(gb + 40992 | 0, gb + 40957 | 0, 390, gb + 40980 | 0); else {
  $214 = $17 + 4 | 0;
  $215 = $16 + 4 | 0;
  $i$516 = 0;
  $t1$217 = 0;
  while (1) {
   $218 = HEAP32[$217 + ($i$516 << 3) >> 2] | 0;
   $220 = HEAP32[$217 + ($i$516 << 3) + 4 >> 2] | 0;
   $221 = $t1$217 | 1;
   HEAP32[$_za + ($t1$217 << 3) >> 2] = $218;
   HEAP32[$_za + ($t1$217 << 3) + 4 >> 2] = $220;
   HEAP32[$17 >> 2] = $218;
   HEAP32[$214 >> 2] = $220;
   HEAP32[$$byval_copy6 >> 2] = HEAP32[$17 >> 2];
   HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$17 + 4 >> 2];
   _conjf($16, $$byval_copy6);
   $225 = HEAP32[$215 >> 2] | 0;
   HEAP32[$_za + ($221 << 3) >> 2] = HEAP32[$16 >> 2];
   HEAP32[$_za + ($221 << 3) + 4 >> 2] = $225;
   $i$516 = $i$516 + 1 | 0;
   if (($i$516 | 0) == ($61 | 0)) break; else $t1$217 = $t1$217 + 2 | 0;
  }
  $$pre$phi6061Z2D = $61 << 1;
 }
 if ($207) $237 = 1.0; else $237 = 1.0 / +Math_sqrt(+($_ep * $_ep + 1.0));
 $236 = $_ka + 4 | 0;
 HEAPF32[$_ka >> 2] = $237;
 HEAPF32[$236 >> 2] = 0.0;
 if (!$_n) {
  $272 = 0.0;
  $273 = $237;
 } else {
  $239 = $18 + 4 | 0;
  $247 = $237;
  $249 = 0.0;
  $i$613 = 0;
  while (1) {
   $243 = +HEAPF32[$_pa + ($i$613 << 3) >> 2];
   $245 = +HEAPF32[$_pa + ($i$613 << 3) + 4 >> 2];
   $252 = $243 * $247 - $245 * $249;
   $253 = $245 * $247 + $243 * $249;
   if (($252 != $252 | 0.0 != 0.0) & ($253 != $253 | 0.0 != 0.0)) {
    ___mulsc3($18, $247, $249, $243, $245);
    $258 = +HEAPF32[$18 >> 2];
    $259 = +HEAPF32[$239 >> 2];
   } else {
    $258 = $252;
    $259 = $253;
   }
   HEAPF32[$_ka >> 2] = $258;
   HEAPF32[$236 >> 2] = $259;
   $i$613 = $i$613 + 1 | 0;
   if (($i$613 | 0) == ($_n | 0)) {
    $272 = $259;
    $273 = $258;
    break;
   } else {
    $247 = $258;
    $249 = $259;
   }
  }
 }
 if (!$$pre$phi6061Z2D) {
  STACKTOP = sp;
  return;
 }
 $241 = $19 + 4 | 0;
 $265 = $273;
 $266 = $272;
 $i$712 = 0;
 while (1) {
  ___divsc3($19, $265, $266, +HEAPF32[$_za + ($i$712 << 3) >> 2], +HEAPF32[$_za + ($i$712 << 3) + 4 >> 2]);
  $267 = HEAP32[$19 >> 2] | 0;
  $268 = HEAP32[$241 >> 2] | 0;
  HEAP32[$_ka >> 2] = $267;
  HEAP32[$236 >> 2] = $268;
  $i$712 = $i$712 + 1 | 0;
  $265 = (HEAP32[tempDoublePtr >> 2] = $267, +HEAPF32[tempDoublePtr >> 2]);
  if (($i$712 | 0) == ($$pre$phi6061Z2D | 0)) break; else $266 = (HEAP32[tempDoublePtr >> 2] = $268, +HEAPF32[tempDoublePtr >> 2]);
 }
 STACKTOP = sp;
 return;
}

function _fft_execute_dft_5($_q) {
 $_q = $_q | 0;
 var $$byval_copy3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $108 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $117 = 0.0, $118 = 0.0, $12 = 0, $125 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $134 = 0.0, $135 = 0.0, $14 = 0, $142 = 0.0, $144 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $155 = 0.0, $156 = 0.0, $16 = 0, $163 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $17 = 0, $172 = 0.0, $173 = 0.0, $18 = 0, $180 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $189 = 0.0, $19 = 0, $190 = 0.0, $197 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $206 = 0.0, $207 = 0.0, $21 = 0, $214 = 0.0, $216 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $227 = 0.0, $228 = 0.0, $23 = 0, $235 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $244 = 0.0, $245 = 0.0, $25 = 0, $252 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $261 = 0.0, $262 = 0.0, $269 = 0.0, $27 = 0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $278 = 0.0, $279 = 0.0, $286 = 0.0, $288 = 0.0, $29 = 0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $299 = 0.0, $3 = 0, $300 = 0.0, $307 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $316 = 0.0, $317 = 0.0, $324 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $33 = 0, $333 = 0.0, $334 = 0.0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $350 = 0.0, $351 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $360 = 0.0, $361 = 0, $362 = 0, $37 = 0, $39 = 0, $4 = 0, $43 = 0, $45 = 0, $49 = 0, $5 = 0, $51 = 0, $54 = 0.0, $6 = 0, $60 = 0.0, $62 = 0.0, $68 = 0.0, $7 = 0, $70 = 0.0, $72 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $8 = 0, $83 = 0.0, $84 = 0.0, $9 = 0, $91 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $g0$sroa$0$0 = 0.0, $g0$sroa$10$0 = 0.0, $g1$sroa$0$0 = 0.0, $g1$sroa$10$0 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy3 = sp + 192 | 0;
 $0 = sp + 184 | 0;
 $1 = sp + 176 | 0;
 $2 = sp + 168 | 0;
 $3 = sp + 160 | 0;
 $4 = sp + 152 | 0;
 $5 = sp + 144 | 0;
 $6 = sp + 136 | 0;
 $7 = sp + 128 | 0;
 $8 = sp + 120 | 0;
 $9 = sp + 112 | 0;
 $10 = sp + 104 | 0;
 $11 = sp + 96 | 0;
 $12 = sp + 88 | 0;
 $13 = sp + 80 | 0;
 $14 = sp + 72 | 0;
 $15 = sp + 64 | 0;
 $16 = sp + 56 | 0;
 $17 = sp + 48 | 0;
 $18 = sp + 40 | 0;
 $19 = sp + 32 | 0;
 $20 = sp + 24 | 0;
 $21 = sp + 16 | 0;
 $22 = sp + 8 | 0;
 $23 = sp;
 $25 = HEAP32[$_q + 4 >> 2] | 0;
 $27 = HEAP32[$_q + 8 >> 2] | 0;
 $29 = $25 + 4 | 0;
 $31 = $25 + 8 | 0;
 $33 = $25 + 12 | 0;
 $37 = $25 + 16 | 0;
 $39 = $25 + 20 | 0;
 $43 = $25 + 24 | 0;
 $45 = $25 + 28 | 0;
 $49 = $25 + 32 | 0;
 $51 = $25 + 36 | 0;
 $54 = +HEAPF32[$29 >> 2] + +HEAPF32[$33 >> 2] + +HEAPF32[$39 >> 2] + +HEAPF32[$45 >> 2] + +HEAPF32[$51 >> 2];
 HEAPF32[$27 >> 2] = +HEAPF32[$25 >> 2] + +HEAPF32[$31 >> 2] + +HEAPF32[$37 >> 2] + +HEAPF32[$43 >> 2] + +HEAPF32[$49 >> 2];
 HEAPF32[$27 + 4 >> 2] = $54;
 if ((HEAP32[$_q + 12 >> 2] | 0) == -1) {
  HEAPF32[$1 >> 2] = .30901700258255005;
  HEAPF32[$1 + 4 >> 2] = -.9510565400123596;
  HEAP32[$$byval_copy3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  _conjf($0, $$byval_copy3);
  $60 = +HEAPF32[$0 >> 2];
  $62 = +HEAPF32[$0 + 4 >> 2];
  HEAPF32[$3 >> 2] = -.80901700258255;
  HEAPF32[$3 + 4 >> 2] = -.5877852439880371;
  HEAP32[$$byval_copy3 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  _conjf($2, $$byval_copy3);
  $g0$sroa$0$0 = $60;
  $g0$sroa$10$0 = $62;
  $g1$sroa$0$0 = +HEAPF32[$2 >> 2];
  $g1$sroa$10$0 = +HEAPF32[$2 + 4 >> 2];
 } else {
  $g0$sroa$0$0 = .30901700258255005;
  $g0$sroa$10$0 = -.9510565400123596;
  $g1$sroa$0$0 = -.80901700258255;
  $g1$sroa$10$0 = -.5877852439880371;
 }
 HEAPF32[$5 >> 2] = $g0$sroa$0$0;
 HEAPF32[$5 + 4 >> 2] = $g0$sroa$10$0;
 HEAP32[$$byval_copy3 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
 _conjf($4, $$byval_copy3);
 $68 = +HEAPF32[$4 >> 2];
 $70 = +HEAPF32[$4 + 4 >> 2];
 HEAPF32[$7 >> 2] = $g1$sroa$0$0;
 HEAPF32[$7 + 4 >> 2] = $g1$sroa$10$0;
 HEAP32[$$byval_copy3 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
 _conjf($6, $$byval_copy3);
 $72 = +HEAPF32[$6 >> 2];
 $74 = +HEAPF32[$6 + 4 >> 2];
 $75 = +HEAPF32[$25 >> 2];
 $76 = +HEAPF32[$29 >> 2];
 $77 = +HEAPF32[$31 >> 2];
 $78 = +HEAPF32[$33 >> 2];
 $83 = $g0$sroa$0$0 * $77 - $g0$sroa$10$0 * $78;
 $84 = $g0$sroa$10$0 * $77 + $g0$sroa$0$0 * $78;
 if (($83 != $83 | 0.0 != 0.0) & ($84 != $84 | 0.0 != 0.0)) {
  ___mulsc3($8, $77, $78, $g0$sroa$0$0, $g0$sroa$10$0);
  $91 = +HEAPF32[$8 >> 2];
  $93 = +HEAPF32[$8 + 4 >> 2];
 } else {
  $91 = $83;
  $93 = $84;
 }
 $94 = +HEAPF32[$37 >> 2];
 $95 = +HEAPF32[$39 >> 2];
 $100 = $g1$sroa$0$0 * $94 - $g1$sroa$10$0 * $95;
 $101 = $g1$sroa$10$0 * $94 + $g1$sroa$0$0 * $95;
 if (($100 != $100 | 0.0 != 0.0) & ($101 != $101 | 0.0 != 0.0)) {
  ___mulsc3($9, $94, $95, $g1$sroa$0$0, $g1$sroa$10$0);
  $108 = +HEAPF32[$9 >> 2];
  $110 = +HEAPF32[$9 + 4 >> 2];
 } else {
  $108 = $100;
  $110 = $101;
 }
 $111 = +HEAPF32[$43 >> 2];
 $112 = +HEAPF32[$45 >> 2];
 $117 = $72 * $111 - $74 * $112;
 $118 = $74 * $111 + $72 * $112;
 if (($117 != $117 | 0.0 != 0.0) & ($118 != $118 | 0.0 != 0.0)) {
  ___mulsc3($10, $111, $112, $72, $74);
  $125 = +HEAPF32[$10 >> 2];
  $127 = +HEAPF32[$10 + 4 >> 2];
 } else {
  $125 = $117;
  $127 = $118;
 }
 $128 = +HEAPF32[$49 >> 2];
 $129 = +HEAPF32[$51 >> 2];
 $134 = $68 * $128 - $70 * $129;
 $135 = $70 * $128 + $68 * $129;
 if (($134 != $134 | 0.0 != 0.0) & ($135 != $135 | 0.0 != 0.0)) {
  ___mulsc3($11, $128, $129, $68, $70);
  $142 = +HEAPF32[$11 >> 2];
  $144 = +HEAPF32[$11 + 4 >> 2];
 } else {
  $142 = $134;
  $144 = $135;
 }
 HEAPF32[$27 + 8 >> 2] = $75 + $91 + $108 + $125 + $142;
 HEAPF32[$27 + 12 >> 2] = $76 + $93 + $110 + $127 + $144;
 $147 = +HEAPF32[$25 >> 2];
 $148 = +HEAPF32[$29 >> 2];
 $149 = +HEAPF32[$31 >> 2];
 $150 = +HEAPF32[$33 >> 2];
 $155 = $g1$sroa$0$0 * $149 - $g1$sroa$10$0 * $150;
 $156 = $g1$sroa$10$0 * $149 + $g1$sroa$0$0 * $150;
 if (($155 != $155 | 0.0 != 0.0) & ($156 != $156 | 0.0 != 0.0)) {
  ___mulsc3($12, $149, $150, $g1$sroa$0$0, $g1$sroa$10$0);
  $163 = +HEAPF32[$12 >> 2];
  $165 = +HEAPF32[$12 + 4 >> 2];
 } else {
  $163 = $155;
  $165 = $156;
 }
 $166 = +HEAPF32[$37 >> 2];
 $167 = +HEAPF32[$39 >> 2];
 $172 = $68 * $166 - $70 * $167;
 $173 = $70 * $166 + $68 * $167;
 if (($172 != $172 | 0.0 != 0.0) & ($173 != $173 | 0.0 != 0.0)) {
  ___mulsc3($13, $166, $167, $68, $70);
  $180 = +HEAPF32[$13 >> 2];
  $182 = +HEAPF32[$13 + 4 >> 2];
 } else {
  $180 = $172;
  $182 = $173;
 }
 $183 = +HEAPF32[$43 >> 2];
 $184 = +HEAPF32[$45 >> 2];
 $189 = $g0$sroa$0$0 * $183 - $g0$sroa$10$0 * $184;
 $190 = $g0$sroa$10$0 * $183 + $g0$sroa$0$0 * $184;
 if (($189 != $189 | 0.0 != 0.0) & ($190 != $190 | 0.0 != 0.0)) {
  ___mulsc3($14, $183, $184, $g0$sroa$0$0, $g0$sroa$10$0);
  $197 = +HEAPF32[$14 >> 2];
  $199 = +HEAPF32[$14 + 4 >> 2];
 } else {
  $197 = $189;
  $199 = $190;
 }
 $200 = +HEAPF32[$49 >> 2];
 $201 = +HEAPF32[$51 >> 2];
 $206 = $72 * $200 - $74 * $201;
 $207 = $74 * $200 + $72 * $201;
 if (($206 != $206 | 0.0 != 0.0) & ($207 != $207 | 0.0 != 0.0)) {
  ___mulsc3($15, $200, $201, $72, $74);
  $214 = +HEAPF32[$15 >> 2];
  $216 = +HEAPF32[$15 + 4 >> 2];
 } else {
  $214 = $206;
  $216 = $207;
 }
 HEAPF32[$27 + 16 >> 2] = $147 + $163 + $180 + $197 + $214;
 HEAPF32[$27 + 20 >> 2] = $148 + $165 + $182 + $199 + $216;
 $219 = +HEAPF32[$25 >> 2];
 $220 = +HEAPF32[$29 >> 2];
 $221 = +HEAPF32[$31 >> 2];
 $222 = +HEAPF32[$33 >> 2];
 $227 = $72 * $221 - $74 * $222;
 $228 = $74 * $221 + $72 * $222;
 if (($227 != $227 | 0.0 != 0.0) & ($228 != $228 | 0.0 != 0.0)) {
  ___mulsc3($16, $221, $222, $72, $74);
  $235 = +HEAPF32[$16 >> 2];
  $237 = +HEAPF32[$16 + 4 >> 2];
 } else {
  $235 = $227;
  $237 = $228;
 }
 $238 = +HEAPF32[$37 >> 2];
 $239 = +HEAPF32[$39 >> 2];
 $244 = $g0$sroa$0$0 * $238 - $g0$sroa$10$0 * $239;
 $245 = $g0$sroa$10$0 * $238 + $g0$sroa$0$0 * $239;
 if (($244 != $244 | 0.0 != 0.0) & ($245 != $245 | 0.0 != 0.0)) {
  ___mulsc3($17, $238, $239, $g0$sroa$0$0, $g0$sroa$10$0);
  $252 = +HEAPF32[$17 >> 2];
  $254 = +HEAPF32[$17 + 4 >> 2];
 } else {
  $252 = $244;
  $254 = $245;
 }
 $255 = +HEAPF32[$43 >> 2];
 $256 = +HEAPF32[$45 >> 2];
 $261 = $68 * $255 - $70 * $256;
 $262 = $70 * $255 + $68 * $256;
 if (($261 != $261 | 0.0 != 0.0) & ($262 != $262 | 0.0 != 0.0)) {
  ___mulsc3($18, $255, $256, $68, $70);
  $269 = +HEAPF32[$18 >> 2];
  $271 = +HEAPF32[$18 + 4 >> 2];
 } else {
  $269 = $261;
  $271 = $262;
 }
 $272 = +HEAPF32[$49 >> 2];
 $273 = +HEAPF32[$51 >> 2];
 $278 = $g1$sroa$0$0 * $272 - $g1$sroa$10$0 * $273;
 $279 = $g1$sroa$10$0 * $272 + $g1$sroa$0$0 * $273;
 if (($278 != $278 | 0.0 != 0.0) & ($279 != $279 | 0.0 != 0.0)) {
  ___mulsc3($19, $272, $273, $g1$sroa$0$0, $g1$sroa$10$0);
  $286 = +HEAPF32[$19 >> 2];
  $288 = +HEAPF32[$19 + 4 >> 2];
 } else {
  $286 = $278;
  $288 = $279;
 }
 HEAPF32[$27 + 24 >> 2] = $219 + $235 + $252 + $269 + $286;
 HEAPF32[$27 + 28 >> 2] = $220 + $237 + $254 + $271 + $288;
 $291 = +HEAPF32[$25 >> 2];
 $292 = +HEAPF32[$29 >> 2];
 $293 = +HEAPF32[$31 >> 2];
 $294 = +HEAPF32[$33 >> 2];
 $299 = $68 * $293 - $70 * $294;
 $300 = $70 * $293 + $68 * $294;
 if (($299 != $299 | 0.0 != 0.0) & ($300 != $300 | 0.0 != 0.0)) {
  ___mulsc3($20, $293, $294, $68, $70);
  $307 = +HEAPF32[$20 >> 2];
  $309 = +HEAPF32[$20 + 4 >> 2];
 } else {
  $307 = $299;
  $309 = $300;
 }
 $310 = +HEAPF32[$37 >> 2];
 $311 = +HEAPF32[$39 >> 2];
 $316 = $72 * $310 - $74 * $311;
 $317 = $74 * $310 + $72 * $311;
 if (($316 != $316 | 0.0 != 0.0) & ($317 != $317 | 0.0 != 0.0)) {
  ___mulsc3($21, $310, $311, $72, $74);
  $324 = +HEAPF32[$21 >> 2];
  $326 = +HEAPF32[$21 + 4 >> 2];
 } else {
  $324 = $316;
  $326 = $317;
 }
 $327 = +HEAPF32[$43 >> 2];
 $328 = +HEAPF32[$45 >> 2];
 $333 = $g1$sroa$0$0 * $327 - $g1$sroa$10$0 * $328;
 $334 = $g1$sroa$10$0 * $327 + $g1$sroa$0$0 * $328;
 if (($333 != $333 | 0.0 != 0.0) & ($334 != $334 | 0.0 != 0.0)) {
  ___mulsc3($22, $327, $328, $g1$sroa$0$0, $g1$sroa$10$0);
  $341 = +HEAPF32[$22 >> 2];
  $343 = +HEAPF32[$22 + 4 >> 2];
 } else {
  $341 = $333;
  $343 = $334;
 }
 $340 = $291 + $307 + $324 + $341;
 $342 = $292 + $309 + $326 + $343;
 $344 = +HEAPF32[$49 >> 2];
 $345 = +HEAPF32[$51 >> 2];
 $350 = $g0$sroa$0$0 * $344 - $g0$sroa$10$0 * $345;
 $351 = $g0$sroa$10$0 * $344 + $g0$sroa$0$0 * $345;
 if (!(($350 != $350 | 0.0 != 0.0) & ($351 != $351 | 0.0 != 0.0))) {
  $358 = $350;
  $360 = $351;
  $357 = $340 + $358;
  $359 = $342 + $360;
  $361 = $27 + 32 | 0;
  $362 = $27 + 36 | 0;
  HEAPF32[$361 >> 2] = $357;
  HEAPF32[$362 >> 2] = $359;
  STACKTOP = sp;
  return;
 }
 ___mulsc3($23, $344, $345, $g0$sroa$0$0, $g0$sroa$10$0);
 $358 = +HEAPF32[$23 >> 2];
 $360 = +HEAPF32[$23 + 4 >> 2];
 $357 = $340 + $358;
 $359 = $342 + $360;
 $361 = $27 + 32 | 0;
 $362 = $27 + 36 | 0;
 HEAPF32[$361 >> 2] = $357;
 HEAPF32[$362 >> 2] = $359;
 STACKTOP = sp;
 return;
}

function _qdetector_cccf_execute_align($_q, $_x) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 var $$byval_copy9 = 0, $$lcssa = 0, $$pre29 = 0, $0 = 0, $1 = 0, $10 = 0, $101 = 0, $104 = 0.0, $107 = 0.0, $109 = 0.0, $11 = 0, $112 = 0.0, $118 = 0.0, $12 = 0, $120 = 0, $13 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $138 = 0, $14 = 0, $142 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0.0, $15 = 0, $151 = 0.0, $153 = 0.0, $156 = 0.0, $157 = 0.0, $16 = 0, $162 = 0.0, $163 = 0.0, $17 = 0, $170 = 0, $171 = 0, $175 = 0, $176 = 0.0, $177 = 0, $179 = 0, $183 = 0, $185 = 0, $186 = 0, $19 = 0, $190 = 0, $192 = 0.0, $193 = 0, $197 = 0, $199 = 0.0, $2 = 0, $20 = 0, $209 = 0.0, $21 = 0, $210 = 0, $213 = 0.0, $221 = 0.0, $222 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $231 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $24 = 0, $241 = 0.0, $242 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $250 = 0.0, $255 = 0.0, $256 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0, $275 = 0, $28 = 0, $3 = 0, $31 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $49 = 0.0, $5 = 0, $51 = 0.0, $52 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $6 = 0, $63 = 0.0, $64 = 0.0, $69 = 0, $7 = 0, $72 = 0.0, $73 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $86 = 0, $89 = 0.0, $9 = 0, $90 = 0, $93 = 0, $96 = 0.0, $97 = 0, $i$021 = 0, $i$117 = 0, $i$210 = 0, $i$34 = 0, $i0$0$lcssa = 0, $i0$08 = 0, $i0$1 = 0, $metric$sroa$0$0$lcssa = 0.0, $metric$sroa$0$06 = 0.0, $metric$sroa$6$0$lcssa = 0.0, $metric$sroa$6$05 = 0.0, $v0$0$lcssa = 0.0, $v0$09 = 0.0, $v0$1 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy9 = sp + 136 | 0;
 $0 = sp + 128 | 0;
 $1 = sp + 120 | 0;
 $2 = sp + 112 | 0;
 $3 = sp + 104 | 0;
 $4 = sp + 96 | 0;
 $5 = sp + 88 | 0;
 $6 = sp + 80 | 0;
 $7 = sp + 72 | 0;
 $8 = sp + 64 | 0;
 $9 = sp + 56 | 0;
 $10 = sp + 48 | 0;
 $11 = sp + 40 | 0;
 $12 = sp + 32 | 0;
 $13 = sp + 24 | 0;
 $14 = sp + 16 | 0;
 $15 = sp + 8 | 0;
 $16 = sp;
 $17 = HEAP32[$_x >> 2] | 0;
 $19 = HEAP32[$_x + 4 >> 2] | 0;
 $20 = $_q + 44 | 0;
 $21 = HEAP32[$20 >> 2] | 0;
 HEAP32[$20 >> 2] = $21 + 1;
 $23 = $_q + 16 | 0;
 $24 = HEAP32[$23 >> 2] | 0;
 HEAP32[$24 + ($21 << 3) >> 2] = $17;
 HEAP32[$24 + ($21 << 3) + 4 >> 2] = $19;
 $28 = $_q + 32 | 0;
 if ((HEAP32[$20 >> 2] | 0) >>> 0 < (HEAP32[$28 >> 2] | 0) >>> 0) {
  STACKTOP = sp;
  return;
 }
 $31 = $_q + 36 | 0;
 _fft_execute(HEAP32[$31 >> 2] | 0);
 $33 = HEAP32[$28 >> 2] | 0;
 if ($33 | 0) {
  $35 = $_q + 68 | 0;
  $36 = $_q + 20 | 0;
  $37 = $_q + 8 | 0;
  $38 = $1 + 4 | 0;
  $39 = $0 + 4 | 0;
  $40 = $2 + 4 | 0;
  $41 = $_q + 24 | 0;
  $43 = $33;
  $i$021 = 0;
  do {
   $46 = (($43 + $i$021 - (HEAP32[$35 >> 2] | 0) | 0) >>> 0) % ($43 >>> 0) | 0;
   $47 = HEAP32[$36 >> 2] | 0;
   $49 = +HEAPF32[$47 + ($i$021 << 3) >> 2];
   $51 = +HEAPF32[$47 + ($i$021 << 3) + 4 >> 2];
   $52 = HEAP32[$37 >> 2] | 0;
   $56 = HEAP32[$52 + ($46 << 3) + 4 >> 2] | 0;
   HEAP32[$1 >> 2] = HEAP32[$52 + ($46 << 3) >> 2];
   HEAP32[$38 >> 2] = $56;
   HEAP32[$$byval_copy9 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$$byval_copy9 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   _conjf($0, $$byval_copy9);
   $57 = +HEAPF32[$0 >> 2];
   $58 = +HEAPF32[$39 >> 2];
   $63 = $49 * $57 - $51 * $58;
   $64 = $51 * $57 + $49 * $58;
   if (($63 != $63 | 0.0 != 0.0) & ($64 != $64 | 0.0 != 0.0)) {
    ___mulsc3($2, $49, $51, $57, $58);
    $72 = +HEAPF32[$2 >> 2];
    $73 = +HEAPF32[$40 >> 2];
   } else {
    $72 = $63;
    $73 = $64;
   }
   $69 = HEAP32[$41 >> 2] | 0;
   HEAPF32[$69 + ($i$021 << 3) >> 2] = $72;
   HEAPF32[$69 + ($i$021 << 3) + 4 >> 2] = $73;
   $i$021 = $i$021 + 1 | 0;
   $43 = HEAP32[$28 >> 2] | 0;
  } while ($i$021 >>> 0 < $43 >>> 0);
 }
 _fft_execute(HEAP32[$_q + 40 >> 2] | 0);
 $80 = (HEAP32[$28 >> 2] | 0) + -1 | 0;
 $81 = $_q + 28 | 0;
 $82 = HEAP32[$81 >> 2] | 0;
 $86 = HEAP32[$82 + ($80 << 3) + 4 >> 2] | 0;
 HEAP32[$3 >> 2] = HEAP32[$82 + ($80 << 3) >> 2];
 HEAP32[$3 + 4 >> 2] = $86;
 HEAP32[$$byval_copy9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy9 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 $89 = +Math_sqrt(+(+_cabsf($$byval_copy9)));
 $90 = HEAP32[$81 >> 2] | 0;
 $93 = HEAP32[$90 + 4 >> 2] | 0;
 HEAP32[$4 >> 2] = HEAP32[$90 >> 2];
 HEAP32[$4 + 4 >> 2] = $93;
 HEAP32[$$byval_copy9 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$$byval_copy9 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
 $96 = +Math_sqrt(+(+_cabsf($$byval_copy9)));
 $97 = HEAP32[$81 >> 2] | 0;
 $101 = HEAP32[$97 + 12 >> 2] | 0;
 HEAP32[$5 >> 2] = HEAP32[$97 + 8 >> 2];
 HEAP32[$5 + 4 >> 2] = $101;
 HEAP32[$$byval_copy9 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$$byval_copy9 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
 $104 = +Math_sqrt(+(+_cabsf($$byval_copy9)));
 $107 = ($89 + $104) * .5 - $96;
 $109 = ($104 - $89) * .5;
 $112 = -$109 / ($107 * 2.0);
 HEAPF32[$_q + 72 >> 2] = $112;
 $118 = $96 + ($109 * $112 + $112 * ($107 * $112));
 $120 = HEAP32[$28 >> 2] | 0;
 HEAPF32[$_q + 76 >> 2] = $118 * $118 / (+($120 >>> 0) * +HEAPF32[$_q + 12 >> 2]);
 _memmove(HEAP32[$81 >> 2] | 0, HEAP32[$23 >> 2] | 0, $120 << 3 | 0) | 0;
 if (HEAP32[$28 >> 2] | 0) {
  $132 = $_q + 4 | 0;
  $133 = $7 + 4 | 0;
  $134 = $6 + 4 | 0;
  $135 = $8 + 4 | 0;
  $i$117 = 0;
  do {
   if ($i$117 >>> 0 < (HEAP32[$_q >> 2] | 0) >>> 0) {
    $138 = HEAP32[$132 >> 2] | 0;
    $142 = HEAP32[$138 + ($i$117 << 3) + 4 >> 2] | 0;
    HEAP32[$7 >> 2] = HEAP32[$138 + ($i$117 << 3) >> 2];
    HEAP32[$133 >> 2] = $142;
    HEAP32[$$byval_copy9 >> 2] = HEAP32[$7 >> 2];
    HEAP32[$$byval_copy9 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
    _conjf($6, $$byval_copy9);
    $151 = +HEAPF32[$6 >> 2];
    $153 = +HEAPF32[$134 >> 2];
   } else {
    $151 = 0.0;
    $153 = 0.0;
   }
   $145 = HEAP32[$23 >> 2] | 0;
   $146 = $145 + ($i$117 << 3) | 0;
   $147 = +HEAPF32[$146 >> 2];
   $148 = $145 + ($i$117 << 3) + 4 | 0;
   $149 = +HEAPF32[$148 >> 2];
   $156 = $151 * $147 - $153 * $149;
   $157 = $153 * $147 + $151 * $149;
   if (($156 != $156 | 0.0 != 0.0) & ($157 != $157 | 0.0 != 0.0)) {
    ___mulsc3($8, $147, $149, $151, $153);
    $162 = +HEAPF32[$8 >> 2];
    $163 = +HEAPF32[$135 >> 2];
   } else {
    $162 = $156;
    $163 = $157;
   }
   HEAPF32[$146 >> 2] = $162;
   HEAPF32[$148 >> 2] = $163;
   $i$117 = $i$117 + 1 | 0;
  } while ($i$117 >>> 0 < (HEAP32[$28 >> 2] | 0) >>> 0);
 }
 _fft_execute(HEAP32[$31 >> 2] | 0);
 $$pre29 = $_q + 20 | 0;
 if (!(HEAP32[$28 >> 2] | 0)) {
  $$lcssa = 0;
  $i0$0$lcssa = 0;
  $v0$0$lcssa = 0.0;
 } else {
  $170 = $9 + 4 | 0;
  $i$210 = 0;
  $i0$08 = 0;
  $v0$09 = 0.0;
  while (1) {
   $171 = HEAP32[$$pre29 >> 2] | 0;
   $175 = HEAP32[$171 + ($i$210 << 3) + 4 >> 2] | 0;
   HEAP32[$9 >> 2] = HEAP32[$171 + ($i$210 << 3) >> 2];
   HEAP32[$170 >> 2] = $175;
   HEAP32[$$byval_copy9 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$$byval_copy9 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
   $176 = +_cabsf($$byval_copy9);
   $177 = $176 > $v0$09;
   $i0$1 = $177 ? $i$210 : $i0$08;
   $v0$1 = $177 ? $176 : $v0$09;
   $i$210 = $i$210 + 1 | 0;
   $179 = HEAP32[$28 >> 2] | 0;
   if ($i$210 >>> 0 >= $179 >>> 0) {
    $$lcssa = $179;
    $i0$0$lcssa = $i0$1;
    $v0$0$lcssa = $v0$1;
    break;
   } else {
    $i0$08 = $i0$1;
    $v0$09 = $v0$1;
   }
  }
 }
 $183 = (($i0$0$lcssa + -1 + $$lcssa | 0) >>> 0) % ($$lcssa >>> 0) | 0;
 $185 = (($i0$0$lcssa + 1 | 0) >>> 0) % ($$lcssa >>> 0) | 0;
 $186 = HEAP32[$$pre29 >> 2] | 0;
 $190 = HEAP32[$186 + ($183 << 3) + 4 >> 2] | 0;
 HEAP32[$10 >> 2] = HEAP32[$186 + ($183 << 3) >> 2];
 HEAP32[$10 + 4 >> 2] = $190;
 HEAP32[$$byval_copy9 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$$byval_copy9 + 4 >> 2] = HEAP32[$10 + 4 >> 2];
 $192 = +_cabsf($$byval_copy9);
 $193 = HEAP32[$$pre29 >> 2] | 0;
 $197 = HEAP32[$193 + ($185 << 3) + 4 >> 2] | 0;
 HEAP32[$11 >> 2] = HEAP32[$193 + ($185 << 3) >> 2];
 HEAP32[$11 + 4 >> 2] = $197;
 HEAP32[$$byval_copy9 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$$byval_copy9 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
 $199 = +_cabsf($$byval_copy9);
 $209 = +($i0$0$lcssa >>> 0) + -(($199 - $192) * .5) / ((($192 + $199) * .5 - $v0$0$lcssa) * 2.0);
 $210 = HEAP32[$28 >> 2] | 0;
 $213 = +($210 >>> 0);
 $221 = ($i0$0$lcssa >>> 0 > $210 >>> 1 >>> 0 ? $209 - $213 : $209) * 2.0 * 3.141592653589793 / $213;
 $222 = $_q + 80 | 0;
 HEAPF32[$222 >> 2] = $221;
 L28 : do if (!(HEAP32[$_q >> 2] | 0)) {
  $metric$sroa$0$0$lcssa = 0.0;
  $metric$sroa$6$0$lcssa = 0.0;
 } else {
  $225 = $12 + 4 | 0;
  $226 = $14 + 4 | 0;
  $227 = $13 + 4 | 0;
  $228 = $15 + 4 | 0;
  $235 = $221;
  $i$34 = 0;
  $metric$sroa$0$06 = 0.0;
  $metric$sroa$6$05 = 0.0;
  while (1) {
   $229 = HEAP32[$23 >> 2] | 0;
   $231 = +HEAPF32[$229 + ($i$34 << 3) >> 2];
   $233 = +HEAPF32[$229 + ($i$34 << 3) + 4 >> 2];
   $234 = $235 * -0.0;
   $236 = -$235;
   $237 = +($i$34 >>> 0);
   $241 = $237 * $234 - $234;
   $242 = $237 * $236 + $234 * 0.0;
   if (($241 != $241 | 0.0 != 0.0) & ($242 != $242 | 0.0 != 0.0)) {
    ___mulsc3($12, $234, $236, $237, 0.0);
    $247 = +HEAPF32[$12 >> 2];
    $248 = +HEAPF32[$225 >> 2];
   } else {
    $247 = $241;
    $248 = $242;
   }
   HEAPF32[$14 >> 2] = $247;
   HEAPF32[$226 >> 2] = $248;
   HEAP32[$$byval_copy9 >> 2] = HEAP32[$14 >> 2];
   HEAP32[$$byval_copy9 + 4 >> 2] = HEAP32[$14 + 4 >> 2];
   _cexpf($13, $$byval_copy9);
   $249 = +HEAPF32[$13 >> 2];
   $250 = +HEAPF32[$227 >> 2];
   $255 = $231 * $249 - $233 * $250;
   $256 = $233 * $249 + $231 * $250;
   if (($255 != $255 | 0.0 != 0.0) & ($256 != $256 | 0.0 != 0.0)) {
    ___mulsc3($15, $231, $233, $249, $250);
    $262 = +HEAPF32[$15 >> 2];
    $264 = +HEAPF32[$228 >> 2];
   } else {
    $262 = $255;
    $264 = $256;
   }
   $261 = $metric$sroa$0$06 + $262;
   $263 = $metric$sroa$6$05 + $264;
   $265 = $i$34 + 1 | 0;
   if ($265 >>> 0 >= (HEAP32[$_q >> 2] | 0) >>> 0) {
    $metric$sroa$0$0$lcssa = $261;
    $metric$sroa$6$0$lcssa = $263;
    break L28;
   }
   $235 = +HEAPF32[$222 >> 2];
   $i$34 = $265;
   $metric$sroa$0$06 = $261;
   $metric$sroa$6$05 = $263;
  }
 } while (0);
 HEAPF32[$16 >> 2] = $metric$sroa$0$0$lcssa;
 HEAPF32[$16 + 4 >> 2] = $metric$sroa$6$0$lcssa;
 HEAP32[$$byval_copy9 >> 2] = HEAP32[$16 >> 2];
 HEAP32[$$byval_copy9 + 4 >> 2] = HEAP32[$16 + 4 >> 2];
 HEAPF32[$_q + 84 >> 2] = +_cargf($$byval_copy9);
 HEAP32[$_q + 92 >> 2] = 1;
 $275 = (HEAP32[$28 >> 2] | 0) >>> 1;
 _memmove(HEAP32[$23 >> 2] | 0, (HEAP32[$81 >> 2] | 0) + ($275 << 3) | 0, $275 << 3 | 0) | 0;
 HEAP32[$_q + 88 >> 2] = 0;
 HEAPF32[$_q + 60 >> 2] = +_liquid_sumsqcf(HEAP32[$23 >> 2] | 0, (HEAP32[$28 >> 2] | 0) >>> 1);
 HEAPF32[$_q + 64 >> 2] = 0.0;
 HEAP32[$20 >> 2] = (HEAP32[$28 >> 2] | 0) >>> 1;
 STACKTOP = sp;
 return;
}

function _quiet_encoder_emit($e, $samplebuf, $samplebuf_len) {
 $e = $e | 0;
 $samplebuf = $samplebuf | 0;
 $samplebuf_len = $samplebuf_len | 0;
 var $$ = 0, $$0$i = 0, $$0$i1922136 = 0, $$01$i = 0, $$01$ph100 = 0, $$01$ph3467 = 0, $$01$ph3468 = 0, $$01$ph3486 = 0, $$01$ph3486$lcssa206 = 0, $$01$ph3486210 = 0, $$1 = 0, $$1$i = 0, $$12 = 0, $$frame_closed$0$off0 = 0, $$lcssa = 0, $$lcssa202 = 0, $$lcssa70 = 0, $$pn = 0, $$pre = 0, $$pre135 = 0, $$requested_length$i = 0, $10 = 0, $100 = 0, $102 = 0, $11 = 0, $114 = 0, $12 = 0, $120 = 0, $122 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $142 = 0, $145 = 0, $15 = 0, $150 = 0, $153 = 0, $154 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $28 = 0, $3 = 0, $33 = 0, $34 = 0, $38 = 0, $4 = 0, $42 = 0, $46 = 0, $5 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $86 = 0, $89 = 0, $9 = 0, $91 = 0, $frame_closed$0$off0$ph75 = 0, $frame_closed$0$off0$ph97 = 0, $framelen$i = 0, $i$03$i = 0, $i$093 = 0, $samples_written = 0, $written$0$ph3360 = 0, $written$0$ph3361 = 0, $written$0$ph3385 = 0, $written$0$ph3385$lcssa211 = 0, $written$0$ph3385215 = 0, $written$0$ph99 = 0, $written$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $framelen$i = sp + 4 | 0;
 $samples_written = sp;
 if (($e | 0) == 0 | ($samplebuf_len | 0) == 0) {
  $$1 = 0;
  STACKTOP = sp;
  return $$1 | 0;
 }
 $2 = $e + 116 | 0;
 $3 = $e + 120 | 0;
 $4 = $e + 64 | 0;
 $5 = $e + 133 | 0;
 $6 = $e + 144 | 0;
 $7 = $e + 152 | 0;
 $8 = $e + 132 | 0;
 $9 = $e + 88 | 0;
 $10 = $e + 88 | 0;
 $11 = $e + 92 | 0;
 $12 = $e + 68 | 0;
 $13 = $e + 72 | 0;
 $14 = $e + 76 | 0;
 $15 = $e + 136 | 0;
 $16 = $e + 96 | 0;
 $17 = $e + 112 | 0;
 $18 = $e + 108 | 0;
 $19 = $e + 100 | 0;
 $20 = $e + 4 | 0;
 $21 = $e + 104 | 0;
 $22 = $e + 140 | 0;
 $23 = $e + 48 | 0;
 $$01$ph100 = $samplebuf;
 $frame_closed$0$off0$ph97 = 0;
 $written$0$ph99 = 0;
 L4 : while (1) {
  $$01$ph3486 = $$01$ph100;
  $$pre = HEAP32[$2 >> 2] | 0;
  $written$0$ph3385 = $written$0$ph99;
  L6 : while (1) {
   $24 = $samplebuf_len - $written$0$ph3385 | 0;
   $25 = ($written$0$ph3385 | 0) != 0;
   $26 = +($24 >>> 0);
   L8 : do if (!$$pre) while (1) {
    HEAP32[$3 >> 2] = 0;
    if ($frame_closed$0$off0$ph97) {
     $$01$ph3467 = $$01$ph3486;
     $written$0$ph3360 = $written$0$ph3385;
     break L4;
    }
    switch (HEAP32[$4 >> 2] | 0) {
    case 0:
     {
      $$0$i = _ofdmflexframegen_is_assembled(HEAP32[$9 >> 2] | 0) | 0;
      label = 14;
      break;
     }
    case 1:
     {
      $$0$i = _flexframegen_is_assembled(HEAP32[$10 >> 2] | 0) | 0;
      label = 14;
      break;
     }
    case 2:
     {
      $$0$i = _gmskframegen_is_assembled(HEAP32[$9 >> 2] | 0) | 0;
      label = 14;
      break;
     }
    default:
     label = 15;
    }
    if ((label | 0) == 14) {
     label = 0;
     if (!$$0$i) label = 15;
    }
    if ((label | 0) == 15) {
     label = 0;
     $58 = $25 & (HEAP8[$5 >> 0] | 0) != 0;
     if ((_ring_read(HEAP32[$6 >> 2] | 0, $framelen$i, 4) | 0) < 0) {
      $$01$ph3486$lcssa206 = $$01$ph3486;
      $$lcssa202 = $58;
      $written$0$ph3385$lcssa211 = $written$0$ph3385;
      label = 23;
      break L6;
     }
     if ((_ring_read(HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0, HEAP32[$framelen$i >> 2] | 0) | 0) < 0) {
      label = 17;
      break L4;
     }
     switch (HEAP32[$4 >> 2] | 0) {
     case 0:
      {
       _ofdmflexframegen_assemble(HEAP32[$9 >> 2] | 0, 0, HEAP32[$7 >> 2] | 0, HEAP32[$framelen$i >> 2] | 0);
       break;
      }
     case 1:
      {
       _flexframegen_assemble(HEAP32[$10 >> 2] | 0, 0, HEAP32[$7 >> 2] | 0, HEAP32[$framelen$i >> 2] | 0);
       HEAP32[$11 >> 2] = _flexframegen_getframelen(HEAP32[$10 >> 2] | 0) | 0;
       break;
      }
     case 2:
      {
       _gmskframegen_reset(HEAP32[$9 >> 2] | 0);
       _gmskframegen_assemble(HEAP32[$9 >> 2] | 0, 0, HEAP32[$7 >> 2] | 0, HEAP32[$framelen$i >> 2] | 0, HEAP32[$12 >> 2] | 0, HEAP32[$13 >> 2] | 0, HEAP32[$14 >> 2] | 0);
       break;
      }
     default:
      {}
     }
     HEAP8[$8 >> 0] = 0;
     if ($58) {
      $$0$i1922136 = 1;
      $$01$ph3486210 = $$01$ph3486;
      $157 = 1;
      $written$0$ph3385215 = $written$0$ph3385;
      break L6;
     }
    }
    $100 = ~~+Math_ceil(+($26 / +HEAPF32[$15 >> 2])) >>> 0;
    $102 = _modulator_symbol_len(HEAP32[$16 >> 2] | 0, $100) | 0;
    $$ = ((($100 >>> 0) % ((HEAP32[(HEAP32[$16 >> 2] | 0) + 4 >> 2] | 0) >>> 0) | 0 | 0) != 0 & 1) + $102 | 0;
    L28 : do switch (HEAP32[$4 >> 2] | 0) {
    case 0:
     {
      _ofdmflexframegen_writesymbol(HEAP32[$9 >> 2] | 0, HEAP32[$19 >> 2] | 0) | 0;
      $$01$i = (HEAP32[$20 >> 2] | 0) + (HEAP32[$e >> 2] | 0) | 0;
      break;
     }
    case 1:
     {
      $114 = HEAP32[$11 >> 2] | 0;
      $$requested_length$i = $114 >>> 0 < $$ >>> 0 ? $114 : $$;
      if ($$requested_length$i >>> 0 > (HEAP32[$21 >> 2] | 0) >>> 0) {
       $120 = _realloc(HEAP32[$19 >> 2] | 0, $$requested_length$i << 3) | 0;
       HEAP32[$19 >> 2] = $120;
       HEAP32[$21 >> 2] = $$requested_length$i;
       $122 = $120;
      } else $122 = HEAP32[$19 >> 2] | 0;
      _flexframegen_write_samples(HEAP32[$10 >> 2] | 0, $122, $$requested_length$i) | 0;
      HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) - $$requested_length$i;
      $$01$i = $$requested_length$i;
      break;
     }
    case 2:
     {
      $125 = HEAP32[$11 >> 2] | 0;
      $126 = ($$ >>> 0) % ($125 >>> 0) | 0;
      $$1$i = (($126 | 0) == 0 ? 0 : $125 - $126 | 0) + $$ | 0;
      if ($$1$i >>> 0 > (HEAP32[$21 >> 2] | 0) >>> 0) {
       HEAP32[$19 >> 2] = _realloc(HEAP32[$19 >> 2] | 0, $$1$i << 3) | 0;
       HEAP32[$21 >> 2] = $$1$i;
      }
      if (!$$1$i) $$01$i = 0; else {
       $i$03$i = 0;
       while (1) {
        if (_gmskframegen_write_samples(HEAP32[$9 >> 2] | 0, (HEAP32[$19 >> 2] | 0) + ($i$03$i << 3) | 0) | 0) {
         $$01$i = $i$03$i;
         break L28;
        }
        $142 = (HEAP32[$11 >> 2] | 0) + $i$03$i | 0;
        if ($142 >>> 0 < $$1$i >>> 0) $i$03$i = $142; else {
         $$01$i = $142;
         break;
        }
       }
      }
      break;
     }
    default:
     $$01$i = 0;
    } while (0);
    $145 = _modulator_sample_len(HEAP32[$16 >> 2] | 0, $$01$i) | 0;
    if ($145 >>> 0 > (HEAP32[$17 >> 2] | 0) >>> 0) {
     $150 = _realloc(HEAP32[$18 >> 2] | 0, $145 << 2) | 0;
     HEAP32[$18 >> 2] = $150;
     HEAP32[$17 >> 2] = $145;
     $153 = $150;
    } else $153 = HEAP32[$18 >> 2] | 0;
    $154 = _modulator_emit(HEAP32[$16 >> 2] | 0, HEAP32[$19 >> 2] | 0, $$01$i, $153) | 0;
    HEAP32[$2 >> 2] = $154;
    HEAP8[$8 >> 0] = 0;
    if ($154 | 0) {
     $$lcssa = $154;
     break L8;
    }
   } else $$lcssa = $$pre; while (0);
   $28 = HEAP32[$22 >> 2] | 0;
   if (!$28) {
    $42 = _constrained_write((HEAP32[$18 >> 2] | 0) + (HEAP32[$3 >> 2] << 2) | 0, $$lcssa, $$01$ph3486, $24) | 0;
    HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + $42;
    $46 = (HEAP32[$2 >> 2] | 0) - $42 | 0;
    HEAP32[$2 >> 2] = $46;
    $$pn = $42;
    $$pre135 = $46;
   } else {
    _resamp_rrrf_execute_output_block($28, (HEAP32[$18 >> 2] | 0) + (HEAP32[$3 >> 2] << 2) | 0, $$lcssa, $framelen$i, $$01$ph3486, $24, $samples_written) | 0;
    $33 = HEAP32[$samples_written >> 2] | 0;
    $34 = HEAP32[$framelen$i >> 2] | 0;
    HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + $34;
    $38 = (HEAP32[$2 >> 2] | 0) - $34 | 0;
    HEAP32[$2 >> 2] = $38;
    $$pn = $33;
    $$pre135 = $38;
   }
   $$12 = $$01$ph3486 + ($$pn << 2) | 0;
   $written$1 = $$pn + $written$0$ph3385 | 0;
   if ($written$1 >>> 0 < $samplebuf_len >>> 0) {
    $$01$ph3486 = $$12;
    $$pre = $$pre135;
    $written$0$ph3385 = $written$1;
   } else {
    $$01$ph3468 = $$12;
    $frame_closed$0$off0$ph75 = $frame_closed$0$off0$ph97;
    $written$0$ph3361 = $written$1;
    label = 45;
    break L4;
   }
  }
  if ((label | 0) == 23) {
   label = 0;
   if (!(HEAP8[$8 >> 0] | 0)) {
    $$0$i1922136 = 0;
    $$01$ph3486210 = $$01$ph3486$lcssa206;
    $157 = $$lcssa202;
    $written$0$ph3385215 = $written$0$ph3385$lcssa211;
   } else {
    $$1 = $written$0$ph3385$lcssa211;
    label = 48;
    break;
   }
  }
  $86 = _modulator_flush(HEAP32[$16 >> 2] | 0, HEAP32[$18 >> 2] | 0) | 0;
  HEAP32[$2 >> 2] = $86;
  if (HEAP32[$22 >> 2] | 0) {
   $89 = HEAP32[$23 >> 2] | 0;
   if (!$89) $$lcssa70 = 0; else {
    $91 = HEAP32[$18 >> 2] | 0;
    $i$093 = 0;
    do {
     HEAPF32[$91 + ($86 + $i$093 << 2) >> 2] = 0.0;
     $i$093 = $i$093 + 1 | 0;
    } while ($i$093 >>> 0 < $89 >>> 0);
    $$lcssa70 = $89;
   }
   HEAP32[$2 >> 2] = $86 + $$lcssa70;
  }
  _modulator_reset(HEAP32[$16 >> 2] | 0);
  HEAP8[$8 >> 0] = 1;
  $$frame_closed$0$off0 = $157 & $$0$i1922136;
  if ($written$0$ph3385215 >>> 0 < $samplebuf_len >>> 0) {
   $$01$ph100 = $$01$ph3486210;
   $frame_closed$0$off0$ph97 = $$frame_closed$0$off0;
   $written$0$ph99 = $written$0$ph3385215;
  } else {
   $$01$ph3468 = $$01$ph3486210;
   $frame_closed$0$off0$ph75 = $$frame_closed$0$off0;
   $written$0$ph3361 = $written$0$ph3385215;
   label = 45;
   break;
  }
 }
 if ((label | 0) == 17) ___assert_fail(gb + 10540 | 0, gb + 10601 | 0, 205, gb + 10639 | 0); else if ((label | 0) == 45) if ($frame_closed$0$off0$ph75) {
  $$01$ph3467 = $$01$ph3468;
  $written$0$ph3360 = $written$0$ph3361;
 } else {
  $$1 = $written$0$ph3361;
  STACKTOP = sp;
  return $$1 | 0;
 } else if ((label | 0) == 48) {
  STACKTOP = sp;
  return $$1 | 0;
 }
 if (($written$0$ph3360 | 0) == ($samplebuf_len | 0)) {
  $$1 = $samplebuf_len;
  STACKTOP = sp;
  return $$1 | 0;
 }
 _memset($$01$ph3467 | 0, 0, $samplebuf_len - $written$0$ph3360 << 2 | 0) | 0;
 $$1 = $samplebuf_len;
 STACKTOP = sp;
 return $$1 | 0;
}

function _qpilotsync_execute($_q, $_frame, $_payload) {
 $_q = $_q | 0;
 $_frame = $_frame | 0;
 $_payload = $_payload | 0;
 var $$byval_copy8 = 0, $$lcssa4 = 0, $$pre36 = 0, $0 = 0, $1 = 0, $10 = 0, $108 = 0.0, $109 = 0, $11 = 0, $118 = 0, $12 = 0, $124 = 0.0, $125 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $135 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $145 = 0.0, $146 = 0.0, $15 = 0, $152 = 0.0, $154 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $16 = 0, $163 = 0.0, $164 = 0.0, $169 = 0.0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0, $178 = 0, $180 = 0.0, $183 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $205 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $214 = 0.0, $215 = 0.0, $22 = 0, $223 = 0.0, $224 = 0.0, $227 = 0, $228 = 0, $23 = 0, $24 = 0, $26 = 0, $28 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $4 = 0, $42 = 0.0, $43 = 0.0, $48 = 0, $5 = 0, $51 = 0.0, $52 = 0.0, $58 = 0, $6 = 0, $61 = 0, $62 = 0, $64 = 0, $68 = 0, $7 = 0, $71 = 0, $75 = 0, $78 = 0, $8 = 0, $82 = 0, $84 = 0, $85 = 0, $89 = 0, $9 = 0, $91 = 0.0, $92 = 0, $96 = 0, $98 = 0.0, $i$027 = 0, $i$118 = 0, $i$211 = 0, $i$38 = 0, $i0$0$lcssa = 0, $i0$017 = 0, $i0$1 = 0, $metric$sroa$0$0$lcssa = 0.0, $metric$sroa$0$010 = 0.0, $metric$sroa$7$0$lcssa = 0.0, $metric$sroa$7$09 = 0.0, $n$07 = 0, $n$1 = 0, $y0$0$lcssa = 0.0, $y0$016 = 0.0, $y0$1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy8 = sp + 128 | 0;
 $0 = sp + 120 | 0;
 $1 = sp + 112 | 0;
 $2 = sp + 104 | 0;
 $3 = sp + 96 | 0;
 $4 = sp + 88 | 0;
 $5 = sp + 80 | 0;
 $6 = sp + 72 | 0;
 $7 = sp + 64 | 0;
 $8 = sp + 56 | 0;
 $9 = sp + 48 | 0;
 $10 = sp + 40 | 0;
 $11 = sp + 32 | 0;
 $12 = sp + 24 | 0;
 $13 = sp + 16 | 0;
 $14 = sp + 8 | 0;
 $15 = sp;
 $16 = $_q + 8 | 0;
 if (HEAP32[$16 >> 2] | 0) {
  $19 = $_q + 4 | 0;
  $20 = $_q + 16 | 0;
  $21 = $1 + 4 | 0;
  $22 = $0 + 4 | 0;
  $23 = $2 + 4 | 0;
  $24 = $_q + 24 | 0;
  $i$027 = 0;
  do {
   $26 = Math_imul(HEAP32[$19 >> 2] | 0, $i$027) | 0;
   $28 = +HEAPF32[$_frame + ($26 << 3) >> 2];
   $30 = +HEAPF32[$_frame + ($26 << 3) + 4 >> 2];
   $31 = HEAP32[$20 >> 2] | 0;
   $35 = HEAP32[$31 + ($i$027 << 3) + 4 >> 2] | 0;
   HEAP32[$1 >> 2] = HEAP32[$31 + ($i$027 << 3) >> 2];
   HEAP32[$21 >> 2] = $35;
   HEAP32[$$byval_copy8 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$$byval_copy8 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   _conjf($0, $$byval_copy8);
   $36 = +HEAPF32[$0 >> 2];
   $37 = +HEAPF32[$22 >> 2];
   $42 = $28 * $36 - $30 * $37;
   $43 = $30 * $36 + $28 * $37;
   if (($42 != $42 | 0.0 != 0.0) & ($43 != $43 | 0.0 != 0.0)) {
    ___mulsc3($2, $28, $30, $36, $37);
    $51 = +HEAPF32[$2 >> 2];
    $52 = +HEAPF32[$23 >> 2];
   } else {
    $51 = $42;
    $52 = $43;
   }
   $48 = HEAP32[$24 >> 2] | 0;
   HEAPF32[$48 + ($i$027 << 3) >> 2] = $51;
   HEAPF32[$48 + ($i$027 << 3) + 4 >> 2] = $52;
   $i$027 = $i$027 + 1 | 0;
  } while ($i$027 >>> 0 < (HEAP32[$16 >> 2] | 0) >>> 0);
 }
 _fft_execute(HEAP32[$_q + 32 >> 2] | 0);
 $58 = $_q + 20 | 0;
 $$pre36 = $_q + 28 | 0;
 if (!(HEAP32[$58 >> 2] | 0)) {
  $$lcssa4 = 0;
  $i0$0$lcssa = 0;
  $y0$0$lcssa = 0.0;
 } else {
  $61 = $4 + 4 | 0;
  $62 = $3 + 4 | 0;
  $i$118 = 0;
  $i0$017 = 0;
  $y0$016 = 0.0;
  while (1) {
   if (!$i$118) label = 10; else {
    $64 = HEAP32[$$pre36 >> 2] | 0;
    $68 = HEAP32[$64 + ($i$118 << 3) + 4 >> 2] | 0;
    HEAP32[$3 >> 2] = HEAP32[$64 + ($i$118 << 3) >> 2];
    HEAP32[$62 >> 2] = $68;
    HEAP32[$$byval_copy8 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$$byval_copy8 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
    if (+_cabsf($$byval_copy8) > $y0$016) label = 10; else {
     $i0$1 = $i0$017;
     $y0$1 = $y0$016;
    }
   }
   if ((label | 0) == 10) {
    label = 0;
    $71 = HEAP32[$$pre36 >> 2] | 0;
    $75 = HEAP32[$71 + ($i$118 << 3) + 4 >> 2] | 0;
    HEAP32[$4 >> 2] = HEAP32[$71 + ($i$118 << 3) >> 2];
    HEAP32[$61 >> 2] = $75;
    HEAP32[$$byval_copy8 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$$byval_copy8 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
    $i0$1 = $i$118;
    $y0$1 = +_cabsf($$byval_copy8);
   }
   $i$118 = $i$118 + 1 | 0;
   $78 = HEAP32[$58 >> 2] | 0;
   if ($i$118 >>> 0 >= $78 >>> 0) {
    $$lcssa4 = $78;
    $i0$0$lcssa = $i0$1;
    $y0$0$lcssa = $y0$1;
    break;
   } else {
    $i0$017 = $i0$1;
    $y0$016 = $y0$1;
   }
  }
 }
 $82 = (($i0$0$lcssa + -1 + $$lcssa4 | 0) >>> 0) % ($$lcssa4 >>> 0) | 0;
 $84 = (($i0$0$lcssa + 1 | 0) >>> 0) % ($$lcssa4 >>> 0) | 0;
 $85 = HEAP32[$$pre36 >> 2] | 0;
 $89 = HEAP32[$85 + ($84 << 3) + 4 >> 2] | 0;
 HEAP32[$5 >> 2] = HEAP32[$85 + ($84 << 3) >> 2];
 HEAP32[$5 + 4 >> 2] = $89;
 HEAP32[$$byval_copy8 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$$byval_copy8 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
 $91 = +_cabsf($$byval_copy8);
 $92 = HEAP32[$$pre36 >> 2] | 0;
 $96 = HEAP32[$92 + ($82 << 3) + 4 >> 2] | 0;
 HEAP32[$6 >> 2] = HEAP32[$92 + ($82 << 3) >> 2];
 HEAP32[$6 + 4 >> 2] = $96;
 HEAP32[$$byval_copy8 >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy8 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
 $98 = +_cabsf($$byval_copy8);
 $108 = +($i0$0$lcssa >>> 0) + -(($91 - $98) * .5) / ((($91 + $98) * .5 - $y0$0$lcssa) * 2.0);
 $109 = HEAP32[$58 >> 2] | 0;
 $118 = $_q + 4 | 0;
 $124 = ($i0$0$lcssa >>> 0 > $109 >>> 1 >>> 0 ? $108 - +($109 >>> 0) : $108) * 2.0 * 3.141592653589793 / +((Math_imul(HEAP32[$118 >> 2] | 0, $109) | 0) >>> 0);
 $125 = $_q + 36 | 0;
 HEAPF32[$125 >> 2] = $124;
 L19 : do if (!(HEAP32[$16 >> 2] | 0)) {
  $metric$sroa$0$0$lcssa = 0.0;
  $metric$sroa$7$0$lcssa = 0.0;
 } else {
  $128 = $_q + 24 | 0;
  $129 = $7 + 4 | 0;
  $130 = $9 + 4 | 0;
  $131 = $8 + 4 | 0;
  $132 = $10 + 4 | 0;
  $139 = $124;
  $i$211 = 0;
  $metric$sroa$0$010 = 0.0;
  $metric$sroa$7$09 = 0.0;
  while (1) {
   $133 = HEAP32[$128 >> 2] | 0;
   $135 = +HEAPF32[$133 + ($i$211 << 3) >> 2];
   $137 = +HEAPF32[$133 + ($i$211 << 3) + 4 >> 2];
   $138 = $139 * -0.0;
   $140 = -$139;
   $141 = +($i$211 >>> 0);
   $145 = $141 * $138 - $138;
   $146 = $141 * $140 + $138 * 0.0;
   if (($145 != $145 | 0.0 != 0.0) & ($146 != $146 | 0.0 != 0.0)) {
    ___mulsc3($7, $138, $140, $141, 0.0);
    $154 = +HEAPF32[$7 >> 2];
    $156 = +HEAPF32[$129 >> 2];
   } else {
    $154 = $145;
    $156 = $146;
   }
   $152 = +((HEAP32[$118 >> 2] | 0) >>> 0);
   HEAPF32[$9 >> 2] = $154 * $152;
   HEAPF32[$130 >> 2] = $156 * $152;
   HEAP32[$$byval_copy8 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$$byval_copy8 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
   _cexpf($8, $$byval_copy8);
   $157 = +HEAPF32[$8 >> 2];
   $158 = +HEAPF32[$131 >> 2];
   $163 = $135 * $157 - $137 * $158;
   $164 = $137 * $157 + $135 * $158;
   if (($163 != $163 | 0.0 != 0.0) & ($164 != $164 | 0.0 != 0.0)) {
    ___mulsc3($10, $135, $137, $157, $158);
    $170 = +HEAPF32[$10 >> 2];
    $172 = +HEAPF32[$132 >> 2];
   } else {
    $170 = $163;
    $172 = $164;
   }
   $169 = $metric$sroa$0$010 + $170;
   $171 = $metric$sroa$7$09 + $172;
   $173 = $i$211 + 1 | 0;
   if ($173 >>> 0 >= (HEAP32[$16 >> 2] | 0) >>> 0) {
    $metric$sroa$0$0$lcssa = $169;
    $metric$sroa$7$0$lcssa = $171;
    break L19;
   }
   $139 = +HEAPF32[$125 >> 2];
   $i$211 = $173;
   $metric$sroa$0$010 = $169;
   $metric$sroa$7$09 = $171;
  }
 } while (0);
 HEAPF32[$11 >> 2] = $metric$sroa$0$0$lcssa;
 HEAPF32[$11 + 4 >> 2] = $metric$sroa$7$0$lcssa;
 HEAP32[$$byval_copy8 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$$byval_copy8 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
 $178 = $_q + 40 | 0;
 HEAPF32[$178 >> 2] = +_cargf($$byval_copy8);
 HEAPF32[$12 >> 2] = $metric$sroa$0$0$lcssa;
 HEAPF32[$12 + 4 >> 2] = $metric$sroa$7$0$lcssa;
 HEAP32[$$byval_copy8 >> 2] = HEAP32[$12 >> 2];
 HEAP32[$$byval_copy8 + 4 >> 2] = HEAP32[$12 + 4 >> 2];
 $180 = +_cabsf($$byval_copy8);
 $183 = $180 / +((HEAP32[$16 >> 2] | 0) >>> 0);
 HEAPF32[$_q + 44 >> 2] = $183;
 $185 = 1.0 / $183;
 $186 = $_q + 12 | 0;
 $187 = HEAP32[$186 >> 2] | 0;
 if (!$187) {
  STACKTOP = sp;
  return;
 }
 $189 = $14 + 4 | 0;
 $190 = $13 + 4 | 0;
 $191 = $15 + 4 | 0;
 $228 = $187;
 $i$38 = 0;
 $n$07 = 0;
 while (1) {
  if (!(($i$38 >>> 0) % ((HEAP32[$118 >> 2] | 0) >>> 0) | 0)) {
   $227 = $228;
   $n$1 = $n$07;
  } else {
   $199 = $185 * +HEAPF32[$_frame + ($i$38 << 3) >> 2];
   $200 = $185 * +HEAPF32[$_frame + ($i$38 << 3) + 4 >> 2];
   $205 = +($i$38 >>> 0) * +HEAPF32[$125 >> 2] + +HEAPF32[$178 >> 2];
   HEAPF32[$14 >> 2] = $205 * -0.0;
   HEAPF32[$189 >> 2] = -$205;
   HEAP32[$$byval_copy8 >> 2] = HEAP32[$14 >> 2];
   HEAP32[$$byval_copy8 + 4 >> 2] = HEAP32[$14 + 4 >> 2];
   _cexpf($13, $$byval_copy8);
   $208 = +HEAPF32[$13 >> 2];
   $209 = +HEAPF32[$190 >> 2];
   $214 = $199 * $208 - $200 * $209;
   $215 = $200 * $208 + $199 * $209;
   if (($214 != $214 | 0.0 != 0.0) & ($215 != $215 | 0.0 != 0.0)) {
    ___mulsc3($15, $199, $200, $208, $209);
    $223 = +HEAPF32[$15 >> 2];
    $224 = +HEAPF32[$191 >> 2];
   } else {
    $223 = $214;
    $224 = $215;
   }
   HEAPF32[$_payload + ($n$07 << 3) >> 2] = $223;
   HEAPF32[$_payload + ($n$07 << 3) + 4 >> 2] = $224;
   $227 = HEAP32[$186 >> 2] | 0;
   $n$1 = $n$07 + 1 | 0;
  }
  $i$38 = $i$38 + 1 | 0;
  if ($i$38 >>> 0 >= $227 >>> 0) break; else {
   $228 = $227;
   $n$07 = $n$1;
  }
 }
 STACKTOP = sp;
 return;
}

function _fft_execute_dft_8($_q) {
 $_q = $_q | 0;
 var $0 = 0, $1 = 0, $10 = 0, $103 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $120 = 0.0, $126 = 0.0, $127 = 0.0, $13 = 0, $133 = 0.0, $134 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $145 = 0.0, $146 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $16 = 0, $164 = 0.0, $166 = 0.0, $167 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $52 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $89 = 0.0, $90 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $yp$sroa$0$0 = 0.0, $yp$sroa$0$1 = 0.0, $yp$sroa$0$2 = 0.0, $yp$sroa$0$2$in = 0.0, $yp$sroa$0$3 = 0.0, $yp$sroa$0$4 = 0.0, $yp$sroa$0$4$in = 0.0, $yp$sroa$43$0 = 0.0, $yp$sroa$43$1 = 0.0, $yp$sroa$43$2 = 0.0, $yp$sroa$43$2$in = 0.0, $yp$sroa$43$3 = 0.0, $yp$sroa$43$4 = 0.0, $yp$sroa$43$4$in = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 48 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 16 | 0;
 $3 = sp;
 $5 = HEAP32[$_q + 4 >> 2] | 0;
 $7 = HEAP32[$_q + 8 >> 2] | 0;
 $10 = (HEAP32[$_q + 12 >> 2] | 0) == 1;
 $11 = HEAP32[$5 >> 2] | 0;
 $13 = HEAP32[$5 + 4 >> 2] | 0;
 $14 = $7 + 4 | 0;
 HEAP32[$7 >> 2] = $11;
 HEAP32[$14 >> 2] = $13;
 $16 = HEAP32[$5 + 32 >> 2] | 0;
 $18 = HEAP32[$5 + 36 >> 2] | 0;
 $19 = $7 + 8 | 0;
 $20 = $7 + 12 | 0;
 HEAP32[$19 >> 2] = $16;
 HEAP32[$20 >> 2] = $18;
 $22 = HEAP32[$5 + 16 >> 2] | 0;
 $24 = HEAP32[$5 + 20 >> 2] | 0;
 $25 = $7 + 16 | 0;
 $26 = $7 + 20 | 0;
 HEAP32[$25 >> 2] = $22;
 HEAP32[$26 >> 2] = $24;
 $28 = HEAP32[$5 + 48 >> 2] | 0;
 $30 = HEAP32[$5 + 52 >> 2] | 0;
 $31 = $7 + 24 | 0;
 $32 = $7 + 28 | 0;
 HEAP32[$31 >> 2] = $28;
 HEAP32[$32 >> 2] = $30;
 $34 = HEAP32[$5 + 8 >> 2] | 0;
 $36 = HEAP32[$5 + 12 >> 2] | 0;
 $37 = $7 + 32 | 0;
 $38 = $7 + 36 | 0;
 HEAP32[$37 >> 2] = $34;
 HEAP32[$38 >> 2] = $36;
 $40 = HEAP32[$5 + 40 >> 2] | 0;
 $42 = HEAP32[$5 + 44 >> 2] | 0;
 $43 = $7 + 40 | 0;
 $44 = $7 + 44 | 0;
 HEAP32[$43 >> 2] = $40;
 HEAP32[$44 >> 2] = $42;
 $46 = HEAP32[$5 + 24 >> 2] | 0;
 $48 = HEAP32[$5 + 28 >> 2] | 0;
 $49 = $7 + 48 | 0;
 $50 = $7 + 52 | 0;
 HEAP32[$49 >> 2] = $46;
 HEAP32[$50 >> 2] = $48;
 $52 = +HEAPF32[$5 + 56 >> 2];
 $54 = +HEAPF32[$5 + 60 >> 2];
 $55 = $7 + 56 | 0;
 $56 = $7 + 60 | 0;
 $57 = (HEAP32[tempDoublePtr >> 2] = $16, +HEAPF32[tempDoublePtr >> 2]);
 $58 = (HEAP32[tempDoublePtr >> 2] = $18, +HEAPF32[tempDoublePtr >> 2]);
 $59 = (HEAP32[tempDoublePtr >> 2] = $11, +HEAPF32[tempDoublePtr >> 2]);
 $60 = (HEAP32[tempDoublePtr >> 2] = $13, +HEAPF32[tempDoublePtr >> 2]);
 $61 = $59 - $57;
 $62 = $60 - $58;
 $63 = $57 + $59;
 $64 = $58 + $60;
 $65 = (HEAP32[tempDoublePtr >> 2] = $28, +HEAPF32[tempDoublePtr >> 2]);
 $66 = (HEAP32[tempDoublePtr >> 2] = $30, +HEAPF32[tempDoublePtr >> 2]);
 $67 = (HEAP32[tempDoublePtr >> 2] = $22, +HEAPF32[tempDoublePtr >> 2]);
 $68 = (HEAP32[tempDoublePtr >> 2] = $24, +HEAPF32[tempDoublePtr >> 2]);
 $69 = $67 - $65;
 $70 = $68 - $66;
 $71 = $65 + $67;
 $72 = $66 + $68;
 $73 = (HEAP32[tempDoublePtr >> 2] = $40, +HEAPF32[tempDoublePtr >> 2]);
 $74 = (HEAP32[tempDoublePtr >> 2] = $42, +HEAPF32[tempDoublePtr >> 2]);
 $75 = (HEAP32[tempDoublePtr >> 2] = $34, +HEAPF32[tempDoublePtr >> 2]);
 $76 = (HEAP32[tempDoublePtr >> 2] = $36, +HEAPF32[tempDoublePtr >> 2]);
 $77 = $75 - $73;
 $78 = $76 - $74;
 $79 = $73 + $75;
 $80 = $74 + $76;
 $81 = (HEAP32[tempDoublePtr >> 2] = $46, +HEAPF32[tempDoublePtr >> 2]);
 $82 = (HEAP32[tempDoublePtr >> 2] = $48, +HEAPF32[tempDoublePtr >> 2]);
 $83 = $81 - $52;
 $84 = $82 - $54;
 $85 = $52 + $81;
 $86 = $54 + $82;
 HEAPF32[$25 >> 2] = $63 - $71;
 HEAPF32[$26 >> 2] = $64 - $72;
 $89 = $71 + $63;
 $90 = $72 + $64;
 HEAPF32[$49 >> 2] = $79 - $85;
 HEAPF32[$50 >> 2] = $80 - $86;
 $93 = $85 + $79;
 $94 = $86 + $80;
 $95 = $69 * 0.0;
 $yp$sroa$0$0 = $10 ? $70 - $95 : $95 - $70;
 $yp$sroa$43$0 = $10 ? -$69 : $69;
 HEAPF32[$31 >> 2] = $61 - $yp$sroa$0$0;
 HEAPF32[$32 >> 2] = $62 - $yp$sroa$43$0;
 HEAPF32[$19 >> 2] = $61 + $yp$sroa$0$0;
 HEAPF32[$20 >> 2] = $yp$sroa$43$0 + $62;
 $103 = $83 * 0.0;
 $yp$sroa$0$1 = $10 ? $84 - $103 : $103 - $84;
 $yp$sroa$43$1 = $10 ? -$83 : $83;
 HEAPF32[$55 >> 2] = $77 - $yp$sroa$0$1;
 HEAPF32[$56 >> 2] = $78 - $yp$sroa$43$1;
 $109 = $77 + $yp$sroa$0$1;
 $110 = $yp$sroa$43$1 + $78;
 HEAPF32[$43 >> 2] = $109;
 HEAPF32[$44 >> 2] = $110;
 HEAPF32[$37 >> 2] = $89 - $93;
 HEAPF32[$38 >> 2] = $90 - $94;
 HEAPF32[$7 >> 2] = $93 + $89;
 HEAPF32[$14 >> 2] = $94 + $90;
 $115 = $109;
 $116 = $110;
 $117 = $115 * .7071067811865476;
 $118 = $116 * .7071067811865476;
 if ($10) {
  $119 = $117 + $118;
  $120 = $118 - $117;
  if (($119 != $119 | 0.0 != 0.0) & ($120 != $120 | 0.0 != 0.0)) {
   ___muldc3($0, $115, $116, .7071067811865476, -.7071067811865476);
   $yp$sroa$0$2$in = +HEAPF64[$0 >> 3];
   $yp$sroa$43$2$in = +HEAPF64[$0 + 8 >> 3];
  } else {
   $yp$sroa$0$2$in = $119;
   $yp$sroa$43$2$in = $120;
  }
 } else {
  $126 = $117 - $118;
  $127 = $117 + $118;
  if (($126 != $126 | 0.0 != 0.0) & ($127 != $127 | 0.0 != 0.0)) {
   ___muldc3($1, $115, $116, .7071067811865476, .7071067811865476);
   $yp$sroa$0$2$in = +HEAPF64[$1 >> 3];
   $yp$sroa$43$2$in = +HEAPF64[$1 + 8 >> 3];
  } else {
   $yp$sroa$0$2$in = $126;
   $yp$sroa$43$2$in = $127;
  }
 }
 $yp$sroa$43$2 = $yp$sroa$43$2$in;
 $yp$sroa$0$2 = $yp$sroa$0$2$in;
 $133 = +HEAPF32[$19 >> 2];
 $134 = +HEAPF32[$20 >> 2];
 HEAPF32[$43 >> 2] = $133 - $yp$sroa$0$2;
 HEAPF32[$44 >> 2] = $134 - $yp$sroa$43$2;
 HEAPF32[$19 >> 2] = $yp$sroa$0$2 + $133;
 HEAPF32[$20 >> 2] = $yp$sroa$43$2 + $134;
 $139 = +HEAPF32[$50 >> 2];
 $140 = +HEAPF32[$49 >> 2];
 $141 = $140 * 0.0;
 $yp$sroa$0$3 = $10 ? $139 - $141 : $141 - $139;
 $yp$sroa$43$3 = $10 ? -$140 : $140;
 $145 = +HEAPF32[$25 >> 2];
 $146 = +HEAPF32[$26 >> 2];
 HEAPF32[$49 >> 2] = $145 - $yp$sroa$0$3;
 HEAPF32[$50 >> 2] = $146 - $yp$sroa$43$3;
 HEAPF32[$25 >> 2] = $145 + $yp$sroa$0$3;
 HEAPF32[$26 >> 2] = $yp$sroa$43$3 + $146;
 $153 = +HEAPF32[$55 >> 2];
 $154 = +HEAPF32[$56 >> 2];
 $155 = $153 * -.7071067811865476;
 if ($10) {
  $156 = $154 * -.7071067811865476;
  $157 = $155 - $156;
  $158 = $155 + $156;
  if (!(($157 != $157 | 0.0 != 0.0) & ($158 != $158 | 0.0 != 0.0))) {
   $yp$sroa$0$4$in = $157;
   $yp$sroa$43$4$in = $158;
   $yp$sroa$43$4 = $yp$sroa$43$4$in;
   $yp$sroa$0$4 = $yp$sroa$0$4$in;
   $173 = +HEAPF32[$31 >> 2];
   $174 = +HEAPF32[$32 >> 2];
   $175 = $173 - $yp$sroa$0$4;
   $176 = $174 - $yp$sroa$43$4;
   HEAPF32[$55 >> 2] = $175;
   HEAPF32[$56 >> 2] = $176;
   $177 = $yp$sroa$0$4 + $173;
   $178 = $yp$sroa$43$4 + $174;
   HEAPF32[$31 >> 2] = $177;
   HEAPF32[$32 >> 2] = $178;
   STACKTOP = sp;
   return;
  }
  ___muldc3($2, $153, $154, -.7071067811865476, -.7071067811865476);
  $yp$sroa$0$4$in = +HEAPF64[$2 >> 3];
  $yp$sroa$43$4$in = +HEAPF64[$2 + 8 >> 3];
  $yp$sroa$43$4 = $yp$sroa$43$4$in;
  $yp$sroa$0$4 = $yp$sroa$0$4$in;
  $173 = +HEAPF32[$31 >> 2];
  $174 = +HEAPF32[$32 >> 2];
  $175 = $173 - $yp$sroa$0$4;
  $176 = $174 - $yp$sroa$43$4;
  HEAPF32[$55 >> 2] = $175;
  HEAPF32[$56 >> 2] = $176;
  $177 = $yp$sroa$0$4 + $173;
  $178 = $yp$sroa$43$4 + $174;
  HEAPF32[$31 >> 2] = $177;
  HEAPF32[$32 >> 2] = $178;
  STACKTOP = sp;
  return;
 } else {
  $164 = $154 * .7071067811865476;
  $166 = $155 - $164;
  $167 = $153 * .7071067811865476 - $164;
  if (!(($166 != $166 | 0.0 != 0.0) & ($167 != $167 | 0.0 != 0.0))) {
   $yp$sroa$0$4$in = $166;
   $yp$sroa$43$4$in = $167;
   $yp$sroa$43$4 = $yp$sroa$43$4$in;
   $yp$sroa$0$4 = $yp$sroa$0$4$in;
   $173 = +HEAPF32[$31 >> 2];
   $174 = +HEAPF32[$32 >> 2];
   $175 = $173 - $yp$sroa$0$4;
   $176 = $174 - $yp$sroa$43$4;
   HEAPF32[$55 >> 2] = $175;
   HEAPF32[$56 >> 2] = $176;
   $177 = $yp$sroa$0$4 + $173;
   $178 = $yp$sroa$43$4 + $174;
   HEAPF32[$31 >> 2] = $177;
   HEAPF32[$32 >> 2] = $178;
   STACKTOP = sp;
   return;
  }
  ___muldc3($3, $153, $154, -.7071067811865476, .7071067811865476);
  $yp$sroa$0$4$in = +HEAPF64[$3 >> 3];
  $yp$sroa$43$4$in = +HEAPF64[$3 + 8 >> 3];
  $yp$sroa$43$4 = $yp$sroa$43$4$in;
  $yp$sroa$0$4 = $yp$sroa$0$4$in;
  $173 = +HEAPF32[$31 >> 2];
  $174 = +HEAPF32[$32 >> 2];
  $175 = $173 - $yp$sroa$0$4;
  $176 = $174 - $yp$sroa$43$4;
  HEAPF32[$55 >> 2] = $175;
  HEAPF32[$56 >> 2] = $176;
  $177 = $yp$sroa$0$4 + $173;
  $178 = $yp$sroa$43$4 + $174;
  HEAPF32[$31 >> 2] = $177;
  HEAPF32[$32 >> 2] = $178;
  STACKTOP = sp;
  return;
 }
}

function _ofdmframesync_rxsymbol($_q) {
 $_q = $_q | 0;
 var $$byval_copy1 = 0, $$lcssa57 = 0.0, $$lcssa58 = 0.0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $102 = 0, $103 = 0.0, $105 = 0, $107 = 0.0, $11 = 0, $110 = 0.0, $112 = 0.0, $116 = 0.0, $118 = 0.0, $123 = 0.0, $125 = 0.0, $13 = 0.0, $131 = 0, $134 = 0, $137 = 0.0, $15 = 0.0, $151 = 0, $158 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $168 = 0, $17 = 0, $173 = 0.0, $175 = 0, $178 = 0.0, $18 = 0.0, $180 = 0.0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0.0, $19 = 0, $192 = 0.0, $193 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0.0, $203 = 0, $207 = 0, $209 = 0.0, $210 = 0.0, $212 = 0.0, $215 = 0.0, $216 = 0.0, $220 = 0.0, $221 = 0.0, $228 = 0, $229 = 0.0, $25 = 0.0, $26 = 0.0, $3 = 0, $31 = 0.0, $32 = 0.0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $52 = 0, $53 = 0, $63 = 0, $67 = 0.0, $72 = 0.0, $73 = 0, $75 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $84 = 0.0, $85 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $97 = 0, $99 = 0, $dphi_prime$0$lcssa = 0.0, $dphi_prime$1$lcssa = 0.0, $i$031 = 0, $i$126 = 0, $i$222 = 0, $i$314 = 0, $n$0$lcssa = 0, $n$025 = 0, $n$1 = 0, $n$1$lcssa = 0, $p_phase = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy1 = sp + 56 | 0;
 $0 = sp + 48 | 0;
 $p_phase = sp + 40 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 8 | 0;
 $5 = sp;
 if (!(HEAP32[$_q >> 2] | 0)) $41 = 0; else {
  $8 = $_q + 100 | 0;
  $9 = $_q + 52 | 0;
  $10 = $0 + 4 | 0;
  $i$031 = 0;
  do {
   $11 = HEAP32[$8 >> 2] | 0;
   $13 = +HEAPF32[$11 + ($i$031 << 3) >> 2];
   $15 = +HEAPF32[$11 + ($i$031 << 3) + 4 >> 2];
   $16 = HEAP32[$9 >> 2] | 0;
   $17 = $16 + ($i$031 << 3) | 0;
   $18 = +HEAPF32[$17 >> 2];
   $19 = $16 + ($i$031 << 3) + 4 | 0;
   $20 = +HEAPF32[$19 >> 2];
   $25 = $13 * $18 - $15 * $20;
   $26 = $15 * $18 + $13 * $20;
   if (($25 != $25 | 0.0 != 0.0) & ($26 != $26 | 0.0 != 0.0)) {
    ___mulsc3($0, $18, $20, $13, $15);
    $31 = +HEAPF32[$0 >> 2];
    $32 = +HEAPF32[$10 >> 2];
   } else {
    $31 = $25;
    $32 = $26;
   }
   HEAPF32[$17 >> 2] = $31;
   HEAPF32[$19 >> 2] = $32;
   $i$031 = $i$031 + 1 | 0;
   $34 = HEAP32[$_q >> 2] | 0;
  } while ($i$031 >>> 0 < $34 >>> 0);
  $41 = $34;
 }
 $36 = $_q + 20 | 0;
 $37 = HEAP32[$36 >> 2] | 0;
 $38 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($37 << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $39 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($37 << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 do if (!$41) {
  $99 = $37;
  $n$0$lcssa = 0;
 } else {
  $42 = $_q + 4 | 0;
  $43 = $_q + 12 | 0;
  $44 = $_q + 112 | 0;
  $45 = $_q + 52 | 0;
  $46 = $2 + 4 | 0;
  $47 = $1 + 4 | 0;
  $48 = $3 + 4 | 0;
  $49 = $4 + 4 | 0;
  $53 = $41;
  $i$126 = 0;
  $n$025 = 0;
  while (1) {
   $52 = (((HEAP32[$42 >> 2] | 0) + $i$126 | 0) >>> 0) % ($53 >>> 0) | 0;
   if ((HEAP8[(HEAP32[$43 >> 2] | 0) + $52 >> 0] | 0) == 1) {
    if (($n$025 | 0) == (HEAP32[$36 >> 2] | 0)) break;
    $63 = (_msequence_advance(HEAP32[$44 >> 2] | 0) | 0) != 0;
    $67 = +($52 >>> 0);
    if ($52 >>> 0 > (HEAP32[$42 >> 2] | 0) >>> 0) $72 = $67 - +((HEAP32[$_q >> 2] | 0) >>> 0); else $72 = $67;
    HEAPF32[$38 + ($n$025 << 2) >> 2] = $72;
    $73 = HEAP32[$45 >> 2] | 0;
    $75 = +HEAPF32[$73 + ($52 << 3) >> 2];
    $77 = +HEAPF32[$73 + ($52 << 3) + 4 >> 2];
    HEAPF32[$2 >> 2] = $63 ? 1.0 : -1.0;
    HEAPF32[$46 >> 2] = 0.0;
    HEAP32[$$byval_copy1 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
    _conjf($1, $$byval_copy1);
    $78 = +HEAPF32[$1 >> 2];
    $79 = +HEAPF32[$47 >> 2];
    $84 = $75 * $78 - $77 * $79;
    $85 = $77 * $78 + $75 * $79;
    if (($84 != $84 | 0.0 != 0.0) & ($85 != $85 | 0.0 != 0.0)) {
     ___mulsc3($3, $75, $77, $78, $79);
     $90 = +HEAPF32[$3 >> 2];
     $91 = +HEAPF32[$48 >> 2];
    } else {
     $90 = $84;
     $91 = $85;
    }
    HEAPF32[$4 >> 2] = $90;
    HEAPF32[$49 >> 2] = $91;
    HEAP32[$$byval_copy1 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
    HEAPF32[$39 + ($n$025 << 2) >> 2] = +_cargf($$byval_copy1);
    $97 = HEAP32[$_q >> 2] | 0;
    $n$1 = $n$025 + 1 | 0;
   } else {
    $97 = $53;
    $n$1 = $n$025;
   }
   $i$126 = $i$126 + 1 | 0;
   if ($i$126 >>> 0 >= $97 >>> 0) {
    $n$1$lcssa = $n$1;
    label = 17;
    break;
   } else {
    $53 = $97;
    $n$025 = $n$1;
   }
  }
  if ((label | 0) == 17) {
   $99 = HEAP32[$36 >> 2] | 0;
   $n$0$lcssa = $n$1$lcssa;
   break;
  }
  _fwrite(gb + 36707 | 0, 61, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  STACKTOP = sp;
  return;
 } while (0);
 if (($n$0$lcssa | 0) != ($99 | 0)) {
  _fwrite(gb + 36707 | 0, 61, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  STACKTOP = sp;
  return;
 }
 if ($99 >>> 0 > 1) {
  $107 = +HEAPF32[$39 >> 2];
  $i$222 = 1;
  while (1) {
   $102 = $39 + ($i$222 << 2) | 0;
   $103 = +HEAPF32[$102 >> 2];
   $105 = $39 + ($i$222 + -1 << 2) | 0;
   if ($103 - $107 > 3.141592653589793) {
    $116 = $103;
    while (1) {
     $118 = $116 + -6.283185307179586;
     if ($118 - $107 > 3.141592653589793) $116 = $118; else {
      $$lcssa57 = $118;
      break;
     }
    }
    HEAPF32[$102 >> 2] = $$lcssa57;
    $112 = $$lcssa57;
   } else $112 = $103;
   $110 = +HEAPF32[$105 >> 2];
   if ($112 - $110 < -3.141592653589793) {
    $123 = $112;
    while (1) {
     $125 = $123 + 6.283185307179586;
     if ($125 - $110 < -3.141592653589793) $123 = $125; else {
      $$lcssa58 = $125;
      break;
     }
    }
    HEAPF32[$102 >> 2] = $$lcssa58;
    $229 = $$lcssa58;
   } else $229 = $112;
   $i$222 = $i$222 + 1 | 0;
   if ($i$222 >>> 0 >= $99 >>> 0) break; else $107 = $229;
  }
 }
 _polyf_fit($38, $39, $99, $p_phase, 2);
 $131 = $p_phase + 4 | 0;
 $134 = $_q + 120 | 0;
 $137 = +HEAPF32[$131 >> 2] * .30000001192092896 + +HEAPF32[$134 >> 2] * .699999988079071;
 HEAPF32[$131 >> 2] = $137;
 HEAPF32[$134 >> 2] = $137;
 if (HEAP32[$_q + 168 >> 2] | 0) {
  _memmove(HEAP32[$_q + 192 >> 2] | 0, $38 | 0, HEAP32[$36 >> 2] << 2 | 0) | 0;
  _memmove(HEAP32[$_q + 196 >> 2] | 0, $39 | 0, HEAP32[$36 >> 2] << 2 | 0) | 0;
  HEAP32[$_q + 200 >> 2] = HEAP32[$131 >> 2];
  $151 = HEAP32[$p_phase >> 2] | 0;
  HEAP32[$_q + 204 >> 2] = $151;
  _windowf_push(HEAP32[$_q + 208 >> 2] | 0, (HEAP32[tempDoublePtr >> 2] = $151, +HEAPF32[tempDoublePtr >> 2]));
  _windowf_push(HEAP32[$_q + 212 >> 2] | 0, +HEAPF32[$131 >> 2]);
 }
 $158 = HEAP32[$_q >> 2] | 0;
 if ($158 | 0) {
  $160 = $_q + 12 | 0;
  $161 = $_q + 52 | 0;
  $162 = $_q + 4 | 0;
  $163 = $5 + 4 | 0;
  $175 = $158;
  $i$314 = 0;
  do {
   if (!(HEAP8[(HEAP32[$160 >> 2] | 0) + $i$314 >> 0] | 0)) {
    $168 = HEAP32[$161 >> 2] | 0;
    HEAPF32[$168 + ($i$314 << 3) >> 2] = 0.0;
    HEAPF32[$168 + ($i$314 << 3) + 4 >> 2] = 0.0;
   } else {
    $173 = +($i$314 >>> 0);
    $178 = +_polyf_val($p_phase, 2, $i$314 >>> 0 > (HEAP32[$162 >> 2] | 0) >>> 0 ? $173 - +($175 >>> 0) : $173);
    $180 = +Math_sin(+-$178);
    $182 = +Math_cos(+$178) + $180 * 0.0;
    $183 = HEAP32[$161 >> 2] | 0;
    $184 = $183 + ($i$314 << 3) | 0;
    $185 = +HEAPF32[$184 >> 2];
    $186 = $183 + ($i$314 << 3) + 4 | 0;
    $187 = +HEAPF32[$186 >> 2];
    $192 = $185 * $182 - $180 * $187;
    $193 = $180 * $185 + $182 * $187;
    if (($192 != $192 | 0.0 != 0.0) & ($193 != $193 | 0.0 != 0.0)) {
     ___mulsc3($5, $185, $187, $182, $180);
     $198 = +HEAPF32[$5 >> 2];
     $199 = +HEAPF32[$163 >> 2];
    } else {
     $198 = $192;
     $199 = $193;
    }
    HEAPF32[$184 >> 2] = $198;
    HEAPF32[$186 >> 2] = $199;
   }
   $i$314 = $i$314 + 1 | 0;
   $175 = HEAP32[$_q >> 2] | 0;
  } while ($i$314 >>> 0 < $175 >>> 0);
 }
 $203 = $_q + 128 | 0;
 if (!(HEAP32[$203 >> 2] | 0)) {
  $$pre$phiZ2D = $_q + 116 | 0;
  $228 = 1;
 } else {
  $207 = $_q + 116 | 0;
  $209 = +HEAPF32[$p_phase >> 2] - +HEAPF32[$207 >> 2];
  $210 = $209;
  if ($210 > 3.141592653589793) {
   $215 = $210;
   do {
    $216 = $215 + -.6366197723675814;
    $215 = $216;
   } while ($215 > 3.141592653589793);
   $dphi_prime$0$lcssa = $216;
  } else $dphi_prime$0$lcssa = $209;
  $212 = $dphi_prime$0$lcssa;
  if ($212 < -3.141592653589793) {
   $220 = $212;
   do {
    $221 = $220 + .6366197723675814;
    $220 = $221;
   } while ($220 < -3.141592653589793);
   $dphi_prime$1$lcssa = $221;
  } else $dphi_prime$1$lcssa = $dphi_prime$0$lcssa;
  _nco_crcf_adjust_frequency(HEAP32[$_q + 108 >> 2] | 0, $dphi_prime$1$lcssa * 1.0000000474974513e-03);
  $$pre$phiZ2D = $207;
  $228 = (HEAP32[$203 >> 2] | 0) + 1 | 0;
 }
 HEAP32[$$pre$phiZ2D >> 2] = HEAP32[$p_phase >> 2];
 HEAP32[$203 >> 2] = $228;
 STACKTOP = sp;
 return;
}

function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0;
 $n_sroa_1_4_extract_shift$0 = $a$1;
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
 $d_sroa_0_0_extract_trunc = $b$0;
 $d_sroa_1_4_extract_shift$0 = $b$1;
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0;
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  } else {
   if (!$4) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (setTempRet0($_0$1 | 0), $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
 do if (!$d_sroa_0_0_extract_trunc) {
  if ($17) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  if (!$n_sroa_0_0_extract_trunc) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = 0;
    HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
  if (!($37 & $d_sroa_1_4_extract_trunc)) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $a$0 | 0;
    HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
   }
   $_0$1 = 0;
   $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
  if ($51 >>> 0 <= 30) {
   $57 = $51 + 1 | 0;
   $58 = 31 - $51 | 0;
   $sr_1_ph = $57;
   $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
   $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
   $q_sroa_0_1_ph = 0;
   $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
   break;
  }
  if (!$rem) {
   $_0$1 = 0;
   $_0$0 = 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  HEAP32[$rem >> 2] = $a$0 | 0;
  HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
  $_0$1 = 0;
  $_0$0 = 0;
  return (setTempRet0($_0$1 | 0), $_0$0) | 0;
 } else {
  if (!$17) {
   $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   if ($119 >>> 0 <= 31) {
    $125 = $119 + 1 | 0;
    $126 = 31 - $119 | 0;
    $130 = $119 - 31 >> 31;
    $sr_1_ph = $125;
    $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
    $q_sroa_0_1_ph = 0;
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
    break;
   }
   if (!$rem) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (setTempRet0($_0$1 | 0), $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
  if ($66 & $d_sroa_0_0_extract_trunc | 0) {
   $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   $89 = 64 - $88 | 0;
   $91 = 32 - $88 | 0;
   $92 = $91 >> 31;
   $95 = $88 - 32 | 0;
   $105 = $95 >> 31;
   $sr_1_ph = $88;
   $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
   $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
   $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
   $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
   break;
  }
  if ($rem | 0) {
   HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
   HEAP32[$rem + 4 >> 2] = 0;
  }
  if (($d_sroa_0_0_extract_trunc | 0) == 1) {
   $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$0 = $a$0 | 0 | 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  } else {
   $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
   $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0;
   $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = 0;
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0;
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
  $137$1 = getTempRet0() | 0;
  $q_sroa_1_1198 = $q_sroa_1_1_ph;
  $q_sroa_0_1199 = $q_sroa_0_1_ph;
  $r_sroa_1_1200 = $r_sroa_1_1_ph;
  $r_sroa_0_1201 = $r_sroa_0_1_ph;
  $sr_1202 = $sr_1_ph;
  $carry_0203 = 0;
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1;
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0;
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
   $150$1 = getTempRet0() | 0;
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
   $carry_0203 = $151$0 & 1;
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
   $r_sroa_1_1200 = getTempRet0() | 0;
   $sr_1202 = $sr_1202 - 1 | 0;
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198;
  $q_sroa_0_1_lcssa = $q_sroa_0_1199;
  $r_sroa_1_1_lcssa = $r_sroa_1_1200;
  $r_sroa_0_1_lcssa = $r_sroa_0_1201;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = $carry_0203;
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
 $q_sroa_0_0_insert_ext75$1 = 0;
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa;
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa;
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
 return (setTempRet0($_0$1 | 0), $_0$0) | 0;
}

function _lex_scan_string($lex, $error) {
 $lex = $lex | 0;
 $error = $error | 0;
 var $0 = 0, $1 = 0, $102 = 0, $103 = 0, $109 = 0, $113 = 0, $114 = 0, $133 = 0, $137 = 0, $138 = 0, $154 = 0, $155 = 0, $157 = 0, $158 = 0, $159 = 0, $165 = 0, $166 = 0, $189 = 0, $190 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $c = 0, $i = 0, $length = 0, $p = 0, $t = 0, $value = 0, $value2 = 0, $vararg_buffer = 0, $vararg_buffer28 = 0, $vararg_buffer30 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0, $vararg_buffer37 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer47 = 0, $vararg_buffer50 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer50 = sp + 72 | 0;
 $vararg_buffer47 = sp + 64 | 0;
 $vararg_buffer43 = sp + 56 | 0;
 $vararg_buffer40 = sp + 48 | 0;
 $vararg_buffer37 = sp + 40 | 0;
 $vararg_buffer35 = sp + 32 | 0;
 $vararg_buffer33 = sp + 24 | 0;
 $vararg_buffer30 = sp + 16 | 0;
 $vararg_buffer28 = sp + 8 | 0;
 $vararg_buffer = sp;
 $0 = sp + 108 | 0;
 $1 = sp + 104 | 0;
 $c = sp + 100 | 0;
 $p = sp + 96 | 0;
 $t = sp + 92 | 0;
 $i = sp + 88 | 0;
 $length = sp + 84 | 0;
 $value = sp + 80 | 0;
 $value2 = sp + 76 | 0;
 HEAP32[$0 >> 2] = $lex;
 HEAP32[$1 >> 2] = $error;
 HEAP32[(HEAP32[$0 >> 2] | 0) + 64 >> 2] = 0;
 HEAP32[(HEAP32[$0 >> 2] | 0) + 56 >> 2] = -1;
 HEAP32[$c >> 2] = _lex_get_save(HEAP32[$0 >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0;
 L1 : while (1) {
  if ((HEAP32[$c >> 2] | 0) == 34) {
   label = 22;
   break;
  }
  if ((HEAP32[$c >> 2] | 0) == -2) break;
  if ((HEAP32[$c >> 2] | 0) == -1) {
   label = 5;
   break;
  }
  if (0 <= (HEAP32[$c >> 2] | 0) & (HEAP32[$c >> 2] | 0) <= 31) {
   label = 7;
   break;
  }
  $29 = (HEAP32[$c >> 2] | 0) == 92;
  HEAP32[$c >> 2] = _lex_get_save(HEAP32[$0 >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0;
  if (!$29) continue;
  if ((HEAP32[$c >> 2] | 0) != 117) {
   if (!((HEAP32[$c >> 2] | 0) == 34 | (HEAP32[$c >> 2] | 0) == 92 | (HEAP32[$c >> 2] | 0) == 47 | (HEAP32[$c >> 2] | 0) == 98 | (HEAP32[$c >> 2] | 0) == 102 | (HEAP32[$c >> 2] | 0) == 110 | (HEAP32[$c >> 2] | 0) == 114 | (HEAP32[$c >> 2] | 0) == 116)) {
    label = 21;
    break;
   }
   HEAP32[$c >> 2] = _lex_get_save(HEAP32[$0 >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0;
   continue;
  }
  HEAP32[$c >> 2] = _lex_get_save(HEAP32[$0 >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0;
  HEAP32[$i >> 2] = 0;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >= 4) continue L1;
   if (!(48 <= (HEAP32[$c >> 2] | 0) & (HEAP32[$c >> 2] | 0) <= 57)) if (!(65 <= (HEAP32[$c >> 2] | 0) & (HEAP32[$c >> 2] | 0) <= 70)) if (!(97 <= (HEAP32[$c >> 2] | 0) & (HEAP32[$c >> 2] | 0) <= 102)) {
    label = 17;
    break L1;
   }
   HEAP32[$c >> 2] = _lex_get_save(HEAP32[$0 >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0;
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
 }
 do if ((label | 0) == 5) _error_set(HEAP32[$1 >> 2] | 0, HEAP32[$0 >> 2] | 0, gb + 41394 | 0, $vararg_buffer); else if ((label | 0) == 7) {
  _lex_unget_unsave(HEAP32[$0 >> 2] | 0, HEAP32[$c >> 2] | 0);
  $25 = HEAP32[$1 >> 2] | 0;
  $26 = HEAP32[$0 >> 2] | 0;
  $27 = HEAP32[$c >> 2] | 0;
  if ((HEAP32[$c >> 2] | 0) == 10) {
   HEAP32[$vararg_buffer28 >> 2] = $27;
   _error_set($25, $26, gb + 41517 | 0, $vararg_buffer28);
   break;
  } else {
   HEAP32[$vararg_buffer30 >> 2] = $27;
   _error_set($25, $26, gb + 41536 | 0, $vararg_buffer30);
   break;
  }
 } else if ((label | 0) == 17) _error_set(HEAP32[$1 >> 2] | 0, HEAP32[$0 >> 2] | 0, gb + 41559 | 0, $vararg_buffer33); else if ((label | 0) == 21) _error_set(HEAP32[$1 >> 2] | 0, HEAP32[$0 >> 2] | 0, gb + 41559 | 0, $vararg_buffer35); else if ((label | 0) == 22) {
  HEAP32[$t >> 2] = _jsonp_malloc((HEAP32[(HEAP32[$0 >> 2] | 0) + 40 + 4 >> 2] | 0) + 1 | 0) | 0;
  if (HEAP32[$t >> 2] | 0) {
   HEAP32[(HEAP32[$0 >> 2] | 0) + 64 >> 2] = HEAP32[$t >> 2];
   HEAP32[$p >> 2] = (_strbuffer_value((HEAP32[$0 >> 2] | 0) + 40 | 0) | 0) + 1;
   L22 : while (1) {
    if ((HEAP8[HEAP32[$p >> 2] >> 0] | 0) == 34) {
     label = 53;
     break;
    }
    $102 = (HEAP8[HEAP32[$p >> 2] >> 0] | 0) == 92;
    $103 = HEAP32[$p >> 2] | 0;
    HEAP32[$p >> 2] = $103 + 1;
    if (!$102) {
     $189 = HEAP8[$103 >> 0] | 0;
     $190 = HEAP32[$t >> 2] | 0;
     HEAP32[$t >> 2] = $190 + 1;
     HEAP8[$190 >> 0] = $189;
     continue;
    }
    $109 = HEAP32[$p >> 2] | 0;
    if ((HEAP8[HEAP32[$p >> 2] >> 0] | 0) != 117) {
     switch (HEAP8[$109 >> 0] | 0) {
     case 47:
     case 92:
     case 34:
      {
       HEAP8[HEAP32[$t >> 2] >> 0] = HEAP8[HEAP32[$p >> 2] >> 0] | 0;
       break;
      }
     case 98:
      {
       HEAP8[HEAP32[$t >> 2] >> 0] = 8;
       break;
      }
     case 102:
      {
       HEAP8[HEAP32[$t >> 2] >> 0] = 12;
       break;
      }
     case 110:
      {
       HEAP8[HEAP32[$t >> 2] >> 0] = 10;
       break;
      }
     case 114:
      {
       HEAP8[HEAP32[$t >> 2] >> 0] = 13;
       break;
      }
     case 116:
      {
       HEAP8[HEAP32[$t >> 2] >> 0] = 9;
       break;
      }
     default:
      {
       label = 50;
       break L22;
      }
     }
     HEAP32[$t >> 2] = (HEAP32[$t >> 2] | 0) + 1;
     HEAP32[$p >> 2] = (HEAP32[$p >> 2] | 0) + 1;
     continue;
    }
    HEAP32[$value >> 2] = _decode_unicode_escape($109) | 0;
    if ((HEAP32[$value >> 2] | 0) < 0) {
     label = 28;
     break;
    }
    HEAP32[$p >> 2] = (HEAP32[$p >> 2] | 0) + 5;
    if (55296 <= (HEAP32[$value >> 2] | 0) & (HEAP32[$value >> 2] | 0) <= 56319) {
     if ((HEAP8[HEAP32[$p >> 2] >> 0] | 0) != 92) {
      label = 37;
      break;
     }
     if ((HEAP8[(HEAP32[$p >> 2] | 0) + 1 >> 0] | 0) != 117) {
      label = 37;
      break;
     }
     $133 = (HEAP32[$p >> 2] | 0) + 1 | 0;
     HEAP32[$p >> 2] = $133;
     HEAP32[$value2 >> 2] = _decode_unicode_escape($133) | 0;
     if ((HEAP32[$value2 >> 2] | 0) < 0) {
      label = 33;
      break;
     }
     HEAP32[$p >> 2] = (HEAP32[$p >> 2] | 0) + 5;
     if (!(56320 <= (HEAP32[$value2 >> 2] | 0) & (HEAP32[$value2 >> 2] | 0) <= 57343)) {
      label = 36;
      break;
     }
     HEAP32[$value >> 2] = ((HEAP32[$value >> 2] | 0) - 55296 << 10) + ((HEAP32[$value2 >> 2] | 0) - 56320) + 65536;
    } else if (56320 <= (HEAP32[$value >> 2] | 0) & (HEAP32[$value >> 2] | 0) <= 57343) {
     label = 39;
     break;
    }
    if (_utf8_encode(HEAP32[$value >> 2] | 0, HEAP32[$t >> 2] | 0, $length) | 0) {
     label = 41;
     break;
    }
    HEAP32[$t >> 2] = (HEAP32[$t >> 2] | 0) + (HEAP32[$length >> 2] | 0);
   }
   if ((label | 0) == 28) {
    $113 = HEAP32[$1 >> 2] | 0;
    $114 = HEAP32[$0 >> 2] | 0;
    HEAP32[$vararg_buffer37 >> 2] = (HEAP32[$p >> 2] | 0) + -1;
    _error_set($113, $114, gb + 41610 | 0, $vararg_buffer37);
    break;
   } else if ((label | 0) == 33) {
    $137 = HEAP32[$1 >> 2] | 0;
    $138 = HEAP32[$0 >> 2] | 0;
    HEAP32[$vararg_buffer40 >> 2] = (HEAP32[$p >> 2] | 0) + -1;
    _error_set($137, $138, gb + 41610 | 0, $vararg_buffer40);
    break;
   } else if ((label | 0) == 36) {
    $154 = HEAP32[$1 >> 2] | 0;
    $155 = HEAP32[$0 >> 2] | 0;
    $157 = HEAP32[$value2 >> 2] | 0;
    HEAP32[$vararg_buffer43 >> 2] = HEAP32[$value >> 2];
    HEAP32[$vararg_buffer43 + 4 >> 2] = $157;
    _error_set($154, $155, gb + 41640 | 0, $vararg_buffer43);
    break;
   } else if ((label | 0) == 37) {
    $158 = HEAP32[$1 >> 2] | 0;
    $159 = HEAP32[$0 >> 2] | 0;
    HEAP32[$vararg_buffer47 >> 2] = HEAP32[$value >> 2];
    _error_set($158, $159, gb + 41671 | 0, $vararg_buffer47);
    break;
   } else if ((label | 0) == 39) {
    $165 = HEAP32[$1 >> 2] | 0;
    $166 = HEAP32[$0 >> 2] | 0;
    HEAP32[$vararg_buffer50 >> 2] = HEAP32[$value >> 2];
    _error_set($165, $166, gb + 41671 | 0, $vararg_buffer50);
    break;
   } else if ((label | 0) == 41) ___assert_fail(gb + 41696 | 0, gb + 41349 | 0, 441, gb + 41698 | 0); else if ((label | 0) == 50) ___assert_fail(gb + 41696 | 0, gb + 41349 | 0, 453, gb + 41698 | 0); else if ((label | 0) == 53) {
    HEAP8[HEAP32[$t >> 2] >> 0] = 0;
    HEAP32[(HEAP32[$0 >> 2] | 0) + 64 + 4 >> 2] = (HEAP32[$t >> 2] | 0) - (HEAP32[(HEAP32[$0 >> 2] | 0) + 64 >> 2] | 0);
    HEAP32[(HEAP32[$0 >> 2] | 0) + 56 >> 2] = 256;
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 _lex_free_string(HEAP32[$0 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _resamp_rrrf_execute_output_block($_q, $_x, $_nx, $_ux, $_y, $_ny, $_uy) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 $_nx = $_nx | 0;
 $_ux = $_ux | 0;
 $_y = $_y | 0;
 $_ny = $_ny | 0;
 $_uy = $_uy | 0;
 var $$lcssa$us = 0, $$lcssa$us$lcssa181 = 0, $$lcssa187 = 0, $$lcssa189 = 0, $$lcssa196 = 0, $$pre$phi118Z2D = 0, $$pre114 = 0, $$pre115 = 0, $$pre115$lcssa = 0, $$pre116 = 0, $1 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $118 = 0.0, $121 = 0.0, $123 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $2 = 0, $25 = 0, $29 = 0, $3 = 0, $35 = 0, $36 = 0, $4 = 0, $40 = 0, $42 = 0, $5 = 0, $55 = 0, $56 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $66 = 0, $7 = 0, $76 = 0.0, $77 = 0.0, $8 = 0, $86 = 0.0, $89 = 0.0, $9 = 0, $91 = 0, $94 = 0, $95 = 0, $97 = 0, $num_read$0$ph61 = 0, $num_read$053$us = 0, $num_read$2$lcssa$us = 0, $num_read$2$lcssa$us$lcssa183 = 0, $num_read$2$lcssa$us$lcssa185 = 0, $num_read$2$lcssa$us186 = 0, $num_read$2$ph$us = 0, $num_read$250$us = 0, $num_read$3 = 0, $num_written$0$ph$be = 0, $num_written$0$ph46 = 0, $num_written$0$ph62 = 0, $r$i3 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer10 = sp + 24 | 0;
 $vararg_buffer6 = sp + 16 | 0;
 $vararg_buffer2 = sp + 8 | 0;
 $vararg_buffer = sp;
 $r$i3 = sp + 28 | 0;
 $$pre116 = $_q + 28 | 0;
 if (!$_ny) {
  $$pre$phi118Z2D = $_q + 44 | 0;
  $num_read$3 = 0;
  $num_written$0$ph46 = 0;
  HEAP32[$_ux >> 2] = $num_read$3;
  HEAP32[$_uy >> 2] = $num_written$0$ph46;
  $128 = HEAP32[$$pre116 >> 2] | 0;
  $129 = HEAP32[$$pre$phi118Z2D >> 2] | 0;
  $130 = $128 >>> 0 < $129 >>> 0;
  $131 = $130 & 1;
  STACKTOP = sp;
  return $131 | 0;
 }
 $1 = $_q + 32 | 0;
 $2 = $_q + 48 | 0;
 $3 = $_q + 44 | 0;
 $4 = $_q + 52 | 0;
 $5 = $_q + 36 | 0;
 $6 = $_q + 20 | 0;
 $7 = $_q + 24 | 0;
 $8 = $_q + 40 | 0;
 $9 = $_q + 16 | 0;
 $num_read$0$ph61 = 0;
 $num_written$0$ph62 = 0;
 L5 : while (1) {
  $11 = HEAP32[$$pre116 >> 2] | 0;
  $num_read$053$us = $num_read$0$ph61;
  L7 : while (1) {
   if (!$11) if (+HEAPF32[$1 >> 2] == 0.0) {
    if (($num_read$053$us | 0) == ($_nx | 0)) {
     $$pre$phi118Z2D = $3;
     $num_read$3 = $_nx;
     $num_written$0$ph46 = $num_written$0$ph62;
     label = 25;
     break L5;
    }
    _windowf_push(HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] | 0, +HEAPF32[$_x + ($num_read$053$us << 2) >> 2]);
    $61 = HEAP32[$$pre116 >> 2] | 0;
    $num_read$2$ph$us = $num_read$053$us + 1 | 0;
   } else {
    $61 = 0;
    $num_read$2$ph$us = $num_read$053$us;
   } else {
    $61 = $11;
    $num_read$2$ph$us = $num_read$053$us;
   }
   $59 = HEAP32[$3 >> 2] | 0;
   if ($61 >>> 0 < $59 >>> 0) {
    $$lcssa$us = $61;
    $num_read$2$lcssa$us = $num_read$2$ph$us;
   } else {
    $25 = $59;
    $29 = $61;
    $num_read$250$us = $num_read$2$ph$us;
    while (1) {
     if (($num_read$250$us | 0) == ($_nx | 0)) {
      $$pre$phi118Z2D = $3;
      $num_read$3 = $_nx;
      $num_written$0$ph46 = $num_written$0$ph62;
      label = 25;
      break L5;
     }
     HEAPF32[$6 >> 2] = +HEAPF32[$6 >> 2] + -1.0;
     HEAPF32[$7 >> 2] = +HEAPF32[$7 >> 2] - +($25 >>> 0);
     HEAP32[$$pre116 >> 2] = $29 - $25;
     _windowf_push(HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] | 0, +HEAPF32[$_x + ($num_read$250$us << 2) >> 2]);
     $35 = $num_read$250$us + 1 | 0;
     $36 = HEAP32[$$pre116 >> 2] | 0;
     $25 = HEAP32[$3 >> 2] | 0;
     if ($36 >>> 0 < $25 >>> 0) {
      $$lcssa$us = $36;
      $num_read$2$lcssa$us = $35;
      break;
     } else {
      $29 = $36;
      $num_read$250$us = $35;
     }
    }
   }
   switch (HEAP32[$4 >> 2] | 0) {
   case 0:
    {
     $num_read$2$lcssa$us$lcssa183 = $num_read$2$lcssa$us;
     label = 16;
     break L7;
     break;
    }
   case 1:
    break;
   default:
    {
     label = 24;
     break L5;
    }
   }
   $40 = HEAP32[$2 >> 2] | 0;
   $42 = HEAP32[$40 + 12 >> 2] | 0;
   if ($42 >>> 0 <= $$lcssa$us >>> 0) {
    $$lcssa$us$lcssa181 = $$lcssa$us;
    $$lcssa187 = $42;
    label = 19;
    break L5;
   }
   _windowf_read(HEAP32[$40 + 16 >> 2] | 0, $r$i3);
   _dotprod_rrrf_execute(HEAP32[(HEAP32[$40 + 20 >> 2] | 0) + ($$lcssa$us << 2) >> 2] | 0, HEAP32[$r$i3 >> 2] | 0, $5);
   HEAPF32[$5 >> 2] = +HEAPF32[$40 + 24 >> 2] * +HEAPF32[$5 >> 2];
   $55 = HEAP32[$$pre116 >> 2] | 0;
   $56 = HEAP32[$3 >> 2] | 0;
   if (($55 | 0) != ($56 + -1 | 0)) {
    $$lcssa189 = $55;
    $num_read$2$lcssa$us$lcssa185 = $num_read$2$lcssa$us;
    label = 20;
    break;
   }
   HEAP32[$4 >> 2] = 0;
   HEAP32[$$pre116 >> 2] = $56;
   $11 = $56;
   $num_read$053$us = $num_read$2$lcssa$us;
  }
  if ((label | 0) == 16) {
   label = 0;
   $62 = HEAP32[$2 >> 2] | 0;
   if (!(HEAP32[$62 + 12 >> 2] | 0)) {
    label = 17;
    break;
   }
   _windowf_read(HEAP32[$62 + 16 >> 2] | 0, $r$i3);
   _dotprod_rrrf_execute(HEAP32[HEAP32[$62 + 20 >> 2] >> 2] | 0, HEAP32[$r$i3 >> 2] | 0, $8);
   $76 = +HEAPF32[$62 + 24 >> 2] * +HEAPF32[$8 >> 2];
   HEAPF32[$8 >> 2] = $76;
   $77 = +HEAPF32[$1 >> 2];
   HEAPF32[$_y + ($num_written$0$ph62 << 2) >> 2] = (1.0 - $77) * +HEAPF32[$5 >> 2] + $77 * $76;
   $86 = +HEAPF32[$9 >> 2] + +HEAPF32[$6 >> 2];
   HEAPF32[$6 >> 2] = $86;
   $89 = $86 * +((HEAP32[$3 >> 2] | 0) >>> 0);
   HEAPF32[$7 >> 2] = $89;
   $91 = ~~+Math_floor(+$89);
   HEAP32[$$pre116 >> 2] = $91;
   HEAPF32[$1 >> 2] = $89 - +($91 | 0);
   HEAP32[$4 >> 2] = 1;
   $num_read$2$lcssa$us186 = $num_read$2$lcssa$us$lcssa183;
  } else if ((label | 0) == 20) {
   label = 0;
   $$pre114 = HEAP32[$2 >> 2] | 0;
   $$pre115 = HEAP32[$$pre114 + 12 >> 2] | 0;
   $95 = $$lcssa189 + 1 | 0;
   if ($$pre115 >>> 0 <= $95 >>> 0) {
    $$lcssa196 = $95;
    $$pre115$lcssa = $$pre115;
    label = 21;
    break;
   }
   _windowf_read(HEAP32[$$pre114 + 16 >> 2] | 0, $r$i3);
   _dotprod_rrrf_execute(HEAP32[(HEAP32[$$pre114 + 20 >> 2] | 0) + ($95 << 2) >> 2] | 0, HEAP32[$r$i3 >> 2] | 0, $8);
   $108 = +HEAPF32[$$pre114 + 24 >> 2] * +HEAPF32[$8 >> 2];
   HEAPF32[$8 >> 2] = $108;
   $109 = +HEAPF32[$1 >> 2];
   HEAPF32[$_y + ($num_written$0$ph62 << 2) >> 2] = (1.0 - $109) * +HEAPF32[$5 >> 2] + $109 * $108;
   $118 = +HEAPF32[$9 >> 2] + +HEAPF32[$6 >> 2];
   HEAPF32[$6 >> 2] = $118;
   $121 = $118 * +((HEAP32[$3 >> 2] | 0) >>> 0);
   HEAPF32[$7 >> 2] = $121;
   $123 = ~~+Math_floor(+$121);
   HEAP32[$$pre116 >> 2] = $123;
   HEAPF32[$1 >> 2] = $121 - +($123 | 0);
   $num_read$2$lcssa$us186 = $num_read$2$lcssa$us$lcssa185;
  }
  $num_written$0$ph$be = $num_written$0$ph62 + 1 | 0;
  if ($num_written$0$ph$be >>> 0 < $_ny >>> 0) {
   $num_read$0$ph61 = $num_read$2$lcssa$us186;
   $num_written$0$ph62 = $num_written$0$ph$be;
  } else {
   $$pre$phi118Z2D = $3;
   $num_read$3 = $num_read$2$lcssa$us186;
   $num_written$0$ph46 = $num_written$0$ph$be;
   label = 25;
   break;
  }
 }
 if ((label | 0) == 17) {
  $66 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = 0;
  HEAP32[$vararg_buffer + 4 >> 2] = 0;
  _fprintf($66, gb + 21457 | 0, $vararg_buffer) | 0;
  _exit(1);
 } else if ((label | 0) == 19) {
  $94 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer2 >> 2] = $$lcssa$us$lcssa181;
  HEAP32[$vararg_buffer2 + 4 >> 2] = $$lcssa187;
  _fprintf($94, gb + 21457 | 0, $vararg_buffer2) | 0;
  _exit(1);
 } else if ((label | 0) == 21) {
  $97 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer6 >> 2] = $$lcssa196;
  HEAP32[$vararg_buffer6 + 4 >> 2] = $$pre115$lcssa;
  _fprintf($97, gb + 21457 | 0, $vararg_buffer6) | 0;
  _exit(1);
 } else if ((label | 0) == 24) {
  $127 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer10 >> 2] = gb + 19626;
  _fprintf($127, gb + 20320 | 0, $vararg_buffer10) | 0;
  _exit(1);
 } else if ((label | 0) == 25) {
  HEAP32[$_ux >> 2] = $num_read$3;
  HEAP32[$_uy >> 2] = $num_written$0$ph46;
  $128 = HEAP32[$$pre116 >> 2] | 0;
  $129 = HEAP32[$$pre$phi118Z2D >> 2] | 0;
  $130 = $128 >>> 0 < $129 >>> 0;
  $131 = $130 & 1;
  STACKTOP = sp;
  return $131 | 0;
 }
 return 0;
}

function _ofdmframesync_execute_S1($_q) {
 $_q = $_q | 0;
 var $$byval_copy2 = 0, $$sink = 0.0, $0 = 0, $1 = 0, $108 = 0, $11 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $121 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $128 = 0, $13 = 0, $131 = 0.0, $132 = 0, $134 = 0.0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0.0, $140 = 0, $141 = 0.0, $146 = 0.0, $147 = 0.0, $152 = 0.0, $153 = 0.0, $157 = 0, $158 = 0, $159 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $172 = 0, $178 = 0, $179 = 0, $18 = 0, $191 = 0, $192 = 0, $193 = 0, $197 = 0.0, $2 = 0, $201 = 0.0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0.0, $36 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $47 = 0.0, $48 = 0.0, $5 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $6 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $79 = 0.0, $8 = 0, $81 = 0.0, $83 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, $g_hat$sroa$0$0$lcssa = 0.0, $g_hat$sroa$0$06 = 0.0, $g_hat$sroa$13$0$lcssa = 0.0, $g_hat$sroa$13$08 = 0.0, $i$07 = 0, $i$14 = 0, $i1$03 = 0, $rc = 0, label = 0, sp = 0, $i$07$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy2 = sp + 80 | 0;
 $rc = sp + 64 | 0;
 $0 = sp + 72 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 48 | 0;
 $3 = sp + 40 | 0;
 $4 = sp + 32 | 0;
 $5 = sp + 24 | 0;
 $6 = sp + 16 | 0;
 $7 = sp + 8 | 0;
 $8 = sp;
 $9 = $_q + 124 | 0;
 $11 = (HEAP32[$9 >> 2] | 0) + -1 | 0;
 HEAP32[$9 >> 2] = $11;
 if ($11 | 0) {
  STACKTOP = sp;
  return;
 }
 $13 = $_q + 128 | 0;
 HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1;
 _windowcf_read(HEAP32[$_q + 60 >> 2] | 0, $rc);
 $18 = $_q + 8 | 0;
 $22 = $_q + 92 | 0;
 _ofdmframesync_estimate_gain_S1($_q, (HEAP32[$rc >> 2] | 0) + (HEAP32[$18 >> 2] << 3) | 0, HEAP32[$22 >> 2] | 0);
 $24 = HEAP32[$_q >> 2] | 0;
 if (!$24) {
  $g_hat$sroa$0$0$lcssa = 0.0;
  $g_hat$sroa$13$0$lcssa = 0.0;
 } else {
  $26 = $1 + 4 | 0;
  $27 = $0 + 4 | 0;
  $28 = $2 + 4 | 0;
  $31 = $24;
  $g_hat$sroa$0$06 = 0.0;
  $g_hat$sroa$13$08 = 0.0;
  $i$07 = 0;
  while (1) {
   $i$07$looptemp = $i$07;
   $i$07 = $i$07 + 1 | 0;
   $30 = ($i$07 >>> 0) % ($31 >>> 0) | 0;
   $32 = HEAP32[$22 >> 2] | 0;
   $34 = +HEAPF32[$32 + ($30 << 3) >> 2];
   $36 = +HEAPF32[$32 + ($30 << 3) + 4 >> 2];
   $40 = HEAP32[$32 + ($i$07$looptemp << 3) + 4 >> 2] | 0;
   HEAP32[$1 >> 2] = HEAP32[$32 + ($i$07$looptemp << 3) >> 2];
   HEAP32[$26 >> 2] = $40;
   HEAP32[$$byval_copy2 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$$byval_copy2 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   _conjf($0, $$byval_copy2);
   $41 = +HEAPF32[$0 >> 2];
   $42 = +HEAPF32[$27 >> 2];
   $47 = $34 * $41 - $36 * $42;
   $48 = $36 * $41 + $34 * $42;
   if (($47 != $47 | 0.0 != 0.0) & ($48 != $48 | 0.0 != 0.0)) {
    ___mulsc3($2, $34, $36, $41, $42);
    $54 = +HEAPF32[$2 >> 2];
    $56 = +HEAPF32[$28 >> 2];
   } else {
    $54 = $47;
    $56 = $48;
   }
   $53 = $g_hat$sroa$0$06 + $54;
   $55 = $g_hat$sroa$13$08 + $56;
   $31 = HEAP32[$_q >> 2] | 0;
   if ($i$07 >>> 0 >= $31 >>> 0) {
    $g_hat$sroa$0$0$lcssa = $53;
    $g_hat$sroa$13$0$lcssa = $55;
    break;
   } else {
    $g_hat$sroa$0$06 = $53;
    $g_hat$sroa$13$08 = $55;
   }
  }
 }
 ___divsc3($3, $g_hat$sroa$0$0$lcssa, $g_hat$sroa$13$0$lcssa, +((HEAP32[$_q + 32 >> 2] | 0) >>> 0), 0.0);
 $66 = +HEAPF32[$_q + 80 >> 2];
 $67 = +HEAPF32[$3 >> 2] * $66;
 $68 = +HEAPF32[$3 + 4 >> 2] * $66;
 $69 = $_q + 132 | 0;
 $79 = +((HEAP32[$69 >> 2] | 0) >>> 0) * 2.0 * 3.141592653589793 / +((HEAP32[$_q >> 2] | 0) >>> 0);
 $81 = +Math_sin(+$79);
 $83 = +Math_cos(+$79) + $81 * 0.0;
 $88 = $67 * $83 - $68 * $81;
 $89 = $67 * $81 + $68 * $83;
 if (($88 != $88 | 0.0 != 0.0) & ($89 != $89 | 0.0 != 0.0)) {
  ___mulsc3($4, $67, $68, $83, $81);
  $96 = +HEAPF32[$4 >> 2];
  $97 = +HEAPF32[$4 + 4 >> 2];
 } else {
  $96 = $88;
  $97 = $89;
 }
 HEAPF32[$5 >> 2] = $96;
 HEAPF32[$5 + 4 >> 2] = $97;
 HEAP32[$$byval_copy2 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$$byval_copy2 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
 $98 = +_cabsf($$byval_copy2);
 $99 = $_q + 156 | 0;
 if ($98 > +HEAPF32[$99 >> 2]) {
  HEAPF32[$6 >> 2] = $96;
  HEAPF32[$6 + 4 >> 2] = $97;
  HEAP32[$$byval_copy2 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$$byval_copy2 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
  if (+Math_abs(+(+_cargf($$byval_copy2))) < .3141592700403172) {
   HEAP32[$_q + 104 >> 2] = 4;
   $108 = HEAP32[$_q >> 2] | 0;
   HEAP32[$9 >> 2] = (HEAP32[$18 >> 2] | 0) + $108 + (HEAP32[$69 >> 2] | 0);
   HEAP32[$13 >> 2] = 0;
   $114 = $_q + 20 | 0;
   $115 = HEAP32[$114 >> 2] | 0;
   $116 = $_q + 24 | 0;
   $117 = HEAP32[$116 >> 2] | 0;
   $121 = +($108 >>> 0) / +Math_sqrt(+(+(($117 + $115 | 0) >>> 0)));
   if (!$108) {
    $158 = $117;
    $159 = $115;
   } else {
    $123 = $_q + 96 | 0;
    $124 = $7 + 4 | 0;
    $i$14 = 0;
    do {
     $125 = HEAP32[$22 >> 2] | 0;
     $126 = $125 + ($i$14 << 3) | 0;
     $128 = $125 + ($i$14 << 3) + 4 | 0;
     $131 = $121 * +HEAPF32[$128 >> 2];
     HEAPF32[$126 >> 2] = $121 * +HEAPF32[$126 >> 2];
     HEAPF32[$128 >> 2] = $131;
     $132 = HEAP32[$123 >> 2] | 0;
     $134 = +HEAPF32[$132 + ($i$14 << 3) >> 2];
     $136 = +HEAPF32[$132 + ($i$14 << 3) + 4 >> 2];
     $137 = HEAP32[$22 >> 2] | 0;
     $138 = $137 + ($i$14 << 3) | 0;
     $139 = +HEAPF32[$138 >> 2];
     $140 = $137 + ($i$14 << 3) + 4 | 0;
     $141 = +HEAPF32[$140 >> 2];
     $146 = $134 * $139 - $136 * $141;
     $147 = $136 * $139 + $134 * $141;
     if (($146 != $146 | 0.0 != 0.0) & ($147 != $147 | 0.0 != 0.0)) {
      ___mulsc3($7, $139, $141, $134, $136);
      $152 = +HEAPF32[$7 >> 2];
      $153 = +HEAPF32[$124 >> 2];
     } else {
      $152 = $146;
      $153 = $147;
     }
     HEAPF32[$138 >> 2] = $152;
     HEAPF32[$140 >> 2] = $153;
     $i$14 = $i$14 + 1 | 0;
    } while ($i$14 >>> 0 < (HEAP32[$_q >> 2] | 0) >>> 0);
    $158 = HEAP32[$116 >> 2] | 0;
    $159 = HEAP32[$114 >> 2] | 0;
   }
   $157 = $158 + $159 | 0;
   _ofdmframesync_estimate_eqgain_poly($_q, $157 >>> 0 < 5 ? $157 + -1 | 0 : 4);
   if (HEAP32[$_q >> 2] | 0) {
    $164 = $_q + 96 | 0;
    $165 = $8 + 4 | 0;
    $166 = $_q + 100 | 0;
    $i1$03 = 0;
    do {
     $167 = HEAP32[$164 >> 2] | 0;
     $172 = HEAP32[$22 >> 2] | 0;
     ___divsc3($8, +HEAPF32[$167 + ($i1$03 << 3) >> 2], +HEAPF32[$167 + ($i1$03 << 3) + 4 >> 2], +HEAPF32[$172 + ($i1$03 << 3) >> 2], +HEAPF32[$172 + ($i1$03 << 3) + 4 >> 2]);
     $178 = HEAP32[$165 >> 2] | 0;
     $179 = HEAP32[$166 >> 2] | 0;
     HEAP32[$179 + ($i1$03 << 3) >> 2] = HEAP32[$8 >> 2];
     HEAP32[$179 + ($i1$03 << 3) + 4 >> 2] = $178;
     $i1$03 = $i1$03 + 1 | 0;
    } while ($i1$03 >>> 0 < (HEAP32[$_q >> 2] | 0) >>> 0);
   }
  } else label = 20;
 } else label = 20;
 if ((label | 0) == 20) {
  if ((HEAP32[$13 >> 2] | 0) == 16) {
   _nco_crcf_reset(HEAP32[$_q + 108 >> 2] | 0);
   _msequence_reset(HEAP32[$_q + 112 >> 2] | 0);
   $191 = $_q + 136 | 0;
   $192 = $_q + 116 | 0;
   HEAP32[$192 >> 2] = 0;
   HEAP32[$192 + 4 >> 2] = 0;
   HEAP32[$192 + 8 >> 2] = 0;
   HEAP32[$192 + 12 >> 2] = 0;
   HEAP32[$191 >> 2] = 0;
   HEAP32[$191 + 4 >> 2] = 0;
   HEAP32[$191 + 8 >> 2] = 0;
   HEAP32[$191 + 12 >> 2] = 0;
   $193 = HEAP32[$_q >> 2] | 0;
   if ($193 >>> 0 > 44) {
    $$sink = .3499999940395355;
    $201 = .30000001192092896;
   } else {
    $197 = +((44 - $193 | 0) >>> 0) * .009999999776482582;
    $$sink = $197 + .3499999940395355;
    $201 = $197 + .30000001192092896;
   }
   HEAPF32[$_q + 152 >> 2] = $$sink;
   HEAPF32[$99 >> 2] = $201;
   HEAP32[$_q + 104 >> 2] = 0;
  }
  HEAP32[$9 >> 2] = HEAP32[$_q + 4 >> 2];
 }
 STACKTOP = sp;
 return;
}

function runPostSets1() {
 HEAP32[gb + 820 >> 2] = (HEAP32[gb + 820 >> 2] | 0) + (gb + 33069 | 0);
 HEAP32[gb + 824 >> 2] = (HEAP32[gb + 824 >> 2] | 0) + (gb + 33077 | 0);
 HEAP32[gb + 836 >> 2] = (HEAP32[gb + 836 >> 2] | 0) + (gb + 33115 | 0);
 HEAP32[gb + 840 >> 2] = (HEAP32[gb + 840 >> 2] | 0) + (gb + 33123 | 0);
 HEAP32[gb + 852 >> 2] = (HEAP32[gb + 852 >> 2] | 0) + (gb + 33161 | 0);
 HEAP32[gb + 856 >> 2] = (HEAP32[gb + 856 >> 2] | 0) + (gb + 33166 | 0);
 HEAP32[gb + 868 >> 2] = (HEAP32[gb + 868 >> 2] | 0) + (gb + 33193 | 0);
 HEAP32[gb + 872 >> 2] = (HEAP32[gb + 872 >> 2] | 0) + (gb + 33198 | 0);
 HEAP32[gb + 884 >> 2] = (HEAP32[gb + 884 >> 2] | 0) + (gb + 33225 | 0);
 HEAP32[gb + 888 >> 2] = (HEAP32[gb + 888 >> 2] | 0) + (gb + 33230 | 0);
 HEAP32[gb + 900 >> 2] = (HEAP32[gb + 900 >> 2] | 0) + (gb + 33257 | 0);
 HEAP32[gb + 904 >> 2] = (HEAP32[gb + 904 >> 2] | 0) + (gb + 33263 | 0);
 HEAP32[gb + 916 >> 2] = (HEAP32[gb + 916 >> 2] | 0) + (gb + 33291 | 0);
 HEAP32[gb + 920 >> 2] = (HEAP32[gb + 920 >> 2] | 0) + (gb + 33297 | 0);
 HEAP32[gb + 932 >> 2] = (HEAP32[gb + 932 >> 2] | 0) + (gb + 33325 | 0);
 HEAP32[gb + 936 >> 2] = (HEAP32[gb + 936 >> 2] | 0) + (gb + 33331 | 0);
 HEAP32[gb + 948 >> 2] = (HEAP32[gb + 948 >> 2] | 0) + (gb + 33359 | 0);
 HEAP32[gb + 952 >> 2] = (HEAP32[gb + 952 >> 2] | 0) + (gb + 33366 | 0);
 HEAP32[gb + 964 >> 2] = (HEAP32[gb + 964 >> 2] | 0) + (gb + 33395 | 0);
 HEAP32[gb + 968 >> 2] = (HEAP32[gb + 968 >> 2] | 0) + (gb + 33402 | 0);
 HEAP32[gb + 980 >> 2] = (HEAP32[gb + 980 >> 2] | 0) + (gb + 33431 | 0);
 HEAP32[gb + 984 >> 2] = (HEAP32[gb + 984 >> 2] | 0) + (gb + 33436 | 0);
 HEAP32[gb + 996 >> 2] = (HEAP32[gb + 996 >> 2] | 0) + (gb + 33474 | 0);
 HEAP32[gb + 1e3 >> 2] = (HEAP32[gb + 1e3 >> 2] | 0) + (gb + 33479 | 0);
 HEAP32[gb + 1012 >> 2] = (HEAP32[gb + 1012 >> 2] | 0) + (gb + 33517 | 0);
 HEAP32[gb + 1016 >> 2] = (HEAP32[gb + 1016 >> 2] | 0) + (gb + 33523 | 0);
 HEAP32[gb + 1028 >> 2] = (HEAP32[gb + 1028 >> 2] | 0) + (gb + 33562 | 0);
 HEAP32[gb + 1032 >> 2] = (HEAP32[gb + 1032 >> 2] | 0) + (gb + 33568 | 0);
 HEAP32[gb + 1044 >> 2] = (HEAP32[gb + 1044 >> 2] | 0) + (gb + 33607 | 0);
 HEAP32[gb + 1048 >> 2] = (HEAP32[gb + 1048 >> 2] | 0) + (gb + 33613 | 0);
 HEAP32[gb + 1060 >> 2] = (HEAP32[gb + 1060 >> 2] | 0) + (gb + 33652 | 0);
 HEAP32[gb + 1064 >> 2] = (HEAP32[gb + 1064 >> 2] | 0) + (gb + 33659 | 0);
 HEAP32[gb + 1076 >> 2] = (HEAP32[gb + 1076 >> 2] | 0) + (gb + 33699 | 0);
 HEAP32[gb + 1080 >> 2] = (HEAP32[gb + 1080 >> 2] | 0) + (gb + 33706 | 0);
 HEAP32[gb + 1092 >> 2] = (HEAP32[gb + 1092 >> 2] | 0) + (gb + 33746 | 0);
 HEAP32[gb + 1096 >> 2] = (HEAP32[gb + 1096 >> 2] | 0) + (gb + 33753 | 0);
 HEAP32[gb + 1108 >> 2] = (HEAP32[gb + 1108 >> 2] | 0) + (gb + 33793 | 0);
 HEAP32[gb + 1112 >> 2] = (HEAP32[gb + 1112 >> 2] | 0) + (gb + 33801 | 0);
 HEAP32[gb + 1124 >> 2] = (HEAP32[gb + 1124 >> 2] | 0) + (gb + 33842 | 0);
 HEAP32[gb + 1128 >> 2] = (HEAP32[gb + 1128 >> 2] | 0) + (gb + 33850 | 0);
 HEAP32[gb + 1140 >> 2] = (HEAP32[gb + 1140 >> 2] | 0) + (gb + 33891 | 0);
 HEAP32[gb + 1144 >> 2] = (HEAP32[gb + 1144 >> 2] | 0) + (gb + 33899 | 0);
 HEAP32[gb + 1156 >> 2] = (HEAP32[gb + 1156 >> 2] | 0) + (gb + 33940 | 0);
 HEAP32[gb + 1160 >> 2] = (HEAP32[gb + 1160 >> 2] | 0) + (gb + 33948 | 0);
 HEAP32[gb + 1172 >> 2] = (HEAP32[gb + 1172 >> 2] | 0) + (gb + 33989 | 0);
 HEAP32[gb + 1176 >> 2] = (HEAP32[gb + 1176 >> 2] | 0) + (gb + 33998 | 0);
 HEAP32[gb + 1188 >> 2] = (HEAP32[gb + 1188 >> 2] | 0) + (gb + 34040 | 0);
 HEAP32[gb + 1192 >> 2] = (HEAP32[gb + 1192 >> 2] | 0) + (gb + 34049 | 0);
 HEAP32[gb + 1204 >> 2] = (HEAP32[gb + 1204 >> 2] | 0) + (gb + 34091 | 0);
 HEAP32[gb + 1208 >> 2] = (HEAP32[gb + 1208 >> 2] | 0) + (gb + 34100 | 0);
 HEAP32[gb + 1220 >> 2] = (HEAP32[gb + 1220 >> 2] | 0) + (gb + 34142 | 0);
 HEAP32[gb + 1224 >> 2] = (HEAP32[gb + 1224 >> 2] | 0) + (gb + 34148 | 0);
 HEAP32[gb + 1236 >> 2] = (HEAP32[gb + 1236 >> 2] | 0) + (gb + 34181 | 0);
 HEAP32[gb + 1240 >> 2] = (HEAP32[gb + 1240 >> 2] | 0) + (gb + 34187 | 0);
 HEAP32[gb + 1252 >> 2] = (HEAP32[gb + 1252 >> 2] | 0) + (gb + 34220 | 0);
 HEAP32[gb + 1256 >> 2] = (HEAP32[gb + 1256 >> 2] | 0) + (gb + 34227 | 0);
 HEAP32[gb + 1268 >> 2] = (HEAP32[gb + 1268 >> 2] | 0) + (gb + 34261 | 0);
 HEAP32[gb + 1272 >> 2] = (HEAP32[gb + 1272 >> 2] | 0) + (gb + 34268 | 0);
 HEAP32[gb + 1284 >> 2] = (HEAP32[gb + 1284 >> 2] | 0) + (gb + 34302 | 0);
 HEAP32[gb + 1288 >> 2] = (HEAP32[gb + 1288 >> 2] | 0) + (gb + 34309 | 0);
 HEAP32[gb + 1300 >> 2] = (HEAP32[gb + 1300 >> 2] | 0) + (gb + 34343 | 0);
 HEAP32[gb + 1304 >> 2] = (HEAP32[gb + 1304 >> 2] | 0) + (gb + 34351 | 0);
 HEAP32[gb + 1316 >> 2] = (HEAP32[gb + 1316 >> 2] | 0) + (gb + 34386 | 0);
 HEAP32[gb + 1320 >> 2] = (HEAP32[gb + 1320 >> 2] | 0) + (gb + 34394 | 0);
 HEAP32[gb + 1332 >> 2] = (HEAP32[gb + 1332 >> 2] | 0) + (gb + 34429 | 0);
 HEAP32[gb + 1336 >> 2] = (HEAP32[gb + 1336 >> 2] | 0) + (gb + 34434 | 0);
 HEAP32[gb + 1348 >> 2] = (HEAP32[gb + 1348 >> 2] | 0) + (gb + 34460 | 0);
 HEAP32[gb + 1352 >> 2] = (HEAP32[gb + 1352 >> 2] | 0) + (gb + 34465 | 0);
 HEAP32[gb + 1364 >> 2] = (HEAP32[gb + 1364 >> 2] | 0) + (gb + 34495 | 0);
 HEAP32[gb + 1368 >> 2] = (HEAP32[gb + 1368 >> 2] | 0) + (gb + 34499 | 0);
 HEAP32[gb + 1380 >> 2] = (HEAP32[gb + 1380 >> 2] | 0) + (gb + 34519 | 0);
 HEAP32[gb + 1384 >> 2] = (HEAP32[gb + 1384 >> 2] | 0) + (gb + 34526 | 0);
 HEAP32[gb + 1396 >> 2] = (HEAP32[gb + 1396 >> 2] | 0) + (gb + 34542 | 0);
 HEAP32[gb + 1400 >> 2] = (HEAP32[gb + 1400 >> 2] | 0) + (gb + 34550 | 0);
 HEAP32[gb + 1412 >> 2] = (HEAP32[gb + 1412 >> 2] | 0) + (gb + 34567 | 0);
 HEAP32[gb + 1416 >> 2] = (HEAP32[gb + 1416 >> 2] | 0) + (gb + 34571 | 0);
 HEAP32[gb + 1428 >> 2] = (HEAP32[gb + 1428 >> 2] | 0) + (gb + 34576 | 0);
 HEAP32[gb + 1432 >> 2] = (HEAP32[gb + 1432 >> 2] | 0) + (gb + 34585 | 0);
 HEAP32[gb + 1444 >> 2] = (HEAP32[gb + 1444 >> 2] | 0) + (gb + 34611 | 0);
 HEAP32[gb + 1448 >> 2] = (HEAP32[gb + 1448 >> 2] | 0) + (gb + 34620 | 0);
 HEAP32[gb + 1460 >> 2] = (HEAP32[gb + 1460 >> 2] | 0) + (gb + 34646 | 0);
 HEAP32[gb + 1464 >> 2] = (HEAP32[gb + 1464 >> 2] | 0) + (gb + 34655 | 0);
 HEAP32[gb + 1476 >> 2] = (HEAP32[gb + 1476 >> 2] | 0) + (gb + 34681 | 0);
 HEAP32[gb + 1480 >> 2] = (HEAP32[gb + 1480 >> 2] | 0) + (gb + 34691 | 0);
 HEAP32[gb + 1492 >> 2] = (HEAP32[gb + 1492 >> 2] | 0) + (gb + 34719 | 0);
 HEAP32[gb + 1496 >> 2] = (HEAP32[gb + 1496 >> 2] | 0) + (gb + 34729 | 0);
 HEAP32[gb + 1508 >> 2] = (HEAP32[gb + 1508 >> 2] | 0) + (gb + 34757 | 0);
 HEAP32[gb + 1512 >> 2] = (HEAP32[gb + 1512 >> 2] | 0) + (gb + 34765 | 0);
 HEAP32[gb + 1524 >> 2] = (HEAP32[gb + 1524 >> 2] | 0) + (gb + 34790 | 0);
 HEAP32[gb + 1528 >> 2] = (HEAP32[gb + 1528 >> 2] | 0) + (gb + 34798 | 0);
 HEAP32[gb + 1540 >> 2] = (HEAP32[gb + 1540 >> 2] | 0) + (gb + 34823 | 0);
 HEAP32[gb + 1544 >> 2] = (HEAP32[gb + 1544 >> 2] | 0) + (gb + 34827 | 0);
 HEAP32[gb + 1584 >> 2] = (HEAP32[gb + 1584 >> 2] | 0) + (gb + 1556 | 0);
 HEAP32[gb + 1588 >> 2] = (HEAP32[gb + 1588 >> 2] | 0) + (gb + 1564 | 0);
 HEAP32[gb + 1592 >> 2] = (HEAP32[gb + 1592 >> 2] | 0) + (gb + 44888 | 0);
 HEAP32[gb + 1596 >> 2] = (HEAP32[gb + 1596 >> 2] | 0) + (gb + 1572 | 0);
 HEAP32[gb + 1600 >> 2] = (HEAP32[gb + 1600 >> 2] | 0) + (gb + 34922 | 0);
 HEAP32[gb + 1632 >> 2] = (HEAP32[gb + 1632 >> 2] | 0) + (gb + 1604 | 0);
 HEAP32[gb + 1636 >> 2] = (HEAP32[gb + 1636 >> 2] | 0) + (gb + 1612 | 0);
 HEAP32[gb + 1640 >> 2] = (HEAP32[gb + 1640 >> 2] | 0) + (gb + 44896 | 0);
 runPostSets2();
}

function runPostSets() {
 HEAP32[gb + 0 >> 2] = (HEAP32[gb + 0 >> 2] | 0) + (gb + 32558 | 0);
 HEAP32[gb + 4 >> 2] = (HEAP32[gb + 4 >> 2] | 0) + (gb + 32558 | 0);
 HEAP32[gb + 8 >> 2] = (HEAP32[gb + 8 >> 2] | 0) + (gb + 11651 | 0);
 HEAP32[gb + 12 >> 2] = (HEAP32[gb + 12 >> 2] | 0) + (gb + 11651 | 0);
 HEAP32[gb + 16 >> 2] = (HEAP32[gb + 16 >> 2] | 0) + (gb + 11220 | 0);
 HEAP32[gb + 20 >> 2] = (HEAP32[gb + 20 >> 2] | 0) + (gb + 11229 | 0);
 HEAP32[gb + 24 >> 2] = (HEAP32[gb + 24 >> 2] | 0) + (gb + 11246 | 0);
 HEAP32[gb + 28 >> 2] = (HEAP32[gb + 28 >> 2] | 0) + (gb + 11251 | 0);
 HEAP32[gb + 32 >> 2] = (HEAP32[gb + 32 >> 2] | 0) + (gb + 11263 | 0);
 HEAP32[gb + 36 >> 2] = (HEAP32[gb + 36 >> 2] | 0) + (gb + 11269 | 0);
 HEAP32[gb + 40 >> 2] = (HEAP32[gb + 40 >> 2] | 0) + (gb + 11282 | 0);
 HEAP32[gb + 44 >> 2] = (HEAP32[gb + 44 >> 2] | 0) + (gb + 11288 | 0);
 HEAP32[gb + 48 >> 2] = (HEAP32[gb + 48 >> 2] | 0) + (gb + 11301 | 0);
 HEAP32[gb + 52 >> 2] = (HEAP32[gb + 52 >> 2] | 0) + (gb + 11307 | 0);
 HEAP32[gb + 56 >> 2] = (HEAP32[gb + 56 >> 2] | 0) + (gb + 32558 | 0);
 HEAP32[gb + 60 >> 2] = (HEAP32[gb + 60 >> 2] | 0) + (gb + 32558 | 0);
 HEAP32[gb + 64 >> 2] = (HEAP32[gb + 64 >> 2] | 0) + (gb + 11651 | 0);
 HEAP32[gb + 68 >> 2] = (HEAP32[gb + 68 >> 2] | 0) + (gb + 11651 | 0);
 HEAP32[gb + 72 >> 2] = (HEAP32[gb + 72 >> 2] | 0) + (gb + 11656 | 0);
 HEAP32[gb + 76 >> 2] = (HEAP32[gb + 76 >> 2] | 0) + (gb + 11661 | 0);
 HEAP32[gb + 80 >> 2] = (HEAP32[gb + 80 >> 2] | 0) + (gb + 11671 | 0);
 HEAP32[gb + 84 >> 2] = (HEAP32[gb + 84 >> 2] | 0) + (gb + 11676 | 0);
 HEAP32[gb + 88 >> 2] = (HEAP32[gb + 88 >> 2] | 0) + (gb + 11686 | 0);
 HEAP32[gb + 92 >> 2] = (HEAP32[gb + 92 >> 2] | 0) + (gb + 11690 | 0);
 HEAP32[gb + 96 >> 2] = (HEAP32[gb + 96 >> 2] | 0) + (gb + 11703 | 0);
 HEAP32[gb + 100 >> 2] = (HEAP32[gb + 100 >> 2] | 0) + (gb + 11707 | 0);
 HEAP32[gb + 104 >> 2] = (HEAP32[gb + 104 >> 2] | 0) + (gb + 11720 | 0);
 HEAP32[gb + 108 >> 2] = (HEAP32[gb + 108 >> 2] | 0) + (gb + 11725 | 0);
 HEAP32[gb + 112 >> 2] = (HEAP32[gb + 112 >> 2] | 0) + (gb + 11739 | 0);
 HEAP32[gb + 116 >> 2] = (HEAP32[gb + 116 >> 2] | 0) + (gb + 11745 | 0);
 HEAP32[gb + 120 >> 2] = (HEAP32[gb + 120 >> 2] | 0) + (gb + 11758 | 0);
 HEAP32[gb + 124 >> 2] = (HEAP32[gb + 124 >> 2] | 0) + (gb + 11769 | 0);
 HEAP32[gb + 128 >> 2] = (HEAP32[gb + 128 >> 2] | 0) + (gb + 11784 | 0);
 HEAP32[gb + 132 >> 2] = (HEAP32[gb + 132 >> 2] | 0) + (gb + 11795 | 0);
 HEAP32[gb + 136 >> 2] = (HEAP32[gb + 136 >> 2] | 0) + (gb + 11810 | 0);
 HEAP32[gb + 140 >> 2] = (HEAP32[gb + 140 >> 2] | 0) + (gb + 11821 | 0);
 HEAP32[gb + 144 >> 2] = (HEAP32[gb + 144 >> 2] | 0) + (gb + 11836 | 0);
 HEAP32[gb + 148 >> 2] = (HEAP32[gb + 148 >> 2] | 0) + (gb + 11840 | 0);
 HEAP32[gb + 152 >> 2] = (HEAP32[gb + 152 >> 2] | 0) + (gb + 11863 | 0);
 HEAP32[gb + 156 >> 2] = (HEAP32[gb + 156 >> 2] | 0) + (gb + 11867 | 0);
 HEAP32[gb + 160 >> 2] = (HEAP32[gb + 160 >> 2] | 0) + (gb + 11890 | 0);
 HEAP32[gb + 164 >> 2] = (HEAP32[gb + 164 >> 2] | 0) + (gb + 11894 | 0);
 HEAP32[gb + 168 >> 2] = (HEAP32[gb + 168 >> 2] | 0) + (gb + 11917 | 0);
 HEAP32[gb + 172 >> 2] = (HEAP32[gb + 172 >> 2] | 0) + (gb + 11922 | 0);
 HEAP32[gb + 176 >> 2] = (HEAP32[gb + 176 >> 2] | 0) + (gb + 11946 | 0);
 HEAP32[gb + 180 >> 2] = (HEAP32[gb + 180 >> 2] | 0) + (gb + 11953 | 0);
 HEAP32[gb + 184 >> 2] = (HEAP32[gb + 184 >> 2] | 0) + (gb + 11988 | 0);
 HEAP32[gb + 188 >> 2] = (HEAP32[gb + 188 >> 2] | 0) + (gb + 11995 | 0);
 HEAP32[gb + 192 >> 2] = (HEAP32[gb + 192 >> 2] | 0) + (gb + 12030 | 0);
 HEAP32[gb + 196 >> 2] = (HEAP32[gb + 196 >> 2] | 0) + (gb + 12037 | 0);
 HEAP32[gb + 200 >> 2] = (HEAP32[gb + 200 >> 2] | 0) + (gb + 12072 | 0);
 HEAP32[gb + 204 >> 2] = (HEAP32[gb + 204 >> 2] | 0) + (gb + 12079 | 0);
 HEAP32[gb + 208 >> 2] = (HEAP32[gb + 208 >> 2] | 0) + (gb + 12114 | 0);
 HEAP32[gb + 212 >> 2] = (HEAP32[gb + 212 >> 2] | 0) + (gb + 12121 | 0);
 HEAP32[gb + 216 >> 2] = (HEAP32[gb + 216 >> 2] | 0) + (gb + 12156 | 0);
 HEAP32[gb + 220 >> 2] = (HEAP32[gb + 220 >> 2] | 0) + (gb + 12163 | 0);
 HEAP32[gb + 224 >> 2] = (HEAP32[gb + 224 >> 2] | 0) + (gb + 12198 | 0);
 HEAP32[gb + 228 >> 2] = (HEAP32[gb + 228 >> 2] | 0) + (gb + 12205 | 0);
 HEAP32[gb + 232 >> 2] = (HEAP32[gb + 232 >> 2] | 0) + (gb + 12240 | 0);
 HEAP32[gb + 236 >> 2] = (HEAP32[gb + 236 >> 2] | 0) + (gb + 12247 | 0);
 HEAP32[gb + 240 >> 2] = (HEAP32[gb + 240 >> 2] | 0) + (gb + 12282 | 0);
 HEAP32[gb + 244 >> 2] = (HEAP32[gb + 244 >> 2] | 0) + (gb + 12289 | 0);
 HEAP32[gb + 248 >> 2] = (HEAP32[gb + 248 >> 2] | 0) + (gb + 12324 | 0);
 HEAP32[gb + 252 >> 2] = (HEAP32[gb + 252 >> 2] | 0) + (gb + 12331 | 0);
 HEAP32[gb + 256 >> 2] = (HEAP32[gb + 256 >> 2] | 0) + (gb + 12366 | 0);
 HEAP32[gb + 260 >> 2] = (HEAP32[gb + 260 >> 2] | 0) + (gb + 12373 | 0);
 HEAP32[gb + 264 >> 2] = (HEAP32[gb + 264 >> 2] | 0) + (gb + 12408 | 0);
 HEAP32[gb + 268 >> 2] = (HEAP32[gb + 268 >> 2] | 0) + (gb + 12415 | 0);
 HEAP32[gb + 272 >> 2] = (HEAP32[gb + 272 >> 2] | 0) + (gb + 12450 | 0);
 HEAP32[gb + 276 >> 2] = (HEAP32[gb + 276 >> 2] | 0) + (gb + 12454 | 0);
 HEAP32[gb + 580 >> 2] = (HEAP32[gb + 580 >> 2] | 0) + (gb + 32558 | 0);
 HEAP32[gb + 584 >> 2] = (HEAP32[gb + 584 >> 2] | 0) + (gb + 32566 | 0);
 HEAP32[gb + 596 >> 2] = (HEAP32[gb + 596 >> 2] | 0) + (gb + 32573 | 0);
 HEAP32[gb + 600 >> 2] = (HEAP32[gb + 600 >> 2] | 0) + (gb + 32578 | 0);
 HEAP32[gb + 612 >> 2] = (HEAP32[gb + 612 >> 2] | 0) + (gb + 32601 | 0);
 HEAP32[gb + 616 >> 2] = (HEAP32[gb + 616 >> 2] | 0) + (gb + 32606 | 0);
 HEAP32[gb + 628 >> 2] = (HEAP32[gb + 628 >> 2] | 0) + (gb + 32629 | 0);
 HEAP32[gb + 632 >> 2] = (HEAP32[gb + 632 >> 2] | 0) + (gb + 32634 | 0);
 HEAP32[gb + 644 >> 2] = (HEAP32[gb + 644 >> 2] | 0) + (gb + 32657 | 0);
 HEAP32[gb + 648 >> 2] = (HEAP32[gb + 648 >> 2] | 0) + (gb + 32663 | 0);
 HEAP32[gb + 660 >> 2] = (HEAP32[gb + 660 >> 2] | 0) + (gb + 32687 | 0);
 HEAP32[gb + 664 >> 2] = (HEAP32[gb + 664 >> 2] | 0) + (gb + 32693 | 0);
 HEAP32[gb + 676 >> 2] = (HEAP32[gb + 676 >> 2] | 0) + (gb + 32717 | 0);
 HEAP32[gb + 680 >> 2] = (HEAP32[gb + 680 >> 2] | 0) + (gb + 32723 | 0);
 HEAP32[gb + 692 >> 2] = (HEAP32[gb + 692 >> 2] | 0) + (gb + 32747 | 0);
 HEAP32[gb + 696 >> 2] = (HEAP32[gb + 696 >> 2] | 0) + (gb + 32754 | 0);
 HEAP32[gb + 708 >> 2] = (HEAP32[gb + 708 >> 2] | 0) + (gb + 32779 | 0);
 HEAP32[gb + 712 >> 2] = (HEAP32[gb + 712 >> 2] | 0) + (gb + 32786 | 0);
 HEAP32[gb + 724 >> 2] = (HEAP32[gb + 724 >> 2] | 0) + (gb + 32811 | 0);
 HEAP32[gb + 728 >> 2] = (HEAP32[gb + 728 >> 2] | 0) + (gb + 32817 | 0);
 HEAP32[gb + 740 >> 2] = (HEAP32[gb + 740 >> 2] | 0) + (gb + 32853 | 0);
 HEAP32[gb + 744 >> 2] = (HEAP32[gb + 744 >> 2] | 0) + (gb + 32859 | 0);
 HEAP32[gb + 756 >> 2] = (HEAP32[gb + 756 >> 2] | 0) + (gb + 32895 | 0);
 HEAP32[gb + 760 >> 2] = (HEAP32[gb + 760 >> 2] | 0) + (gb + 32901 | 0);
 HEAP32[gb + 772 >> 2] = (HEAP32[gb + 772 >> 2] | 0) + (gb + 32937 | 0);
 HEAP32[gb + 776 >> 2] = (HEAP32[gb + 776 >> 2] | 0) + (gb + 32944 | 0);
 HEAP32[gb + 788 >> 2] = (HEAP32[gb + 788 >> 2] | 0) + (gb + 32981 | 0);
 HEAP32[gb + 792 >> 2] = (HEAP32[gb + 792 >> 2] | 0) + (gb + 32988 | 0);
 HEAP32[gb + 804 >> 2] = (HEAP32[gb + 804 >> 2] | 0) + (gb + 33025 | 0);
 HEAP32[gb + 808 >> 2] = (HEAP32[gb + 808 >> 2] | 0) + (gb + 33032 | 0);
 runPostSets1();
}

function _modem_demodulate_sqam32($_q, $_x, $_sym_out) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 $_sym_out = $_sym_out | 0;
 var $$byval_copy11 = 0, $0 = 0, $1 = 0, $104 = 0.0, $105 = 0.0, $107 = 0, $113 = 0.0, $114 = 0.0, $116 = 0, $122 = 0.0, $126 = 0, $127 = 0, $130 = 0, $131 = 0, $14 = 0.0, $17 = 0, $2 = 0, $3 = 0, $32 = 0, $33 = 0, $34 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $47 = 0.0, $48 = 0.0, $5 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $57 = 0, $6 = 0, $64 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $77 = 0.0, $78 = 0.0, $8 = 0, $80 = 0, $86 = 0.0, $87 = 0.0, $89 = 0, $9 = 0.0, $95 = 0.0, $96 = 0.0, $98 = 0, $dmin$1$1 = 0.0, $dmin$1$2 = 0.0, $dmin$1$3 = 0.0, $dmin$1$4 = 0.0, $dmin$1$5 = 0.0, $dmin$1$6 = 0.0, $x_prime$sroa$0$0 = 0.0, $x_prime$sroa$10$0 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy11 = sp + 72 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp;
 $4 = sp + 64 | 0;
 $5 = sp + 56 | 0;
 $6 = sp + 48 | 0;
 $7 = sp + 40 | 0;
 $8 = sp + 32 | 0;
 $9 = +HEAPF32[$_x >> 2];
 $14 = +HEAPF32[$_x + 4 >> 2];
 $17 = ($9 < 0.0 & 1) << 1 | $14 < 0.0;
 switch ($17 | 0) {
 case 0:
  {
   $x_prime$sroa$0$0 = $9;
   $x_prime$sroa$10$0 = $14;
   break;
  }
 case 1:
  {
   HEAPF32[$5 >> 2] = $9;
   HEAPF32[$5 + 4 >> 2] = $14;
   HEAP32[$$byval_copy11 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$$byval_copy11 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
   _conjf($4, $$byval_copy11);
   $x_prime$sroa$0$0 = +HEAPF32[$4 >> 2];
   $x_prime$sroa$10$0 = +HEAPF32[$4 + 4 >> 2];
   break;
  }
 case 2:
  {
   HEAPF32[$7 >> 2] = $9;
   HEAPF32[$7 + 4 >> 2] = $14;
   HEAP32[$$byval_copy11 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$$byval_copy11 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
   _conjf($6, $$byval_copy11);
   $x_prime$sroa$0$0 = -+HEAPF32[$6 >> 2];
   $x_prime$sroa$10$0 = -+HEAPF32[$6 + 4 >> 2];
   break;
  }
 case 3:
  {
   $x_prime$sroa$0$0 = -$9;
   $x_prime$sroa$10$0 = -$14;
   break;
  }
 default:
  {}
 }
 if (!($x_prime$sroa$0$0 >= 0.0)) ___assert_fail(gb + 32068 | 0, gb + 32092 | 0, 98, gb + 32121 | 0);
 if (!($x_prime$sroa$10$0 >= 0.0)) ___assert_fail(gb + 32145 | 0, gb + 32092 | 0, 99, gb + 32121 | 0);
 $32 = $_q + 100 | 0;
 $33 = $8 + 4 | 0;
 $34 = HEAP32[$32 >> 2] | 0;
 $39 = $x_prime$sroa$10$0 - +HEAPF32[$34 + 4 >> 2];
 HEAPF32[$8 >> 2] = $x_prime$sroa$0$0 - +HEAPF32[$34 >> 2];
 HEAPF32[$33 >> 2] = $39;
 HEAP32[$$byval_copy11 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$$byval_copy11 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
 $40 = +_cabsf($$byval_copy11);
 HEAP32[$_sym_out >> 2] = 0;
 $41 = HEAP32[$32 >> 2] | 0;
 $47 = $x_prime$sroa$10$0 - +HEAPF32[$41 + 12 >> 2];
 HEAPF32[$8 >> 2] = $x_prime$sroa$0$0 - +HEAPF32[$41 + 8 >> 2];
 HEAPF32[$33 >> 2] = $47;
 HEAP32[$$byval_copy11 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$$byval_copy11 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
 $48 = +_cabsf($$byval_copy11);
 if ($48 < $40) {
  HEAP32[$_sym_out >> 2] = 1;
  $dmin$1$1 = $48;
 } else $dmin$1$1 = $40;
 $71 = HEAP32[$32 >> 2] | 0;
 $77 = $x_prime$sroa$10$0 - +HEAPF32[$71 + 20 >> 2];
 HEAPF32[$8 >> 2] = $x_prime$sroa$0$0 - +HEAPF32[$71 + 16 >> 2];
 HEAPF32[$33 >> 2] = $77;
 HEAP32[$$byval_copy11 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$$byval_copy11 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
 $78 = +_cabsf($$byval_copy11);
 if ($78 < $dmin$1$1) {
  HEAP32[$_sym_out >> 2] = 2;
  $dmin$1$2 = $78;
 } else $dmin$1$2 = $dmin$1$1;
 $80 = HEAP32[$32 >> 2] | 0;
 $86 = $x_prime$sroa$10$0 - +HEAPF32[$80 + 28 >> 2];
 HEAPF32[$8 >> 2] = $x_prime$sroa$0$0 - +HEAPF32[$80 + 24 >> 2];
 HEAPF32[$33 >> 2] = $86;
 HEAP32[$$byval_copy11 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$$byval_copy11 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
 $87 = +_cabsf($$byval_copy11);
 if ($87 < $dmin$1$2) {
  HEAP32[$_sym_out >> 2] = 3;
  $dmin$1$3 = $87;
 } else $dmin$1$3 = $dmin$1$2;
 $89 = HEAP32[$32 >> 2] | 0;
 $95 = $x_prime$sroa$10$0 - +HEAPF32[$89 + 36 >> 2];
 HEAPF32[$8 >> 2] = $x_prime$sroa$0$0 - +HEAPF32[$89 + 32 >> 2];
 HEAPF32[$33 >> 2] = $95;
 HEAP32[$$byval_copy11 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$$byval_copy11 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
 $96 = +_cabsf($$byval_copy11);
 if ($96 < $dmin$1$3) {
  HEAP32[$_sym_out >> 2] = 4;
  $dmin$1$4 = $96;
 } else $dmin$1$4 = $dmin$1$3;
 $98 = HEAP32[$32 >> 2] | 0;
 $104 = $x_prime$sroa$10$0 - +HEAPF32[$98 + 44 >> 2];
 HEAPF32[$8 >> 2] = $x_prime$sroa$0$0 - +HEAPF32[$98 + 40 >> 2];
 HEAPF32[$33 >> 2] = $104;
 HEAP32[$$byval_copy11 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$$byval_copy11 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
 $105 = +_cabsf($$byval_copy11);
 if ($105 < $dmin$1$4) {
  HEAP32[$_sym_out >> 2] = 5;
  $dmin$1$5 = $105;
 } else $dmin$1$5 = $dmin$1$4;
 $107 = HEAP32[$32 >> 2] | 0;
 $113 = $x_prime$sroa$10$0 - +HEAPF32[$107 + 52 >> 2];
 HEAPF32[$8 >> 2] = $x_prime$sroa$0$0 - +HEAPF32[$107 + 48 >> 2];
 HEAPF32[$33 >> 2] = $113;
 HEAP32[$$byval_copy11 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$$byval_copy11 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
 $114 = +_cabsf($$byval_copy11);
 if ($114 < $dmin$1$5) {
  HEAP32[$_sym_out >> 2] = 6;
  $dmin$1$6 = $114;
 } else $dmin$1$6 = $dmin$1$5;
 $116 = HEAP32[$32 >> 2] | 0;
 $122 = $x_prime$sroa$10$0 - +HEAPF32[$116 + 60 >> 2];
 HEAPF32[$8 >> 2] = $x_prime$sroa$0$0 - +HEAPF32[$116 + 56 >> 2];
 HEAPF32[$33 >> 2] = $122;
 HEAP32[$$byval_copy11 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$$byval_copy11 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
 if (+_cabsf($$byval_copy11) < $dmin$1$6) {
  HEAP32[$_sym_out >> 2] = 7;
  $127 = 7;
 } else $127 = HEAP32[$_sym_out >> 2] | 0;
 $126 = $127 | $17 << 3;
 HEAP32[$_sym_out >> 2] = $126;
 $52 = $_q + 92 | 0;
 $130 = $127 & 7;
 $131 = HEAP32[$32 >> 2] | 0;
 $51 = +HEAPF32[$131 + ($130 << 3) >> 2];
 $53 = +HEAPF32[$131 + ($130 << 3) + 4 >> 2];
 switch ($126 >>> 3 & 3 | 0) {
 case 0:
  {
   HEAPF32[$52 >> 2] = $51;
   HEAPF32[$_q + 96 >> 2] = $53;
   $69 = $_q + 88 | 0;
   $70 = $_q + 84 | 0;
   HEAPF32[$70 >> 2] = $9;
   HEAPF32[$69 >> 2] = $14;
   STACKTOP = sp;
   return;
  }
 case 1:
  {
   HEAPF32[$1 >> 2] = $51;
   HEAPF32[$1 + 4 >> 2] = $53;
   HEAP32[$$byval_copy11 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$$byval_copy11 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   _conjf($0, $$byval_copy11);
   $57 = HEAP32[$0 + 4 >> 2] | 0;
   HEAP32[$52 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$_q + 96 >> 2] = $57;
   $69 = $_q + 88 | 0;
   $70 = $_q + 84 | 0;
   HEAPF32[$70 >> 2] = $9;
   HEAPF32[$69 >> 2] = $14;
   STACKTOP = sp;
   return;
  }
 case 2:
  {
   HEAPF32[$3 >> 2] = $51;
   HEAPF32[$3 + 4 >> 2] = $53;
   HEAP32[$$byval_copy11 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy11 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   _conjf($2, $$byval_copy11);
   $64 = -+HEAPF32[$2 + 4 >> 2];
   HEAPF32[$52 >> 2] = -+HEAPF32[$2 >> 2];
   HEAPF32[$_q + 96 >> 2] = $64;
   $69 = $_q + 88 | 0;
   $70 = $_q + 84 | 0;
   HEAPF32[$70 >> 2] = $9;
   HEAPF32[$69 >> 2] = $14;
   STACKTOP = sp;
   return;
  }
 case 3:
  {
   HEAPF32[$52 >> 2] = -$51;
   HEAPF32[$_q + 96 >> 2] = -$53;
   $69 = $_q + 88 | 0;
   $70 = $_q + 84 | 0;
   HEAPF32[$70 >> 2] = $9;
   HEAPF32[$69 >> 2] = $14;
   STACKTOP = sp;
   return;
  }
 default:
  {}
 }
}

function _flexframesync_debug_print($_q, $_filename) {
 $_q = $_q | 0;
 $_filename = $_filename | 0;
 var $$pre = 0, $$pre21 = 0, $$pre22 = 0, $$pre23 = 0, $11 = 0.0, $14 = 0.0, $16 = 0, $17 = 0, $19 = 0.0, $22 = 0.0, $24 = 0, $27 = 0.0, $30 = 0.0, $32 = 0, $33 = 0, $35 = 0.0, $38 = 0.0, $4 = 0, $40 = 0, $43 = 0.0, $46 = 0.0, $47 = 0, $50 = 0, $53 = 0, $55 = 0.0, $58 = 0.0, $62 = 0, $65 = 0.0, $68 = 0.0, $71 = 0, $74 = 0, $77 = 0, $79 = 0.0, $8 = 0, $82 = 0.0, $86 = 0, $89 = 0.0, $92 = 0.0, $i$016 = 0, $rc = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer14 = 0, $vararg_buffer19 = 0, $vararg_buffer24 = 0, $vararg_buffer29 = 0, $vararg_buffer32 = 0, $vararg_buffer37 = 0, $vararg_buffer4 = 0, $vararg_buffer42 = 0, $vararg_buffer45 = 0, $vararg_buffer50 = 0, $vararg_buffer55 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer55 = sp + 248 | 0;
 $vararg_buffer50 = sp + 224 | 0;
 $vararg_buffer45 = sp + 200 | 0;
 $vararg_buffer42 = sp + 192 | 0;
 $vararg_buffer37 = sp + 168 | 0;
 $vararg_buffer32 = sp + 144 | 0;
 $vararg_buffer29 = sp + 136 | 0;
 $vararg_buffer24 = sp + 112 | 0;
 $vararg_buffer19 = sp + 88 | 0;
 $vararg_buffer14 = sp + 64 | 0;
 $vararg_buffer9 = sp + 40 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $rc = sp + 252 | 0;
 if (!(HEAP32[$_q + 208 >> 2] | 0)) {
  _fwrite(gb + 26506 | 0, 90, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  STACKTOP = sp;
  return;
 }
 $4 = _fopen($_filename, gb + 36856 | 0) | 0;
 HEAP32[$vararg_buffer >> 2] = $_filename;
 _fprintf($4, gb + 28120 | 0, $vararg_buffer) | 0;
 _fwrite(gb + 37424 | 0, 2, 1, $4) | 0;
 _fwrite(gb + 36995 | 0, 11, 1, $4) | 0;
 _fwrite(gb + 28147 | 0, 12, 1, $4) | 0;
 HEAP32[$vararg_buffer1 >> 2] = 2e3;
 _fprintf($4, gb + 37007 | 0, $vararg_buffer1) | 0;
 _fwrite(gb + 26597 | 0, 54, 1, $4) | 0;
 _fwrite(gb + 37233 | 0, 16, 1, $4) | 0;
 _windowcf_read(HEAP32[$_q + 216 >> 2] | 0, $rc);
 $i$016 = 0;
 do {
  $8 = HEAP32[$rc >> 2] | 0;
  $11 = +HEAPF32[$8 + ($i$016 << 3) >> 2];
  $14 = +HEAPF32[$8 + ($i$016 << 3) + 4 >> 2];
  $i$016 = $i$016 + 1 | 0;
  HEAP32[$vararg_buffer4 >> 2] = $i$016;
  HEAPF64[$vararg_buffer4 + 8 >> 3] = $11;
  HEAPF64[$vararg_buffer4 + 16 >> 3] = $14;
  _fprintf($4, gb + 37250 | 0, $vararg_buffer4) | 0;
 } while (($i$016 | 0) != 2e3);
 _fwrite(gb + 37424 | 0, 2, 1, $4) | 0;
 _fwrite(gb + 26652 | 0, 18, 1, $4) | 0;
 _fwrite(gb + 28230 | 0, 48, 1, $4) | 0;
 _fwrite(gb + 39028 | 0, 9, 1, $4) | 0;
 _fwrite(gb + 37328 | 0, 24, 1, $4) | 0;
 _fwrite(gb + 37353 | 0, 30, 1, $4) | 0;
 _fwrite(gb + 26671 | 0, 27, 1, $4) | 0;
 $16 = HEAP32[$_q + 116 >> 2] | 0;
 HEAP32[$rc >> 2] = $16;
 $17 = $16;
 $19 = +HEAPF32[$17 >> 2];
 $22 = +HEAPF32[$17 + 4 >> 2];
 HEAP32[$vararg_buffer9 >> 2] = 1;
 HEAPF64[$vararg_buffer9 + 8 >> 3] = $19;
 HEAPF64[$vararg_buffer9 + 16 >> 3] = $22;
 _fprintf($4, gb + 26699 | 0, $vararg_buffer9) | 0;
 $24 = 1;
 do {
  $$pre = HEAP32[$rc >> 2] | 0;
  $27 = +HEAPF32[$$pre + ($24 << 3) >> 2];
  $30 = +HEAPF32[$$pre + ($24 << 3) + 4 >> 2];
  $24 = $24 + 1 | 0;
  HEAP32[$vararg_buffer14 >> 2] = $24;
  HEAPF64[$vararg_buffer14 + 8 >> 3] = $27;
  HEAPF64[$vararg_buffer14 + 16 >> 3] = $30;
  _fprintf($4, gb + 26699 | 0, $vararg_buffer14) | 0;
 } while (($24 | 0) != 64);
 _fwrite(gb + 26739 | 0, 27, 1, $4) | 0;
 $32 = HEAP32[$_q + 120 >> 2] | 0;
 HEAP32[$rc >> 2] = $32;
 $33 = $32;
 $35 = +HEAPF32[$33 >> 2];
 $38 = +HEAPF32[$33 + 4 >> 2];
 HEAP32[$vararg_buffer19 >> 2] = 1;
 HEAPF64[$vararg_buffer19 + 8 >> 3] = $35;
 HEAPF64[$vararg_buffer19 + 16 >> 3] = $38;
 _fprintf($4, gb + 26767 | 0, $vararg_buffer19) | 0;
 $40 = 1;
 do {
  $$pre21 = HEAP32[$rc >> 2] | 0;
  $43 = +HEAPF32[$$pre21 + ($40 << 3) >> 2];
  $46 = +HEAPF32[$$pre21 + ($40 << 3) + 4 >> 2];
  $40 = $40 + 1 | 0;
  HEAP32[$vararg_buffer24 >> 2] = $40;
  HEAPF64[$vararg_buffer24 + 8 >> 3] = $43;
  HEAPF64[$vararg_buffer24 + 16 >> 3] = $46;
  _fprintf($4, gb + 26767 | 0, $vararg_buffer24) | 0;
 } while (($40 | 0) != 64);
 $47 = $_q + 140 | 0;
 HEAP32[$vararg_buffer29 >> 2] = HEAP32[$47 >> 2];
 _fprintf($4, gb + 26807 | 0, $vararg_buffer29) | 0;
 $50 = HEAP32[$_q + 136 >> 2] | 0;
 HEAP32[$rc >> 2] = $50;
 if (HEAP32[$47 >> 2] | 0) {
  $53 = $50;
  $55 = +HEAPF32[$53 >> 2];
  $58 = +HEAPF32[$53 + 4 >> 2];
  HEAP32[$vararg_buffer32 >> 2] = 1;
  HEAPF64[$vararg_buffer32 + 8 >> 3] = $55;
  HEAPF64[$vararg_buffer32 + 16 >> 3] = $58;
  _fprintf($4, gb + 26834 | 0, $vararg_buffer32) | 0;
  if ((HEAP32[$47 >> 2] | 0) >>> 0 > 1) {
   $62 = 1;
   do {
    $$pre22 = HEAP32[$rc >> 2] | 0;
    $65 = +HEAPF32[$$pre22 + ($62 << 3) >> 2];
    $68 = +HEAPF32[$$pre22 + ($62 << 3) + 4 >> 2];
    $62 = $62 + 1 | 0;
    HEAP32[$vararg_buffer37 >> 2] = $62;
    HEAPF64[$vararg_buffer37 + 8 >> 3] = $65;
    HEAPF64[$vararg_buffer37 + 16 >> 3] = $68;
    _fprintf($4, gb + 26834 | 0, $vararg_buffer37) | 0;
   } while ($62 >>> 0 < (HEAP32[$47 >> 2] | 0) >>> 0);
  }
 }
 $71 = $_q + 172 | 0;
 HEAP32[$vararg_buffer42 >> 2] = HEAP32[$71 >> 2];
 _fprintf($4, gb + 26872 | 0, $vararg_buffer42) | 0;
 $74 = HEAP32[$_q + 168 >> 2] | 0;
 HEAP32[$rc >> 2] = $74;
 if (HEAP32[$71 >> 2] | 0) {
  $77 = $74;
  $79 = +HEAPF32[$77 >> 2];
  $82 = +HEAPF32[$77 + 4 >> 2];
  HEAP32[$vararg_buffer45 >> 2] = 1;
  HEAPF64[$vararg_buffer45 + 8 >> 3] = $79;
  HEAPF64[$vararg_buffer45 + 16 >> 3] = $82;
  _fprintf($4, gb + 26900 | 0, $vararg_buffer45) | 0;
  if ((HEAP32[$71 >> 2] | 0) >>> 0 > 1) {
   $86 = 1;
   do {
    $$pre23 = HEAP32[$rc >> 2] | 0;
    $89 = +HEAPF32[$$pre23 + ($86 << 3) >> 2];
    $92 = +HEAPF32[$$pre23 + ($86 << 3) + 4 >> 2];
    $86 = $86 + 1 | 0;
    HEAP32[$vararg_buffer50 >> 2] = $86;
    HEAPF64[$vararg_buffer50 + 8 >> 3] = $89;
    HEAPF64[$vararg_buffer50 + 16 >> 3] = $92;
    _fprintf($4, gb + 26900 | 0, $vararg_buffer50) | 0;
   } while ($86 >>> 0 < (HEAP32[$71 >> 2] | 0) >>> 0);
  }
 }
 _fwrite(gb + 26939 | 0, 20, 1, $4) | 0;
 _fwrite(gb + 26960 | 0, 45, 1, $4) | 0;
 _fwrite(gb + 27006 | 0, 20, 1, $4) | 0;
 _fwrite(gb + 27027 | 0, 28, 1, $4) | 0;
 _fwrite(gb + 39028 | 0, 9, 1, $4) | 0;
 _fwrite(gb + 27056 | 0, 23, 1, $4) | 0;
 _fwrite(gb + 39014 | 0, 13, 1, $4) | 0;
 _fwrite(gb + 27080 | 0, 34, 1, $4) | 0;
 _fwrite(gb + 27115 | 0, 20, 1, $4) | 0;
 _fwrite(gb + 27136 | 0, 47, 1, $4) | 0;
 _fwrite(gb + 27006 | 0, 20, 1, $4) | 0;
 _fwrite(gb + 27027 | 0, 28, 1, $4) | 0;
 _fwrite(gb + 39028 | 0, 9, 1, $4) | 0;
 _fwrite(gb + 27056 | 0, 23, 1, $4) | 0;
 _fwrite(gb + 39014 | 0, 13, 1, $4) | 0;
 _fwrite(gb + 27184 | 0, 35, 1, $4) | 0;
 _fwrite(gb + 37424 | 0, 2, 1, $4) | 0;
 _fclose($4) | 0;
 HEAP32[$vararg_buffer55 >> 2] = $_filename;
 _printf(gb + 27220 | 0, $vararg_buffer55) | 0;
 STACKTOP = sp;
 return;
}

function _qdetector_cccf_execute_seek($_q, $_x) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 var $$byval_copy2 = 0, $0 = 0, $1 = 0, $100 = 0, $103 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $111 = 0, $116 = 0, $12 = 0, $124 = 0, $128 = 0, $134 = 0, $135 = 0, $139 = 0, $15 = 0.0, $17 = 0.0, $2 = 0, $20 = 0, $24 = 0, $25 = 0, $3 = 0, $30 = 0, $34 = 0.0, $37 = 0, $38 = 0.0, $4 = 0, $42 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $63 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $70 = 0.0, $72 = 0.0, $73 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $84 = 0.0, $85 = 0.0, $9 = 0, $90 = 0, $93 = 0.0, $94 = 0.0, $99 = 0, $i$03 = 0, $i$17 = 0, $offset$016 = 0, $rxy_index$0$lcssa = 0, $rxy_index$014 = 0, $rxy_index$1$lcssa = 0, $rxy_index$15 = 0, $rxy_index$2 = 0, $rxy_offset$0$lcssa = 0, $rxy_offset$015 = 0, $rxy_offset$1$lcssa = 0, $rxy_offset$16 = 0, $rxy_offset$2 = 0, $rxy_peak$0$lcssa = 0.0, $rxy_peak$013 = 0.0, $rxy_peak$1$lcssa = 0.0, $rxy_peak$14 = 0.0, $rxy_peak$2 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy2 = sp + 40 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp;
 $5 = HEAP32[$_x >> 2] | 0;
 $7 = HEAP32[$_x + 4 >> 2] | 0;
 $8 = $_q + 44 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 HEAP32[$8 >> 2] = $9 + 1;
 $11 = $_q + 16 | 0;
 $12 = HEAP32[$11 >> 2] | 0;
 HEAP32[$12 + ($9 << 3) >> 2] = $5;
 HEAP32[$12 + ($9 << 3) + 4 >> 2] = $7;
 $15 = (HEAP32[tempDoublePtr >> 2] = $5, +HEAPF32[tempDoublePtr >> 2]);
 $17 = (HEAP32[tempDoublePtr >> 2] = $7, +HEAPF32[tempDoublePtr >> 2]);
 $20 = $_q + 64 | 0;
 HEAPF32[$20 >> 2] = +HEAPF32[$20 >> 2] + ($15 * $15 + $17 * $17);
 $24 = $_q + 32 | 0;
 $25 = HEAP32[$24 >> 2] | 0;
 if ((HEAP32[$8 >> 2] | 0) >>> 0 < $25 >>> 0) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$8 >> 2] = $25 >>> 1;
 _fft_execute(HEAP32[$_q + 36 >> 2] | 0);
 $30 = $_q + 60 | 0;
 $34 = +Math_sqrt(+(+HEAPF32[$30 >> 2] + +HEAPF32[$20 >> 2]));
 $37 = HEAP32[$24 >> 2] | 0;
 $38 = +($37 >>> 0);
 $42 = $38 * ($34 * +Math_sqrt(+(+((HEAP32[$_q >> 2] | 0) >>> 0) / $38)));
 $47 = 1.0 / ($42 * +Math_sqrt(+(+HEAPF32[$_q + 12 >> 2])));
 $48 = $_q + 52 | 0;
 $49 = HEAP32[$48 >> 2] | 0;
 $50 = 0 - $49 | 0;
 if (($49 | 0) < ($50 | 0)) {
  $124 = $37;
  $rxy_index$0$lcssa = 0;
  $rxy_offset$0$lcssa = 0;
  $rxy_peak$0$lcssa = 0.0;
 } else {
  $52 = $_q + 40 | 0;
  $53 = $_q + 28 | 0;
  $54 = $3 + 4 | 0;
  $55 = $4 + 4 | 0;
  $56 = $_q + 20 | 0;
  $57 = $_q + 8 | 0;
  $58 = $1 + 4 | 0;
  $59 = $0 + 4 | 0;
  $60 = $2 + 4 | 0;
  $61 = $_q + 24 | 0;
  $63 = $37;
  $offset$016 = $50;
  $rxy_index$014 = 0;
  $rxy_offset$015 = 0;
  $rxy_peak$013 = 0.0;
  while (1) {
   if ($63 | 0) {
    $66 = $63;
    $i$03 = 0;
    do {
     $67 = (($i$03 - $offset$016 + $66 | 0) >>> 0) % ($66 >>> 0) | 0;
     $68 = HEAP32[$56 >> 2] | 0;
     $70 = +HEAPF32[$68 + ($i$03 << 3) >> 2];
     $72 = +HEAPF32[$68 + ($i$03 << 3) + 4 >> 2];
     $73 = HEAP32[$57 >> 2] | 0;
     $77 = HEAP32[$73 + ($67 << 3) + 4 >> 2] | 0;
     HEAP32[$1 >> 2] = HEAP32[$73 + ($67 << 3) >> 2];
     HEAP32[$58 >> 2] = $77;
     HEAP32[$$byval_copy2 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$$byval_copy2 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
     _conjf($0, $$byval_copy2);
     $78 = +HEAPF32[$0 >> 2];
     $79 = +HEAPF32[$59 >> 2];
     $84 = $70 * $78 - $72 * $79;
     $85 = $72 * $78 + $70 * $79;
     if (($84 != $84 | 0.0 != 0.0) & ($85 != $85 | 0.0 != 0.0)) {
      ___mulsc3($2, $70, $72, $78, $79);
      $93 = +HEAPF32[$2 >> 2];
      $94 = +HEAPF32[$60 >> 2];
     } else {
      $93 = $84;
      $94 = $85;
     }
     $90 = HEAP32[$61 >> 2] | 0;
     HEAPF32[$90 + ($i$03 << 3) >> 2] = $93;
     HEAPF32[$90 + ($i$03 << 3) + 4 >> 2] = $94;
     $i$03 = $i$03 + 1 | 0;
     $66 = HEAP32[$24 >> 2] | 0;
    } while ($i$03 >>> 0 < $66 >>> 0);
   }
   _fft_execute(HEAP32[$52 >> 2] | 0);
   $99 = HEAP32[$53 >> 2] | 0;
   $100 = HEAP32[$24 >> 2] | 0;
   HEAPF32[$3 >> 2] = $47;
   HEAPF32[$54 >> 2] = 0.0;
   HEAP32[$$byval_copy2 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy2 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   _liquid_vectorcf_mulscalar($99, $100, $$byval_copy2, $99);
   if (!(HEAP32[$24 >> 2] | 0)) {
    $139 = 0;
    $rxy_index$1$lcssa = $rxy_index$014;
    $rxy_offset$1$lcssa = $rxy_offset$015;
    $rxy_peak$1$lcssa = $rxy_peak$013;
   } else {
    $i$17 = 0;
    $rxy_index$15 = $rxy_index$014;
    $rxy_offset$16 = $rxy_offset$015;
    $rxy_peak$14 = $rxy_peak$013;
    while (1) {
     $103 = HEAP32[$53 >> 2] | 0;
     $107 = HEAP32[$103 + ($i$17 << 3) + 4 >> 2] | 0;
     HEAP32[$4 >> 2] = HEAP32[$103 + ($i$17 << 3) >> 2];
     HEAP32[$55 >> 2] = $107;
     HEAP32[$$byval_copy2 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$$byval_copy2 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
     $108 = +_cabsf($$byval_copy2);
     $109 = $108 > $rxy_peak$14;
     $rxy_peak$2 = $109 ? $108 : $rxy_peak$14;
     $rxy_index$2 = $109 ? $i$17 : $rxy_index$15;
     $rxy_offset$2 = $109 ? $offset$016 : $rxy_offset$16;
     $i$17 = $i$17 + 1 | 0;
     $111 = HEAP32[$24 >> 2] | 0;
     if ($i$17 >>> 0 >= $111 >>> 0) {
      $139 = $111;
      $rxy_index$1$lcssa = $rxy_index$2;
      $rxy_offset$1$lcssa = $rxy_offset$2;
      $rxy_peak$1$lcssa = $rxy_peak$2;
      break;
     } else {
      $rxy_index$15 = $rxy_index$2;
      $rxy_offset$16 = $rxy_offset$2;
      $rxy_peak$14 = $rxy_peak$2;
     }
    }
   }
   if (($offset$016 | 0) < (HEAP32[$48 >> 2] | 0)) {
    $63 = $139;
    $offset$016 = $offset$016 + 1 | 0;
    $rxy_index$014 = $rxy_index$1$lcssa;
    $rxy_offset$015 = $rxy_offset$1$lcssa;
    $rxy_peak$013 = $rxy_peak$1$lcssa;
   } else {
    $124 = $139;
    $rxy_index$0$lcssa = $rxy_index$1$lcssa;
    $rxy_offset$0$lcssa = $rxy_offset$1$lcssa;
    $rxy_peak$0$lcssa = $rxy_peak$1$lcssa;
    break;
   }
  }
 }
 $116 = $_q + 56 | 0;
 HEAP32[$116 >> 2] = (HEAP32[$116 >> 2] | 0) + 1;
 if ($rxy_peak$0$lcssa > +HEAPF32[$_q + 48 >> 2]) if ($rxy_index$0$lcssa >>> 0 < ($124 - (HEAP32[$_q >> 2] | 0) | 0) >>> 0) {
  HEAP32[$_q + 88 >> 2] = 1;
  HEAP32[$_q + 68 >> 2] = $rxy_offset$0$lcssa;
  $128 = HEAP32[$11 >> 2] | 0;
  _memmove($128 | 0, $128 + ($rxy_index$0$lcssa << 3) | 0, $124 - $rxy_index$0$lcssa << 3 | 0) | 0;
  HEAP32[$8 >> 2] = (HEAP32[$24 >> 2] | 0) - $rxy_index$0$lcssa;
  STACKTOP = sp;
  return;
 }
 $134 = HEAP32[$11 >> 2] | 0;
 $135 = $124 >>> 1;
 _memmove($134 | 0, $134 + ($135 << 3) | 0, $135 << 3 | 0) | 0;
 HEAP32[$30 >> 2] = HEAP32[$20 >> 2];
 HEAPF32[$20 >> 2] = 0.0;
 STACKTOP = sp;
 return;
}

function _iirdes_dzpk_lp2bp($_zd, $_pd, $_n, $_f0, $_zdt, $_pdt) {
 $_zd = $_zd | 0;
 $_pd = $_pd | 0;
 $_n = $_n | 0;
 $_f0 = +$_f0;
 $_zdt = $_zdt | 0;
 $_pdt = $_pdt | 0;
 var $$byval_copy3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $103 = 0.0, $104 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $135 = 0.0, $137 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $147 = 0.0, $148 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $157 = 0.0, $162 = 0.0, $163 = 0.0, $168 = 0.0, $169 = 0.0, $175 = 0.0, $176 = 0.0, $178 = 0.0, $179 = 0.0, $185 = 0.0, $19 = 0.0, $2 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $5 = 0, $52 = 0.0, $53 = 0.0, $59 = 0.0, $6 = 0, $61 = 0.0, $64 = 0.0, $65 = 0.0, $7 = 0, $71 = 0.0, $72 = 0.0, $74 = 0.0, $75 = 0.0, $8 = 0, $81 = 0.0, $82 = 0, $87 = 0.0, $88 = 0.0, $9 = 0, $93 = 0.0, $94 = 0.0, $i$08 = 0, $or$cond = 0, $or$cond4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy3 = sp + 128 | 0;
 $0 = sp + 120 | 0;
 $1 = sp + 112 | 0;
 $2 = sp + 104 | 0;
 $3 = sp + 96 | 0;
 $4 = sp + 88 | 0;
 $5 = sp + 80 | 0;
 $6 = sp + 72 | 0;
 $7 = sp + 64 | 0;
 $8 = sp + 56 | 0;
 $9 = sp + 48 | 0;
 $10 = sp + 40 | 0;
 $11 = sp + 32 | 0;
 $12 = sp + 24 | 0;
 $13 = sp + 16 | 0;
 $14 = sp + 8 | 0;
 $15 = sp;
 $19 = +Math_cos(+($_f0 * 6.283185307179586));
 if (!$_n) {
  STACKTOP = sp;
  return;
 }
 $21 = $19 * $19;
 $22 = $0 + 4 | 0;
 $23 = $1 + 4 | 0;
 $24 = $3 + 4 | 0;
 $25 = $2 + 4 | 0;
 $26 = $4 + 4 | 0;
 $27 = $5 + 4 | 0;
 $28 = $7 + 4 | 0;
 $29 = $6 + 4 | 0;
 $30 = $8 + 4 | 0;
 $31 = $9 + 4 | 0;
 $32 = $11 + 4 | 0;
 $33 = $10 + 4 | 0;
 $34 = $12 + 4 | 0;
 $35 = $13 + 4 | 0;
 $36 = $15 + 4 | 0;
 $37 = $14 + 4 | 0;
 $i$08 = 0;
 do {
  $38 = $_zd + ($i$08 << 3) | 0;
  $39 = +HEAPF32[$38 >> 2];
  $40 = $_zd + ($i$08 << 3) + 4 | 0;
  $41 = +HEAPF32[$40 >> 2];
  $42 = $39 + 1.0;
  $43 = $41 + 0.0;
  $44 = $19 * $42;
  $45 = $19 * $43;
  $46 = $21 * $42;
  $47 = $21 * $43;
  $52 = $42 * $46 - $43 * $47;
  $53 = $46 * $43 + $42 * $47;
  $or$cond = ($52 != $52 | 0.0 != 0.0) & ($53 != $53 | 0.0 != 0.0);
  if ($or$cond) {
   ___mulsc3($0, $46, $47, $42, $43);
   $59 = +HEAPF32[$38 >> 2];
   $61 = +HEAPF32[$40 >> 2];
   $71 = +HEAPF32[$0 >> 2];
   $74 = +HEAPF32[$22 >> 2];
  } else {
   $59 = $39;
   $61 = $41;
   $71 = $52;
   $74 = $53;
  }
  $64 = $59 * 4.0 - $61 * 0.0;
  $65 = $59 * 0.0 + $61 * 4.0;
  if (($64 != $64 | 0.0 != 0.0) & ($65 != $65 | 0.0 != 0.0)) {
   ___mulsc3($1, 4.0, 0.0, $59, $61);
   $72 = +HEAPF32[$1 >> 2];
   $75 = +HEAPF32[$23 >> 2];
  } else {
   $72 = $64;
   $75 = $65;
  }
  HEAPF32[$3 >> 2] = $71 - $72;
  HEAPF32[$24 >> 2] = $74 - $75;
  HEAP32[$$byval_copy3 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  _csqrtf($2, $$byval_copy3);
  $81 = ($45 + +HEAPF32[$25 >> 2]) * .5;
  $82 = $i$08 << 1;
  HEAPF32[$_zdt + ($82 << 3) >> 2] = ($44 + +HEAPF32[$2 >> 2]) * .5;
  HEAPF32[$_zdt + ($82 << 3) + 4 >> 2] = $81;
  if ($or$cond) {
   ___mulsc3($4, $46, $47, $42, $43);
   $100 = +HEAPF32[$4 >> 2];
   $103 = +HEAPF32[$26 >> 2];
  } else {
   $100 = $52;
   $103 = $53;
  }
  $87 = +HEAPF32[$38 >> 2];
  $88 = +HEAPF32[$40 >> 2];
  $93 = $87 * 4.0 - $88 * 0.0;
  $94 = $87 * 0.0 + $88 * 4.0;
  if (($93 != $93 | 0.0 != 0.0) & ($94 != $94 | 0.0 != 0.0)) {
   ___mulsc3($5, 4.0, 0.0, $87, $88);
   $101 = +HEAPF32[$5 >> 2];
   $104 = +HEAPF32[$27 >> 2];
  } else {
   $101 = $93;
   $104 = $94;
  }
  HEAPF32[$7 >> 2] = $100 - $101;
  HEAPF32[$28 >> 2] = $103 - $104;
  HEAP32[$$byval_copy3 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
  _csqrtf($6, $$byval_copy3);
  $110 = ($45 - +HEAPF32[$29 >> 2]) * .5;
  $111 = $82 | 1;
  HEAPF32[$_zdt + ($111 << 3) >> 2] = ($44 - +HEAPF32[$6 >> 2]) * .5;
  HEAPF32[$_zdt + ($111 << 3) + 4 >> 2] = $110;
  $114 = $_pd + ($i$08 << 3) | 0;
  $115 = +HEAPF32[$114 >> 2];
  $116 = $_pd + ($i$08 << 3) + 4 | 0;
  $117 = +HEAPF32[$116 >> 2];
  $118 = $115 + 1.0;
  $119 = $117 + 0.0;
  $120 = $19 * $118;
  $121 = $19 * $119;
  $122 = $21 * $118;
  $123 = $21 * $119;
  $128 = $118 * $122 - $119 * $123;
  $129 = $122 * $119 + $118 * $123;
  $or$cond4 = ($128 != $128 | 0.0 != 0.0) & ($129 != $129 | 0.0 != 0.0);
  if ($or$cond4) {
   ___mulsc3($8, $122, $123, $118, $119);
   $135 = +HEAPF32[$114 >> 2];
   $137 = +HEAPF32[$116 >> 2];
   $147 = +HEAPF32[$8 >> 2];
   $150 = +HEAPF32[$30 >> 2];
  } else {
   $135 = $115;
   $137 = $117;
   $147 = $128;
   $150 = $129;
  }
  $140 = $135 * 4.0 - $137 * 0.0;
  $141 = $135 * 0.0 + $137 * 4.0;
  if (($140 != $140 | 0.0 != 0.0) & ($141 != $141 | 0.0 != 0.0)) {
   ___mulsc3($9, 4.0, 0.0, $135, $137);
   $148 = +HEAPF32[$9 >> 2];
   $151 = +HEAPF32[$31 >> 2];
  } else {
   $148 = $140;
   $151 = $141;
  }
  HEAPF32[$11 >> 2] = $147 - $148;
  HEAPF32[$32 >> 2] = $150 - $151;
  HEAP32[$$byval_copy3 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  _csqrtf($10, $$byval_copy3);
  $157 = ($121 + +HEAPF32[$33 >> 2]) * .5;
  HEAPF32[$_pdt + ($82 << 3) >> 2] = ($120 + +HEAPF32[$10 >> 2]) * .5;
  HEAPF32[$_pdt + ($82 << 3) + 4 >> 2] = $157;
  if ($or$cond4) {
   ___mulsc3($12, $122, $123, $118, $119);
   $175 = +HEAPF32[$12 >> 2];
   $178 = +HEAPF32[$34 >> 2];
  } else {
   $175 = $128;
   $178 = $129;
  }
  $162 = +HEAPF32[$114 >> 2];
  $163 = +HEAPF32[$116 >> 2];
  $168 = $162 * 4.0 - $163 * 0.0;
  $169 = $162 * 0.0 + $163 * 4.0;
  if (($168 != $168 | 0.0 != 0.0) & ($169 != $169 | 0.0 != 0.0)) {
   ___mulsc3($13, 4.0, 0.0, $162, $163);
   $176 = +HEAPF32[$13 >> 2];
   $179 = +HEAPF32[$35 >> 2];
  } else {
   $176 = $168;
   $179 = $169;
  }
  HEAPF32[$15 >> 2] = $175 - $176;
  HEAPF32[$36 >> 2] = $178 - $179;
  HEAP32[$$byval_copy3 >> 2] = HEAP32[$15 >> 2];
  HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$15 + 4 >> 2];
  _csqrtf($14, $$byval_copy3);
  $185 = ($121 - +HEAPF32[$37 >> 2]) * .5;
  HEAPF32[$_pdt + ($111 << 3) >> 2] = ($120 - +HEAPF32[$14 >> 2]) * .5;
  HEAPF32[$_pdt + ($111 << 3) + 4 >> 2] = $185;
  $i$08 = $i$08 + 1 | 0;
 } while (($i$08 | 0) != ($_n | 0));
 STACKTOP = sp;
 return;
}

function _ofdmframesync_execute_S0b($_q) {
 $_q = $_q | 0;
 var $$byval_copy4 = 0, $0 = 0, $1 = 0, $10 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0, $107 = 0.0, $109 = 0.0, $11 = 0, $114 = 0.0, $115 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $124 = 0.0, $126 = 0.0, $128 = 0.0, $130 = 0.0, $133 = 0.0, $134 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $145 = 0, $146 = 0.0, $147 = 0.0, $149 = 0.0, $15 = 0, $151 = 0.0, $154 = 0.0, $155 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $168 = 0.0, $19 = 0, $2 = 0, $3 = 0, $30 = 0, $34 = 0.0, $36 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $47 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $57 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $77 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $9 = 0, $91 = 0.0, $92 = 0.0, $98 = 0, $i$08 = 0, $i$14 = 0, $rc = 0, $s_hat = 0, $t0$sroa$0$0$lcssa = 0.0, $t0$sroa$0$06 = 0.0, $t0$sroa$6$0$lcssa = 0.0, $t0$sroa$6$05 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy4 = sp + 112 | 0;
 $rc = sp + 88 | 0;
 $s_hat = sp + 64 | 0;
 $0 = sp + 104 | 0;
 $1 = sp + 96 | 0;
 $2 = sp + 80 | 0;
 $3 = sp + 72 | 0;
 $4 = sp + 56 | 0;
 $5 = sp + 48 | 0;
 $6 = sp + 40 | 0;
 $7 = sp + 32 | 0;
 $8 = sp + 24 | 0;
 $9 = sp + 16 | 0;
 $10 = sp + 8 | 0;
 $11 = sp;
 $12 = $_q + 124 | 0;
 $14 = (HEAP32[$12 >> 2] | 0) + 1 | 0;
 HEAP32[$12 >> 2] = $14;
 $15 = $_q + 4 | 0;
 if ($14 >>> 0 < (HEAP32[$15 >> 2] | 0) >>> 0) {
  STACKTOP = sp;
  return;
 }
 $19 = $_q + 8 | 0;
 HEAP32[$12 >> 2] = (HEAP32[$19 >> 2] | 0) + (HEAP32[$_q >> 2] | 0) - (HEAP32[$_q + 132 >> 2] | 0);
 _windowcf_read(HEAP32[$_q + 60 >> 2] | 0, $rc);
 $30 = $_q + 88 | 0;
 _ofdmframesync_estimate_gain_S0($_q, (HEAP32[$rc >> 2] | 0) + (HEAP32[$19 >> 2] << 3) | 0, HEAP32[$30 >> 2] | 0);
 _ofdmframesync_S0_metrics($_q, HEAP32[$30 >> 2] | 0, $s_hat);
 $34 = +HEAPF32[$_q + 80 >> 2];
 $36 = $s_hat + 4 | 0;
 $38 = $34 * +HEAPF32[$s_hat >> 2];
 $39 = $34 * +HEAPF32[$36 >> 2];
 HEAPF32[$s_hat >> 2] = $38;
 HEAPF32[$36 >> 2] = $39;
 HEAPF32[$_q + 144 >> 2] = $38;
 HEAPF32[$_q + 148 >> 2] = $39;
 $47 = $39 + +HEAPF32[$_q + 140 >> 2];
 HEAPF32[$0 >> 2] = $38 + +HEAPF32[$_q + 136 >> 2];
 HEAPF32[$0 + 4 >> 2] = $47;
 HEAP32[$$byval_copy4 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 $49 = +_cargf($$byval_copy4);
 $50 = HEAP32[$15 >> 2] | 0;
 $57 = ~~+_roundf(+($49 * +($50 >>> 0) / 6.283185307179586));
 HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) - $57;
 if (!(HEAP32[$_q >> 2] | 0)) $66 = $50; else {
  $62 = $_q + 84 | 0;
  $63 = $2 + 4 | 0;
  $64 = $1 + 4 | 0;
  $i$08 = 0;
  do {
   $75 = HEAP32[$30 >> 2] | 0;
   $77 = +HEAPF32[$75 + ($i$08 << 3) >> 2];
   $79 = +HEAPF32[$75 + ($i$08 << 3) + 4 >> 2];
   $80 = HEAP32[$62 >> 2] | 0;
   $84 = HEAP32[$80 + ($i$08 << 3) + 4 >> 2] | 0;
   HEAP32[$2 >> 2] = HEAP32[$80 + ($i$08 << 3) >> 2];
   HEAP32[$63 >> 2] = $84;
   HEAP32[$$byval_copy4 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
   _conjf($1, $$byval_copy4);
   $85 = +HEAPF32[$1 >> 2];
   $86 = +HEAPF32[$64 >> 2];
   $91 = $77 * $85 - $79 * $86;
   $92 = $79 * $85 + $77 * $86;
   if (($91 != $91 | 0.0 != 0.0) & ($92 != $92 | 0.0 != 0.0)) ___mulsc3($3, $77, $79, $85, $86);
   $i$08 = $i$08 + 1 | 0;
  } while ($i$08 >>> 0 < (HEAP32[$_q >> 2] | 0) >>> 0);
  $66 = HEAP32[$15 >> 2] | 0;
 }
 if (!$66) {
  $t0$sroa$0$0$lcssa = 0.0;
  $t0$sroa$6$0$lcssa = 0.0;
 } else {
  $67 = $5 + 4 | 0;
  $68 = $4 + 4 | 0;
  $69 = $_q + 68 | 0;
  $70 = $6 + 4 | 0;
  $71 = $7 + 4 | 0;
  $72 = $9 + 4 | 0;
  $73 = $8 + 4 | 0;
  $74 = $10 + 4 | 0;
  $i$14 = 0;
  $t0$sroa$0$06 = 0.0;
  $t0$sroa$6$05 = 0.0;
  while (1) {
   $98 = HEAP32[$rc >> 2] | 0;
   $102 = HEAP32[$98 + ($i$14 << 3) + 4 >> 2] | 0;
   HEAP32[$5 >> 2] = HEAP32[$98 + ($i$14 << 3) >> 2];
   HEAP32[$67 >> 2] = $102;
   HEAP32[$$byval_copy4 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
   _conjf($4, $$byval_copy4);
   $103 = +HEAPF32[$4 >> 2];
   $104 = +HEAPF32[$68 >> 2];
   $105 = HEAP32[$69 >> 2] | 0;
   $107 = +HEAPF32[$105 + ($i$14 << 3) >> 2];
   $109 = +HEAPF32[$105 + ($i$14 << 3) + 4 >> 2];
   $114 = $103 * $107 - $104 * $109;
   $115 = $104 * $107 + $103 * $109;
   if (($114 != $114 | 0.0 != 0.0) & ($115 != $115 | 0.0 != 0.0)) {
    ___mulsc3($6, $103, $104, $107, $109);
    $128 = +HEAPF32[$6 >> 2];
    $130 = +HEAPF32[$70 >> 2];
   } else {
    $128 = $114;
    $130 = $115;
   }
   $120 = HEAP32[$15 >> 2] | 0;
   $121 = $120 + $i$14 | 0;
   $122 = HEAP32[$rc >> 2] | 0;
   $124 = +HEAPF32[$122 + ($121 << 3) >> 2];
   $126 = +HEAPF32[$122 + ($121 << 3) + 4 >> 2];
   $133 = $128 * $124 - $130 * $126;
   $134 = $130 * $124 + $128 * $126;
   if (($133 != $133 | 0.0 != 0.0) & ($134 != $134 | 0.0 != 0.0)) {
    ___mulsc3($7, $128, $130, $124, $126);
    $140 = HEAP32[$15 >> 2] | 0;
    $149 = +HEAPF32[$7 >> 2];
    $151 = +HEAPF32[$71 >> 2];
   } else {
    $140 = $120;
    $149 = $133;
    $151 = $134;
   }
   $139 = $140 + $i$14 | 0;
   $141 = HEAP32[$69 >> 2] | 0;
   $145 = HEAP32[$141 + ($139 << 3) + 4 >> 2] | 0;
   HEAP32[$9 >> 2] = HEAP32[$141 + ($139 << 3) >> 2];
   HEAP32[$72 >> 2] = $145;
   HEAP32[$$byval_copy4 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
   _conjf($8, $$byval_copy4);
   $146 = +HEAPF32[$8 >> 2];
   $147 = +HEAPF32[$73 >> 2];
   $154 = $149 * $146 - $151 * $147;
   $155 = $151 * $146 + $149 * $147;
   if (($154 != $154 | 0.0 != 0.0) & ($155 != $155 | 0.0 != 0.0)) {
    ___mulsc3($10, $149, $151, $146, $147);
    $161 = +HEAPF32[$10 >> 2];
    $163 = +HEAPF32[$74 >> 2];
   } else {
    $161 = $154;
    $163 = $155;
   }
   $160 = $t0$sroa$0$06 + $161;
   $162 = $t0$sroa$6$05 + $163;
   $i$14 = $i$14 + 1 | 0;
   if ($i$14 >>> 0 >= (HEAP32[$15 >> 2] | 0) >>> 0) {
    $t0$sroa$0$0$lcssa = $160;
    $t0$sroa$6$0$lcssa = $162;
    break;
   } else {
    $t0$sroa$0$06 = $160;
    $t0$sroa$6$05 = $162;
   }
  }
 }
 HEAPF32[$11 >> 2] = $t0$sroa$0$0$lcssa;
 HEAPF32[$11 + 4 >> 2] = $t0$sroa$6$0$lcssa;
 HEAP32[$$byval_copy4 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
 $168 = +_cargf($$byval_copy4);
 _nco_crcf_set_frequency(HEAP32[$_q + 108 >> 2] | 0, $168 / +((HEAP32[$15 >> 2] | 0) >>> 0));
 HEAP32[$_q + 104 >> 2] = 3;
 STACKTOP = sp;
 return;
}

function _interleaver_decode($_q, $_msg_enc, $_msg_dec) {
 $_q = $_q | 0;
 $_msg_enc = $_msg_enc | 0;
 $_msg_dec = $_msg_dec | 0;
 var $$lcssa = 0, $$lcssa50 = 0, $$lcssa51 = 0, $$lcssa52 = 0, $1 = 0, $10 = 0, $103 = 0, $104 = 0, $115 = 0, $117 = 0, $118 = 0, $120 = 0, $122 = 0, $123 = 0, $127 = 0, $128 = 0, $135 = 0, $136 = 0, $138 = 0, $14 = 0, $140 = 0, $15 = 0, $2 = 0, $21 = 0, $22 = 0, $27 = 0, $28 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $44 = 0, $47 = 0, $48 = 0, $52 = 0, $53 = 0, $59 = 0, $6 = 0, $60 = 0, $65 = 0, $66 = 0, $77 = 0, $79 = 0, $80 = 0, $82 = 0, $85 = 0, $86 = 0, $9 = 0, $90 = 0, $91 = 0, $97 = 0, $98 = 0, $i$03$i = 0, $i$03$i1 = 0, $i$03$i11 = 0, $i$03$i22 = 0, $m$02$i = 0, $m$02$i12 = 0, $m$02$i2 = 0, $m$02$i23 = 0, $m$1$i = 0, $m$1$i16 = 0, $m$1$i27 = 0, $m$1$i6 = 0, $m$2$i = 0, $m$2$i$lcssa = 0, $m$2$i18 = 0, $m$2$i18$lcssa = 0, $m$2$i29 = 0, $m$2$i29$lcssa = 0, $m$2$i8 = 0, $m$2$i8$lcssa = 0, $n$01$i = 0, $n$01$i13 = 0, $n$01$i24 = 0, $n$01$i3 = 0, $n$1$i = 0, $n$1$i15 = 0, $n$1$i26 = 0, $n$1$i5 = 0, $n$2$i = 0, $n$2$i$lcssa = 0, $n$2$i17 = 0, $n$2$i17$lcssa = 0, $n$2$i28 = 0, $n$2$i28$lcssa = 0, $n$2$i7 = 0, $n$2$i7$lcssa = 0, label = 0;
 _memmove($_msg_dec | 0, $_msg_enc | 0, HEAP32[$_q >> 2] | 0) | 0;
 $1 = $_q + 12 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if ($2 >>> 0 > 3) {
  $4 = HEAP32[$_q >> 2] | 0;
  $6 = HEAP32[$_q + 4 >> 2] | 0;
  $9 = (HEAP32[$_q + 8 >> 2] | 0) + 8 | 0;
  $10 = $4 >>> 1;
  if (!$10) label = 11; else {
   $i$03$i = 0;
   $m$02$i = 0;
   $n$01$i = ($4 >>> 0) / 3 | 0;
   while (1) {
    $m$1$i = $m$02$i;
    $n$1$i = $n$01$i;
    while (1) {
     $14 = (Math_imul($m$1$i, $9) | 0) + $n$1$i | 0;
     $15 = $m$1$i + 1 | 0;
     if (($15 | 0) == ($6 | 0)) {
      $m$2$i = 0;
      $n$2$i = (($n$1$i + 1 | 0) >>> 0) % ($9 >>> 0) | 0;
     } else {
      $m$2$i = $15;
      $n$2$i = $n$1$i;
     }
     if ($14 >>> 0 < $10 >>> 0) {
      $$lcssa52 = $14;
      $m$2$i$lcssa = $m$2$i;
      $n$2$i$lcssa = $n$2$i;
      break;
     } else {
      $m$1$i = $m$2$i;
      $n$1$i = $n$2$i;
     }
    }
    $21 = $_msg_dec + ($i$03$i << 1) | 0;
    $22 = HEAP8[$21 >> 0] | 0;
    $27 = $_msg_dec + ($$lcssa52 << 1 | 1) | 0;
    $28 = HEAP8[$27 >> 0] | 0;
    HEAP8[$21 >> 0] = $28 & 51 | $22 & 204;
    HEAP8[$27 >> 0] = $28 & 204 | $22 & 51;
    $39 = $i$03$i + 1 | 0;
    if (($39 | 0) == ($10 | 0)) break; else {
     $i$03$i = $39;
     $m$02$i = $m$2$i$lcssa;
     $n$01$i = $n$2$i$lcssa;
    }
   }
   $41 = HEAP32[$1 >> 2] | 0;
   label = 10;
  }
 } else {
  $41 = $2;
  label = 10;
 }
 if ((label | 0) == 10) if ($41 >>> 0 > 2) label = 11; else {
  $79 = $41;
  label = 19;
 }
 if ((label | 0) == 11) {
  $42 = HEAP32[$_q >> 2] | 0;
  $44 = HEAP32[$_q + 4 >> 2] | 0;
  $47 = (HEAP32[$_q + 8 >> 2] | 0) + 4 | 0;
  $48 = $42 >>> 1;
  if (!$48) label = 20; else {
   $i$03$i22 = 0;
   $m$02$i23 = 0;
   $n$01$i24 = ($42 >>> 0) / 3 | 0;
   while (1) {
    $m$1$i27 = $m$02$i23;
    $n$1$i26 = $n$01$i24;
    while (1) {
     $52 = (Math_imul($m$1$i27, $47) | 0) + $n$1$i26 | 0;
     $53 = $m$1$i27 + 1 | 0;
     if (($53 | 0) == ($44 | 0)) {
      $m$2$i29 = 0;
      $n$2$i28 = (($n$1$i26 + 1 | 0) >>> 0) % ($47 >>> 0) | 0;
     } else {
      $m$2$i29 = $53;
      $n$2$i28 = $n$1$i26;
     }
     if ($52 >>> 0 < $48 >>> 0) {
      $$lcssa51 = $52;
      $m$2$i29$lcssa = $m$2$i29;
      $n$2$i28$lcssa = $n$2$i28;
      break;
     } else {
      $m$1$i27 = $m$2$i29;
      $n$1$i26 = $n$2$i28;
     }
    }
    $59 = $_msg_dec + ($i$03$i22 << 1) | 0;
    $60 = HEAP8[$59 >> 0] | 0;
    $65 = $_msg_dec + ($$lcssa51 << 1 | 1) | 0;
    $66 = HEAP8[$65 >> 0] | 0;
    HEAP8[$59 >> 0] = $66 & 85 | $60 & 170;
    HEAP8[$65 >> 0] = $66 & 170 | $60 & 85;
    $77 = $i$03$i22 + 1 | 0;
    if (($77 | 0) == ($48 | 0)) break; else {
     $i$03$i22 = $77;
     $m$02$i23 = $m$2$i29$lcssa;
     $n$01$i24 = $n$2$i28$lcssa;
    }
   }
   $79 = HEAP32[$1 >> 2] | 0;
   label = 19;
  }
 }
 if ((label | 0) == 19) if ($79 >>> 0 > 1) label = 20; else {
  $117 = $79;
  label = 28;
 }
 if ((label | 0) == 20) {
  $80 = HEAP32[$_q >> 2] | 0;
  $82 = HEAP32[$_q + 4 >> 2] | 0;
  $85 = (HEAP32[$_q + 8 >> 2] | 0) + 2 | 0;
  $86 = $80 >>> 1;
  if ($86 | 0) {
   $i$03$i11 = 0;
   $m$02$i12 = 0;
   $n$01$i13 = ($80 >>> 0) / 3 | 0;
   while (1) {
    $m$1$i16 = $m$02$i12;
    $n$1$i15 = $n$01$i13;
    while (1) {
     $90 = (Math_imul($m$1$i16, $85) | 0) + $n$1$i15 | 0;
     $91 = $m$1$i16 + 1 | 0;
     if (($91 | 0) == ($82 | 0)) {
      $m$2$i18 = 0;
      $n$2$i17 = (($n$1$i15 + 1 | 0) >>> 0) % ($85 >>> 0) | 0;
     } else {
      $m$2$i18 = $91;
      $n$2$i17 = $n$1$i15;
     }
     if ($90 >>> 0 < $86 >>> 0) {
      $$lcssa50 = $90;
      $m$2$i18$lcssa = $m$2$i18;
      $n$2$i17$lcssa = $n$2$i17;
      break;
     } else {
      $m$1$i16 = $m$2$i18;
      $n$1$i15 = $n$2$i17;
     }
    }
    $97 = $_msg_dec + ($i$03$i11 << 1) | 0;
    $98 = HEAP8[$97 >> 0] | 0;
    $103 = $_msg_dec + ($$lcssa50 << 1 | 1) | 0;
    $104 = HEAP8[$103 >> 0] | 0;
    HEAP8[$97 >> 0] = $104 & 15 | $98 & 240;
    HEAP8[$103 >> 0] = $104 & 240 | $98 & 15;
    $115 = $i$03$i11 + 1 | 0;
    if (($115 | 0) == ($86 | 0)) break; else {
     $i$03$i11 = $115;
     $m$02$i12 = $m$2$i18$lcssa;
     $n$01$i13 = $n$2$i17$lcssa;
    }
   }
   $117 = HEAP32[$1 >> 2] | 0;
   label = 28;
  }
 }
 if ((label | 0) == 28) if (!$117) return;
 $118 = HEAP32[$_q >> 2] | 0;
 $120 = HEAP32[$_q + 4 >> 2] | 0;
 $122 = HEAP32[$_q + 8 >> 2] | 0;
 $123 = $118 >>> 1;
 if (!$123) return;
 $i$03$i1 = 0;
 $m$02$i2 = 0;
 $n$01$i3 = ($118 >>> 0) / 3 | 0;
 while (1) {
  $m$1$i6 = $m$02$i2;
  $n$1$i5 = $n$01$i3;
  while (1) {
   $127 = (Math_imul($m$1$i6, $122) | 0) + $n$1$i5 | 0;
   $128 = $m$1$i6 + 1 | 0;
   if (($128 | 0) == ($120 | 0)) {
    $m$2$i8 = 0;
    $n$2$i7 = (($n$1$i5 + 1 | 0) >>> 0) % ($122 >>> 0) | 0;
   } else {
    $m$2$i8 = $128;
    $n$2$i7 = $n$1$i5;
   }
   if ($127 >>> 0 < $123 >>> 0) {
    $$lcssa = $127;
    $m$2$i8$lcssa = $m$2$i8;
    $n$2$i7$lcssa = $n$2$i7;
    break;
   } else {
    $m$1$i6 = $m$2$i8;
    $n$1$i5 = $n$2$i7;
   }
  }
  $135 = $_msg_dec + ($$lcssa << 1 | 1) | 0;
  $136 = HEAP8[$135 >> 0] | 0;
  $138 = $_msg_dec + ($i$03$i1 << 1) | 0;
  HEAP8[$135 >> 0] = HEAP8[$138 >> 0] | 0;
  HEAP8[$138 >> 0] = $136;
  $140 = $i$03$i1 + 1 | 0;
  if (($140 | 0) == ($123 | 0)) break; else {
   $i$03$i1 = $140;
   $m$02$i2 = $m$2$i8$lcssa;
   $n$01$i3 = $n$2$i7$lcssa;
  }
 }
 return;
}

function _fec_conv_punctured_encode($_q, $_dec_msg_len, $_msg_dec, $_msg_enc) {
 $_q = $_q | 0;
 $_dec_msg_len = $_dec_msg_len | 0;
 $_msg_dec = $_msg_dec | 0;
 $_msg_enc = $_msg_enc | 0;
 var $$lcssa71 = 0, $$lcssa72 = 0, $$lcssa73 = 0, $$pre = 0, $$pre51 = 0, $1 = 0, $10 = 0, $106 = 0, $11 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $14 = 0, $19 = 0, $2 = 0, $21 = 0, $24 = 0, $3 = 0, $34 = 0, $36 = 0, $4 = 0, $46 = 0, $5 = 0, $52 = 0, $55 = 0, $57 = 0, $62 = 0, $65 = 0, $75 = 0, $77 = 0, $8 = 0, $87 = 0, $9 = 0, $93 = 0, $byte_out$0$lcssa = 0, $byte_out$040 = 0, $byte_out$135 = 0, $byte_out$2$lcssa = 0, $byte_out$2$lcssa$lcssa = 0, $byte_out$224 = 0, $byte_out$3 = 0, $byte_out$4$lcssa = 0, $byte_out$418 = 0, $byte_out$5$lcssa = 0, $byte_out$57 = 0, $byte_out$6 = 0, $byte_out$74 = 0, $i$039 = 0, $i$117 = 0, $j$034 = 0, $n$0$lcssa = 0, $n$037 = 0, $n$131 = 0, $n$2$lcssa = 0, $n$2$lcssa$lcssa = 0, $n$223 = 0, $n$3 = 0, $n$4$lcssa = 0, $n$414 = 0, $n$5$lcssa = 0, $n$56 = 0, $n$6 = 0, $n$7$lcssa = 0, $n$73 = 0, $p$0$lcssa = 0, $p$038 = 0, $p$132 = 0, $p$215 = 0, $r$022 = 0, $r$15 = 0, $sr$0$lcssa = 0, $sr$036 = 0, $sr$130 = 0, $sr$213 = 0, t$_P_init = 0, t$_Partab = 0;
 t$_P_init = g$_P_init() | 0;
 t$_Partab = g$_Partab() | 0;
 if (!$_dec_msg_len) {
  $byte_out$0$lcssa = 0;
  $n$0$lcssa = 0;
  $p$0$lcssa = 0;
  $sr$0$lcssa = 0;
 } else {
  $1 = $_q + 28 | 0;
  $2 = $_q + 36 | 0;
  $3 = $_q + 40 | 0;
  $4 = $_q + 24 | 0;
  $$pre = HEAP32[$1 >> 2] | 0;
  $byte_out$040 = 0;
  $i$039 = 0;
  $n$037 = 0;
  $p$038 = 0;
  $sr$036 = 0;
  while (1) {
   $14 = HEAPU8[$_msg_dec + $i$039 >> 0] | 0;
   $114 = $$pre;
   $21 = $$pre;
   $byte_out$135 = $byte_out$040;
   $j$034 = 0;
   $n$131 = $n$037;
   $p$132 = $p$038;
   $sr$130 = $sr$036;
   while (1) {
    $19 = $14 >>> (7 - $j$034 | 0) & 1 | $sr$130 << 1;
    if (!$21) {
     $115 = $114;
     $116 = 0;
     $byte_out$2$lcssa = $byte_out$135;
     $n$2$lcssa = $n$131;
    } else {
     $117 = $114;
     $byte_out$224 = $byte_out$135;
     $n$223 = $n$131;
     $r$022 = 0;
     while (1) {
      $24 = (Math_imul(HEAP32[$2 >> 2] | 0, $r$022) | 0) + $p$132 | 0;
      if (!(HEAP32[(HEAP32[$3 >> 2] | 0) + ($24 << 2) >> 2] | 0)) {
       $52 = $117;
       $byte_out$3 = $byte_out$224;
       $n$3 = $n$223;
      } else {
       $34 = HEAP32[(HEAP32[$4 >> 2] | 0) + ($r$022 << 2) >> 2] & $19;
       $36 = $34 >> 16 ^ $34;
       if (!(HEAP32[t$_P_init >> 2] | 0)) _partab_init();
       $46 = (HEAPU8[t$_Partab + (($36 >>> 8 ^ $36) & 255) >> 0] | 0 | ($byte_out$224 & 255) << 1) & 255;
       HEAP8[$_msg_enc + ($n$223 >>> 3) >> 0] = $46;
       $52 = HEAP32[$1 >> 2] | 0;
       $byte_out$3 = $46;
       $n$3 = $n$223 + 1 | 0;
      }
      $r$022 = $r$022 + 1 | 0;
      if ($r$022 >>> 0 >= $52 >>> 0) {
       $115 = $52;
       $116 = $52;
       $byte_out$2$lcssa = $byte_out$3;
       $n$2$lcssa = $n$3;
       break;
      } else {
       $117 = $52;
       $byte_out$224 = $byte_out$3;
       $n$223 = $n$3;
      }
     }
    }
    $55 = (($p$132 + 1 | 0) >>> 0) % ((HEAP32[$2 >> 2] | 0) >>> 0) | 0;
    $j$034 = $j$034 + 1 | 0;
    if (($j$034 | 0) == 8) {
     $$lcssa71 = $19;
     $$lcssa72 = $115;
     $$lcssa73 = $55;
     $byte_out$2$lcssa$lcssa = $byte_out$2$lcssa;
     $n$2$lcssa$lcssa = $n$2$lcssa;
     break;
    } else {
     $114 = $115;
     $21 = $116;
     $byte_out$135 = $byte_out$2$lcssa;
     $n$131 = $n$2$lcssa;
     $p$132 = $55;
     $sr$130 = $19;
    }
   }
   $57 = $i$039 + 1 | 0;
   if (($57 | 0) == ($_dec_msg_len | 0)) {
    $byte_out$0$lcssa = $byte_out$2$lcssa$lcssa;
    $n$0$lcssa = $n$2$lcssa$lcssa;
    $p$0$lcssa = $$lcssa73;
    $sr$0$lcssa = $$lcssa71;
    break;
   } else {
    $$pre = $$lcssa72;
    $byte_out$040 = $byte_out$2$lcssa$lcssa;
    $i$039 = $57;
    $n$037 = $n$2$lcssa$lcssa;
    $p$038 = $$lcssa73;
    $sr$036 = $$lcssa71;
   }
  }
 }
 $5 = $_q + 32 | 0;
 if ((HEAP32[$5 >> 2] | 0) == 1) {
  $byte_out$4$lcssa = $byte_out$0$lcssa;
  $n$4$lcssa = $n$0$lcssa;
 } else {
  $8 = $_q + 28 | 0;
  $9 = $_q + 36 | 0;
  $10 = $_q + 40 | 0;
  $11 = $_q + 24 | 0;
  $$pre51 = HEAP32[$8 >> 2] | 0;
  $113 = $$pre51;
  $62 = $$pre51;
  $byte_out$418 = $byte_out$0$lcssa;
  $i$117 = 0;
  $n$414 = $n$0$lcssa;
  $p$215 = $p$0$lcssa;
  $sr$213 = $sr$0$lcssa;
  while (1) {
   $sr$213 = $sr$213 << 1;
   if (!$62) {
    $118 = $113;
    $119 = 0;
    $byte_out$5$lcssa = $byte_out$418;
    $n$5$lcssa = $n$414;
   } else {
    $120 = $113;
    $byte_out$57 = $byte_out$418;
    $n$56 = $n$414;
    $r$15 = 0;
    while (1) {
     $65 = (Math_imul(HEAP32[$9 >> 2] | 0, $r$15) | 0) + $p$215 | 0;
     if (!(HEAP32[(HEAP32[$10 >> 2] | 0) + ($65 << 2) >> 2] | 0)) {
      $93 = $120;
      $byte_out$6 = $byte_out$57;
      $n$6 = $n$56;
     } else {
      $75 = HEAP32[(HEAP32[$11 >> 2] | 0) + ($r$15 << 2) >> 2] & $sr$213;
      $77 = $75 >> 16 ^ $75;
      if (!(HEAP32[t$_P_init >> 2] | 0)) _partab_init();
      $87 = (HEAPU8[t$_Partab + (($77 >>> 8 ^ $77) & 255) >> 0] | 0 | ($byte_out$57 & 255) << 1) & 255;
      HEAP8[$_msg_enc + ($n$56 >>> 3) >> 0] = $87;
      $93 = HEAP32[$8 >> 2] | 0;
      $byte_out$6 = $87;
      $n$6 = $n$56 + 1 | 0;
     }
     $r$15 = $r$15 + 1 | 0;
     if ($r$15 >>> 0 >= $93 >>> 0) {
      $118 = $93;
      $119 = $93;
      $byte_out$5$lcssa = $byte_out$6;
      $n$5$lcssa = $n$6;
      break;
     } else {
      $120 = $93;
      $byte_out$57 = $byte_out$6;
      $n$56 = $n$6;
     }
    }
   }
   $i$117 = $i$117 + 1 | 0;
   if ($i$117 >>> 0 >= ((HEAP32[$5 >> 2] | 0) + -1 | 0) >>> 0) {
    $byte_out$4$lcssa = $byte_out$5$lcssa;
    $n$4$lcssa = $n$5$lcssa;
    break;
   } else {
    $113 = $118;
    $62 = $119;
    $byte_out$418 = $byte_out$5$lcssa;
    $n$414 = $n$5$lcssa;
    $p$215 = (($p$215 + 1 | 0) >>> 0) % ((HEAP32[$9 >> 2] | 0) >>> 0) | 0;
   }
  }
 }
 if (!($n$4$lcssa & 7)) $n$7$lcssa = $n$4$lcssa; else {
  $byte_out$74 = $byte_out$4$lcssa;
  $n$73 = $n$4$lcssa;
  while (1) {
   $byte_out$74 = ($byte_out$74 & 255) << 1 & 255;
   HEAP8[$_msg_enc + ($n$73 >>> 3) >> 0] = $byte_out$74;
   $106 = $n$73 + 1 | 0;
   if (!($106 & 7)) {
    $n$7$lcssa = $106;
    break;
   } else $n$73 = $106;
  }
 }
 if (($n$7$lcssa | 0) == ((_fec_get_enc_msg_length(HEAP32[$_q >> 2] | 0, $_dec_msg_len) | 0) << 3 | 0)) return; else ___assert_fail(gb + 13192 | 0, gb + 13247 | 0, 157, gb + 13280 | 0);
}

function _try_realloc_chunk($p, $nb) {
 $p = $p | 0;
 $nb = $nb | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $101 = 0, $104 = 0, $106 = 0, $109 = 0, $112 = 0, $113 = 0, $114 = 0, $116 = 0, $118 = 0, $119 = 0, $121 = 0, $122 = 0, $127 = 0, $128 = 0, $137 = 0, $142 = 0, $145 = 0, $146 = 0, $152 = 0, $163 = 0, $166 = 0, $173 = 0, $2 = 0, $20 = 0, $22 = 0, $29 = 0, $3 = 0, $35 = 0, $37 = 0, $38 = 0, $4 = 0, $47 = 0, $49 = 0, $5 = 0, $51 = 0, $52 = 0, $58 = 0, $65 = 0, $71 = 0, $73 = 0, $74 = 0, $77 = 0, $79 = 0, $8 = 0, $81 = 0, $94 = 0, $99 = 0, $R$1 = 0, $R$1$lcssa = 0, $R$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $newp$2 = 0, $storemerge = 0, $storemerge1 = 0;
 $0 = $p + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $1 & -8;
 $3 = $p + $2 | 0;
 $4 = HEAP32[gb + 45080 + 16 >> 2] | 0;
 $5 = $1 & 3;
 if (!(($5 | 0) != 1 & $p >>> 0 >= $4 >>> 0 & $p >>> 0 < $3 >>> 0)) _abort();
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 if (!($8 & 1)) _abort();
 if (!$5) {
  if ($nb >>> 0 < 256) {
   $newp$2 = 0;
   return $newp$2 | 0;
  }
  if ($2 >>> 0 >= ($nb + 4 | 0) >>> 0) if (($2 - $nb | 0) >>> 0 <= HEAP32[gb + 45552 + 8 >> 2] << 1 >>> 0) {
   $newp$2 = $p;
   return $newp$2 | 0;
  }
  $newp$2 = 0;
  return $newp$2 | 0;
 }
 if ($2 >>> 0 >= $nb >>> 0) {
  $20 = $2 - $nb | 0;
  if ($20 >>> 0 <= 15) {
   $newp$2 = $p;
   return $newp$2 | 0;
  }
  $22 = $p + $nb | 0;
  HEAP32[$0 >> 2] = $1 & 1 | $nb | 2;
  HEAP32[$22 + 4 >> 2] = $20 | 3;
  $29 = $22 + $20 + 4 | 0;
  HEAP32[$29 >> 2] = HEAP32[$29 >> 2] | 1;
  _dispose_chunk($22, $20);
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 if (($3 | 0) == (HEAP32[gb + 45080 + 24 >> 2] | 0)) {
  $35 = (HEAP32[gb + 45080 + 12 >> 2] | 0) + $2 | 0;
  if ($35 >>> 0 <= $nb >>> 0) {
   $newp$2 = 0;
   return $newp$2 | 0;
  }
  $37 = $35 - $nb | 0;
  $38 = $p + $nb | 0;
  HEAP32[$0 >> 2] = $1 & 1 | $nb | 2;
  HEAP32[$38 + 4 >> 2] = $37 | 1;
  HEAP32[gb + 45080 + 24 >> 2] = $38;
  HEAP32[gb + 45080 + 12 >> 2] = $37;
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 if (($3 | 0) == (HEAP32[gb + 45080 + 20 >> 2] | 0)) {
  $47 = (HEAP32[gb + 45080 + 8 >> 2] | 0) + $2 | 0;
  if ($47 >>> 0 < $nb >>> 0) {
   $newp$2 = 0;
   return $newp$2 | 0;
  }
  $49 = $47 - $nb | 0;
  if ($49 >>> 0 > 15) {
   $51 = $p + $nb | 0;
   $52 = $51 + $49 | 0;
   HEAP32[$0 >> 2] = $1 & 1 | $nb | 2;
   HEAP32[$51 + 4 >> 2] = $49 | 1;
   HEAP32[$52 >> 2] = $49;
   $58 = $52 + 4 | 0;
   HEAP32[$58 >> 2] = HEAP32[$58 >> 2] & -2;
   $storemerge = $51;
   $storemerge1 = $49;
  } else {
   HEAP32[$0 >> 2] = $1 & 1 | $47 | 2;
   $65 = $p + $47 + 4 | 0;
   HEAP32[$65 >> 2] = HEAP32[$65 >> 2] | 1;
   $storemerge = 0;
   $storemerge1 = 0;
  }
  HEAP32[gb + 45080 + 8 >> 2] = $storemerge1;
  HEAP32[gb + 45080 + 20 >> 2] = $storemerge;
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 if ($8 & 2 | 0) {
  $newp$2 = 0;
  return $newp$2 | 0;
 }
 $71 = ($8 & -8) + $2 | 0;
 if ($71 >>> 0 < $nb >>> 0) {
  $newp$2 = 0;
  return $newp$2 | 0;
 }
 $73 = $71 - $nb | 0;
 $74 = $8 >>> 3;
 do if ($8 >>> 0 < 256) {
  $77 = HEAP32[$3 + 8 >> 2] | 0;
  $79 = HEAP32[$3 + 12 >> 2] | 0;
  $81 = gb + 45080 + 40 + ($74 << 1 << 2) | 0;
  if (($77 | 0) != ($81 | 0)) {
   if ($77 >>> 0 < $4 >>> 0) _abort();
   if ((HEAP32[$77 + 12 >> 2] | 0) != ($3 | 0)) _abort();
  }
  if (($79 | 0) == ($77 | 0)) {
   HEAP32[gb + 45080 >> 2] = HEAP32[gb + 45080 >> 2] & ~(1 << $74);
   break;
  }
  if (($79 | 0) == ($81 | 0)) $$pre$phiZ2D = $79 + 8 | 0; else {
   if ($79 >>> 0 < $4 >>> 0) _abort();
   $94 = $79 + 8 | 0;
   if ((HEAP32[$94 >> 2] | 0) == ($3 | 0)) $$pre$phiZ2D = $94; else _abort();
  }
  HEAP32[$77 + 12 >> 2] = $79;
  HEAP32[$$pre$phiZ2D >> 2] = $77;
 } else {
  $99 = HEAP32[$3 + 24 >> 2] | 0;
  $101 = HEAP32[$3 + 12 >> 2] | 0;
  do if (($101 | 0) == ($3 | 0)) {
   $112 = $3 + 16 | 0;
   $113 = $112 + 4 | 0;
   $114 = HEAP32[$113 >> 2] | 0;
   if (!$114) {
    $116 = HEAP32[$112 >> 2] | 0;
    if (!$116) {
     $R$3 = 0;
     break;
    } else {
     $R$1 = $116;
     $RP$1 = $112;
    }
   } else {
    $R$1 = $114;
    $RP$1 = $113;
   }
   while (1) {
    $118 = $R$1 + 20 | 0;
    $119 = HEAP32[$118 >> 2] | 0;
    if ($119 | 0) {
     $R$1 = $119;
     $RP$1 = $118;
     continue;
    }
    $121 = $R$1 + 16 | 0;
    $122 = HEAP32[$121 >> 2] | 0;
    if (!$122) {
     $R$1$lcssa = $R$1;
     $RP$1$lcssa = $RP$1;
     break;
    } else {
     $R$1 = $122;
     $RP$1 = $121;
    }
   }
   if ($RP$1$lcssa >>> 0 < $4 >>> 0) _abort(); else {
    HEAP32[$RP$1$lcssa >> 2] = 0;
    $R$3 = $R$1$lcssa;
    break;
   }
  } else {
   $104 = HEAP32[$3 + 8 >> 2] | 0;
   if ($104 >>> 0 < $4 >>> 0) _abort();
   $106 = $104 + 12 | 0;
   if ((HEAP32[$106 >> 2] | 0) != ($3 | 0)) _abort();
   $109 = $101 + 8 | 0;
   if ((HEAP32[$109 >> 2] | 0) == ($3 | 0)) {
    HEAP32[$106 >> 2] = $101;
    HEAP32[$109 >> 2] = $104;
    $R$3 = $101;
    break;
   } else _abort();
  } while (0);
  if ($99 | 0) {
   $127 = HEAP32[$3 + 28 >> 2] | 0;
   $128 = gb + 45080 + 304 + ($127 << 2) | 0;
   if (($3 | 0) == (HEAP32[$128 >> 2] | 0)) {
    HEAP32[$128 >> 2] = $R$3;
    if (!$R$3) {
     HEAP32[gb + 45080 + 4 >> 2] = HEAP32[gb + 45080 + 4 >> 2] & ~(1 << $127);
     break;
    }
   } else {
    if ($99 >>> 0 < (HEAP32[gb + 45080 + 16 >> 2] | 0) >>> 0) _abort();
    $137 = $99 + 16 | 0;
    if ((HEAP32[$137 >> 2] | 0) == ($3 | 0)) HEAP32[$137 >> 2] = $R$3; else HEAP32[$99 + 20 >> 2] = $R$3;
    if (!$R$3) break;
   }
   $142 = HEAP32[gb + 45080 + 16 >> 2] | 0;
   if ($R$3 >>> 0 < $142 >>> 0) _abort();
   HEAP32[$R$3 + 24 >> 2] = $99;
   $145 = $3 + 16 | 0;
   $146 = HEAP32[$145 >> 2] | 0;
   do if ($146 | 0) if ($146 >>> 0 < $142 >>> 0) _abort(); else {
    HEAP32[$R$3 + 16 >> 2] = $146;
    HEAP32[$146 + 24 >> 2] = $R$3;
    break;
   } while (0);
   $152 = HEAP32[$145 + 4 >> 2] | 0;
   if ($152 | 0) if ($152 >>> 0 < (HEAP32[gb + 45080 + 16 >> 2] | 0) >>> 0) _abort(); else {
    HEAP32[$R$3 + 20 >> 2] = $152;
    HEAP32[$152 + 24 >> 2] = $R$3;
    break;
   }
  }
 } while (0);
 if ($73 >>> 0 < 16) {
  HEAP32[$0 >> 2] = $71 | $1 & 1 | 2;
  $163 = $p + $71 + 4 | 0;
  HEAP32[$163 >> 2] = HEAP32[$163 >> 2] | 1;
  $newp$2 = $p;
  return $newp$2 | 0;
 } else {
  $166 = $p + $nb | 0;
  HEAP32[$0 >> 2] = $1 & 1 | $nb | 2;
  HEAP32[$166 + 4 >> 2] = $73 | 3;
  $173 = $166 + $73 + 4 | 0;
  HEAP32[$173 >> 2] = HEAP32[$173 >> 2] | 1;
  _dispose_chunk($166, $73);
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 return 0;
}

function _firdespm_create($_h_len, $_num_bands, $_bands, $_des, $_weights, $_wtype, $_btype) {
 $_h_len = $_h_len | 0;
 $_num_bands = $_num_bands | 0;
 $_bands = $_bands | 0;
 $_des = $_des | 0;
 $_weights = $_weights | 0;
 $_wtype = $_wtype | 0;
 $_btype = $_btype | 0;
 var $$lcssa = 0, $$lcssa66 = 0, $$pre39 = 0, $0 = 0, $10 = 0, $100 = 0, $102 = 0, $107 = 0, $123 = 0, $127 = 0.0, $128 = 0, $130 = 0, $131 = 0, $14 = 0.0, $141 = 0, $142 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $16 = 0, $22 = 0, $29 = 0, $30 = 0, $33 = 0, $35 = 0, $36 = 0, $4 = 0.0, $43 = 0, $50 = 0, $53 = 0, $54 = 0, $56 = 0, $58 = 0, $60 = 0, $61 = 0, $64 = 0, $66 = 0, $69 = 0, $70 = 0, $71 = 0, $73 = 0, $78 = 0, $8 = 0, $91 = 0, $93 = 0, $96 = 0, $bands_valid$022 = 0, $bands_valid$1$lcssa = 0, $bands_valid$118 = 0, $i$023 = 0, $i$119 = 0, $i$215 = 0, $i$57 = 0, $i$57$us = 0, $i$66 = 0, $weights_valid$0$lcssa = 0, $weights_valid$014 = 0, $14$looptemp = 0.0;
 $0 = $_num_bands << 1;
 if (!$0) $bands_valid$1$lcssa = 1; else {
  $bands_valid$022 = 1;
  $i$023 = 0;
  while (1) {
   $4 = +HEAPF32[$_bands + ($i$023 << 2) >> 2];
   $8 = $4 <= .5 & $4 >= 0.0 & 1 & $bands_valid$022;
   $i$023 = $i$023 + 1 | 0;
   if (($i$023 | 0) == ($0 | 0)) {
    $$lcssa66 = $8;
    break;
   } else $bands_valid$022 = $8;
  }
  if ($0 >>> 0 > 1) {
   $14 = +HEAPF32[$_bands >> 2];
   $bands_valid$118 = $$lcssa66;
   $i$119 = 1;
   while (1) {
    $14$looptemp = $14;
    $14 = +HEAPF32[$_bands + ($i$119 << 2) >> 2];
    $16 = $14 >= $14$looptemp & $bands_valid$118;
    $i$119 = $i$119 + 1 | 0;
    if (($i$119 | 0) == ($0 | 0)) {
     $bands_valid$1$lcssa = $16;
     break;
    } else $bands_valid$118 = $16;
   }
  } else $bands_valid$1$lcssa = $$lcssa66;
 }
 $10 = ($_num_bands | 0) == 0;
 if ($10) $weights_valid$0$lcssa = 1; else {
  $i$215 = 0;
  $weights_valid$014 = 1;
  while (1) {
   $22 = +HEAPF32[$_weights + ($i$215 << 2) >> 2] > 0.0 & $weights_valid$014;
   $i$215 = $i$215 + 1 | 0;
   if (($i$215 | 0) == ($_num_bands | 0)) {
    $weights_valid$0$lcssa = $22;
    break;
   } else $weights_valid$014 = $22;
  }
 }
 if (!$bands_valid$1$lcssa) {
  _fwrite(gb + 22573 | 0, 40, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if (!$weights_valid$0$lcssa) {
  _fwrite(gb + 22614 | 0, 61, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if ($10) {
  _fwrite(gb + 22676 | 0, 54, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 $29 = _malloc(96) | 0;
 HEAP32[$29 >> 2] = $_h_len;
 $30 = $_h_len & 1;
 HEAP32[$29 + 4 >> 2] = $30;
 $33 = ($_h_len - $30 | 0) >>> 1;
 HEAP32[$29 + 8 >> 2] = $33;
 $35 = $33 + $30 | 0;
 $36 = $29 + 12 | 0;
 HEAP32[$36 >> 2] = $35;
 HEAP32[$29 + 28 >> 2] = $_btype;
 HEAP32[$29 + 88 >> 2] = _malloc(($35 << 2) + 4 | 0) | 0;
 $43 = ($35 << 3) + 8 | 0;
 HEAP32[$29 + 64 >> 2] = _malloc($43) | 0;
 HEAP32[$29 + 68 >> 2] = _malloc($43) | 0;
 HEAP32[$29 + 72 >> 2] = _malloc($43) | 0;
 $50 = $29 + 16 | 0;
 HEAP32[$50 >> 2] = $_num_bands;
 $53 = $29 + 32 | 0;
 HEAP32[$53 >> 2] = _malloc($_num_bands << 4) | 0;
 $54 = $_num_bands << 3;
 $56 = $29 + 36 | 0;
 HEAP32[$56 >> 2] = _malloc($54) | 0;
 $58 = $29 + 40 | 0;
 HEAP32[$58 >> 2] = _malloc($54) | 0;
 $60 = _malloc($_num_bands << 2) | 0;
 $61 = $29 + 44 | 0;
 HEAP32[$61 >> 2] = $60;
 if (!$_wtype) {
  HEAP32[$60 >> 2] = 0;
  $66 = HEAP32[$50 >> 2] | 0;
  if ($66 >>> 0 > 1) {
   $91 = 1;
   do {
    HEAP32[(HEAP32[$61 >> 2] | 0) + ($91 << 2) >> 2] = 0;
    $91 = $91 + 1 | 0;
    $93 = HEAP32[$50 >> 2] | 0;
   } while ($91 >>> 0 < $93 >>> 0);
   $69 = $93;
  } else $69 = $66;
 } else {
  HEAP32[$60 >> 2] = HEAP32[$_wtype >> 2];
  $64 = HEAP32[$50 >> 2] | 0;
  if ($64 >>> 0 > 1) {
   $96 = 1;
   do {
    HEAP32[(HEAP32[$61 >> 2] | 0) + ($96 << 2) >> 2] = HEAP32[$_wtype + ($96 << 2) >> 2];
    $96 = $96 + 1 | 0;
    $100 = HEAP32[$50 >> 2] | 0;
   } while ($96 >>> 0 < $100 >>> 0);
   $69 = $100;
  } else $69 = $64;
 }
 if ($69 | 0) {
  $70 = HEAP32[$53 >> 2] | 0;
  $71 = HEAP32[$56 >> 2] | 0;
  $$pre39 = HEAP32[$58 >> 2] | 0;
  if (!$_weights) {
   $i$57$us = 0;
   do {
    $73 = $i$57$us << 1;
    HEAPF64[$70 + ($73 << 3) >> 3] = +HEAPF32[$_bands + ($73 << 2) >> 2];
    $78 = $73 | 1;
    HEAPF64[$70 + ($78 << 3) >> 3] = +HEAPF32[$_bands + ($78 << 2) >> 2];
    HEAPF64[$71 + ($i$57$us << 3) >> 3] = +HEAPF32[$_des + ($i$57$us << 2) >> 2];
    HEAPF64[$$pre39 + ($i$57$us << 3) >> 3] = 1.0;
    $i$57$us = $i$57$us + 1 | 0;
   } while ($i$57$us >>> 0 < $69 >>> 0);
  } else {
   $i$57 = 0;
   do {
    $102 = $i$57 << 1;
    HEAPF64[$70 + ($102 << 3) >> 3] = +HEAPF32[$_bands + ($102 << 2) >> 2];
    $107 = $102 | 1;
    HEAPF64[$70 + ($107 << 3) >> 3] = +HEAPF32[$_bands + ($107 << 2) >> 2];
    HEAPF64[$71 + ($i$57 << 3) >> 3] = +HEAPF32[$_des + ($i$57 << 2) >> 2];
    HEAPF64[$$pre39 + ($i$57 << 3) >> 3] = +HEAPF32[$_weights + ($i$57 << 2) >> 2];
    $i$57 = $i$57 + 1 | 0;
   } while ($i$57 >>> 0 < $69 >>> 0);
  }
 }
 HEAP32[$29 + 24 >> 2] = 20;
 $123 = $29 + 20 | 0;
 HEAP32[$123 >> 2] = 0;
 $127 = .5 / +(((HEAP32[$36 >> 2] | 0) * 20 | 0) >>> 0);
 $128 = HEAP32[$50 >> 2] | 0;
 if (!$128) {
  $145 = 0;
  $146 = _malloc($145) | 0;
  $147 = $29 + 48 | 0;
  HEAP32[$147 >> 2] = $146;
  $148 = _malloc($145) | 0;
  $149 = $29 + 52 | 0;
  HEAP32[$149 >> 2] = $148;
  $150 = _malloc($145) | 0;
  $151 = $29 + 56 | 0;
  HEAP32[$151 >> 2] = $150;
  $152 = _malloc($145) | 0;
  $153 = $29 + 60 | 0;
  HEAP32[$153 >> 2] = $152;
  _firdespm_init_grid($29);
  return $29 | 0;
 }
 $130 = HEAP32[$53 >> 2] | 0;
 $142 = 0;
 $i$66 = 0;
 while (1) {
  $131 = $i$66 << 1;
  $141 = (~~((+HEAPF64[$130 + (($131 | 1) << 3) >> 3] - +HEAPF64[$130 + ($131 << 3) >> 3]) / $127 + 1.0) >>> 0) + $142 | 0;
  $i$66 = $i$66 + 1 | 0;
  if ($i$66 >>> 0 >= $128 >>> 0) {
   $$lcssa = $141;
   break;
  } else $142 = $141;
 }
 HEAP32[$123 >> 2] = $$lcssa;
 $145 = $$lcssa << 3;
 $146 = _malloc($145) | 0;
 $147 = $29 + 48 | 0;
 HEAP32[$147 >> 2] = $146;
 $148 = _malloc($145) | 0;
 $149 = $29 + 52 | 0;
 HEAP32[$149 >> 2] = $148;
 $150 = _malloc($145) | 0;
 $151 = $29 + 56 | 0;
 HEAP32[$151 >> 2] = $150;
 $152 = _malloc($145) | 0;
 $153 = $29 + 60 | 0;
 HEAP32[$153 >> 2] = $152;
 _firdespm_init_grid($29);
 return $29 | 0;
}

function _interleaver_encode($_q, $_msg_dec, $_msg_enc) {
 $_q = $_q | 0;
 $_msg_dec = $_msg_dec | 0;
 $_msg_enc = $_msg_enc | 0;
 var $$lcssa = 0, $$lcssa52 = 0, $$lcssa53 = 0, $$lcssa54 = 0, $$pr = 0, $$pr32$pr = 0, $$pr33$pr = 0, $1 = 0, $101 = 0, $102 = 0, $106 = 0, $107 = 0, $113 = 0, $114 = 0, $119 = 0, $120 = 0, $13 = 0, $131 = 0, $14 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $36 = 0, $37 = 0, $4 = 0, $43 = 0, $44 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $61 = 0, $63 = 0, $64 = 0, $66 = 0, $67 = 0, $7 = 0, $71 = 0, $72 = 0, $78 = 0, $79 = 0, $8 = 0, $84 = 0, $85 = 0, $9 = 0, $96 = 0, $98 = 0, $99 = 0, $i$03$i = 0, $i$03$i1 = 0, $i$03$i11 = 0, $i$03$i22 = 0, $m$02$i = 0, $m$02$i12 = 0, $m$02$i2 = 0, $m$02$i23 = 0, $m$1$i = 0, $m$1$i16 = 0, $m$1$i27 = 0, $m$1$i6 = 0, $m$2$i = 0, $m$2$i$lcssa = 0, $m$2$i18 = 0, $m$2$i18$lcssa = 0, $m$2$i29 = 0, $m$2$i29$lcssa = 0, $m$2$i8 = 0, $m$2$i8$lcssa = 0, $n$01$i = 0, $n$01$i13 = 0, $n$01$i24 = 0, $n$01$i3 = 0, $n$1$i = 0, $n$1$i15 = 0, $n$1$i26 = 0, $n$1$i5 = 0, $n$2$i = 0, $n$2$i$lcssa = 0, $n$2$i17 = 0, $n$2$i17$lcssa = 0, $n$2$i28 = 0, $n$2$i28$lcssa = 0, $n$2$i7 = 0, $n$2$i7$lcssa = 0;
 _memmove($_msg_enc | 0, $_msg_dec | 0, HEAP32[$_q >> 2] | 0) | 0;
 $1 = $_q + 12 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!$2) return;
 $4 = HEAP32[$_q >> 2] | 0;
 $5 = $_q + 4 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = $_q + 8 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = $4 >>> 1;
 if (!$9) $$pr = $2; else {
  $i$03$i = 0;
  $m$02$i = 0;
  $n$01$i = ($4 >>> 0) / 3 | 0;
  while (1) {
   $m$1$i = $m$02$i;
   $n$1$i = $n$01$i;
   while (1) {
    $13 = (Math_imul($m$1$i, $8) | 0) + $n$1$i | 0;
    $14 = $m$1$i + 1 | 0;
    if (($14 | 0) == ($6 | 0)) {
     $m$2$i = 0;
     $n$2$i = (($n$1$i + 1 | 0) >>> 0) % ($8 >>> 0) | 0;
    } else {
     $m$2$i = $14;
     $n$2$i = $n$1$i;
    }
    if ($13 >>> 0 < $9 >>> 0) {
     $$lcssa54 = $13;
     $m$2$i$lcssa = $m$2$i;
     $n$2$i$lcssa = $n$2$i;
     break;
    } else {
     $m$1$i = $m$2$i;
     $n$1$i = $n$2$i;
    }
   }
   $21 = $_msg_enc + ($$lcssa54 << 1 | 1) | 0;
   $22 = HEAP8[$21 >> 0] | 0;
   $24 = $_msg_enc + ($i$03$i << 1) | 0;
   HEAP8[$21 >> 0] = HEAP8[$24 >> 0] | 0;
   HEAP8[$24 >> 0] = $22;
   $26 = $i$03$i + 1 | 0;
   if (($26 | 0) == ($9 | 0)) break; else {
    $i$03$i = $26;
    $m$02$i = $m$2$i$lcssa;
    $n$01$i = $n$2$i$lcssa;
   }
  }
  $$pr = HEAP32[$1 >> 2] | 0;
 }
 if ($$pr >>> 0 <= 1) return;
 $28 = HEAP32[$_q >> 2] | 0;
 $29 = HEAP32[$5 >> 2] | 0;
 $31 = (HEAP32[$7 >> 2] | 0) + 2 | 0;
 $32 = $28 >>> 1;
 if (!$32) $$pr32$pr = $$pr; else {
  $i$03$i22 = 0;
  $m$02$i23 = 0;
  $n$01$i24 = ($28 >>> 0) / 3 | 0;
  while (1) {
   $m$1$i27 = $m$02$i23;
   $n$1$i26 = $n$01$i24;
   while (1) {
    $36 = (Math_imul($m$1$i27, $31) | 0) + $n$1$i26 | 0;
    $37 = $m$1$i27 + 1 | 0;
    if (($37 | 0) == ($29 | 0)) {
     $m$2$i29 = 0;
     $n$2$i28 = (($n$1$i26 + 1 | 0) >>> 0) % ($31 >>> 0) | 0;
    } else {
     $m$2$i29 = $37;
     $n$2$i28 = $n$1$i26;
    }
    if ($36 >>> 0 < $32 >>> 0) {
     $$lcssa53 = $36;
     $m$2$i29$lcssa = $m$2$i29;
     $n$2$i28$lcssa = $n$2$i28;
     break;
    } else {
     $m$1$i27 = $m$2$i29;
     $n$1$i26 = $n$2$i28;
    }
   }
   $43 = $_msg_enc + ($i$03$i22 << 1) | 0;
   $44 = HEAP8[$43 >> 0] | 0;
   $49 = $_msg_enc + ($$lcssa53 << 1 | 1) | 0;
   $50 = HEAP8[$49 >> 0] | 0;
   HEAP8[$43 >> 0] = $50 & 15 | $44 & 240;
   HEAP8[$49 >> 0] = $50 & 240 | $44 & 15;
   $61 = $i$03$i22 + 1 | 0;
   if (($61 | 0) == ($32 | 0)) break; else {
    $i$03$i22 = $61;
    $m$02$i23 = $m$2$i29$lcssa;
    $n$01$i24 = $n$2$i28$lcssa;
   }
  }
  $$pr32$pr = HEAP32[$1 >> 2] | 0;
 }
 if ($$pr32$pr >>> 0 <= 2) return;
 $63 = HEAP32[$_q >> 2] | 0;
 $64 = HEAP32[$5 >> 2] | 0;
 $66 = (HEAP32[$7 >> 2] | 0) + 4 | 0;
 $67 = $63 >>> 1;
 if (!$67) $$pr33$pr = $$pr32$pr; else {
  $i$03$i11 = 0;
  $m$02$i12 = 0;
  $n$01$i13 = ($63 >>> 0) / 3 | 0;
  while (1) {
   $m$1$i16 = $m$02$i12;
   $n$1$i15 = $n$01$i13;
   while (1) {
    $71 = (Math_imul($m$1$i16, $66) | 0) + $n$1$i15 | 0;
    $72 = $m$1$i16 + 1 | 0;
    if (($72 | 0) == ($64 | 0)) {
     $m$2$i18 = 0;
     $n$2$i17 = (($n$1$i15 + 1 | 0) >>> 0) % ($66 >>> 0) | 0;
    } else {
     $m$2$i18 = $72;
     $n$2$i17 = $n$1$i15;
    }
    if ($71 >>> 0 < $67 >>> 0) {
     $$lcssa52 = $71;
     $m$2$i18$lcssa = $m$2$i18;
     $n$2$i17$lcssa = $n$2$i17;
     break;
    } else {
     $m$1$i16 = $m$2$i18;
     $n$1$i15 = $n$2$i17;
    }
   }
   $78 = $_msg_enc + ($i$03$i11 << 1) | 0;
   $79 = HEAP8[$78 >> 0] | 0;
   $84 = $_msg_enc + ($$lcssa52 << 1 | 1) | 0;
   $85 = HEAP8[$84 >> 0] | 0;
   HEAP8[$78 >> 0] = $85 & 85 | $79 & 170;
   HEAP8[$84 >> 0] = $85 & 170 | $79 & 85;
   $96 = $i$03$i11 + 1 | 0;
   if (($96 | 0) == ($67 | 0)) break; else {
    $i$03$i11 = $96;
    $m$02$i12 = $m$2$i18$lcssa;
    $n$01$i13 = $n$2$i17$lcssa;
   }
  }
  $$pr33$pr = HEAP32[$1 >> 2] | 0;
 }
 if ($$pr33$pr >>> 0 <= 3) return;
 $98 = HEAP32[$_q >> 2] | 0;
 $99 = HEAP32[$5 >> 2] | 0;
 $101 = (HEAP32[$7 >> 2] | 0) + 8 | 0;
 $102 = $98 >>> 1;
 if (!$102) return;
 $i$03$i1 = 0;
 $m$02$i2 = 0;
 $n$01$i3 = ($98 >>> 0) / 3 | 0;
 while (1) {
  $m$1$i6 = $m$02$i2;
  $n$1$i5 = $n$01$i3;
  while (1) {
   $106 = (Math_imul($m$1$i6, $101) | 0) + $n$1$i5 | 0;
   $107 = $m$1$i6 + 1 | 0;
   if (($107 | 0) == ($99 | 0)) {
    $m$2$i8 = 0;
    $n$2$i7 = (($n$1$i5 + 1 | 0) >>> 0) % ($101 >>> 0) | 0;
   } else {
    $m$2$i8 = $107;
    $n$2$i7 = $n$1$i5;
   }
   if ($106 >>> 0 < $102 >>> 0) {
    $$lcssa = $106;
    $m$2$i8$lcssa = $m$2$i8;
    $n$2$i7$lcssa = $n$2$i7;
    break;
   } else {
    $m$1$i6 = $m$2$i8;
    $n$1$i5 = $n$2$i7;
   }
  }
  $113 = $_msg_enc + ($i$03$i1 << 1) | 0;
  $114 = HEAP8[$113 >> 0] | 0;
  $119 = $_msg_enc + ($$lcssa << 1 | 1) | 0;
  $120 = HEAP8[$119 >> 0] | 0;
  HEAP8[$113 >> 0] = $120 & 51 | $114 & 204;
  HEAP8[$119 >> 0] = $120 & 204 | $114 & 51;
  $131 = $i$03$i1 + 1 | 0;
  if (($131 | 0) == ($102 | 0)) break; else {
   $i$03$i1 = $131;
   $m$02$i2 = $m$2$i8$lcssa;
   $n$01$i3 = $n$2$i7$lcssa;
  }
 }
 return;
}

function _fmod($x, $y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa7 = 0, $0 = 0, $1 = 0, $10 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $107 = 0, $108 = 0, $11 = 0, $113 = 0, $115 = 0, $117 = 0, $12 = 0, $120 = 0, $122 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $147 = 0, $150 = 0, $151 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $17 = 0, $2 = 0, $24 = 0.0, $26 = 0, $27 = 0, $3 = 0, $38 = 0, $39 = 0, $4 = 0, $45 = 0, $46 = 0, $47 = 0, $56 = 0, $6 = 0, $61 = 0, $62 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $79 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $94 = 0, $96 = 0, $98 = 0, $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0, $fabs = 0.0, label = 0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = $y;
 $2 = HEAP32[tempDoublePtr >> 2] | 0;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $4 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
 getTempRet0() | 0;
 $6 = $4 & 2047;
 $7 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0;
 getTempRet0() | 0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = _bitshift64Shl($2 | 0, $3 | 0, 1) | 0;
 $12 = getTempRet0() | 0;
 L1 : do if (($11 | 0) == 0 & ($12 | 0) == 0) label = 3; else {
  $fabs = +Math_abs(+$y);
  HEAPF64[tempDoublePtr >> 3] = $fabs;
  $17 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  if ($17 >>> 0 > 2146435072 | ($17 | 0) == 2146435072 & (HEAP32[tempDoublePtr >> 2] | 0) >>> 0 > 0 | ($6 | 0) == 2047) label = 3; else {
   $26 = _bitshift64Shl($0 | 0, $1 | 0, 1) | 0;
   $27 = getTempRet0() | 0;
   if (!($27 >>> 0 > $12 >>> 0 | ($27 | 0) == ($12 | 0) & $26 >>> 0 > $11 >>> 0)) return +(($26 | 0) == ($11 | 0) & ($27 | 0) == ($12 | 0) ? $x * 0.0 : $x);
   if (!$6) {
    $38 = _bitshift64Shl($0 | 0, $1 | 0, 12) | 0;
    $39 = getTempRet0() | 0;
    if (($39 | 0) > -1 | ($39 | 0) == -1 & $38 >>> 0 > 4294967295) {
     $46 = $38;
     $47 = $39;
     $ex$026 = 0;
     while (1) {
      $45 = $ex$026 + -1 | 0;
      $46 = _bitshift64Shl($46 | 0, $47 | 0, 1) | 0;
      $47 = getTempRet0() | 0;
      if (!(($47 | 0) > -1 | ($47 | 0) == -1 & $46 >>> 0 > 4294967295)) {
       $ex$0$lcssa = $45;
       break;
      } else $ex$026 = $45;
     }
    } else $ex$0$lcssa = 0;
    $56 = _bitshift64Shl($0 | 0, $1 | 0, 1 - $ex$0$lcssa | 0) | 0;
    $84 = $56;
    $85 = getTempRet0() | 0;
    $ex$1 = $ex$0$lcssa;
   } else {
    $84 = $0;
    $85 = $1 & 1048575 | 1048576;
    $ex$1 = $6;
   }
   if (!$9) {
    $61 = _bitshift64Shl($2 | 0, $3 | 0, 12) | 0;
    $62 = getTempRet0() | 0;
    if (($62 | 0) > -1 | ($62 | 0) == -1 & $61 >>> 0 > 4294967295) {
     $69 = $61;
     $70 = $62;
     $ey$020 = 0;
     while (1) {
      $68 = $ey$020 + -1 | 0;
      $69 = _bitshift64Shl($69 | 0, $70 | 0, 1) | 0;
      $70 = getTempRet0() | 0;
      if (!(($70 | 0) > -1 | ($70 | 0) == -1 & $69 >>> 0 > 4294967295)) {
       $ey$0$lcssa = $68;
       break;
      } else $ey$020 = $68;
     }
    } else $ey$0$lcssa = 0;
    $79 = _bitshift64Shl($2 | 0, $3 | 0, 1 - $ey$0$lcssa | 0) | 0;
    $86 = $79;
    $87 = getTempRet0() | 0;
    $ey$1$ph = $ey$0$lcssa;
   } else {
    $86 = $2;
    $87 = $3 & 1048575 | 1048576;
    $ey$1$ph = $9;
   }
   $88 = _i64Subtract($84 | 0, $85 | 0, $86 | 0, $87 | 0) | 0;
   $89 = getTempRet0() | 0;
   $94 = ($89 | 0) > -1 | ($89 | 0) == -1 & $88 >>> 0 > 4294967295;
   L23 : do if (($ex$1 | 0) > ($ey$1$ph | 0)) {
    $153 = $94;
    $154 = $88;
    $155 = $89;
    $96 = $84;
    $98 = $85;
    $ex$212 = $ex$1;
    while (1) {
     if ($153) if (($96 | 0) == ($86 | 0) & ($98 | 0) == ($87 | 0)) break; else {
      $101 = $154;
      $102 = $155;
     } else {
      $101 = $96;
      $102 = $98;
     }
     $103 = _bitshift64Shl($101 | 0, $102 | 0, 1) | 0;
     $104 = getTempRet0() | 0;
     $105 = $ex$212 + -1 | 0;
     $107 = _i64Subtract($103 | 0, $104 | 0, $86 | 0, $87 | 0) | 0;
     $108 = getTempRet0() | 0;
     $113 = ($108 | 0) > -1 | ($108 | 0) == -1 & $107 >>> 0 > 4294967295;
     if (($105 | 0) > ($ey$1$ph | 0)) {
      $153 = $113;
      $154 = $107;
      $155 = $108;
      $96 = $103;
      $98 = $104;
      $ex$212 = $105;
     } else {
      $$lcssa7 = $113;
      $115 = $103;
      $117 = $104;
      $156 = $107;
      $157 = $108;
      $ex$2$lcssa = $105;
      break L23;
     }
    }
    $$0 = $x * 0.0;
    break L1;
   } else {
    $$lcssa7 = $94;
    $115 = $84;
    $117 = $85;
    $156 = $88;
    $157 = $89;
    $ex$2$lcssa = $ex$1;
   } while (0);
   if ($$lcssa7) if (($115 | 0) == ($86 | 0) & ($117 | 0) == ($87 | 0)) {
    $$0 = $x * 0.0;
    break;
   } else {
    $120 = $157;
    $122 = $156;
   } else {
    $120 = $117;
    $122 = $115;
   }
   if ($120 >>> 0 < 1048576 | ($120 | 0) == 1048576 & $122 >>> 0 < 0) {
    $127 = $122;
    $128 = $120;
    $ex$39 = $ex$2$lcssa;
    while (1) {
     $129 = _bitshift64Shl($127 | 0, $128 | 0, 1) | 0;
     $130 = getTempRet0() | 0;
     $131 = $ex$39 + -1 | 0;
     if ($130 >>> 0 < 1048576 | ($130 | 0) == 1048576 & $129 >>> 0 < 0) {
      $127 = $129;
      $128 = $130;
      $ex$39 = $131;
     } else {
      $138 = $129;
      $139 = $130;
      $ex$3$lcssa = $131;
      break;
     }
    }
   } else {
    $138 = $122;
    $139 = $120;
    $ex$3$lcssa = $ex$2$lcssa;
   }
   if (($ex$3$lcssa | 0) > 0) {
    $140 = _i64Add($138 | 0, $139 | 0, 0, -1048576) | 0;
    $141 = getTempRet0() | 0;
    $142 = _bitshift64Shl($ex$3$lcssa | 0, 0, 52) | 0;
    $150 = $141 | (getTempRet0() | 0);
    $151 = $140 | $142;
   } else {
    $147 = _bitshift64Lshr($138 | 0, $139 | 0, 1 - $ex$3$lcssa | 0) | 0;
    $150 = getTempRet0() | 0;
    $151 = $147;
   }
   HEAP32[tempDoublePtr >> 2] = $151;
   HEAP32[tempDoublePtr + 4 >> 2] = $150 | $10;
   $$0 = +HEAPF64[tempDoublePtr >> 3];
  }
 } while (0);
 if ((label | 0) == 3) {
  $24 = $x * $y;
  $$0 = $24 / $24;
 }
 return +$$0;
}

function _detector_cccf_create($_s, $_n, $_threshold, $_dphi_max) {
 $_s = $_s | 0;
 $_n = $_n | 0;
 $_threshold = +$_threshold;
 $_dphi_max = +$_dphi_max;
 var $$ = 0, $$byval_copy1 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $107 = 0.0, $108 = 0.0, $11 = 0, $110 = 0, $112 = 0, $115 = 0, $116 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $14 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $24 = 0, $25 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $45 = 0, $48 = 0, $49 = 0, $5 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $59 = 0, $66 = 0, $68 = 0, $69 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $78 = 0.0, $79 = 0.0, $80 = 0.0, $81 = 0.0, $85 = 0.0, $86 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $99 = 0.0, $i$02 = 0, $k$03 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy1 = sp + 48 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 8 | 0;
 $5 = sp;
 if (!$_n) {
  _fwrite(gb + 40999 | 0, 62, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if ($_threshold <= 0.0) {
  _fwrite(gb + 41062 | 0, 85, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 $10 = _malloc(80) | 0;
 $11 = $10 + 4 | 0;
 HEAP32[$11 >> 2] = $_n;
 HEAPF32[$10 + 8 >> 2] = $_threshold;
 $14 = +($_n >>> 0);
 HEAPF32[$10 + 12 >> 2] = 1.0 / $14;
 $19 = 2.5132741603225375 / $14;
 $20 = $10 + 28 | 0;
 HEAPF32[$20 >> 2] = $19;
 $24 = ~~+Math_ceil(+(+Math_abs(+($_dphi_max / $19))));
 $25 = $10 + 24 | 0;
 $$ = $24 >>> 0 < 2 ? 2 : $24;
 HEAP32[$25 >> 2] = $$;
 HEAPF32[$10 + 32 >> 2] = $19 * +($$ >>> 0);
 $29 = $_n << 3;
 $30 = _malloc($29) | 0;
 HEAP32[$10 >> 2] = $30;
 _memcpy($30 | 0, $_s | 0, $29 | 0) | 0;
 $32 = $10 + 16 | 0;
 HEAP32[$32 >> 2] = _windowcf_create($_n) | 0;
 $35 = $10 + 60 | 0;
 HEAP32[$35 >> 2] = _wdelayf_create(HEAP32[$11 >> 2] | 0) | 0;
 $36 = HEAP32[$25 >> 2] | 0;
 $37 = $36 << 2;
 $39 = $10 + 20 | 0;
 HEAP32[$39 >> 2] = _malloc($37) | 0;
 $40 = _malloc($37) | 0;
 $41 = $10 + 36 | 0;
 HEAP32[$41 >> 2] = $40;
 $43 = $10 + 44 | 0;
 HEAP32[$43 >> 2] = _malloc($37) | 0;
 $45 = $10 + 48 | 0;
 HEAP32[$45 >> 2] = _malloc($37) | 0;
 HEAP32[$10 + 40 >> 2] = _malloc($37) | 0;
 $48 = HEAP32[$11 >> 2] | 0;
 $49 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($48 << 3) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 if (!$36) {
  $118 = HEAP32[$32 >> 2] | 0;
  _windowcf_clear($118);
  $119 = HEAP32[$35 >> 2] | 0;
  _wdelayf_clear($119);
  $120 = HEAP32[$11 >> 2] | 0;
  $121 = $10 + 76 | 0;
  HEAP32[$121 >> 2] = $120;
  $122 = $10 + 72 | 0;
  HEAP32[$122 >> 2] = 0;
  $123 = $10 + 52 | 0;
  HEAP32[$123 >> 2] = 0;
  $124 = $10 + 56 | 0;
  HEAP32[$124 >> 2] = 0;
  $125 = $10 + 64 | 0;
  HEAPF32[$125 >> 2] = 0.0;
  $126 = HEAP32[$43 >> 2] | 0;
  $127 = HEAP32[$25 >> 2] | 0;
  $128 = $127 << 2;
  _memset($126 | 0, 0, $128 | 0) | 0;
  $129 = HEAP32[$45 >> 2] | 0;
  $130 = HEAP32[$25 >> 2] | 0;
  $131 = $130 << 2;
  _memset($129 | 0, 0, $131 | 0) | 0;
  STACKTOP = sp;
  return $10 | 0;
 }
 $51 = $1 + 4 | 0;
 $52 = $0 + 4 | 0;
 $53 = $2 + 4 | 0;
 $54 = $4 + 4 | 0;
 $55 = $3 + 4 | 0;
 $56 = $5 + 4 | 0;
 $59 = $36;
 $66 = $40;
 $68 = $48;
 $k$03 = 0;
 while (1) {
  HEAPF32[$66 + ($k$03 << 2) >> 2] = (+($k$03 >>> 0) - +(($59 + -1 | 0) >>> 0) * .5) * +HEAPF32[$20 >> 2];
  if (!$68) $$lcssa = 0; else {
   $i$02 = 0;
   do {
    $69 = HEAP32[$10 >> 2] | 0;
    $73 = HEAP32[$69 + ($i$02 << 3) + 4 >> 2] | 0;
    HEAP32[$1 >> 2] = HEAP32[$69 + ($i$02 << 3) >> 2];
    HEAP32[$51 >> 2] = $73;
    HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
    _conjf($0, $$byval_copy1);
    $74 = +HEAPF32[$0 >> 2];
    $75 = +HEAPF32[$52 >> 2];
    $78 = +HEAPF32[(HEAP32[$41 >> 2] | 0) + ($k$03 << 2) >> 2];
    $79 = $78 * -0.0;
    $80 = -$78;
    $81 = +($i$02 >>> 0);
    $85 = $81 * $79 - $79;
    $86 = $81 * $80 + $79 * 0.0;
    if (($85 != $85 | 0.0 != 0.0) & ($86 != $86 | 0.0 != 0.0)) {
     ___mulsc3($2, $79, $80, $81, 0.0);
     $91 = +HEAPF32[$2 >> 2];
     $92 = +HEAPF32[$53 >> 2];
    } else {
     $91 = $85;
     $92 = $86;
    }
    HEAPF32[$4 >> 2] = $91;
    HEAPF32[$54 >> 2] = $92;
    HEAP32[$$byval_copy1 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
    _cexpf($3, $$byval_copy1);
    $93 = +HEAPF32[$3 >> 2];
    $94 = +HEAPF32[$55 >> 2];
    $99 = $74 * $93 - $75 * $94;
    $100 = $75 * $93 + $74 * $94;
    if (($99 != $99 | 0.0 != 0.0) & ($100 != $100 | 0.0 != 0.0)) {
     ___mulsc3($5, $74, $75, $93, $94);
     $107 = +HEAPF32[$5 >> 2];
     $108 = +HEAPF32[$56 >> 2];
    } else {
     $107 = $99;
     $108 = $100;
    }
    HEAPF32[$49 + ($i$02 << 3) >> 2] = $107;
    HEAPF32[$49 + ($i$02 << 3) + 4 >> 2] = $108;
    $i$02 = $i$02 + 1 | 0;
    $110 = HEAP32[$11 >> 2] | 0;
   } while ($i$02 >>> 0 < $110 >>> 0);
   $$lcssa = $110;
  }
  $112 = _dotprod_cccf_create($49, $$lcssa) | 0;
  HEAP32[(HEAP32[$39 >> 2] | 0) + ($k$03 << 2) >> 2] = $112;
  $115 = $k$03 + 1 | 0;
  $116 = HEAP32[$25 >> 2] | 0;
  if ($115 >>> 0 >= $116 >>> 0) break;
  $59 = $116;
  $66 = HEAP32[$41 >> 2] | 0;
  $68 = HEAP32[$11 >> 2] | 0;
  $k$03 = $115;
 }
 $118 = HEAP32[$32 >> 2] | 0;
 _windowcf_clear($118);
 $119 = HEAP32[$35 >> 2] | 0;
 _wdelayf_clear($119);
 $120 = HEAP32[$11 >> 2] | 0;
 $121 = $10 + 76 | 0;
 HEAP32[$121 >> 2] = $120;
 $122 = $10 + 72 | 0;
 HEAP32[$122 >> 2] = 0;
 $123 = $10 + 52 | 0;
 HEAP32[$123 >> 2] = 0;
 $124 = $10 + 56 | 0;
 HEAP32[$124 >> 2] = 0;
 $125 = $10 + 64 | 0;
 HEAPF32[$125 >> 2] = 0.0;
 $126 = HEAP32[$43 >> 2] | 0;
 $127 = HEAP32[$25 >> 2] | 0;
 $128 = $127 << 2;
 _memset($126 | 0, 0, $128 | 0) | 0;
 $129 = HEAP32[$45 >> 2] | 0;
 $130 = HEAP32[$25 >> 2] | 0;
 $131 = $130 << 2;
 _memset($129 | 0, 0, $131 | 0) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function _ofdmframesync_create($_M, $_cp_len, $_taper_len, $_p, $_callback, $_userdata) {
 $_M = $_M | 0;
 $_cp_len = $_cp_len | 0;
 $_taper_len = $_taper_len | 0;
 $_p = $_p | 0;
 $_callback = $_callback | 0;
 $_userdata = $_userdata | 0;
 var $$ = 0, $$pre3 = 0, $0 = 0, $101 = 0.0, $103 = 0.0, $11 = 0, $110 = 0, $111 = 0.0, $113 = 0.0, $12 = 0, $124 = 0, $126 = 0, $129 = 0, $130 = 0, $131 = 0, $136 = 0.0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $28 = 0, $29 = 0, $30 = 0, $32 = 0, $41 = 0, $42 = 0, $43 = 0, $45 = 0, $48 = 0, $50 = 0, $52 = 0, $57 = 0, $58 = 0, $59 = 0.0, $60 = 0.0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $87 = 0, $90 = 0, $99 = 0.0;
 $0 = _malloc(216) | 0;
 if ($_M >>> 0 < 8) _fwrite(gb + 36202 | 0, 57, 1, HEAP32[gb + 9336 >> 2] | 0) | 0; else {
  if ($_M & 1 | 0) {
   _fwrite(gb + 36260 | 0, 66, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
   _exit(1);
  }
  if ($_cp_len >>> 0 > $_M >>> 0) {
   _fwrite(gb + 36327 | 0, 88, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
   _exit(1);
  }
 }
 HEAP32[$0 >> 2] = $_M;
 $8 = $0 + 8 | 0;
 HEAP32[$8 >> 2] = $_cp_len;
 HEAP32[$0 + 4 >> 2] = $_M >>> 1;
 $11 = _malloc($_M) | 0;
 $12 = $0 + 12 | 0;
 HEAP32[$12 >> 2] = $11;
 if (!$_p) {
  _ofdmframe_init_default_sctype($_M, $11);
  $17 = HEAP32[$12 >> 2] | 0;
  $18 = HEAP32[$0 >> 2] | 0;
 } else {
  _memcpy($11 | 0, $_p | 0, $_M | 0) | 0;
  $17 = $11;
  $18 = $_M;
 }
 $15 = $0 + 20 | 0;
 $16 = $0 + 24 | 0;
 _ofdmframe_validate_sctype($17, $18, $0 + 16 | 0, $15, $16);
 $19 = HEAP32[$15 >> 2] | 0;
 $20 = HEAP32[$16 >> 2] | 0;
 if (($19 | 0) == (0 - $20 | 0)) {
  _fwrite(gb + 36416 | 0, 73, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if (!$20) {
  _fwrite(gb + 36490 | 0, 71, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if ($19 >>> 0 < 2) {
  _fwrite(gb + 36562 | 0, 72, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 $28 = HEAP32[$0 >> 2] | 0;
 $29 = $28 << 3;
 $30 = _malloc($29) | 0;
 HEAP32[$0 + 52 >> 2] = $30;
 $32 = _malloc($29) | 0;
 HEAP32[$0 + 56 >> 2] = $32;
 HEAP32[$0 + 48 >> 2] = _fft_create_plan($28, $32, $30, 1, 0) | 0;
 HEAP32[$0 + 60 >> 2] = _windowcf_create((HEAP32[$8 >> 2] | 0) + (HEAP32[$0 >> 2] | 0) | 0) | 0;
 $41 = HEAP32[$0 >> 2] | 0;
 $42 = $41 << 3;
 $43 = _malloc($42) | 0;
 HEAP32[$0 + 64 >> 2] = $43;
 $45 = _malloc($42) | 0;
 HEAP32[$0 + 68 >> 2] = $45;
 $48 = $0 + 72 | 0;
 HEAP32[$48 >> 2] = _malloc($42) | 0;
 $50 = $0 + 76 | 0;
 HEAP32[$50 >> 2] = _malloc($42) | 0;
 $52 = $0 + 28 | 0;
 _ofdmframe_init_S0(HEAP32[$12 >> 2] | 0, $41, $43, $45, $52);
 $57 = $0 + 32 | 0;
 _ofdmframe_init_S1(HEAP32[$12 >> 2] | 0, HEAP32[$0 >> 2] | 0, HEAP32[$48 >> 2] | 0, HEAP32[$50 >> 2] | 0, $57);
 $58 = HEAP32[$0 >> 2] | 0;
 $59 = +($58 >>> 0);
 $60 = +Math_sqrt(+$59);
 HEAPF32[$0 + 36 >> 2] = $60 / +Math_sqrt(+(+(((HEAP32[$16 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) | 0) >>> 0)));
 HEAPF32[$0 + 40 >> 2] = $60 / +Math_sqrt(+(+((HEAP32[$52 >> 2] | 0) >>> 0)));
 HEAPF32[$0 + 44 >> 2] = $60 / +Math_sqrt(+(+((HEAP32[$57 >> 2] | 0) >>> 0)));
 HEAPF32[$0 + 80 >> 2] = 1.0;
 $79 = $58 << 3;
 $80 = _malloc($79) | 0;
 HEAP32[$0 + 84 >> 2] = $80;
 $82 = _malloc($79) | 0;
 HEAP32[$0 + 88 >> 2] = $82;
 $84 = _malloc($79) | 0;
 HEAP32[$0 + 92 >> 2] = $84;
 $86 = _malloc($79) | 0;
 $87 = $0 + 96 | 0;
 HEAP32[$87 >> 2] = $86;
 HEAP32[$0 + 100 >> 2] = _malloc($79) | 0;
 _memset($80 | 0, 0, $79 | 0) | 0;
 _memset($82 | 0, 0, $79 | 0) | 0;
 _memset($84 | 0, 0, $79 | 0) | 0;
 _memset($86 | 0, 0, $79 | 0) | 0;
 $90 = HEAP32[$8 >> 2] | 0;
 $$ = $90 >>> 0 < 2 ? $90 : 2;
 HEAP32[$0 + 132 >> 2] = $$;
 $99 = +($$ >>> 0) * 2.0 * 3.141592653589793 / $59;
 if ($58 | 0) {
  $101 = $99 * 0.0;
  $103 = +Math_sin(+$101);
  HEAPF32[$86 >> 2] = +Math_cos(+$101) + $103 * 0.0;
  HEAPF32[$86 + 4 >> 2] = $103;
  if ((HEAP32[$0 >> 2] | 0) >>> 0 > 1) {
   $110 = 1;
   do {
    $$pre3 = HEAP32[$87 >> 2] | 0;
    $111 = $99 * +($110 >>> 0);
    $113 = +Math_sin(+$111);
    HEAPF32[$$pre3 + ($110 << 3) >> 2] = +Math_cos(+$111) + $113 * 0.0;
    HEAPF32[$$pre3 + ($110 << 3) + 4 >> 2] = $113;
    $110 = $110 + 1 | 0;
   } while ($110 >>> 0 < (HEAP32[$0 >> 2] | 0) >>> 0);
  }
 }
 HEAP32[$0 + 160 >> 2] = $_callback;
 HEAP32[$0 + 164 >> 2] = $_userdata;
 $124 = $0 + 108 | 0;
 HEAP32[$124 >> 2] = _nco_crcf_create(0) | 0;
 $126 = $0 + 112 | 0;
 HEAP32[$126 >> 2] = _msequence_create_default(8) | 0;
 _nco_crcf_reset(HEAP32[$124 >> 2] | 0);
 _msequence_reset(HEAP32[$126 >> 2] | 0);
 $129 = $0 + 136 | 0;
 $130 = $0 + 116 | 0;
 HEAP32[$130 >> 2] = 0;
 HEAP32[$130 + 4 >> 2] = 0;
 HEAP32[$130 + 8 >> 2] = 0;
 HEAP32[$130 + 12 >> 2] = 0;
 HEAP32[$129 >> 2] = 0;
 HEAP32[$129 + 4 >> 2] = 0;
 HEAP32[$129 + 8 >> 2] = 0;
 HEAP32[$129 + 12 >> 2] = 0;
 $131 = HEAP32[$0 >> 2] | 0;
 if ($131 >>> 0 > 44) {
  HEAPF32[$0 + 152 >> 2] = .3499999940395355;
  $141 = .30000001192092896;
  $140 = $0 + 156 | 0;
  HEAPF32[$140 >> 2] = $141;
  $142 = $0 + 104 | 0;
  HEAP32[$142 >> 2] = 0;
  $143 = $0 + 168 | 0;
  $144 = $0 + 208 | 0;
  HEAP32[$144 >> 2] = 0;
  $145 = $0 + 212 | 0;
  HEAP32[$145 >> 2] = 0;
  HEAP32[$143 >> 2] = 0;
  HEAP32[$143 + 4 >> 2] = 0;
  HEAP32[$143 + 8 >> 2] = 0;
  HEAP32[$143 + 12 >> 2] = 0;
  HEAP32[$143 + 16 >> 2] = 0;
  HEAP32[$143 + 20 >> 2] = 0;
  HEAP32[$143 + 24 >> 2] = 0;
  HEAP32[$143 + 28 >> 2] = 0;
  return $0 | 0;
 } else {
  $136 = +((44 - $131 | 0) >>> 0) * .009999999776482582;
  HEAPF32[$0 + 152 >> 2] = $136 + .3499999940395355;
  $141 = $136 + .30000001192092896;
  $140 = $0 + 156 | 0;
  HEAPF32[$140 >> 2] = $141;
  $142 = $0 + 104 | 0;
  HEAP32[$142 >> 2] = 0;
  $143 = $0 + 168 | 0;
  $144 = $0 + 208 | 0;
  HEAP32[$144 >> 2] = 0;
  $145 = $0 + 212 | 0;
  HEAP32[$145 >> 2] = 0;
  HEAP32[$143 >> 2] = 0;
  HEAP32[$143 + 4 >> 2] = 0;
  HEAP32[$143 + 8 >> 2] = 0;
  HEAP32[$143 + 12 >> 2] = 0;
  HEAP32[$143 + 16 >> 2] = 0;
  HEAP32[$143 + 20 >> 2] = 0;
  HEAP32[$143 + 24 >> 2] = 0;
  HEAP32[$143 + 28 >> 2] = 0;
  return $0 | 0;
 }
 return 0;
}

function _liquid_firdes_gmskrx($_k, $_m, $_beta, $_dt, $_h) {
 $_k = $_k | 0;
 $_m = $_m | 0;
 $_beta = +$_beta;
 $_dt = +$_dt;
 $_h = $_h | 0;
 var $$pre = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $25 = 0.0, $29 = 0, $31 = 0, $33 = 0, $47 = 0.0, $48 = 0.0, $51 = 0.0, $54 = 0.0, $57 = 0.0, $72 = 0.0, $73 = 0.0, $76 = 0, $77 = 0, $79 = 0.0, $9 = 0, $93 = 0.0, $G_prime_min$023 = 0.0, $G_prime_min$1 = 0.0, $G_prime_min$1$lcssa = 0.0, $H_prime_min$022 = 0.0, $H_prime_min$110 = 0.0, $H_prime_min$110$lcssa = 0.0, $H_prime_min$111 = 0.0, $H_prime_min$112 = 0.0, $H_tx_min$021 = 0.0, $H_tx_min$127 = 0.0, $H_tx_min$127$lcssa = 0.0, $H_tx_min$128 = 0.0, $H_tx_min$14 = 0.0, $i$024 = 0, $i$118 = 0, $i$217 = 0, $i$316 = 0, $i$415 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if (!$_k) {
  _fwrite(gb + 23504 | 0, 56, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if (!$_m) {
  _fwrite(gb + 23561 | 0, 56, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if ($_beta < 0.0 | $_beta > 1.0) {
  _fwrite(gb + 23618 | 0, 53, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 $9 = Math_imul($_k << 1, $_m) | 0 | 1;
 $10 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($9 << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $11 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($9 << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 _liquid_firdes_gmsktx($_k, $_m, $_beta, 0.0, $10);
 $12 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($9 << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $13 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($9 << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $14 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($9 << 3) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $15 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($9 << 3) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $16 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($9 << 3) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $17 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($9 << 3) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $18 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($9 << 3) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $19 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($9 << 3) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $20 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($9 << 3) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $21 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($9 << 3) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 _liquid_firdes_prototype(1, $_k, $_m, $_beta, 0.0, $12);
 $25 = +($_k >>> 0);
 _liquid_firdes_kaiser($9, ($_beta * .1 + .699999988079071) / $25, 60.0, 0.0, $13);
 $29 = Math_imul($_m, $_k) | 0;
 $31 = $29 << 1 | 1;
 $i$024 = 0;
 do {
  $33 = (($i$024 + $29 | 0) >>> 0) % ($9 >>> 0) | 0;
  HEAP32[$15 + ($i$024 << 3) >> 2] = HEAP32[$12 + ($33 << 2) >> 2];
  HEAPF32[$15 + ($i$024 << 3) + 4 >> 2] = 0.0;
  HEAP32[$16 + ($i$024 << 3) >> 2] = HEAP32[$13 + ($33 << 2) >> 2];
  HEAPF32[$16 + ($i$024 << 3) + 4 >> 2] = 0.0;
  HEAP32[$14 + ($i$024 << 3) >> 2] = HEAP32[$10 + ($33 << 2) >> 2];
  HEAPF32[$14 + ($i$024 << 3) + 4 >> 2] = 0.0;
  $i$024 = $i$024 + 1 | 0;
 } while (($i$024 | 0) != ($31 | 0));
 _fft_run($9, $15, $19, 1, 0);
 _fft_run($9, $16, $20, 1, 0);
 _fft_run($9, $14, $18, 1, 0);
 $47 = +HEAPF32[$19 >> 2];
 $$pre = +HEAPF32[$20 >> 2];
 $G_prime_min$023 = 0.0;
 $H_prime_min$022 = 0.0;
 $H_tx_min$021 = 0.0;
 $i$118 = 0;
 while (1) {
  $51 = +HEAPF32[$18 + ($i$118 << 3) >> 2];
  if (!$i$118) {
   $93 = $$pre;
   $H_prime_min$111 = $47;
   $H_tx_min$128 = $51;
   label = 13;
  } else {
   $H_tx_min$14 = $51 < $H_tx_min$021 ? $51 : $H_tx_min$021;
   $54 = +HEAPF32[$19 + ($i$118 << 3) >> 2];
   $H_prime_min$112 = $54 < $H_prime_min$022 ? $54 : $H_prime_min$022;
   $57 = +HEAPF32[$20 + ($i$118 << 3) >> 2];
   if ($57 < $G_prime_min$023) {
    $93 = $57;
    $H_prime_min$111 = $H_prime_min$112;
    $H_tx_min$128 = $H_tx_min$14;
    label = 13;
   } else {
    $G_prime_min$1 = $G_prime_min$023;
    $H_prime_min$110 = $H_prime_min$112;
    $H_tx_min$127 = $H_tx_min$14;
   }
  }
  if ((label | 0) == 13) {
   label = 0;
   $G_prime_min$1 = $93;
   $H_prime_min$110 = $H_prime_min$111;
   $H_tx_min$127 = $H_tx_min$128;
  }
  $i$118 = $i$118 + 1 | 0;
  if (($i$118 | 0) == ($31 | 0)) {
   $G_prime_min$1$lcssa = $G_prime_min$1;
   $H_prime_min$110$lcssa = $H_prime_min$110;
   $H_tx_min$127$lcssa = $H_tx_min$127;
   break;
  } else {
   $G_prime_min$023 = $G_prime_min$1;
   $H_prime_min$022 = $H_prime_min$110;
   $H_tx_min$021 = $H_tx_min$127;
  }
 }
 $48 = +HEAPF32[$20 >> 2];
 $72 = $48;
 $i$217 = 0;
 while (1) {
  $73 = ($72 - $G_prime_min$1$lcssa) / $48;
  HEAPF32[$21 + ($i$217 << 3) >> 2] = (+HEAPF32[$19 + ($i$217 << 3) >> 2] - $H_prime_min$110$lcssa + 1.0000000474974513e-03) / (+HEAPF32[$18 + ($i$217 << 3) >> 2] - $H_tx_min$127$lcssa + 1.0000000474974513e-03) * $73;
  HEAPF32[$21 + ($i$217 << 3) + 4 >> 2] = $73 * 0.0;
  $76 = $i$217 + 1 | 0;
  if (($76 | 0) == ($31 | 0)) break;
  $72 = +HEAPF32[$20 + ($76 << 3) >> 2];
  $i$217 = $76;
 }
 _fft_run($9, $21, $17, -1, 0);
 $77 = $29 + 1 | 0;
 $79 = +((Math_imul($9, $_k) | 0) >>> 0);
 $i$316 = 0;
 do {
  HEAPF32[$11 + ($i$316 << 2) >> 2] = +HEAPF32[$17 + (((($77 + $i$316 | 0) >>> 0) % ($9 >>> 0) | 0) << 3) >> 2] / $79;
  $i$316 = $i$316 + 1 | 0;
 } while (($i$316 | 0) != ($31 | 0));
 $i$415 = 0;
 do {
  HEAPF32[$_h + ($i$415 << 2) >> 2] = $25 * ($25 * +HEAPF32[$11 + ($i$415 << 2) >> 2]);
  $i$415 = $i$415 + 1 | 0;
 } while (($i$415 | 0) != ($31 | 0));
 STACKTOP = sp;
 return;
}

function _modem_create_qam($_bits_per_symbol) {
 $_bits_per_symbol = $_bits_per_symbol | 0;
 var $$pre$phi5Z2D = 0, $$pre3 = 0, $10 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $33 = 0, $34 = 0, $35 = 0.0, $5 = 0, $52 = 0, $54 = 0, $6 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0;
 if (!$_bits_per_symbol) {
  _fwrite(gb + 31627 | 0, 66, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 $2 = _malloc(252) | 0;
 if ($_bits_per_symbol >>> 0 > 16) {
  _fwrite(gb + 31694 | 0, 64, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 $5 = $2 + 76 | 0;
 HEAP32[$5 >> 2] = 0;
 $6 = $2 + 80 | 0;
 HEAP32[$6 >> 2] = 0;
 $7 = $2 + 4 | 0;
 HEAP32[$7 >> 2] = $_bits_per_symbol;
 $8 = 1 << $_bits_per_symbol;
 $9 = $2 + 8 | 0;
 HEAP32[$9 >> 2] = $8;
 $10 = $2 + 236 | 0;
 HEAP32[$10 >> 2] = 0;
 HEAP32[$10 + 4 >> 2] = 0;
 HEAP32[$10 + 8 >> 2] = 0;
 HEAP32[$10 + 12 >> 2] = 0;
 if (!($_bits_per_symbol & 1)) {
  $19 = $_bits_per_symbol >>> 1;
  HEAP32[$2 + 100 >> 2] = $19;
  $21 = $2 + 104 | 0;
  HEAP32[$21 >> 2] = $19;
  $$pre$phi5Z2D = $21;
  $23 = $19;
  $26 = $19;
 } else {
  $14 = ($_bits_per_symbol + 1 | 0) >>> 1;
  HEAP32[$2 + 100 >> 2] = $14;
  $17 = ($_bits_per_symbol + -1 | 0) >>> 1;
  $18 = $2 + 104 | 0;
  HEAP32[$18 >> 2] = $17;
  $$pre$phi5Z2D = $18;
  $23 = $14;
  $26 = $17;
 }
 $22 = 1 << $23;
 HEAP32[$2 + 108 >> 2] = $22;
 HEAP32[$2 + 112 >> 2] = 1 << $26;
 if (($23 + $26 | 0) != ($_bits_per_symbol | 0)) ___assert_fail(gb + 31759 | 0, gb + 31801 | 0, 54, gb + 31827 | 0);
 if (($22 << $26 | 0) != ($8 | 0)) ___assert_fail(gb + 31844 | 0, gb + 31801 | 0, 55, gb + 31827 | 0);
 L17 : do if (($8 | 0) < 512) switch ($8 | 0) {
 case 4:
  {
   HEAPF32[$2 + 116 >> 2] = .7071067690849304;
   HEAP32[$2 >> 2] = 25;
   $35 = .7071067690849304;
   break L17;
   break;
  }
 case 8:
  {
   HEAPF32[$2 + 116 >> 2] = .40824830532073975;
   HEAP32[$2 >> 2] = 26;
   $35 = .40824830532073975;
   break L17;
   break;
  }
 case 16:
  {
   HEAPF32[$2 + 116 >> 2] = .3162277638912201;
   HEAP32[$2 >> 2] = 27;
   $35 = .3162277638912201;
   break L17;
   break;
  }
 case 32:
  {
   HEAPF32[$2 + 116 >> 2] = .1961161345243454;
   HEAP32[$2 >> 2] = 28;
   $35 = .1961161345243454;
   break L17;
   break;
  }
 case 64:
  {
   HEAPF32[$2 + 116 >> 2] = .15430335700511932;
   HEAP32[$2 >> 2] = 29;
   $35 = .15430335700511932;
   break L17;
   break;
  }
 case 128:
  {
   HEAPF32[$2 + 116 >> 2] = .09712858498096466;
   HEAP32[$2 >> 2] = 30;
   $35 = .09712858498096466;
   break L17;
   break;
  }
 case 256:
  {
   HEAPF32[$2 + 116 >> 2] = .0766965001821518;
   HEAP32[$2 >> 2] = 31;
   $35 = .0766965001821518;
   break L17;
   break;
  }
 default:
  {
   $52 = HEAP32[gb + 9336 >> 2] | 0;
   _fwrite(gb + 31886 | 0, 58, 1, $52) | 0;
   _exit(1);
  }
 } else {
  if (($8 | 0) < 8192) switch ($8 | 0) {
  case 512:
   {
    HEAPF32[$2 + 116 >> 2] = .048450157046318054;
    HEAP32[$2 >> 2] = 32;
    $35 = .048450157046318054;
    break L17;
    break;
   }
  case 1024:
   {
    HEAPF32[$2 + 116 >> 2] = .03829197958111763;
    HEAP32[$2 >> 2] = 33;
    $35 = .03829197958111763;
    break L17;
    break;
   }
  case 2048:
   {
    HEAPF32[$2 + 116 >> 2] = .02421087585389614;
    HEAP32[$2 >> 2] = 34;
    $35 = .02421087585389614;
    break L17;
    break;
   }
  case 4096:
   {
    HEAPF32[$2 + 116 >> 2] = .01913897506892681;
    HEAP32[$2 >> 2] = 35;
    $35 = .01913897506892681;
    break L17;
    break;
   }
  default:
   {
    $52 = HEAP32[gb + 9336 >> 2] | 0;
    _fwrite(gb + 31886 | 0, 58, 1, $52) | 0;
    _exit(1);
   }
  }
  if (($8 | 0) < 32768) if (($8 | 0) < 16384) switch ($8 | 0) {
  case 8192:
   {
    HEAPF32[$2 + 116 >> 2] = .012103663757443428;
    HEAP32[$2 >> 2] = 36;
    $35 = .012103663757443428;
    break L17;
    break;
   }
  default:
   {
    $52 = HEAP32[gb + 9336 >> 2] | 0;
    _fwrite(gb + 31886 | 0, 58, 1, $52) | 0;
    _exit(1);
   }
  } else switch ($8 | 0) {
  case 16384:
   {
    HEAPF32[$2 + 116 >> 2] = .009568611159920692;
    HEAP32[$2 >> 2] = 37;
    $35 = .009568611159920692;
    break L17;
    break;
   }
  default:
   {
    $52 = HEAP32[gb + 9336 >> 2] | 0;
    _fwrite(gb + 31886 | 0, 58, 1, $52) | 0;
    _exit(1);
   }
  } else if (($8 | 0) < 65536) switch ($8 | 0) {
  case 32768:
   {
    HEAPF32[$2 + 116 >> 2] = 6.0516102239489555e-03;
    HEAP32[$2 >> 2] = 38;
    $35 = 6.0516102239489555e-03;
    break L17;
    break;
   }
  default:
   {
    $52 = HEAP32[gb + 9336 >> 2] | 0;
    _fwrite(gb + 31886 | 0, 58, 1, $52) | 0;
    _exit(1);
   }
  } else switch ($8 | 0) {
  case 65536:
   {
    HEAPF32[$2 + 116 >> 2] = .004784196149557829;
    HEAP32[$2 >> 2] = 39;
    $35 = .004784196149557829;
    break L17;
    break;
   }
  default:
   {
    $52 = HEAP32[gb + 9336 >> 2] | 0;
    _fwrite(gb + 31886 | 0, 58, 1, $52) | 0;
    _exit(1);
   }
  }
 } while (0);
 $33 = $2 + 116 | 0;
 $34 = $2 + 12 | 0;
 HEAPF32[$34 >> 2] = $35;
 if ((HEAP32[$7 >> 2] | 0) >>> 0 > 1) {
  $54 = 1;
  do {
   HEAPF32[$34 + ($54 << 2) >> 2] = +(1 << $54 | 0) * +HEAPF32[$33 >> 2];
   $54 = $54 + 1 | 0;
  } while ($54 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0);
 }
 $$pre3 = HEAP32[$9 >> 2] | 0;
 HEAP32[$10 >> 2] = fb + 19;
 HEAP32[$2 + 240 >> 2] = fb + 20;
 HEAP32[$5 >> 2] = _malloc($$pre3 << 3) | 0;
 _modem_init_map($2);
 HEAP32[$6 >> 2] = 1;
 $64 = HEAP32[$7 >> 2] | 0;
 if (($64 | 0) == 3) _modem_demodsoft_gentab($2, 3); else if ($64 >>> 0 > 3) _modem_demodsoft_gentab($2, 4);
 HEAPF32[$2 + 84 >> 2] = 1.0;
 HEAPF32[$2 + 88 >> 2] = 0.0;
 HEAP32[$2 + 92 >> 2] = 1065353216;
 HEAPF32[$2 + 96 >> 2] = 0.0;
 if (!(_liquid_modem_is_dpsk(HEAP32[$2 >> 2] | 0) | 0)) return $2 | 0;
 HEAPF32[$$pre$phi5Z2D >> 2] = 0.0;
 return $2 | 0;
}

function _liquid_iirdes($_ftype, $_btype, $_format, $_n, $_fc, $_f0, $_Ap, $_As, $_B, $_A) {
 $_ftype = $_ftype | 0;
 $_btype = $_btype | 0;
 $_format = $_format | 0;
 $_n = $_n | 0;
 $_fc = +$_fc;
 $_f0 = +$_f0;
 $_Ap = +$_Ap;
 $_As = +$_As;
 $_B = $_B | 0;
 $_A = $_A | 0;
 var $$0 = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $101 = 0.0, $102 = 0, $104 = 0, $107 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $116 = 0, $118 = 0, $121 = 0.0, $122 = 0.0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $23 = 0.0, $37 = 0.0, $40 = 0.0, $44 = 0.0, $48 = 0.0, $56 = 0, $57 = 0, $58 = 0, $65 = 0.0, $72 = 0.0, $83 = 0.0, $92 = 0.0, $96 = 0, $98 = 0, $i$01$i = 0, $k0$sroa$0$0 = 0.0, $ka = 0, $kd = 0, $m$0$i = 0.0, $nza$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy2 = sp + 40 | 0;
 $ka = sp + 24 | 0;
 $kd = sp + 8 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 16 | 0;
 $2 = sp;
 if (!(!($_fc <= 0.0) & !($_fc >= .5))) {
  _fwrite(gb + 23995 | 0, 54, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if ($_f0 < 0.0 | $_f0 > .5) {
  _fwrite(gb + 24050 | 0, 54, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if ($_Ap <= 0.0) {
  _fwrite(gb + 24105 | 0, 54, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if ($_As <= 0.0) {
  _fwrite(gb + 24160 | 0, 54, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if (!$_n) {
  _fwrite(gb + 24215 | 0, 49, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 $15 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($_n << 3) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $16 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($_n << 3) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $17 = $_n & 1;
 $19 = ($_n - $17 | 0) >>> 1;
 switch ($_ftype | 0) {
 case 0:
  {
   _butter_azpkf($_n, $16, $15, $ka);
   $k0$sroa$0$0 = 1.0;
   $nza$0 = 0;
   break;
  }
 case 1:
  {
   $23 = +Math_sqrt(+(+Math_pow(10.0, +($_Ap / 10.0)) + -1.0));
   if (!$17) $121 = 1.0 / +Math_sqrt(+($23 * $23 + 1.0)); else $121 = 1.0;
   _cheby1_azpkf($_n, $23, $16, $15, $ka);
   $k0$sroa$0$0 = $121;
   $nza$0 = 0;
   break;
  }
 case 2:
  {
   _cheby2_azpkf($_n, +Math_pow(10.0, +(-$_As / 20.0)), $16, $15, $ka);
   $k0$sroa$0$0 = 1.0;
   $nza$0 = $19 << 1;
   break;
  }
 case 3:
  {
   $37 = +Math_pow(10.0, +(-$_Ap / 20.0));
   $40 = +Math_pow(10.0, +(-$_As / 20.0));
   $44 = +Math_sqrt(+(1.0 / ($37 * $37) + -1.0));
   $48 = +Math_sqrt(+(1.0 / ($40 * $40) + -1.0));
   if (!$17) $122 = 1.0 / +Math_sqrt(+($44 * $44 + 1.0)); else $122 = 1.0;
   _ellip_azpkf($_n, $44, $48, $16, $15, $ka);
   $k0$sroa$0$0 = $122;
   $nza$0 = $19 << 1;
   break;
  }
 case 4:
  {
   _bessel_azpkf($_n, $16, $15, $ka);
   $k0$sroa$0$0 = 1.0;
   $nza$0 = 0;
   break;
  }
 default:
  {
   _fwrite(gb + 24265 | 0, 44, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
   _exit(1);
  }
 }
 $56 = $_n << 1;
 $57 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($56 << 3) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $58 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($56 << 3) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 switch ($_btype | 0) {
 case 0:
  {
   $m$0$i = +Math_tan(+($_fc * 3.141592653589793));
   break;
  }
 case 1:
  {
   $65 = $_fc * 3.141592653589793;
   $m$0$i = -+Math_cos(+$65) / +Math_sin(+$65);
   break;
  }
 case 2:
  {
   $72 = $_fc * 6.283185307179586;
   $m$0$i = (+Math_cos(+$72) - +Math_cos(+($_f0 * 6.283185307179586))) / +Math_sin(+$72);
   break;
  }
 case 3:
  {
   $83 = $_fc * 6.283185307179586;
   $m$0$i = +Math_sin(+$83) / (+Math_cos(+$83) - +Math_cos(+($_f0 * 6.283185307179586)));
   break;
  }
 default:
  $m$0$i = 0.0;
 }
 $92 = +Math_abs(+$m$0$i);
 HEAPF32[$0 >> 2] = $k0$sroa$0$0;
 HEAPF32[$0 + 4 >> 2] = 0.0;
 HEAP32[$$byval_copy2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy2 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 _bilinear_zpkf($16, $nza$0, $15, $_n, $$byval_copy2, $92, $57, $58, $kd);
 if (($_btype | 2 | 0) == 3) {
  $i$01$i = 0;
  do {
   $96 = $57 + ($i$01$i << 3) | 0;
   $98 = $57 + ($i$01$i << 3) + 4 | 0;
   $101 = -+HEAPF32[$98 >> 2];
   HEAPF32[$96 >> 2] = -+HEAPF32[$96 >> 2];
   HEAPF32[$98 >> 2] = $101;
   $102 = $58 + ($i$01$i << 3) | 0;
   $104 = $58 + ($i$01$i << 3) + 4 | 0;
   $107 = -+HEAPF32[$104 >> 2];
   HEAPF32[$102 >> 2] = -+HEAPF32[$102 >> 2];
   HEAPF32[$104 >> 2] = $107;
   $i$01$i = $i$01$i + 1 | 0;
  } while (($i$01$i | 0) != ($_n | 0));
 }
 if (($_btype | 1 | 0) == 3) {
  $111 = _llvm_stacksave() | 0;
  $112 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($56 << 3) | 0) + 15 & -16) | 0;
  if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
  $113 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($56 << 3) | 0) + 15 & -16) | 0;
  if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
  _iirdes_dzpk_lp2bp($57, $58, $_n, $_f0, $112, $113);
  $114 = $_n << 4;
  _memcpy($57 | 0, $112 | 0, $114 | 0) | 0;
  _memcpy($58 | 0, $113 | 0, $114 | 0) | 0;
  _llvm_stackrestore($111 | 0);
  $$0 = $56;
 } else $$0 = $_n;
 $116 = HEAP32[$kd >> 2] | 0;
 $118 = HEAP32[$kd + 4 >> 2] | 0;
 if (($_format | 0) == 1) {
  HEAP32[$1 >> 2] = $116;
  HEAP32[$1 + 4 >> 2] = $118;
  HEAP32[$$byval_copy2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$$byval_copy2 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  _iirdes_dzpk2tff($57, $58, $$0, $$byval_copy2, $_B, $_A);
  STACKTOP = sp;
  return;
 } else {
  HEAP32[$2 >> 2] = $116;
  HEAP32[$2 + 4 >> 2] = $118;
  HEAP32[$$byval_copy2 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$$byval_copy2 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
  _iirdes_dzpk2sosf($57, $58, $$0, $$byval_copy2, $_B, $_A);
  STACKTOP = sp;
  return;
 }
}

function _iirfilt_crcf_execute($_q, $_x, $_y) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 $_y = $_y | 0;
 var $$lcssa36 = 0.0, $$lcssa37 = 0.0, $$phi$trans$insert$i = 0, $$pre$phi$iZ2D = 0, $10 = 0, $102 = 0.0, $105 = 0.0, $106 = 0.0, $11 = 0, $110 = 0, $15 = 0, $19 = 0.0, $20 = 0.0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0.0, $3 = 0, $36 = 0.0, $37 = 0.0, $40 = 0, $42 = 0, $44 = 0, $45 = 0, $47 = 0.0, $5 = 0, $54 = 0.0, $55 = 0.0, $58 = 0, $61 = 0.0, $63 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $78 = 0.0, $79 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $96 = 0.0, $i$0$i = 0, $i$0$in14$i = 0, $i$0$in14$i$phi = 0, $i$013$i = 0, $i$015$i = 0, $i$04$i = 0, $i$15$i = 0, $i$21$i = 0, $t0$sroa$0$03$i = 0.0, $t0$sroa$5$02$i = 0.0, $t1$sroa$0$0$lcssa$i = 0, $t1$sroa$6$0$lcssa$i = 0, $v0$sroa$0$0$lcssa$i = 0.0, $v0$sroa$0$07$i = 0.0, $v0$sroa$6$0$lcssa$i = 0.0, $v0$sroa$6$06$i = 0.0, $y0$sroa$0$0$lcssa$i = 0.0, $y0$sroa$0$03$i = 0.0, $y0$sroa$6$0$lcssa$i = 0.0, $y0$sroa$6$02$i = 0.0;
 $3 = HEAP32[$_x >> 2] | 0;
 $5 = HEAP32[$_x + 4 >> 2] | 0;
 if (HEAP32[$_q + 24 >> 2] | 0) {
  $58 = $_q + 32 | 0;
  if (!(HEAP32[$58 >> 2] | 0)) {
   $t1$sroa$0$0$lcssa$i = 0;
   $t1$sroa$6$0$lcssa$i = 0;
  } else {
   $61 = (HEAP32[tempDoublePtr >> 2] = $5, +HEAPF32[tempDoublePtr >> 2]);
   $63 = $_q + 28 | 0;
   $i$04$i = 0;
   $t0$sroa$0$03$i = (HEAP32[tempDoublePtr >> 2] = $3, +HEAPF32[tempDoublePtr >> 2]);
   $t0$sroa$5$02$i = $61;
   while (1) {
    $66 = HEAP32[(HEAP32[$63 >> 2] | 0) + ($i$04$i << 2) >> 2] | 0;
    $67 = $66 + 80 | 0;
    $68 = HEAP32[$67 >> 2] | 0;
    $69 = $66 + 84 | 0;
    $70 = HEAP32[$69 >> 2] | 0;
    HEAP32[$66 + 88 >> 2] = $68;
    HEAP32[$66 + 92 >> 2] = $70;
    $73 = $66 + 72 | 0;
    $74 = HEAP32[$73 >> 2] | 0;
    $75 = $66 + 76 | 0;
    $76 = +HEAPF32[$75 >> 2];
    HEAP32[$67 >> 2] = $74;
    HEAPF32[$69 >> 2] = $76;
    $78 = +HEAPF32[$66 + 16 >> 2];
    $79 = (HEAP32[tempDoublePtr >> 2] = $74, +HEAPF32[tempDoublePtr >> 2]);
    $85 = +HEAPF32[$66 + 20 >> 2];
    $86 = (HEAP32[tempDoublePtr >> 2] = $68, +HEAPF32[tempDoublePtr >> 2]);
    $87 = (HEAP32[tempDoublePtr >> 2] = $70, +HEAPF32[tempDoublePtr >> 2]);
    $90 = $t0$sroa$0$03$i - $79 * $78 - $86 * $85;
    $91 = $t0$sroa$5$02$i - $76 * $78 - $87 * $85;
    HEAPF32[$73 >> 2] = $90;
    HEAPF32[$75 >> 2] = $91;
    $92 = +HEAPF32[$66 >> 2];
    $96 = +HEAPF32[$66 + 4 >> 2];
    $102 = +HEAPF32[$66 + 8 >> 2];
    $105 = $90 * $92 + $79 * $96 + $86 * $102;
    $106 = $91 * $92 + $76 * $96 + $87 * $102;
    $i$04$i = $i$04$i + 1 | 0;
    if ($i$04$i >>> 0 >= (HEAP32[$58 >> 2] | 0) >>> 0) {
     $$lcssa36 = $105;
     $$lcssa37 = $106;
     break;
    } else {
     $t0$sroa$0$03$i = $105;
     $t0$sroa$5$02$i = $106;
    }
   }
   $110 = (HEAPF32[tempDoublePtr >> 2] = $$lcssa36, HEAP32[tempDoublePtr >> 2] | 0);
   $t1$sroa$0$0$lcssa$i = $110;
   $t1$sroa$6$0$lcssa$i = (HEAPF32[tempDoublePtr >> 2] = $$lcssa37, HEAP32[tempDoublePtr >> 2] | 0);
  }
  HEAP32[$_y >> 2] = $t1$sroa$0$0$lcssa$i;
  HEAP32[$_y + 4 >> 2] = $t1$sroa$6$0$lcssa$i;
  return;
 }
 $7 = HEAP32[$_q + 12 >> 2] | 0;
 $i$013$i = $7 + -1 | 0;
 if ($i$013$i | 0) {
  $9 = $_q + 8 | 0;
  $i$0$in14$i = $7;
  $i$015$i = $i$013$i;
  while (1) {
   $10 = $i$0$in14$i + -2 | 0;
   $11 = HEAP32[$9 >> 2] | 0;
   $15 = HEAP32[$11 + ($10 << 3) + 4 >> 2] | 0;
   HEAP32[$11 + ($i$015$i << 3) >> 2] = HEAP32[$11 + ($10 << 3) >> 2];
   HEAP32[$11 + ($i$015$i << 3) + 4 >> 2] = $15;
   $i$0$i = $i$015$i + -1 | 0;
   if (!$i$0$i) break; else {
    $i$0$in14$i$phi = $i$015$i;
    $i$015$i = $i$0$i;
    $i$0$in14$i = $i$0$in14$i$phi;
   }
  }
 }
 $19 = (HEAP32[tempDoublePtr >> 2] = $3, +HEAPF32[tempDoublePtr >> 2]);
 $20 = (HEAP32[tempDoublePtr >> 2] = $5, +HEAPF32[tempDoublePtr >> 2]);
 $22 = HEAP32[$_q + 20 >> 2] | 0;
 if ($22 >>> 0 > 1) {
  $25 = HEAP32[$_q + 4 >> 2] | 0;
  $26 = $_q + 8 | 0;
  $27 = HEAP32[$26 >> 2] | 0;
  $i$15$i = 1;
  $v0$sroa$0$07$i = $19;
  $v0$sroa$6$06$i = $20;
  while (1) {
   $29 = +HEAPF32[$25 + ($i$15$i << 2) >> 2];
   $36 = $v0$sroa$0$07$i - $29 * +HEAPF32[$27 + ($i$15$i << 3) >> 2];
   $37 = $v0$sroa$6$06$i - $29 * +HEAPF32[$27 + ($i$15$i << 3) + 4 >> 2];
   $i$15$i = $i$15$i + 1 | 0;
   if (($i$15$i | 0) == ($22 | 0)) {
    $$pre$phi$iZ2D = $26;
    $40 = $27;
    $v0$sroa$0$0$lcssa$i = $36;
    $v0$sroa$6$0$lcssa$i = $37;
    break;
   } else {
    $v0$sroa$0$07$i = $36;
    $v0$sroa$6$06$i = $37;
   }
  }
 } else {
  $$phi$trans$insert$i = $_q + 8 | 0;
  $$pre$phi$iZ2D = $$phi$trans$insert$i;
  $40 = HEAP32[$$phi$trans$insert$i >> 2] | 0;
  $v0$sroa$0$0$lcssa$i = $19;
  $v0$sroa$6$0$lcssa$i = $20;
 }
 HEAPF32[$40 >> 2] = $v0$sroa$0$0$lcssa$i;
 HEAPF32[$40 + 4 >> 2] = $v0$sroa$6$0$lcssa$i;
 $42 = HEAP32[$_q + 16 >> 2] | 0;
 if (!$42) {
  $y0$sroa$0$0$lcssa$i = 0.0;
  $y0$sroa$6$0$lcssa$i = 0.0;
 } else {
  $44 = HEAP32[$_q >> 2] | 0;
  $45 = HEAP32[$$pre$phi$iZ2D >> 2] | 0;
  $i$21$i = 0;
  $y0$sroa$0$03$i = 0.0;
  $y0$sroa$6$02$i = 0.0;
  while (1) {
   $47 = +HEAPF32[$44 + ($i$21$i << 2) >> 2];
   $54 = $y0$sroa$0$03$i + $47 * +HEAPF32[$45 + ($i$21$i << 3) >> 2];
   $55 = $y0$sroa$6$02$i + $47 * +HEAPF32[$45 + ($i$21$i << 3) + 4 >> 2];
   $i$21$i = $i$21$i + 1 | 0;
   if (($i$21$i | 0) == ($42 | 0)) {
    $y0$sroa$0$0$lcssa$i = $54;
    $y0$sroa$6$0$lcssa$i = $55;
    break;
   } else {
    $y0$sroa$0$03$i = $54;
    $y0$sroa$6$02$i = $55;
   }
  }
 }
 HEAPF32[$_y >> 2] = $y0$sroa$0$0$lcssa$i;
 HEAPF32[$_y + 4 >> 2] = $y0$sroa$6$0$lcssa$i;
 return;
}

function _fpoly_bessel_roots_orchard($_n, $_roots) {
 $_n = $_n | 0;
 $_roots = $_roots | 0;
 var $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $101 = 0, $102 = 0, $106 = 0, $107 = 0, $11 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0.0, $28 = 0.0, $3 = 0, $33 = 0.0, $34 = 0.0, $4 = 0, $40 = 0, $44 = 0.0, $46 = 0.0, $49 = 0, $5 = 0, $51 = 0.0, $53 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $64 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $77 = 0, $79 = 0, $8 = 0, $82 = 0.0, $89 = 0, $91 = 0, $93 = 0, $94 = 0, $95 = 0, $97 = 0, $99 = 0, $i$13 = 0, $indvars$iv = 0, $indvars$iv14 = 0, $j$04 = 0, $j$16 = 0, $storemerge = 0.0, $storemerge18 = 0.0, $y_hat = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy1 = sp + 56 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $y_hat = sp + 32 | 0;
 $4 = sp + 8 | 0;
 $5 = sp;
 $6 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($_n << 3) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $7 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($_n << 3) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $8 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($_n << 3) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 L1 : do if ($_n >>> 0 > 1) {
  $10 = $7 + 4 | 0;
  $11 = $0 + 4 | 0;
  $12 = $6 + 4 | 0;
  $13 = $2 + 4 | 0;
  $14 = $1 + 4 | 0;
  $15 = $8 + 4 | 0;
  $16 = $3 + 4 | 0;
  $indvars$iv = 1;
  $indvars$iv14 = 1;
  while (1) {
   $19 = ($indvars$iv + ($indvars$iv14 & 1) | 0) >>> 1;
   $20 = $indvars$iv & 1;
   $21 = $20 + $indvars$iv | 0;
   $22 = $21 >>> 1;
   switch ($indvars$iv | 0) {
   case 1:
    {
     HEAPF32[$7 >> 2] = -1.0;
     HEAPF32[$10 >> 2] = 0.0;
     HEAPF32[$8 >> 2] = -1.0;
     HEAPF32[$15 >> 2] = 0.0;
     break;
    }
   case 2:
    {
     HEAPF32[$7 >> 2] = -1.0;
     HEAPF32[$10 >> 2] = 0.0;
     HEAPF32[$8 >> 2] = -1.5;
     HEAPF32[$15 >> 2] = .8660253882408142;
     break;
    }
   default:
    {
     $24 = +HEAPF32[$7 >> 2];
     if (!$20) {
      $28 = +HEAPF32[$10 >> 2];
      $33 = $24 * 2.0 - $28 * 0.0;
      $34 = $24 * 0.0 + $28 * 2.0;
      if (($33 != $33 | 0.0 != 0.0) & ($34 != $34 | 0.0 != 0.0)) {
       ___mulsc3($0, 2.0, 0.0, $24, $28);
       $44 = +HEAPF32[$0 >> 2];
       $46 = +HEAPF32[$11 >> 2];
      } else {
       $44 = $33;
       $46 = $34;
      }
      $40 = HEAP32[$12 >> 2] | 0;
      HEAP32[$2 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$13 >> 2] = $40;
      HEAP32[$$byval_copy1 >> 2] = HEAP32[$2 >> 2];
      HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
      _conjf($1, $$byval_copy1);
      $storemerge = $46 - +HEAPF32[$14 >> 2];
      $storemerge18 = $44 - +HEAPF32[$1 >> 2];
     } else {
      $storemerge = 0.0;
      $storemerge18 = $24 * 2.0 - +HEAPF32[$6 >> 2];
     }
     HEAPF32[$8 >> 2] = $storemerge18;
     HEAPF32[$15 >> 2] = $storemerge;
     if ($21 >>> 0 > 3) {
      $j$04 = 1;
      do {
       $49 = $j$04 - $20 | 0;
       $51 = +HEAPF32[$7 + ($49 << 3) >> 2];
       $53 = +HEAPF32[$7 + ($49 << 3) + 4 >> 2];
       $58 = $51 * 2.0 - $53 * 0.0;
       $59 = $51 * 0.0 + $53 * 2.0;
       if (($58 != $58 | 0.0 != 0.0) & ($59 != $59 | 0.0 != 0.0)) {
        ___mulsc3($3, 2.0, 0.0, $51, $53);
        $70 = +HEAPF32[$3 >> 2];
        $72 = +HEAPF32[$16 >> 2];
       } else {
        $70 = $58;
        $72 = $59;
       }
       $64 = $j$04 + -1 | 0;
       $71 = $72 - +HEAPF32[$6 + ($64 << 3) + 4 >> 2];
       HEAPF32[$8 + ($j$04 << 3) >> 2] = $70 - +HEAPF32[$6 + ($64 << 3) >> 2];
       HEAPF32[$8 + ($j$04 << 3) + 4 >> 2] = $71;
       $j$04 = $j$04 + 1 | 0;
      } while ($j$04 >>> 0 < $22 >>> 0);
     }
     if ($22 | 0) {
      $j$16 = 0;
      do {
       $77 = $8 + ($j$16 << 3) | 0;
       $79 = $8 + ($j$16 << 3) + 4 | 0;
       _fpoly_bessel_roots_orchard_recursion($indvars$iv, +HEAPF32[$77 >> 2], +HEAPF32[$79 >> 2], $$byval_copy1, $y_hat);
       $82 = +HEAPF32[$y_hat >> 2];
       HEAPF32[$77 >> 2] = +HEAPF32[$$byval_copy1 >> 2] + $82 * 0.0;
       HEAPF32[$79 >> 2] = $82;
       $j$16 = $j$16 + 1 | 0;
      } while (($j$16 | 0) != ($19 | 0));
     }
    }
   }
   _memcpy($6 | 0, $7 | 0, $22 - $20 << 3 | 0) | 0;
   _memcpy($7 | 0, $8 | 0, $22 << 3 | 0) | 0;
   $indvars$iv = $indvars$iv + 1 | 0;
   if (($indvars$iv | 0) == ($_n | 0)) break L1; else $indvars$iv14 = $indvars$iv14 ^ 1;
  }
 } while (0);
 $89 = $_n & 1;
 $91 = ($_n - $89 | 0) >>> 1;
 if ($91 | 0) {
  $93 = $5 + 4 | 0;
  $94 = $4 + 4 | 0;
  $95 = $_n >>> 1;
  $i$13 = 0;
  do {
   $97 = $91 - $i$13 + -1 | 0;
   $99 = HEAP32[$8 + ($97 << 3) >> 2] | 0;
   $101 = HEAP32[$8 + ($97 << 3) + 4 >> 2] | 0;
   $102 = $i$13 << 1;
   HEAP32[$_roots + ($102 << 3) >> 2] = $99;
   HEAP32[$_roots + ($102 << 3) + 4 >> 2] = $101;
   HEAP32[$5 >> 2] = $99;
   HEAP32[$93 >> 2] = $101;
   HEAP32[$$byval_copy1 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
   _conjf($4, $$byval_copy1);
   $106 = HEAP32[$94 >> 2] | 0;
   $107 = $102 | 1;
   HEAP32[$_roots + ($107 << 3) >> 2] = HEAP32[$4 >> 2];
   HEAP32[$_roots + ($107 << 3) + 4 >> 2] = $106;
   $i$13 = $i$13 + 1 | 0;
  } while (($i$13 | 0) != ($95 | 0));
 }
 if (!$89) {
  STACKTOP = sp;
  return;
 }
 $114 = HEAP32[$8 + 4 >> 2] | 0;
 $115 = $_n + -1 | 0;
 HEAP32[$_roots + ($115 << 3) >> 2] = HEAP32[$8 >> 2];
 HEAP32[$_roots + ($115 << 3) + 4 >> 2] = $114;
 STACKTOP = sp;
 return;
}

function _ofdmframesync_estimate_eqgain_poly($_q, $_order) {
 $_q = $_q | 0;
 $_order = $_order | 0;
 var $$_order = 0, $$byval_copy1 = 0, $$lcssa = 0.0, $$lcssa29 = 0.0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $100 = 0, $101 = 0, $102 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $118 = 0.0, $123 = 0, $126 = 0.0, $127 = 0.0, $131 = 0.0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $43 = 0.0, $44 = 0.0, $49 = 0, $53 = 0, $56 = 0, $60 = 0, $66 = 0, $70 = 0, $71 = 0.0, $73 = 0, $75 = 0.0, $78 = 0.0, $80 = 0.0, $84 = 0.0, $86 = 0.0, $91 = 0.0, $93 = 0.0, $98 = 0, $i$015 = 0, $i$112 = 0, $i$27 = 0, $n$0$lcssa = 0, $n$014 = 0, $n$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy1 = sp + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp;
 if (!(HEAP32[$_q + 168 >> 2] | 0)) $$pre$phiZ2D = $_q; else {
  _memmove(HEAP32[$_q + 188 >> 2] | 0, HEAP32[$_q + 92 >> 2] | 0, HEAP32[$_q >> 2] << 3 | 0) | 0;
  $$pre$phiZ2D = $_q;
 }
 $15 = (HEAP32[$_q + 24 >> 2] | 0) + (HEAP32[$_q + 20 >> 2] | 0) | 0;
 $16 = $15 + -1 | 0;
 $$_order = $16 >>> 0 < $_order >>> 0 ? $16 : $_order;
 $19 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($15 << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $20 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($15 << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $21 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($15 << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $22 = ($$_order >>> 0 > 10 ? 10 : $$_order) + 1 | 0;
 $23 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($22 << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $24 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($22 << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $25 = HEAP32[$$pre$phiZ2D >> 2] | 0;
 L5 : do if (!$25) $n$0$lcssa = 0; else {
  $27 = $_q + 4 | 0;
  $28 = $_q + 12 | 0;
  $29 = $_q + 92 | 0;
  $30 = $0 + 4 | 0;
  $31 = $1 + 4 | 0;
  $35 = $25;
  $i$015 = 0;
  $n$014 = 0;
  while (1) {
   $32 = HEAP32[$27 >> 2] | 0;
   $34 = (($32 + $i$015 | 0) >>> 0) % ($35 >>> 0) | 0;
   if (!(HEAP8[(HEAP32[$28 >> 2] | 0) + $34 >> 0] | 0)) {
    $66 = $35;
    $n$1 = $n$014;
   } else {
    if (($n$014 | 0) == ($15 | 0)) break;
    $43 = +($34 >>> 0);
    $44 = +($35 >>> 0);
    HEAPF32[$19 + ($n$014 << 2) >> 2] = ($34 >>> 0 > $32 >>> 0 ? $43 - $44 : $43) / $44;
    $49 = HEAP32[$29 >> 2] | 0;
    $53 = HEAP32[$49 + ($34 << 3) + 4 >> 2] | 0;
    HEAP32[$0 >> 2] = HEAP32[$49 + ($34 << 3) >> 2];
    HEAP32[$30 >> 2] = $53;
    HEAP32[$$byval_copy1 >> 2] = HEAP32[$0 >> 2];
    HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
    HEAPF32[$20 + ($n$014 << 2) >> 2] = +_cabsf($$byval_copy1);
    $56 = HEAP32[$29 >> 2] | 0;
    $60 = HEAP32[$56 + ($34 << 3) + 4 >> 2] | 0;
    HEAP32[$1 >> 2] = HEAP32[$56 + ($34 << 3) >> 2];
    HEAP32[$31 >> 2] = $60;
    HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
    HEAPF32[$21 + ($n$014 << 2) >> 2] = +_cargf($$byval_copy1);
    $66 = HEAP32[$$pre$phiZ2D >> 2] | 0;
    $n$1 = $n$014 + 1 | 0;
   }
   $i$015 = $i$015 + 1 | 0;
   if ($i$015 >>> 0 >= $66 >>> 0) {
    $n$0$lcssa = $n$1;
    break L5;
   } else {
    $35 = $66;
    $n$014 = $n$1;
   }
  }
  _fwrite(gb + 36635 | 0, 71, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 } while (0);
 if (($n$0$lcssa | 0) != ($15 | 0)) {
  _fwrite(gb + 36635 | 0, 71, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if ($15 >>> 0 > 1) {
  $75 = +HEAPF32[$21 >> 2];
  $i$112 = 1;
  while (1) {
   $70 = $21 + ($i$112 << 2) | 0;
   $71 = +HEAPF32[$70 >> 2];
   $73 = $21 + ($i$112 + -1 << 2) | 0;
   if ($71 - $75 > 3.141592653589793) {
    $84 = $71;
    while (1) {
     $86 = $84 + -6.283185307179586;
     if ($86 - $75 > 3.141592653589793) $84 = $86; else {
      $$lcssa = $86;
      break;
     }
    }
    HEAPF32[$70 >> 2] = $$lcssa;
    $80 = $$lcssa;
   } else $80 = $71;
   $78 = +HEAPF32[$73 >> 2];
   if ($80 - $78 < -3.141592653589793) {
    $91 = $80;
    while (1) {
     $93 = $91 + 6.283185307179586;
     if ($93 - $78 < -3.141592653589793) $91 = $93; else {
      $$lcssa29 = $93;
      break;
     }
    }
    HEAPF32[$70 >> 2] = $$lcssa29;
    $131 = $$lcssa29;
   } else $131 = $80;
   $i$112 = $i$112 + 1 | 0;
   if (($i$112 | 0) == ($15 | 0)) break; else $75 = $131;
  }
 }
 _polyf_fit($19, $20, $15, $23, $22);
 _polyf_fit($19, $21, $15, $24, $22);
 $98 = HEAP32[$$pre$phiZ2D >> 2] | 0;
 if (!$98) {
  STACKTOP = sp;
  return;
 }
 $100 = $_q + 4 | 0;
 $101 = $_q + 12 | 0;
 $102 = $_q + 92 | 0;
 $107 = $98;
 $i$27 = 0;
 do {
  $105 = +($i$27 >>> 0);
  $106 = +($107 >>> 0);
  $110 = ($i$27 >>> 0 > (HEAP32[$100 >> 2] | 0) >>> 0 ? $105 - $106 : $105) / $106;
  $111 = +_polyf_val($23, $22, $110);
  $112 = +_polyf_val($24, $22, $110);
  if (!(HEAP8[(HEAP32[$101 >> 2] | 0) + $i$27 >> 0] | 0)) {
   $126 = 0.0;
   $127 = 0.0;
  } else {
   $118 = +Math_sin(+$112);
   $126 = $111 * (+Math_cos(+$112) + $118 * 0.0);
   $127 = $111 * $118;
  }
  $123 = HEAP32[$102 >> 2] | 0;
  HEAPF32[$123 + ($i$27 << 3) >> 2] = $126;
  HEAPF32[$123 + ($i$27 << 3) + 4 >> 2] = $127;
  $i$27 = $i$27 + 1 | 0;
  $107 = HEAP32[$$pre$phiZ2D >> 2] | 0;
 } while ($i$27 >>> 0 < $107 >>> 0);
 STACKTOP = sp;
 return;
}

function _firdespm_iext_search($_q) {
 $_q = $_q | 0;
 var $$lcssa = 0, $$lcssa62 = 0, $1 = 0, $101 = 0, $102 = 0, $109 = 0, $112 = 0, $12 = 0, $14 = 0.0, $39 = 0, $41 = 0, $43 = 0, $49 = 0, $5 = 0, $51 = 0, $57 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $62 = 0, $65 = 0, $71 = 0.0, $72 = 0, $78 = 0, $79 = 0, $85 = 0.0, $86 = 0, $9 = 0, $92 = 0, $99 = 0, $i$028 = 0, $i$112 = 0, $i$112$lcssa = 0, $i$2$ph = 0, $i$219 = 0, $i$310 = 0, $imin$0$lcssa = 0, $imin$013 = 0, $imin$1 = 0, $indvars$iv = 0, $num_extra$022 = 0, $num_extra$024 = 0, $num_found$0$lcssa = 0, $num_found$031 = 0, $num_found$1 = 0, $sign$014 = 0, $sign$1 = 0, $vararg_buffer = 0, label = 0, sp = 0, $i$219$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $1 = HEAP32[$_q + 12 >> 2] | 0;
 $5 = (HEAP32[$_q + 16 >> 2] | 0) + $1 << 1;
 $6 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($5 << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 HEAP32[$6 >> 2] = 0;
 $9 = (HEAP32[$_q + 20 >> 2] | 0) + -1 | 0;
 L1 : do if ($9 >>> 0 > 1) {
  $12 = HEAP32[$_q + 60 >> 2] | 0;
  $i$028 = 1;
  $num_found$031 = 1;
  while (1) {
   $14 = +HEAPF64[$12 + ($i$028 << 3) >> 3];
   if (!($14 >= 0.0)) label = 6; else if (!(+HEAPF64[$12 + ($i$028 + -1 << 3) >> 3] <= $14)) label = 6; else if (!(+HEAPF64[$12 + ($i$028 + 1 << 3) >> 3] <= $14)) label = 6; else label = 9;
   if ((label | 0) == 6) {
    label = 0;
    if ($14 < 0.0) if (!(+HEAPF64[$12 + ($i$028 + -1 << 3) >> 3] >= $14)) $num_found$1 = $num_found$031; else if (!(+HEAPF64[$12 + ($i$028 + 1 << 3) >> 3] >= $14)) $num_found$1 = $num_found$031; else label = 9; else $num_found$1 = $num_found$031;
   }
   if ((label | 0) == 9) {
    label = 0;
    if ($num_found$031 >>> 0 >= $5 >>> 0) break;
    HEAP32[$6 + ($num_found$031 << 2) >> 2] = $i$028;
    $num_found$1 = $num_found$031 + 1 | 0;
   }
   $i$028 = $i$028 + 1 | 0;
   if ($i$028 >>> 0 >= $9 >>> 0) {
    $num_found$0$lcssa = $num_found$1;
    break L1;
   } else $num_found$031 = $num_found$1;
  }
  ___assert_fail(gb + 22793 | 0, gb + 22810 | 0, 544, gb + 22836 | 0);
 } else $num_found$0$lcssa = 1; while (0);
 if ($num_found$0$lcssa >>> 0 >= $5 >>> 0) ___assert_fail(gb + 22793 | 0, gb + 22810 | 0, 558, gb + 22836 | 0);
 $39 = $num_found$0$lcssa + 1 | 0;
 HEAP32[$6 + ($num_found$0$lcssa << 2) >> 2] = $9;
 $41 = $1 + 1 | 0;
 if ($39 >>> 0 < $41 >>> 0) {
  $43 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = $41;
  HEAP32[$vararg_buffer + 4 >> 2] = $39;
  _fprintf($43, gb + 22857 | 0, $vararg_buffer) | 0;
  HEAP32[$_q + 92 >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 if ($39 >>> 0 > $5 >>> 0) ___assert_fail(gb + 22958 | 0, gb + 22810 | 0, 575, gb + 22836 | 0);
 $num_extra$022 = $39 - $1 + -1 | 0;
 if ($num_extra$022 | 0) {
  $49 = HEAP32[$_q + 60 >> 2] | 0;
  $indvars$iv = $39;
  $num_extra$024 = $num_extra$022;
  while (1) {
   L32 : do if ($indvars$iv >>> 0 > 1) {
    $51 = HEAP32[$6 >> 2] | 0;
    $62 = $51;
    $i$112 = 1;
    $imin$013 = 0;
    $sign$014 = +HEAPF64[$49 + ($51 << 3) >> 3] > 0.0 & 1;
    while (1) {
     $57 = HEAP32[$6 + ($i$112 << 2) >> 2] | 0;
     $59 = +HEAPF64[$49 + ($57 << 3) >> 3];
     $60 = +Math_abs(+$59);
     $65 = $60 < +Math_abs(+(+HEAPF64[$49 + ($62 << 3) >> 3]));
     $imin$1 = $65 ? $i$112 : $imin$013;
     if (!$sign$014) if (!($59 >= 0.0)) {
      $$lcssa62 = $57;
      $i$112$lcssa = $i$112;
      break;
     } else $sign$1 = 1; else if ($59 < 0.0) $sign$1 = 0; else {
      $$lcssa62 = $57;
      $i$112$lcssa = $i$112;
      break;
     }
     $79 = $i$112 + 1 | 0;
     if ($79 >>> 0 >= $indvars$iv >>> 0) {
      $imin$0$lcssa = $imin$1;
      label = 29;
      break L32;
     }
     $62 = HEAP32[$6 + ($imin$1 << 2) >> 2] | 0;
     $i$112 = $79;
     $imin$013 = $imin$1;
     $sign$014 = $sign$1;
    }
    $71 = +Math_abs(+(+HEAPF64[$49 + ($$lcssa62 << 3) >> 3]));
    $72 = $i$112$lcssa + -1 | 0;
    $78 = $71 < +Math_abs(+(+HEAPF64[$49 + (HEAP32[$6 + ($72 << 2) >> 2] << 3) >> 3]));
    $i$2$ph = $78 ? $i$112$lcssa : $72;
   } else {
    $imin$0$lcssa = 0;
    label = 29;
   } while (0);
   if ((label | 0) == 29) {
    label = 0;
    if (($num_extra$024 | 0) == 1) {
     $85 = +Math_abs(+(+HEAPF64[$49 + (HEAP32[$6 >> 2] << 3) >> 3]));
     $86 = $indvars$iv + -1 | 0;
     $92 = $85 < +Math_abs(+(+HEAPF64[$49 + (HEAP32[$6 + ($86 << 2) >> 2] << 3) >> 3]));
     $i$2$ph = $92 ? 0 : $86;
    } else $i$2$ph = $imin$0$lcssa;
   }
   if ($i$2$ph >>> 0 < $indvars$iv >>> 0) {
    $i$219 = $i$2$ph;
    do {
     $i$219$looptemp = $i$219;
     $i$219 = $i$219 + 1 | 0;
     HEAP32[$6 + ($i$219$looptemp << 2) >> 2] = HEAP32[$6 + ($i$219 << 2) >> 2];
    } while (($i$219 | 0) != ($indvars$iv | 0));
   }
   $num_extra$024 = $num_extra$024 + -1 | 0;
   if (!$num_extra$024) break; else $indvars$iv = $indvars$iv + -1 | 0;
  }
 }
 $99 = $_q + 92 | 0;
 HEAP32[$99 >> 2] = 0;
 $101 = $_q + 88 | 0;
 if (!$41) {
  $$lcssa = 0;
  $112 = HEAP32[$101 >> 2] | 0;
 } else {
  $102 = HEAP32[$101 >> 2] | 0;
  $109 = 0;
  $i$310 = 0;
  do {
   $109 = ((HEAP32[$102 + ($i$310 << 2) >> 2] | 0) != (HEAP32[$6 + ($i$310 << 2) >> 2] | 0) & 1) + $109 | 0;
   HEAP32[$99 >> 2] = $109;
   $i$310 = $i$310 + 1 | 0;
  } while ($i$310 >>> 0 < $41 >>> 0);
  $$lcssa = $41 << 2;
  $112 = $102;
 }
 _memmove($112 | 0, $6 | 0, $$lcssa | 0) | 0;
 STACKTOP = sp;
 return;
}

function _fec_conv_encode($_q, $_dec_msg_len, $_msg_dec, $_msg_enc) {
 $_q = $_q | 0;
 $_dec_msg_len = $_dec_msg_len | 0;
 $_msg_dec = $_msg_dec | 0;
 $_msg_enc = $_msg_enc | 0;
 var $$lcssa73 = 0, $$lcssa74 = 0, $$lcssa75 = 0, $$lcssa79 = 0, $$pre = 0, $$pre49 = 0, $$pre50 = 0, $$pre50$lcssa = 0, $1 = 0, $10 = 0, $15 = 0, $17 = 0, $2 = 0, $23 = 0, $25 = 0, $3 = 0, $35 = 0, $38 = 0, $4 = 0, $40 = 0, $43 = 0, $48 = 0, $54 = 0, $56 = 0, $6 = 0, $66 = 0, $69 = 0, $7 = 0, $71 = 0, $75 = 0, $82 = 0, $89 = 0, $90 = 0, $91 = 0, $byte_out$0$lcssa = 0, $byte_out$035 = 0, $byte_out$131 = 0, $byte_out$2$lcssa = 0, $byte_out$2$lcssa$lcssa = 0, $byte_out$222 = 0, $byte_out$3$lcssa = 0, $byte_out$316 = 0, $byte_out$4$lcssa = 0, $byte_out$47 = 0, $byte_out$54 = 0, $i$034 = 0, $i$115 = 0, $j$030 = 0, $n$0$lcssa = 0, $n$033 = 0, $n$129 = 0, $n$2$lcssa = 0, $n$2$lcssa$lcssa = 0, $n$221 = 0, $n$3$lcssa = 0, $n$314 = 0, $n$4$lcssa = 0, $n$46 = 0, $n$5$lcssa = 0, $n$53 = 0, $r$020 = 0, $r$15 = 0, $sr$0$lcssa = 0, $sr$032 = 0, $sr$128 = 0, $sr$213 = 0, t$_P_init = 0, t$_Partab = 0;
 t$_P_init = g$_P_init() | 0;
 t$_Partab = g$_Partab() | 0;
 if (!$_dec_msg_len) {
  $byte_out$0$lcssa = 0;
  $n$0$lcssa = 0;
  $sr$0$lcssa = 0;
 } else {
  $1 = $_q + 28 | 0;
  $2 = $_q + 24 | 0;
  $$pre = HEAP32[$1 >> 2] | 0;
  $byte_out$035 = 0;
  $i$034 = 0;
  $n$033 = 0;
  $sr$032 = 0;
  while (1) {
   $10 = HEAPU8[$_msg_dec + $i$034 >> 0] | 0;
   $$pre49 = $$pre;
   $17 = $$pre;
   $byte_out$131 = $byte_out$035;
   $j$030 = 0;
   $n$129 = $n$033;
   $sr$128 = $sr$032;
   while (1) {
    $15 = $10 >>> (7 - $j$030 | 0) & 1 | $sr$128 << 1;
    if (!$17) {
     $$pre50 = $$pre49;
     $90 = 0;
     $byte_out$2$lcssa = $byte_out$131;
     $n$2$lcssa = $n$129;
    } else {
     $byte_out$222 = $byte_out$131;
     $n$221 = $n$129;
     $r$020 = 0;
     while (1) {
      $23 = HEAP32[(HEAP32[$2 >> 2] | 0) + ($r$020 << 2) >> 2] & $15;
      $25 = $23 >> 16 ^ $23;
      if (!(HEAP32[t$_P_init >> 2] | 0)) _partab_init();
      $35 = (HEAPU8[t$_Partab + (($25 >>> 8 ^ $25) & 255) >> 0] | 0 | ($byte_out$222 & 255) << 1) & 255;
      HEAP8[$_msg_enc + ($n$221 >>> 3) >> 0] = $35;
      $38 = $n$221 + 1 | 0;
      $r$020 = $r$020 + 1 | 0;
      $40 = HEAP32[$1 >> 2] | 0;
      if ($r$020 >>> 0 >= $40 >>> 0) {
       $$pre50 = $40;
       $90 = $40;
       $byte_out$2$lcssa = $35;
       $n$2$lcssa = $38;
       break;
      } else {
       $byte_out$222 = $35;
       $n$221 = $38;
      }
     }
    }
    $j$030 = $j$030 + 1 | 0;
    if (($j$030 | 0) == 8) {
     $$lcssa79 = $15;
     $$pre50$lcssa = $$pre50;
     $byte_out$2$lcssa$lcssa = $byte_out$2$lcssa;
     $n$2$lcssa$lcssa = $n$2$lcssa;
     break;
    } else {
     $$pre49 = $$pre50;
     $17 = $90;
     $byte_out$131 = $byte_out$2$lcssa;
     $n$129 = $n$2$lcssa;
     $sr$128 = $15;
    }
   }
   $43 = $i$034 + 1 | 0;
   if (($43 | 0) == ($_dec_msg_len | 0)) {
    $byte_out$0$lcssa = $byte_out$2$lcssa$lcssa;
    $n$0$lcssa = $n$2$lcssa$lcssa;
    $sr$0$lcssa = $$lcssa79;
    break;
   } else {
    $$pre = $$pre50$lcssa;
    $byte_out$035 = $byte_out$2$lcssa$lcssa;
    $i$034 = $43;
    $n$033 = $n$2$lcssa$lcssa;
    $sr$032 = $$lcssa79;
   }
  }
 }
 $3 = $_q + 32 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if (($4 | 0) == 1) {
  $byte_out$3$lcssa = $byte_out$0$lcssa;
  $n$3$lcssa = $n$0$lcssa;
 } else {
  $6 = $_q + 28 | 0;
  $7 = $_q + 24 | 0;
  $48 = HEAP32[$6 >> 2] | 0;
  $89 = $4;
  $byte_out$316 = $byte_out$0$lcssa;
  $i$115 = 0;
  $n$314 = $n$0$lcssa;
  $sr$213 = $sr$0$lcssa;
  while (1) {
   $sr$213 = $sr$213 << 1;
   if (!$48) {
    $75 = $89;
    $91 = 0;
    $byte_out$4$lcssa = $byte_out$316;
    $n$4$lcssa = $n$314;
   } else {
    $byte_out$47 = $byte_out$316;
    $n$46 = $n$314;
    $r$15 = 0;
    while (1) {
     $54 = HEAP32[(HEAP32[$7 >> 2] | 0) + ($r$15 << 2) >> 2] & $sr$213;
     $56 = $54 >> 16 ^ $54;
     if (!(HEAP32[t$_P_init >> 2] | 0)) _partab_init();
     $66 = (HEAPU8[t$_Partab + (($56 >>> 8 ^ $56) & 255) >> 0] | 0 | ($byte_out$47 & 255) << 1) & 255;
     HEAP8[$_msg_enc + ($n$46 >>> 3) >> 0] = $66;
     $69 = $n$46 + 1 | 0;
     $r$15 = $r$15 + 1 | 0;
     $71 = HEAP32[$6 >> 2] | 0;
     if ($r$15 >>> 0 >= $71 >>> 0) {
      $$lcssa73 = $66;
      $$lcssa74 = $69;
      $$lcssa75 = $71;
      break;
     } else {
      $byte_out$47 = $66;
      $n$46 = $69;
     }
    }
    $75 = HEAP32[$3 >> 2] | 0;
    $91 = $$lcssa75;
    $byte_out$4$lcssa = $$lcssa73;
    $n$4$lcssa = $$lcssa74;
   }
   $i$115 = $i$115 + 1 | 0;
   if ($i$115 >>> 0 >= ($75 + -1 | 0) >>> 0) {
    $byte_out$3$lcssa = $byte_out$4$lcssa;
    $n$3$lcssa = $n$4$lcssa;
    break;
   } else {
    $48 = $91;
    $89 = $75;
    $byte_out$316 = $byte_out$4$lcssa;
    $n$314 = $n$4$lcssa;
   }
  }
 }
 if (!($n$3$lcssa & 7)) $n$5$lcssa = $n$3$lcssa; else {
  $byte_out$54 = $byte_out$3$lcssa;
  $n$53 = $n$3$lcssa;
  while (1) {
   $byte_out$54 = ($byte_out$54 & 255) << 1 & 255;
   HEAP8[$_msg_enc + ($n$53 >>> 3) >> 0] = $byte_out$54;
   $82 = $n$53 + 1 | 0;
   if (!($82 & 7)) {
    $n$5$lcssa = $82;
    break;
   } else $n$53 = $82;
  }
 }
 if (($n$5$lcssa | 0) == ((_fec_get_enc_msg_length(HEAP32[$_q >> 2] | 0, $_dec_msg_len) | 0) << 3 | 0)) return; else ___assert_fail(gb + 13192 | 0, gb + 13113 | 0, 131, gb + 13136 | 0);
}

function _flexframesync_execute_rxpayload($_q, $_x) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 var $$byval_copy4 = 0, $0 = 0, $1 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $127 = 0, $13 = 0, $15 = 0, $16 = 0, $2 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $4 = 0, $40 = 0.0, $42 = 0.0, $46 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $58 = 0, $59 = 0, $62 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $72 = 0, $75 = 0, $78 = 0, $8 = 0, $80 = 0, $86 = 0, $9 = 0, $mf_out = 0, $v$i = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy4 = sp + 48 | 0;
 $v$i = sp + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 8 | 0;
 $mf_out = sp;
 $2 = sp + 40 | 0;
 $3 = sp + 24 | 0;
 $4 = $mf_out + 4 | 0;
 HEAPF32[$mf_out >> 2] = 0.0;
 HEAPF32[$4 >> 2] = 0.0;
 $7 = HEAP32[$_x + 4 >> 2] | 0;
 $8 = $_q + 92 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 HEAP32[$0 >> 2] = HEAP32[$_x >> 2];
 HEAP32[$0 + 4 >> 2] = $7;
 HEAP32[$$byval_copy4 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 _nco_crcf_mix_down($9, $$byval_copy4, $v$i);
 _nco_crcf_step(HEAP32[$8 >> 2] | 0);
 $12 = $_q + 100 | 0;
 $13 = HEAP32[$12 >> 2] | 0;
 $15 = $v$i + 4 | 0;
 $16 = HEAP32[$15 >> 2] | 0;
 HEAP32[$1 >> 2] = HEAP32[$v$i >> 2];
 HEAP32[$1 + 4 >> 2] = $16;
 HEAP32[$$byval_copy4 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 _firpfb_crcf_push($13, $$byval_copy4);
 _firpfb_crcf_execute(HEAP32[$12 >> 2] | 0, HEAP32[$_q + 112 >> 2] | 0, $v$i);
 $21 = $_q + 108 | 0;
 $22 = HEAP32[$21 >> 2] | 0;
 HEAP32[$21 >> 2] = $22 + 1;
 if (($22 | 0) > -1) {
  $25 = HEAP32[$v$i >> 2] | 0;
  $26 = HEAP32[$15 >> 2] | 0;
  HEAP32[$mf_out >> 2] = $25;
  HEAP32[$4 >> 2] = $26;
  HEAP32[$21 >> 2] = $22 + -1;
  $32 = $25;
  $33 = $26;
 } else {
  $32 = 0;
  $33 = 0;
 }
 if (($22 | 0) < 0) {
  STACKTOP = sp;
  return;
 }
 $29 = $_q + 96 | 0;
 $30 = HEAP32[$29 >> 2] | 0;
 HEAP32[$2 >> 2] = $32;
 HEAP32[$2 + 4 >> 2] = $33;
 HEAP32[$$byval_copy4 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 _nco_crcf_mix_down($30, $$byval_copy4, $mf_out);
 $34 = $_q + 164 | 0;
 $35 = HEAP32[$34 >> 2] | 0;
 $37 = HEAP32[$4 >> 2] | 0;
 HEAP32[$3 >> 2] = HEAP32[$mf_out >> 2];
 HEAP32[$3 + 4 >> 2] = $37;
 HEAP32[$$byval_copy4 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 _modem_demodulate($35, $$byval_copy4, $v$i);
 $40 = +_modem_get_demodulator_phase_error(HEAP32[$34 >> 2] | 0);
 $42 = +_modem_get_demodulator_evm(HEAP32[$34 >> 2] | 0);
 _nco_crcf_pll_step(HEAP32[$29 >> 2] | 0, $40);
 _nco_crcf_step(HEAP32[$29 >> 2] | 0);
 $46 = $_q + 8 | 0;
 HEAPF32[$46 >> 2] = $42 * $42 + +HEAPF32[$46 >> 2];
 $50 = HEAP32[$4 >> 2] | 0;
 $51 = $_q + 196 | 0;
 $52 = HEAP32[$51 >> 2] | 0;
 $53 = $_q + 168 | 0;
 $54 = HEAP32[$53 >> 2] | 0;
 HEAP32[$54 + ($52 << 3) >> 2] = HEAP32[$mf_out >> 2];
 HEAP32[$54 + ($52 << 3) + 4 >> 2] = $50;
 $58 = (HEAP32[$51 >> 2] | 0) + 1 | 0;
 HEAP32[$51 >> 2] = $58;
 $59 = $_q + 172 | 0;
 if (($58 | 0) != (HEAP32[$59 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 $62 = $_q + 176 | 0;
 $65 = $_q + 180 | 0;
 $67 = _qpacketmodem_decode(HEAP32[$62 >> 2] | 0, HEAP32[$53 >> 2] | 0, HEAP32[$65 >> 2] | 0) | 0;
 $68 = $_q + 188 | 0;
 HEAP32[$68 >> 2] = $67;
 $69 = $_q + 48 | 0;
 HEAP32[$69 >> 2] = (HEAP32[$69 >> 2] | 0) + 1;
 $72 = $_q + 52 | 0;
 HEAP32[$72 >> 2] = (HEAP32[$72 >> 2] | 0) + 1;
 $75 = $_q + 56 | 0;
 HEAP32[$75 >> 2] = (HEAP32[$75 >> 2] | 0) + $67;
 $78 = $_q + 184 | 0;
 $80 = $_q + 60 | 0;
 HEAP32[$80 >> 2] = (HEAP32[$80 >> 2] | 0) + (HEAP32[$78 >> 2] | 0);
 if (HEAP32[$_q >> 2] | 0) {
  $86 = _qpacketmodem_get_modscheme(HEAP32[$62 >> 2] | 0) | 0;
  HEAPF32[$46 >> 2] = +_log10f(+HEAPF32[$46 >> 2] / +((HEAP32[$59 >> 2] | 0) >>> 0)) * 10.0;
  HEAPF32[$_q + 12 >> 2] = +_log10f(+HEAPF32[$_q + 88 >> 2]) * 20.0;
  HEAPF32[$_q + 16 >> 2] = +_nco_crcf_get_frequency(HEAP32[$8 >> 2] | 0);
  HEAP32[$_q + 20 >> 2] = HEAP32[$53 >> 2];
  HEAP32[$_q + 24 >> 2] = HEAP32[$59 >> 2];
  HEAP32[$_q + 28 >> 2] = $86;
  HEAP32[$_q + 32 >> 2] = HEAP32[gb + 580 + ($86 << 4) + 12 >> 2];
  HEAP32[$_q + 36 >> 2] = _qpacketmodem_get_crc(HEAP32[$62 >> 2] | 0) | 0;
  HEAP32[$_q + 40 >> 2] = _qpacketmodem_get_fec0(HEAP32[$62 >> 2] | 0) | 0;
  HEAP32[$_q + 44 >> 2] = _qpacketmodem_get_fec1(HEAP32[$62 >> 2] | 0) | 0;
  $118 = HEAP32[$_q >> 2] | 0;
  $120 = HEAP32[$_q + 156 >> 2] | 0;
  $122 = HEAP32[$_q + 160 >> 2] | 0;
  $123 = HEAP32[$65 >> 2] | 0;
  $124 = HEAP32[$78 >> 2] | 0;
  $125 = HEAP32[$68 >> 2] | 0;
  $127 = HEAP32[$_q + 4 >> 2] | 0;
  dest = $$byval_copy4;
  src = $46;
  stop = dest + 40 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  mftCall_iiiiiiii($118 | 0, $120 | 0, $122 | 0, $123 | 0, $124 | 0, $125 | 0, $$byval_copy4 | 0, $127 | 0) | 0;
 }
 _nco_crcf_reset(HEAP32[$8 >> 2] | 0);
 _nco_crcf_reset(HEAP32[$29 >> 2] | 0);
 _firpfb_crcf_reset(HEAP32[$12 >> 2] | 0);
 HEAP32[$_q + 200 >> 2] = 0;
 HEAP32[$_q + 192 >> 2] = 0;
 HEAP32[$51 >> 2] = 0;
 HEAPF32[$_q + 8 >> 2] = 0.0;
 STACKTOP = sp;
 return;
}

function _encoder_profile($root, $profilename) {
 $root = $root | 0;
 $profilename = $profilename | 0;
 var $$5 = 0, $0 = 0, $101 = 0, $107 = 0, $109 = 0, $114 = 0, $116 = 0, $118 = 0, $121 = 0, $126 = 0, $131 = 0, $14 = 0, $19 = 0, $2 = 0, $21 = 0, $24 = 0, $27 = 0, $29 = 0, $32 = 0, $34 = 0, $37 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $46 = 0, $48 = 0, $51 = 0, $53 = 0, $56 = 0, $58 = 0, $61 = 0, $63 = 0, $73 = 0, $76 = 0.0, $81 = 0, $83 = 0, $85 = 0, $87 = 0, $9 = 0, $91 = 0, $93 = 0, $96 = 0, $98 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $0 = _json_object_get($root, $profilename) | 0;
 if (!$0) {
  HEAP32[$vararg_buffer >> 2] = $profilename;
  _printf(gb + 10663 | 0, $vararg_buffer) | 0;
  $$5 = 0;
  STACKTOP = sp;
  return $$5 | 0;
 }
 $2 = _calloc(1, 88) | 0;
 if (!$2) {
  _puts(gb + 10692 | 0) | 0;
  $$5 = 0;
  STACKTOP = sp;
  return $$5 | 0;
 }
 $4 = _json_object_get($0, gb + 10729 | 0) | 0;
 if ($4 | 0) HEAP32[$2 + 68 >> 2] = _liquid_getopt_str2crc(_json_string_value($4) | 0) | 0;
 $9 = _json_object_get($0, gb + 10745 | 0) | 0;
 if ($9 | 0) HEAP32[$2 + 72 >> 2] = _liquid_getopt_str2fec(_json_string_value($9) | 0) | 0;
 $14 = _json_object_get($0, gb + 10762 | 0) | 0;
 if ($14 | 0) HEAP32[$2 + 76 >> 2] = _liquid_getopt_str2fec(_json_string_value($14) | 0) | 0;
 $19 = _json_object_get($0, gb + 10779 | 0) | 0;
 do if ($19 | 0) {
  $21 = _json_string_value($19) | 0;
  $24 = $2 + 64 | 0;
  if (!(_strcmp($21, gb + 10790 | 0) | 0)) {
   HEAP32[$24 >> 2] = 2;
   break;
  } else {
   HEAP32[$24 >> 2] = 1;
   HEAP32[$2 + 80 >> 2] = _liquid_getopt_str2mod($21) | 0;
   break;
  }
 } while (0);
 $27 = _json_object_get($0, gb + 10795 | 0) | 0;
 if ($27 | 0) {
  $29 = _json_integer_value($27) | 0;
  getTempRet0() | 0;
  HEAP32[$2 + 84 >> 2] = $29;
 }
 $32 = _json_object_get($0, gb + 10808 | 0) | 0;
 if ($32 | 0) {
  $34 = $2 + 64 | 0;
  if ((HEAP32[$34 >> 2] | 0) == 2) {
   _puts(gb + 10813 | 0) | 0;
   $$5 = 0;
   STACKTOP = sp;
   return $$5 | 0;
  }
  HEAP32[$34 >> 2] = 0;
  $37 = _json_object_get($32, gb + 10860 | 0) | 0;
  if ($37 | 0) {
   $39 = _json_integer_value($37) | 0;
   getTempRet0() | 0;
   HEAP32[$2 >> 2] = $39;
  }
  $41 = _json_object_get($32, gb + 10876 | 0) | 0;
  if ($41 | 0) {
   $43 = _json_integer_value($41) | 0;
   getTempRet0() | 0;
   HEAP32[$2 + 4 >> 2] = $43;
  }
  $46 = _json_object_get($32, gb + 10897 | 0) | 0;
  if ($46 | 0) {
   $48 = _json_integer_value($46) | 0;
   getTempRet0() | 0;
   HEAP32[$2 + 8 >> 2] = $48;
  }
  $51 = _json_object_get($32, gb + 10910 | 0) | 0;
  if ($51 | 0) {
   $53 = _json_integer_value($51) | 0;
   getTempRet0() | 0;
   HEAP32[$2 + 12 >> 2] = $53;
  }
  $56 = _json_object_get($32, gb + 10920 | 0) | 0;
  if ($56 | 0) {
   $58 = _json_integer_value($56) | 0;
   getTempRet0() | 0;
   HEAP32[$2 + 16 >> 2] = $58;
  }
 }
 $61 = _json_object_get($0, gb + 10931 | 0) | 0;
 do if ($61 | 0) {
  $63 = _json_object_get($61, gb + 10942 | 0) | 0;
  if ($63 | 0) HEAPF32[$2 + 36 >> 2] = +_json_number_value($63) / 44100.0 * 3.141592653589793 * 2.0;
  $73 = _json_object_get($61, gb + 10959 | 0) | 0;
  if ($73 | 0) {
   $76 = +_json_number_value($73);
   if (!($76 < 0.0 | $76 > .5)) {
    HEAPF32[$2 + 40 >> 2] = $76;
    break;
   }
   HEAPF64[$vararg_buffer1 >> 3] = $76;
   _printf(gb + 10964 | 0, $vararg_buffer1) | 0;
   $$5 = 0;
   STACKTOP = sp;
   return $$5 | 0;
  }
 } while (0);
 $81 = _json_object_get($0, gb + 11003 | 0) | 0;
 if (!$81) HEAP32[$2 + 24 >> 2] = 1; else {
  $83 = _json_object_get($81, gb + 11017 | 0) | 0;
  if (!$83) HEAP32[$2 + 20 >> 2] = 1; else {
   $85 = _json_string_value($83) | 0;
   $87 = (_strcmp($85, gb + 10790 | 0) | 0) == 0;
   HEAP32[$2 + 20 >> 2] = _liquid_getopt_str2firfilt($87 ? gb + 22536 | 0 : $85) | 0;
  }
  $91 = _json_object_get($81, gb + 11023 | 0) | 0;
  if ($91 | 0) {
   $93 = _json_integer_value($91) | 0;
   getTempRet0() | 0;
   HEAP32[$2 + 24 >> 2] = $93;
  }
  $96 = _json_object_get($81, gb + 11042 | 0) | 0;
  if ($96 | 0) {
   $98 = _json_integer_value($96) | 0;
   getTempRet0() | 0;
   HEAP32[$2 + 28 >> 2] = $98;
  }
  $101 = _json_object_get($81, gb + 11055 | 0) | 0;
  if ($101 | 0) HEAPF32[$2 + 32 >> 2] = +_json_number_value($101);
 }
 $107 = _json_object_get($0, gb + 11072 | 0) | 0;
 if ($107 | 0) {
  $109 = _json_object_get($107, gb + 11088 | 0) | 0;
  if ($109 | 0) HEAPF32[$2 + 44 >> 2] = +_json_number_value($109);
 }
 $114 = _json_object_get($0, gb + 11104 | 0) | 0;
 if (!$114) {
  $$5 = $2;
  STACKTOP = sp;
  return $$5 | 0;
 }
 $116 = _json_object_get($114, gb + 11114 | 0) | 0;
 if ($116 | 0) {
  $118 = _json_integer_value($116) | 0;
  getTempRet0() | 0;
  HEAP32[$2 + 48 >> 2] = $118;
 }
 $121 = _json_object_get($114, gb + 11120 | 0) | 0;
 if ($121 | 0) HEAPF32[$2 + 52 >> 2] = +_json_number_value($121);
 $126 = _json_object_get($114, gb + 11130 | 0) | 0;
 if ($126 | 0) HEAPF32[$2 + 56 >> 2] = +_json_number_value($126);
 $131 = _json_object_get($114, gb + 11142 | 0) | 0;
 if (!$131) {
  $$5 = $2;
  STACKTOP = sp;
  return $$5 | 0;
 }
 HEAP32[$2 + 60 >> 2] = ~~+_json_number_value($131) >>> 0;
 $$5 = $2;
 STACKTOP = sp;
 return $$5 | 0;
}

function _fft_create_plan_rader2($_nfft, $_x, $_y, $_dir, $_flags) {
 $_nfft = $_nfft | 0;
 $_x = $_x | 0;
 $_y = $_y | 0;
 $_dir = $_dir | 0;
 $_flags = $_flags | 0;
 var $$byval_copy1 = 0, $$lcssa = 0, $$lcssa18 = 0, $0 = 0, $1 = 0, $102 = 0.0, $105 = 0.0, $106 = 0.0, $11 = 0, $112 = 0.0, $114 = 0.0, $118 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $43 = 0.0, $44 = 0.0, $48 = 0.0, $49 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0.0, $59 = 0, $60 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $7 = 0, $71 = 0.0, $72 = 0.0, $76 = 0.0, $81 = 0.0, $82 = 0.0, $88 = 0.0, $9 = 0, $90 = 0.0, $94 = 0, $i$04 = 0, $i$12 = 0, $i$12$us = 0, $m$03 = 0, sp = 0, $i$04$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy1 = sp + 40 | 0;
 $0 = sp + 32 | 0;
 $1 = sp;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $4 = _malloc(72) | 0;
 HEAP32[$4 >> 2] = $_nfft;
 HEAP32[$4 + 4 >> 2] = $_x;
 HEAP32[$4 + 8 >> 2] = $_y;
 $7 = $4 + 16 | 0;
 HEAP32[$7 >> 2] = $_flags;
 $9 = ($_dir | 0) == 1 ? 1 : -1;
 HEAP32[$4 + 20 >> 2] = $9;
 $11 = $4 + 12 | 0;
 HEAP32[$11 >> 2] = $9;
 HEAP32[$4 + 24 >> 2] = 4;
 HEAP32[$4 + 28 >> 2] = fb + 11;
 $14 = _liquid_primitive_root_prime($_nfft) | 0;
 $17 = _malloc(($_nfft << 2) + -4 | 0) | 0;
 $18 = $4 + 40 | 0;
 $19 = $4 + 44 | 0;
 HEAP32[$19 >> 2] = $17;
 if (($_nfft | 0) == 1) $$lcssa = -3; else {
  $21 = $_nfft + -1 | 0;
  $i$04 = 0;
  do {
   $i$04$looptemp = $i$04;
   $i$04 = $i$04 + 1 | 0;
   HEAP32[$17 + ($i$04$looptemp << 2) >> 2] = _liquid_modpow($14, $i$04, $_nfft) | 0;
  } while ($i$04 >>> 0 < $21 >>> 0);
  $$lcssa = ($_nfft << 1) + -5 | 0;
 }
 HEAP32[$18 >> 2] = $$lcssa;
 $27 = $$lcssa;
 $m$03 = 0;
 while (1) {
  $27 = $27 >>> 1;
  $28 = $m$03 + 1 | 0;
  if (!$27) {
   $$lcssa18 = $28;
   break;
  } else $m$03 = $28;
 }
 $30 = 1 << $$lcssa18;
 HEAP32[$18 >> 2] = $30;
 $31 = $30 << 3;
 $32 = _malloc($31) | 0;
 HEAP32[$4 + 52 >> 2] = $32;
 $34 = _malloc($31) | 0;
 $35 = $4 + 56 | 0;
 HEAP32[$35 >> 2] = $34;
 $36 = HEAP32[$7 >> 2] | 0;
 $38 = $4 + 60 | 0;
 HEAP32[$38 >> 2] = _fft_create_plan($30, $32, $34, 1, $36) | 0;
 HEAP32[$4 + 64 >> 2] = _fft_create_plan($30, $34, $32, -1, $36) | 0;
 $43 = (HEAP32[$11 >> 2] | 0) == 1 ? -1.0 : 1.0;
 $44 = $43 * 0.0;
 $48 = $44 * 2.0 - $44;
 $49 = $43 * 2.0 + $44 * 0.0;
 $52 = $0 + 4 | 0;
 $53 = HEAP32[$4 >> 2] | 0;
 $54 = $53 + -1 | 0;
 $55 = HEAP32[$19 >> 2] | 0;
 $56 = $1 + 8 | 0;
 $58 = +($53 >>> 0);
 $59 = $3 + 4 | 0;
 $60 = $2 + 4 | 0;
 if (($48 != $48 | 0.0 != 0.0) & ($49 != $49 | 0.0 != 0.0)) {
  $i$12$us = 0;
  do {
   ___mulsc3($0, $44, $43, 2.0, 0.0);
   $71 = +HEAPF32[$0 >> 2] * 3.141592653589793;
   $72 = +HEAPF32[$52 >> 2] * 3.141592653589793;
   $76 = +((HEAP32[$55 + ((($i$12$us >>> 0) % ($54 >>> 0) | 0) << 2) >> 2] | 0) >>> 0);
   $81 = $71 * $76 - $72 * 0.0;
   $82 = $71 * 0.0 + $72 * $76;
   if (($81 != $81 | 0.0 != 0.0) & ($82 != $82 | 0.0 != 0.0)) {
    ___muldc3($1, $71, $72, $76, 0.0);
    $88 = +HEAPF64[$1 >> 3];
    $90 = +HEAPF64[$56 >> 3];
   } else {
    $88 = $81;
    $90 = $82;
   }
   HEAPF32[$3 >> 2] = $88 / $58;
   HEAPF32[$59 >> 2] = $90 / $58;
   HEAP32[$$byval_copy1 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   _cexpf($2, $$byval_copy1);
   $94 = HEAP32[$60 >> 2] | 0;
   HEAP32[$32 + ($i$12$us << 3) >> 2] = HEAP32[$2 >> 2];
   HEAP32[$32 + ($i$12$us << 3) + 4 >> 2] = $94;
   $i$12$us = $i$12$us + 1 | 0;
  } while ($i$12$us >>> 0 < $30 >>> 0);
  $123 = HEAP32[$38 >> 2] | 0;
  $124 = $123 + 28 | 0;
  $125 = HEAP32[$124 >> 2] | 0;
  mftCall_vi($125 | 0, $123 | 0);
  $126 = HEAP32[$18 >> 2] | 0;
  $127 = $126 << 3;
  $128 = _malloc($127) | 0;
  $129 = $4 + 48 | 0;
  HEAP32[$129 >> 2] = $128;
  $130 = HEAP32[$35 >> 2] | 0;
  _memmove($128 | 0, $130 | 0, $127 | 0) | 0;
  STACKTOP = sp;
  return $4 | 0;
 }
 $63 = $48 * 3.141592653589793;
 $64 = $49 * 3.141592653589793;
 $65 = $64 * 0.0;
 $66 = $63 * 0.0;
 $i$12 = 0;
 do {
  $102 = +((HEAP32[$55 + ((($i$12 >>> 0) % ($54 >>> 0) | 0) << 2) >> 2] | 0) >>> 0);
  $105 = $63 * $102 - $65;
  $106 = $66 + $64 * $102;
  if (($105 != $105 | 0.0 != 0.0) & ($106 != $106 | 0.0 != 0.0)) {
   ___muldc3($1, $63, $64, $102, 0.0);
   $112 = +HEAPF64[$1 >> 3];
   $114 = +HEAPF64[$56 >> 3];
  } else {
   $112 = $105;
   $114 = $106;
  }
  HEAPF32[$3 >> 2] = $112 / $58;
  HEAPF32[$59 >> 2] = $114 / $58;
  HEAP32[$$byval_copy1 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  _cexpf($2, $$byval_copy1);
  $118 = HEAP32[$60 >> 2] | 0;
  HEAP32[$32 + ($i$12 << 3) >> 2] = HEAP32[$2 >> 2];
  HEAP32[$32 + ($i$12 << 3) + 4 >> 2] = $118;
  $i$12 = $i$12 + 1 | 0;
 } while ($i$12 >>> 0 < $30 >>> 0);
 $123 = HEAP32[$38 >> 2] | 0;
 $124 = $123 + 28 | 0;
 $125 = HEAP32[$124 >> 2] | 0;
 mftCall_vi($125 | 0, $123 | 0);
 $126 = HEAP32[$18 >> 2] | 0;
 $127 = $126 << 3;
 $128 = _malloc($127) | 0;
 $129 = $4 + 48 | 0;
 HEAP32[$129 >> 2] = $128;
 $130 = HEAP32[$35 >> 2] | 0;
 _memmove($128 | 0, $130 | 0, $127 | 0) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function _firdespm_init_grid($_q) {
 $_q = $_q | 0;
 var $$ = 0, $$lcssa = 0, $$lcssa47 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre25 = 0, $$pre27 = 0, $101 = 0, $103 = 0, $105 = 0, $107 = 0, $109 = 0, $11 = 0, $110 = 0, $113 = 0.0, $114 = 0, $119 = 0.0, $12 = 0, $120 = 0, $125 = 0, $128 = 0.0, $129 = 0, $13 = 0, $134 = 0.0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0.0, $23 = 0.0, $32 = 0, $34 = 0, $35 = 0, $42 = 0, $55 = 0, $6 = 0.0, $62 = 0, $69 = 0, $74 = 0, $77 = 0, $79 = 0, $8 = 0, $81 = 0, $82 = 0, $85 = 0.0, $86 = 0, $91 = 0.0, $92 = 0, $97 = 0, $99 = 0, $f0$0 = 0.0, $fw$0 = 0.0, $i$016 = 0, $i$17 = 0, $i$28 = 0, $i$310 = 0, $j$012 = 0, $n$015 = 0, $n$113 = 0, $n$113$lcssa45 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $6 = .5 / +((Math_imul(HEAP32[$_q + 12 >> 2] | 0, HEAP32[$_q + 24 >> 2] | 0) | 0) >>> 0);
 $8 = HEAP32[$_q + 16 >> 2] | 0;
 L1 : do if (!$8) {
  $$pre$phiZ2D = $_q + 28 | 0;
  $69 = 0;
 } else {
  $11 = $_q + 28 | 0;
  $12 = $_q + 48 | 0;
  $13 = $_q + 36 | 0;
  $14 = $_q + 52 | 0;
  $15 = $_q + 44 | 0;
  $16 = $_q + 40 | 0;
  $17 = $_q + 56 | 0;
  $$pre = HEAP32[$_q + 32 >> 2] | 0;
  $i$016 = 0;
  $n$015 = 0;
  L4 : while (1) {
   $18 = $i$016 << 1;
   $20 = +HEAPF64[$$pre + ($18 << 3) >> 3];
   $23 = +HEAPF64[$$pre + (($18 | 1) << 3) >> 3];
   if (!$i$016) if (!(HEAP32[$11 >> 2] | 0)) $f0$0 = $20; else $f0$0 = $20 < $6 ? $6 : $20; else $f0$0 = $20;
   $32 = ~~(($23 - $f0$0) / $6 + .5) >>> 0;
   $$ = ($32 | 0) == 0 ? 1 : $32;
   $$pre25 = HEAP32[$12 >> 2] | 0;
   $$pre27 = HEAP32[$14 >> 2] | 0;
   $34 = (HEAP32[$13 >> 2] | 0) + ($i$016 << 3) | 0;
   $35 = (HEAP32[$15 >> 2] | 0) + ($i$016 << 2) | 0;
   $j$012 = 0;
   $n$113 = $n$015;
   while (1) {
    HEAPF64[$$pre25 + ($n$113 << 3) >> 3] = $f0$0 + $6 * +($j$012 >>> 0);
    HEAPF64[$$pre27 + ($n$113 << 3) >> 3] = +HEAPF64[$34 >> 3];
    $42 = HEAP32[$35 >> 2] | 0;
    switch ($42 | 0) {
    case 0:
     {
      $fw$0 = 1.0;
      break;
     }
    case 1:
     {
      $fw$0 = +Math_exp(+($6 * (+($j$012 >>> 0) * 2.0)));
      break;
     }
    case 2:
     {
      $fw$0 = $6 * (+($j$012 >>> 0) * 2.700000047683716) + 1.0;
      break;
     }
    default:
     {
      $$lcssa = $42;
      break L4;
     }
    }
    HEAPF64[(HEAP32[$17 >> 2] | 0) + ($n$113 << 3) >> 3] = $fw$0 * +HEAPF64[(HEAP32[$16 >> 2] | 0) + ($i$016 << 3) >> 3];
    $62 = $n$113 + 1 | 0;
    $j$012 = $j$012 + 1 | 0;
    if ($j$012 >>> 0 >= $$ >>> 0) {
     $$lcssa47 = $62;
     $n$113$lcssa45 = $n$113;
     break;
    } else $n$113 = $62;
   }
   HEAPF64[$$pre25 + ($n$113$lcssa45 << 3) >> 3] = $23;
   $i$016 = $i$016 + 1 | 0;
   if ($i$016 >>> 0 >= $8 >>> 0) {
    $$pre$phiZ2D = $11;
    $69 = $$lcssa47;
    break L1;
   } else $n$015 = $$lcssa47;
  }
  $55 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = $$lcssa;
  _fprintf($55, gb + 22731 | 0, $vararg_buffer) | 0;
  _exit(1);
 } while (0);
 HEAP32[$_q + 20 >> 2] = $69;
 $74 = (HEAP32[$_q + 4 >> 2] | 0) == 0;
 if (!(HEAP32[$$pre$phiZ2D >> 2] | 0)) {
  if (($69 | 0) == 0 | $74 ^ 1) {
   STACKTOP = sp;
   return;
  }
  $77 = HEAP32[$_q + 48 >> 2] | 0;
  $79 = HEAP32[$_q + 52 >> 2] | 0;
  $81 = HEAP32[$_q + 56 >> 2] | 0;
  $i$17 = 0;
  do {
   $82 = $77 + ($i$17 << 3) | 0;
   $85 = +Math_cos(+(+HEAPF64[$82 >> 3] * 3.141592653589793));
   $86 = $79 + ($i$17 << 3) | 0;
   HEAPF64[$86 >> 3] = +HEAPF64[$86 >> 3] / $85;
   $91 = +Math_cos(+(+HEAPF64[$82 >> 3] * 3.141592653589793));
   $92 = $81 + ($i$17 << 3) | 0;
   HEAPF64[$92 >> 3] = $91 * +HEAPF64[$92 >> 3];
   $i$17 = $i$17 + 1 | 0;
  } while ($i$17 >>> 0 < $69 >>> 0);
  STACKTOP = sp;
  return;
 }
 $97 = ($69 | 0) != 0;
 if ($74) {
  if (!$97) {
   STACKTOP = sp;
   return;
  }
  $105 = HEAP32[$_q + 48 >> 2] | 0;
  $107 = HEAP32[$_q + 52 >> 2] | 0;
  $109 = HEAP32[$_q + 56 >> 2] | 0;
  $i$28 = 0;
  do {
   $110 = $105 + ($i$28 << 3) | 0;
   $113 = +Math_sin(+(+HEAPF64[$110 >> 3] * 3.141592653589793));
   $114 = $107 + ($i$28 << 3) | 0;
   HEAPF64[$114 >> 3] = +HEAPF64[$114 >> 3] / $113;
   $119 = +Math_sin(+(+HEAPF64[$110 >> 3] * 3.141592653589793));
   $120 = $109 + ($i$28 << 3) | 0;
   HEAPF64[$120 >> 3] = $119 * +HEAPF64[$120 >> 3];
   $i$28 = $i$28 + 1 | 0;
  } while ($i$28 >>> 0 < $69 >>> 0);
  STACKTOP = sp;
  return;
 } else {
  if (!$97) {
   STACKTOP = sp;
   return;
  }
  $99 = HEAP32[$_q + 48 >> 2] | 0;
  $101 = HEAP32[$_q + 52 >> 2] | 0;
  $103 = HEAP32[$_q + 56 >> 2] | 0;
  $i$310 = 0;
  do {
   $125 = $99 + ($i$310 << 3) | 0;
   $128 = +Math_sin(+(+HEAPF64[$125 >> 3] * 6.283185307179586));
   $129 = $101 + ($i$310 << 3) | 0;
   HEAPF64[$129 >> 3] = +HEAPF64[$129 >> 3] / $128;
   $134 = +Math_sin(+(+HEAPF64[$125 >> 3] * 6.283185307179586));
   $135 = $103 + ($i$310 << 3) | 0;
   HEAPF64[$135 >> 3] = $134 * +HEAPF64[$135 >> 3];
   $i$310 = $i$310 + 1 | 0;
  } while ($i$310 >>> 0 < $69 >>> 0);
  STACKTOP = sp;
  return;
 }
}

function _fec_get_enc_msg_length($_scheme, $_msg_len) {
 $_scheme = $_scheme | 0;
 $_msg_len = $_msg_len | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $100 = 0, $103 = 0, $109 = 0, $113 = 0, $117 = 0, $121 = 0, $127 = 0, $131 = 0, $137 = 0, $141 = 0, $147 = 0, $15 = 0, $151 = 0, $157 = 0, $161 = 0, $173 = 0, $19 = 0, $6 = 0, $60 = 0, $63 = 0, $70 = 0, $73 = 0, $80 = 0, $83 = 0, $90 = 0, $93 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 16 | 0;
 $1 = sp + 8 | 0;
 do switch ($_scheme | 0) {
 case 1:
  {
   $$0 = $_msg_len;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 2:
  {
   $$0 = $_msg_len * 3 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 3:
  {
   $$0 = $_msg_len * 5 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 4:
  {
   $6 = ($_msg_len << 1 & 1073741822) * 7 | 0;
   $$0 = (($6 & 6 | 0) != 0 & 1) + ($6 >>> 3) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 5:
  {
   $$0 = $_msg_len << 1 & 536870910;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 6:
  {
   $15 = ($_msg_len & 536870911) * 12 | 0;
   $$0 = ($15 >>> 2 & 1) + ($15 >>> 3) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 7:
  {
   $19 = $_msg_len << 3;
   $$0 = ((((($19 >>> 0) % 12 | 0 | 0) != 0 & 1) + (($19 >>> 0) / 12 | 0) | 0) * 24 | 0) >>> 3;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 8:
  {
   $$0 = ($_msg_len >>> 1) + $_msg_len + ($_msg_len & 1) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 9:
  {
   $$0 = ($_msg_len >>> 2) + $_msg_len + (($_msg_len & 3 | 0) != 0 & 1) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 10:
  {
   $$0 = ($_msg_len >>> 3) + $_msg_len + (($_msg_len & 7 | 0) != 0 & 1) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 11:
  {
   $$0 = ($_msg_len << 1) + 2 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 12:
  {
   $$0 = ($_msg_len << 1) + 2 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 13:
  {
   $$0 = ($_msg_len * 3 | 0) + 3 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 14:
  {
   $$0 = ($_msg_len * 6 | 0) + 11 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 15:
  {
   $$0 = ((($_msg_len << 2 & 2147483644 | 3) + ($_msg_len << 3 | 6) | 0) >>> 3) + 1 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 16:
  {
   $60 = $_msg_len << 3 | 6;
   $63 = ((($60 + 2 | 0) >>> 0) / 3 | 0) + $60 | 0;
   $$0 = (($63 & 7 | 0) != 0 & 1) + ($63 >>> 3) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 17:
  {
   $70 = $_msg_len << 3 | 6;
   $73 = (($70 + 3 | 0) >>> 2) + $70 | 0;
   $$0 = (($73 & 6 | 0) != 0 & 1) + ($73 >>> 3) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 18:
  {
   $80 = $_msg_len << 3 | 6;
   $83 = ((($80 + 4 | 0) >>> 0) / 5 | 0) + $80 | 0;
   $$0 = (($83 & 7 | 0) != 0 & 1) + ($83 >>> 3) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 19:
  {
   $90 = $_msg_len << 3 | 6;
   $93 = ((($90 + 5 | 0) >>> 0) / 6 | 0) + $90 | 0;
   $$0 = (($93 & 7 | 0) != 0 & 1) + ($93 >>> 3) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 20:
  {
   $100 = $_msg_len << 3 | 6;
   $103 = ((($100 + 6 | 0) >>> 0) / 7 | 0) + $100 | 0;
   $$0 = (($103 & 7 | 0) != 0 & 1) + ($103 >>> 3) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 21:
  {
   $109 = $_msg_len << 3;
   $113 = $109 + 8 + (($109 + 9 | 0) >>> 1) | 0;
   $$0 = ($113 >>> 2 & 1) + ($113 >>> 3) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 22:
  {
   $117 = $_msg_len << 3;
   $121 = $117 + 8 + ((($117 + 10 | 0) >>> 0) / 3 | 0) | 0;
   $$0 = (($121 & 7 | 0) != 0 & 1) + ($121 >>> 3) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 23:
  {
   $127 = $_msg_len << 3;
   $131 = $127 + 8 + (($127 + 11 | 0) >>> 2) | 0;
   $$0 = (($131 & 6 | 0) != 0 & 1) + ($131 >>> 3) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 24:
  {
   $137 = $_msg_len << 3;
   $141 = $137 + 8 + ((($137 + 12 | 0) >>> 0) / 5 | 0) | 0;
   $$0 = (($141 & 7 | 0) != 0 & 1) + ($141 >>> 3) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 25:
  {
   $147 = $_msg_len << 3;
   $151 = $147 + 8 + ((($147 + 13 | 0) >>> 0) / 6 | 0) | 0;
   $$0 = (($151 & 7 | 0) != 0 & 1) + ($151 >>> 3) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 26:
  {
   $157 = $_msg_len << 3;
   $161 = $157 + 8 + ((($157 + 14 | 0) >>> 0) / 7 | 0) | 0;
   $$0 = (($161 & 7 | 0) != 0 & 1) + ($161 >>> 3) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 27:
  {
   if (!$_msg_len) {
    _fwrite(gb + 12547 | 0, 69, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
    _exit(1);
   }
   _div($0, $_msg_len, 223);
   $173 = ((HEAP32[$0 + 4 >> 2] | 0) != 0 & 1) + (HEAP32[$0 >> 2] | 0) | 0;
   _div($1, $_msg_len, $173);
   $$0 = Math_imul((HEAP32[$1 >> 2] | 0) + 32 + ((HEAP32[$1 + 4 >> 2] | 0) != 0 & 1) | 0, $173) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 0:
  {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 default:
  {
   HEAP32[$vararg_buffer >> 2] = $_scheme;
   _printf(gb + 12617 | 0, $vararg_buffer) | 0;
   _exit(-1);
  }
 } while (0);
 return 0;
}

function _detector_cccf_correlate($_q, $_x, $_tau_hat, $_dphi_hat, $_gamma_hat) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 $_tau_hat = $_tau_hat | 0;
 $_dphi_hat = $_dphi_hat | 0;
 $_gamma_hat = $_gamma_hat | 0;
 var $$1 = 0, $$byval_copy2 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $102 = 0.0, $11 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $40 = 0, $41 = 0.0, $46 = 0.0, $47 = 0, $5 = 0, $51 = 0, $53 = 0, $55 = 0, $56 = 0.0, $57 = 0, $63 = 0, $64 = 0, $65 = 0, $67 = 0.0, $7 = 0, $70 = 0, $73 = 0.0, $78 = 0.0, $81 = 0.0, $83 = 0.0, $94 = 0.0, $k$01$i = 0, $r$i = 0, $rxy$i = 0, $rxy_max$02$i = 0.0, $rxy_max$1$i = 0.0, $storemerge$i = 0.0, $storemerge$i1 = 0.0, $storemerge3$i = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy2 = sp + 40 | 0;
 $r$i = sp + 32 | 0;
 $rxy$i = sp + 16 | 0;
 $0 = sp;
 $1 = sp + 24 | 0;
 $2 = sp + 8 | 0;
 $3 = $_q + 16 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = HEAP32[$_x >> 2] | 0;
 $7 = HEAP32[$_x + 4 >> 2] | 0;
 HEAP32[$1 >> 2] = $5;
 HEAP32[$1 + 4 >> 2] = $7;
 HEAP32[$$byval_copy2 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$$byval_copy2 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 _windowcf_push($4, $$byval_copy2);
 HEAP32[$2 >> 2] = $5;
 HEAP32[$2 + 4 >> 2] = $7;
 HEAP32[$$byval_copy2 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy2 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 _detector_cccf_update_sumsq($_q, $$byval_copy2);
 $10 = $_q + 76 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 if ($11 | 0) {
  HEAP32[$10 >> 2] = $11 + -1;
  $$1 = 0;
  STACKTOP = sp;
  return $$1 | 0;
 }
 $14 = $_q + 44 | 0;
 $16 = $_q + 48 | 0;
 $18 = $_q + 24 | 0;
 _memmove(HEAP32[$14 >> 2] | 0, HEAP32[$16 >> 2] | 0, HEAP32[$18 >> 2] << 2 | 0) | 0;
 $22 = $_q + 40 | 0;
 _memmove(HEAP32[$16 >> 2] | 0, HEAP32[$22 >> 2] | 0, HEAP32[$18 >> 2] << 2 | 0) | 0;
 _windowcf_read(HEAP32[$3 >> 2] | 0, $r$i);
 if (!(HEAP32[$18 >> 2] | 0)) {
  $$pre$phiZ2D = $_q + 52 | 0;
  $55 = HEAP32[$22 >> 2] | 0;
  $70 = 0;
 } else {
  $29 = $_q + 20 | 0;
  $30 = $rxy$i + 4 | 0;
  $31 = $0 + 4 | 0;
  $32 = $_q + 12 | 0;
  $33 = $_q + 68 | 0;
  $34 = $_q + 52 | 0;
  $k$01$i = 0;
  $rxy_max$02$i = 0.0;
  while (1) {
   _dotprod_cccf_execute(HEAP32[(HEAP32[$29 >> 2] | 0) + ($k$01$i << 2) >> 2] | 0, HEAP32[$r$i >> 2] | 0, $rxy$i);
   $40 = HEAP32[$30 >> 2] | 0;
   HEAP32[$0 >> 2] = HEAP32[$rxy$i >> 2];
   HEAP32[$31 >> 2] = $40;
   HEAP32[$$byval_copy2 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$$byval_copy2 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
   $41 = +_cabsf($$byval_copy2);
   $46 = $41 * +HEAPF32[$32 >> 2] / +Math_sqrt(+(+HEAPF32[$33 >> 2]));
   $47 = HEAP32[$22 >> 2] | 0;
   $storemerge$i = $46 == $46 & 0.0 == 0.0 ? $46 : 0.0;
   HEAPF32[$47 + ($k$01$i << 2) >> 2] = $storemerge$i;
   if ($storemerge$i > $rxy_max$02$i) {
    HEAP32[$34 >> 2] = $k$01$i;
    $rxy_max$1$i = $storemerge$i;
   } else $rxy_max$1$i = $rxy_max$02$i;
   $k$01$i = $k$01$i + 1 | 0;
   $51 = HEAP32[$18 >> 2] | 0;
   if ($k$01$i >>> 0 >= $51 >>> 0) {
    $$pre$phiZ2D = $34;
    $55 = $47;
    $70 = $51;
    break;
   } else $rxy_max$02$i = $rxy_max$1$i;
  }
 }
 $53 = HEAP32[$$pre$phiZ2D >> 2] | 0;
 $56 = +HEAPF32[$55 + ($53 << 2) >> 2];
 $57 = $_q + 72 | 0;
 switch (HEAP32[$57 >> 2] | 0) {
 case 0:
  {
   if (!($56 > +HEAPF32[$_q + 8 >> 2])) {
    $$1 = 0;
    STACKTOP = sp;
    return $$1 | 0;
   }
   HEAP32[$_q + 56 >> 2] = $53;
   HEAP32[$57 >> 2] = 1;
   $$1 = 0;
   STACKTOP = sp;
   return $$1 | 0;
  }
 case 1:
  {
   $63 = $_q + 56 | 0;
   $64 = HEAP32[$63 >> 2] | 0;
   $65 = HEAP32[$16 >> 2] | 0;
   $67 = +HEAPF32[$65 + ($64 << 2) >> 2];
   if ($56 > $67) {
    HEAP32[$63 >> 2] = $53;
    $$1 = 0;
    STACKTOP = sp;
    return $$1 | 0;
   }
   if (($70 | 0) == 1) {
    HEAPF32[$_dphi_hat >> 2] = 0.0;
    $storemerge3$i = 0.0;
   } else {
    $73 = +HEAPF32[(HEAP32[$14 >> 2] | 0) + ($64 << 2) >> 2];
    $78 = +HEAPF32[(($64 | 0) == 0 ? $65 + 4 | 0 : $65 + ($64 + -1 << 2) | 0) >> 2];
    $81 = +HEAPF32[$65 + ((($64 | 0) == ($70 + -1 | 0) ? -1 : 1) + $64 << 2) >> 2];
    $83 = +HEAPF32[$55 + ($64 << 2) >> 2];
    $94 = $67 * 2.0;
    HEAPF32[$_dphi_hat >> 2] = +HEAPF32[(HEAP32[$_q + 36 >> 2] | 0) + ($64 << 2) >> 2] - ($81 - $78) * (+HEAPF32[$_q + 28 >> 2] * .5) / ($78 + $81 - $94);
    $102 = ($83 - $73) * .5 / ($73 + $83 - $94);
    $storemerge$i1 = $102 < -.49900001287460327 ? -.49900001287460327 : $102;
    $storemerge3$i = $storemerge$i1 > .49900001287460327 ? .49900001287460327 : $storemerge$i1;
   }
   HEAPF32[$_tau_hat >> 2] = $storemerge3$i;
   HEAPF32[$_gamma_hat >> 2] = +Math_sqrt(+(+HEAPF32[$_q + 68 >> 2]));
   HEAP32[$57 >> 2] = 0;
   HEAP32[$10 >> 2] = (HEAP32[$_q + 4 >> 2] | 0) >>> 2;
   $$1 = 1;
   STACKTOP = sp;
   return $$1 | 0;
  }
 default:
  {
   _fwrite(gb + 41148 | 0, 69, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
   _exit(1);
  }
 }
 return 0;
}

function _cheby2_azpkf($_n, $_es, $_za, $_pa, $_ka) {
 $_n = $_n | 0;
 $_es = +$_es;
 $_za = $_za | 0;
 $_pa = $_pa | 0;
 $_ka = $_ka | 0;
 var $0 = 0, $1 = 0, $100 = 0, $101 = 0, $103 = 0.0, $105 = 0.0, $107 = 0.0, $109 = 0.0, $112 = 0.0, $113 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $133 = 0.0, $134 = 0.0, $14 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $23 = 0.0, $25 = 0.0, $27 = 0.0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $47 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $56 = 0, $57 = 0, $62 = 0, $73 = 0, $74 = 0, $75 = 0, $83 = 0.0, $84 = 0.0, $86 = 0, $87 = 0, $91 = 0, $98 = 0, $i$011 = 0, $i$17 = 0, $i$23 = 0, $i$32 = 0, $k$0$lcssa = 0, $k$010 = 0, $k$1 = 0, $k$2$lcssa = 0, $k$26 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 40 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 8 | 0;
 $5 = sp;
 $12 = +Math_sqrt(+(1.0 / ($_es * $_es) + 1.0));
 $14 = 1.0 / $_es;
 $17 = +($_n >>> 0);
 $18 = $17;
 $19 = 1.0 / $17;
 $20 = +Math_pow(+($14 + $12), +$19);
 $23 = +Math_pow(+($12 - $14), +$19);
 $25 = ($20 + $23) * .5;
 $27 = ($20 - $23) * .5;
 $28 = $_n & 1;
 $30 = ($_n - $28 | 0) >>> 1;
 $31 = ($30 | 0) == 0;
 if ($31) $k$0$lcssa = 0; else {
  $32 = $_n + -1 | 0;
  $35 = +($_n << 1 >>> 0);
  $36 = $25 * 0.0;
  $37 = $0 + 4 | 0;
  $38 = $1 + 4 | 0;
  $39 = $_n >>> 1;
  $i$011 = 0;
  $k$010 = 0;
  while (1) {
   $i$011 = $i$011 + 1 | 0;
   $47 = +(($32 + ($i$011 << 1) | 0) >>> 0) * 3.141592653589793 / $35;
   $49 = $27 * +Math_cos(+$47);
   $50 = +Math_sin(+$47);
   $51 = $36 * $50;
   $52 = $25 * $50;
   ___divsc3($0, 1.0, 0.0, $49 - $51, -$52);
   $56 = HEAP32[$37 >> 2] | 0;
   $57 = $k$010 | 1;
   HEAP32[$_pa + ($k$010 << 3) >> 2] = HEAP32[$0 >> 2];
   HEAP32[$_pa + ($k$010 << 3) + 4 >> 2] = $56;
   ___divsc3($1, 1.0, 0.0, $49 + $51, $52);
   $62 = HEAP32[$38 >> 2] | 0;
   HEAP32[$_pa + ($57 << 3) >> 2] = HEAP32[$1 >> 2];
   HEAP32[$_pa + ($57 << 3) + 4 >> 2] = $62;
   if (($i$011 | 0) == ($39 | 0)) break; else $k$010 = $k$010 + 2 | 0;
  }
  $k$0$lcssa = $39 << 1;
 }
 if (!$28) $k$1 = $k$0$lcssa; else {
  HEAPF32[$_pa + ($k$0$lcssa << 3) >> 2] = -1.0 / $27;
  HEAPF32[$_pa + ($k$0$lcssa << 3) + 4 >> 2] = 0.0;
  $k$1 = $k$0$lcssa | 1;
 }
 if (($k$1 | 0) != ($_n | 0)) ___assert_fail(gb + 40901 | 0, gb + 40907 | 0, 84, gb + 40931 | 0);
 if ($31) $k$2$lcssa = 0; else {
  $73 = $2 + 4 | 0;
  $74 = $3 + 4 | 0;
  $75 = $_n >>> 1;
  $i$17 = 0;
  $k$26 = 0;
  while (1) {
   $i$17 = $i$17 + 1 | 0;
   $83 = +Math_cos(+(+((($i$17 << 1) + -1 | 0) >>> 0) * 1.5707963267948966 / $18));
   $84 = $83 * 0.0;
   ___divsc3($2, -1.0, 0.0, $84, $83);
   $86 = HEAP32[$73 >> 2] | 0;
   $87 = $k$26 | 1;
   HEAP32[$_za + ($k$26 << 3) >> 2] = HEAP32[$2 >> 2];
   HEAP32[$_za + ($k$26 << 3) + 4 >> 2] = $86;
   ___divsc3($3, 1.0, 0.0, $84, $83);
   $91 = HEAP32[$74 >> 2] | 0;
   HEAP32[$_za + ($87 << 3) >> 2] = HEAP32[$3 >> 2];
   HEAP32[$_za + ($87 << 3) + 4 >> 2] = $91;
   if (($i$17 | 0) == ($75 | 0)) break; else $k$26 = $k$26 + 2 | 0;
  }
  $k$2$lcssa = $75 << 1;
 }
 if (($k$2$lcssa | 0) != ($30 << 1 | 0)) ___assert_fail(gb + 40944 | 0, gb + 40907 | 0, 95, gb + 40931 | 0);
 $98 = $_ka + 4 | 0;
 HEAPF32[$_ka >> 2] = 1.0;
 HEAPF32[$98 >> 2] = 0.0;
 if (!$_n) {
  $133 = 0.0;
  $134 = 1.0;
 } else {
  $100 = $4 + 4 | 0;
  $107 = 1.0;
  $109 = 0.0;
  $i$23 = 0;
  while (1) {
   $103 = +HEAPF32[$_pa + ($i$23 << 3) >> 2];
   $105 = +HEAPF32[$_pa + ($i$23 << 3) + 4 >> 2];
   $112 = $103 * $107 - $105 * $109;
   $113 = $105 * $107 + $103 * $109;
   if (($112 != $112 | 0.0 != 0.0) & ($113 != $113 | 0.0 != 0.0)) {
    ___mulsc3($4, $107, $109, $103, $105);
    $118 = +HEAPF32[$4 >> 2];
    $119 = +HEAPF32[$100 >> 2];
   } else {
    $118 = $112;
    $119 = $113;
   }
   HEAPF32[$_ka >> 2] = $118;
   HEAPF32[$98 >> 2] = $119;
   $i$23 = $i$23 + 1 | 0;
   if (($i$23 | 0) == ($_n | 0)) {
    $133 = $119;
    $134 = $118;
    break;
   } else {
    $107 = $118;
    $109 = $119;
   }
  }
 }
 if ($31) {
  STACKTOP = sp;
  return;
 }
 $101 = $5 + 4 | 0;
 $125 = $134;
 $126 = $133;
 $i$32 = 0;
 while (1) {
  ___divsc3($5, $125, $126, +HEAPF32[$_za + ($i$32 << 3) >> 2], +HEAPF32[$_za + ($i$32 << 3) + 4 >> 2]);
  $127 = HEAP32[$5 >> 2] | 0;
  $128 = HEAP32[$101 >> 2] | 0;
  HEAP32[$_ka >> 2] = $127;
  HEAP32[$98 >> 2] = $128;
  $i$32 = $i$32 + 1 | 0;
  $125 = (HEAP32[tempDoublePtr >> 2] = $127, +HEAPF32[tempDoublePtr >> 2]);
  if ($i$32 >>> 0 >= $k$2$lcssa >>> 0) break; else $126 = (HEAP32[tempDoublePtr >> 2] = $128, +HEAPF32[tempDoublePtr >> 2]);
 }
 STACKTOP = sp;
 return;
}

function _fft_create_plan_mixed_radix($_nfft, $_x, $_y, $_dir, $_flags) {
 $_nfft = $_nfft | 0;
 $_x = $_x | 0;
 $_y = $_y | 0;
 $_dir = $_dir | 0;
 $_flags = $_flags | 0;
 var $$1$i$ph = 0, $$1$i1 = 0, $$byval_copy8 = 0, $0 = 0, $1 = 0, $101 = 0, $13 = 0, $15 = 0, $2 = 0, $28 = 0, $3 = 0, $30 = 0, $33 = 0, $34 = 0, $39 = 0, $40 = 0, $42 = 0, $44 = 0, $51 = 0, $53 = 0.0, $55 = 0.0, $59 = 0.0, $60 = 0.0, $63 = 0, $65 = 0.0, $66 = 0, $67 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $79 = 0.0, $8 = 0, $85 = 0.0, $87 = 0, $93 = 0.0, $i$01$i = 0, $i$01$i$lcssa = 0, $i$04 = 0, $i$04$us = 0, $num_factors$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy8 = sp + 56 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $num_factors$i = sp + 32 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 24 | 0;
 $3 = _malloc(72) | 0;
 HEAP32[$3 >> 2] = $_nfft;
 HEAP32[$3 + 4 >> 2] = $_x;
 HEAP32[$3 + 8 >> 2] = $_y;
 HEAP32[$3 + 16 >> 2] = $_flags;
 $7 = ($_dir | 0) == 1;
 $8 = $7 ? 1 : -1;
 HEAP32[$3 + 20 >> 2] = $8;
 HEAP32[$3 + 12 >> 2] = $8;
 HEAP32[$3 + 24 >> 2] = 2;
 HEAP32[$3 + 28 >> 2] = fb + 9;
 _liquid_factor($_nfft, $$byval_copy8, $num_factors$i);
 $13 = HEAP32[$num_factors$i >> 2] | 0;
 if ($13 >>> 0 < 2) {
  $15 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = $_nfft;
  _fprintf($15, gb + 40372 | 0, $vararg_buffer) | 0;
  $30 = $15;
  HEAP32[$vararg_buffer1 >> 2] = $_nfft;
  _fprintf($30, gb + 40422 | 0, $vararg_buffer1) | 0;
  _exit(1);
 } else $i$01$i = 0;
 while (1) {
  if ((HEAP32[$$byval_copy8 + ($i$01$i << 2) >> 2] | 0) != 2) {
   $i$01$i$lcssa = $i$01$i;
   label = 5;
   break;
  }
  $i$01$i = $i$01$i + 1 | 0;
  if ($i$01$i >>> 0 >= $13 >>> 0) {
   label = 6;
   break;
  }
 }
 if ((label | 0) == 5) if (!$i$01$i$lcssa) {
  $28 = HEAP32[$$byval_copy8 >> 2] | 0;
  if (!$28) {
   $30 = HEAP32[gb + 9336 >> 2] | 0;
   HEAP32[$vararg_buffer1 >> 2] = $_nfft;
   _fprintf($30, gb + 40422 | 0, $vararg_buffer1) | 0;
   _exit(1);
  } else $$1$i1 = $28;
 } else label = 6;
 if ((label | 0) == 6) {
  if (!($_nfft & 15)) $$1$i$ph = 16; else if (!($_nfft & 7)) $$1$i$ph = 8; else $$1$i$ph = ($_nfft & 3 | 0) == 0 ? 4 : 2;
  $$1$i1 = $$1$i$ph;
 }
 if (($_nfft >>> 0) % ($$1$i1 >>> 0) | 0 | 0) {
  $33 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer4 >> 2] = $_nfft;
  HEAP32[$vararg_buffer4 + 4 >> 2] = $$1$i1;
  _fprintf($33, gb + 40479 | 0, $vararg_buffer4) | 0;
  _exit(1);
 }
 $34 = ($_nfft >>> 0) / ($$1$i1 >>> 0) | 0;
 HEAP32[$3 + 44 >> 2] = $$1$i1;
 HEAP32[$3 + 40 >> 2] = $34;
 $39 = ($$1$i1 >>> 0 > $34 >>> 0 ? $$1$i1 : $34) << 3;
 $40 = _malloc($39) | 0;
 HEAP32[$3 + 52 >> 2] = $40;
 $42 = _malloc($39) | 0;
 HEAP32[$3 + 56 >> 2] = $42;
 $44 = $_nfft << 3;
 HEAP32[$3 + 48 >> 2] = _malloc($44) | 0;
 HEAP32[$3 + 64 >> 2] = _fft_create_plan($34, $40, $42, $8, $_flags) | 0;
 HEAP32[$3 + 68 >> 2] = _fft_create_plan($$1$i1, $40, $42, $8, $_flags) | 0;
 $51 = _malloc($44) | 0;
 HEAP32[$3 + 60 >> 2] = $51;
 $53 = $7 ? -1.0 : 1.0;
 if (!$_nfft) {
  STACKTOP = sp;
  return $3 | 0;
 }
 $55 = $53 * 0.0;
 $59 = $55 * 2.0 - $55;
 $60 = $53 * 2.0 + $55 * 0.0;
 $63 = $0 + 4 | 0;
 $65 = +($_nfft >>> 0);
 $66 = $2 + 4 | 0;
 $67 = $1 + 4 | 0;
 if (($59 != $59 | 0.0 != 0.0) & ($60 != $60 | 0.0 != 0.0)) {
  $i$04$us = 0;
  do {
   ___mulsc3($0, $55, $53, 2.0, 0.0);
   $79 = +($i$04$us >>> 0);
   $85 = $79 * (+HEAPF32[$63 >> 2] * 3.141592653589793) / $65;
   HEAPF32[$2 >> 2] = $79 * (+HEAPF32[$0 >> 2] * 3.141592653589793) / $65;
   HEAPF32[$66 >> 2] = $85;
   HEAP32[$$byval_copy8 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy8 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
   _cexpf($1, $$byval_copy8);
   $87 = HEAP32[$67 >> 2] | 0;
   HEAP32[$51 + ($i$04$us << 3) >> 2] = HEAP32[$1 >> 2];
   HEAP32[$51 + ($i$04$us << 3) + 4 >> 2] = $87;
   $i$04$us = $i$04$us + 1 | 0;
  } while ($i$04$us >>> 0 < $_nfft >>> 0);
  STACKTOP = sp;
  return $3 | 0;
 }
 $70 = $59 * 3.141592653589793;
 $71 = $60 * 3.141592653589793;
 $i$04 = 0;
 do {
  $93 = +($i$04 >>> 0);
  HEAPF32[$2 >> 2] = $93 * $70 / $65;
  HEAPF32[$66 >> 2] = $93 * $71 / $65;
  HEAP32[$$byval_copy8 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$$byval_copy8 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
  _cexpf($1, $$byval_copy8);
  $101 = HEAP32[$67 >> 2] | 0;
  HEAP32[$51 + ($i$04 << 3) >> 2] = HEAP32[$1 >> 2];
  HEAP32[$51 + ($i$04 << 3) + 4 >> 2] = $101;
  $i$04 = $i$04 + 1 | 0;
 } while ($i$04 >>> 0 < $_nfft >>> 0);
 STACKTOP = sp;
 return $3 | 0;
}

function _lex_scan_number($lex, $c, $error) {
 $lex = $lex | 0;
 $c = $c | 0;
 $error = $error | 0;
 var $0 = 0, $1 = 0, $103 = 0, $104 = 0, $154 = 0, $2 = 0, $3 = 0, $54 = 0, $55 = 0, $56 = 0, $70 = 0, $71 = 0, $82 = 0, $87 = 0, $90 = 0, $doubleval = 0, $end = 0, $intval = 0, $saved_text = 0, $vararg_buffer = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer20 = sp + 32 | 0;
 $vararg_buffer18 = sp + 24 | 0;
 $vararg_buffer = sp + 16 | 0;
 $0 = sp + 56 | 0;
 $1 = sp + 52 | 0;
 $2 = sp + 48 | 0;
 $3 = sp + 44 | 0;
 $saved_text = sp + 40 | 0;
 $end = sp + 36 | 0;
 $doubleval = sp + 8 | 0;
 $intval = sp;
 HEAP32[$1 >> 2] = $lex;
 HEAP32[$2 >> 2] = $c;
 HEAP32[$3 >> 2] = $error;
 HEAP32[(HEAP32[$1 >> 2] | 0) + 56 >> 2] = -1;
 if ((HEAP32[$2 >> 2] | 0) == 45) HEAP32[$2 >> 2] = _lex_get_save(HEAP32[$1 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
 do if ((HEAP32[$2 >> 2] | 0) == 48) {
  HEAP32[$2 >> 2] = _lex_get_save(HEAP32[$1 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
  if (48 <= (HEAP32[$2 >> 2] | 0) & (HEAP32[$2 >> 2] | 0) <= 57) _lex_unget_unsave(HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0); else label = 9;
 } else if (48 <= (HEAP32[$2 >> 2] | 0) & (HEAP32[$2 >> 2] | 0) <= 57) {
  do HEAP32[$2 >> 2] = _lex_get_save(HEAP32[$1 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0; while (48 <= (HEAP32[$2 >> 2] | 0) ? (HEAP32[$2 >> 2] | 0) <= 57 : 0);
  label = 9;
 } else {
  _lex_unget_unsave(HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0);
  break;
 } while (0);
 do if ((label | 0) == 9) {
  if (((HEAP32[$2 >> 2] | 0) != 46 ? (HEAP32[(HEAP32[$1 >> 2] | 0) + 52 >> 2] & 8 | 0) == 0 : 0) & (HEAP32[$2 >> 2] | 0) != 69 & (HEAP32[$2 >> 2] | 0) != 101) {
   _lex_unget_unsave(HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0);
   HEAP32[$saved_text >> 2] = _strbuffer_value((HEAP32[$1 >> 2] | 0) + 40 | 0) | 0;
   HEAP32[(___errno_location() | 0) >> 2] = 0;
   $54 = _strtoll(HEAP32[$saved_text >> 2] | 0, $end, 10) | 0;
   $55 = getTempRet0() | 0;
   $56 = $intval;
   HEAP32[$56 >> 2] = $54;
   HEAP32[$56 + 4 >> 2] = $55;
   if ((HEAP32[(___errno_location() | 0) >> 2] | 0) == 34) {
    $70 = HEAP32[$3 >> 2] | 0;
    $71 = HEAP32[$1 >> 2] | 0;
    if ((HEAP32[$intval + 4 >> 2] | 0) < 0) {
     _error_set($70, $71, gb + 41714 | 0, $vararg_buffer);
     break;
    } else {
     _error_set($70, $71, gb + 41739 | 0, $vararg_buffer18);
     break;
    }
   }
   if ((HEAP32[$end >> 2] | 0) != ((HEAP32[$saved_text >> 2] | 0) + (HEAP32[(HEAP32[$1 >> 2] | 0) + 40 + 4 >> 2] | 0) | 0)) ___assert_fail(gb + 41755 | 0, gb + 41349 | 0, 530, gb + 41798 | 0);
   HEAP32[(HEAP32[$1 >> 2] | 0) + 56 >> 2] = 257;
   $82 = $intval;
   $87 = HEAP32[$82 + 4 >> 2] | 0;
   $90 = (HEAP32[$1 >> 2] | 0) + 64 | 0;
   HEAP32[$90 >> 2] = HEAP32[$82 >> 2];
   HEAP32[$90 + 4 >> 2] = $87;
   HEAP32[$0 >> 2] = 0;
   $154 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $154 | 0;
  }
  if ((HEAP32[$2 >> 2] | 0) == 46) {
   HEAP32[$2 >> 2] = _lex_get(HEAP32[$1 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
   $103 = HEAP32[$1 >> 2] | 0;
   $104 = HEAP32[$2 >> 2] | 0;
   if (!(48 <= (HEAP32[$2 >> 2] | 0) & (HEAP32[$2 >> 2] | 0) <= 57)) {
    _lex_unget($103, $104);
    break;
   }
   _lex_save($103, $104);
   do HEAP32[$2 >> 2] = _lex_get_save(HEAP32[$1 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0; while (48 <= (HEAP32[$2 >> 2] | 0) ? (HEAP32[$2 >> 2] | 0) <= 57 : 0);
  }
  if ((HEAP32[$2 >> 2] | 0) == 69 | (HEAP32[$2 >> 2] | 0) == 101) {
   HEAP32[$2 >> 2] = _lex_get_save(HEAP32[$1 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
   if ((HEAP32[$2 >> 2] | 0) == 43 | (HEAP32[$2 >> 2] | 0) == 45) HEAP32[$2 >> 2] = _lex_get_save(HEAP32[$1 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
   if (48 <= (HEAP32[$2 >> 2] | 0) & (HEAP32[$2 >> 2] | 0) <= 57) do HEAP32[$2 >> 2] = _lex_get_save(HEAP32[$1 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0; while (48 <= (HEAP32[$2 >> 2] | 0) ? (HEAP32[$2 >> 2] | 0) <= 57 : 0); else {
    _lex_unget_unsave(HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0);
    break;
   }
  }
  _lex_unget_unsave(HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0);
  if (_jsonp_strtod((HEAP32[$1 >> 2] | 0) + 40 | 0, $doubleval) | 0) {
   _error_set(HEAP32[$3 >> 2] | 0, HEAP32[$1 >> 2] | 0, gb + 41814 | 0, $vararg_buffer20);
   break;
  }
  HEAP32[(HEAP32[$1 >> 2] | 0) + 56 >> 2] = 258;
  HEAPF64[(HEAP32[$1 >> 2] | 0) + 64 >> 3] = +HEAPF64[$doubleval >> 3];
  HEAP32[$0 >> 2] = 0;
  $154 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $154 | 0;
 } while (0);
 HEAP32[$0 >> 2] = -1;
 $154 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $154 | 0;
}

function _gmskframesync_pushpn($_q) {
 $_q = $_q | 0;
 var $$byval_copy3 = 0, $$lcssa = 0, $$lcssa17 = 0.0, $0 = 0, $1 = 0, $13 = 0.0, $16 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0.0, $26 = 0.0, $27 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $38 = 0, $4 = 0, $47 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $65 = 0, $67 = 0.0, $68 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $77 = 0.0, $78 = 0.0, $8 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $88 = 0.0, $92 = 0, $96 = 0, $98 = 0, $delay$0 = 0, $delay$0$lcssa = 0, $delay$0$lcssa18 = 0, $delay$03 = 0, $delay$04 = 0, $i$02 = 0, $rc = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy3 = sp + 64 | 0;
 $0 = sp + 56 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 40 | 0;
 $3 = sp + 24 | 0;
 $rc = sp + 8 | 0;
 $y = sp;
 $4 = sp + 32 | 0;
 $5 = sp + 16 | 0;
 $6 = $_q + 76 | 0;
 _firpfb_rrrf_reset(HEAP32[$6 >> 2] | 0);
 $8 = $_q + 80 | 0;
 _firpfb_rrrf_reset(HEAP32[$8 >> 2] | 0);
 _windowcf_read(HEAP32[$_q + 124 >> 2] | 0, $rc);
 $13 = +HEAPF32[$_q + 112 >> 2];
 if (!($13 < .5 & $13 > -.5)) ___assert_fail(gb + 27482 | 0, gb + 27524 | 0, 496, gb + 27556 | 0);
 $16 = $_q + 4 | 0;
 $19 = $_q + 8 | 0;
 $21 = Math_imul(HEAP32[$16 >> 2] << 1, HEAP32[$19 >> 2] | 0) | 0;
 $23 = HEAP32[$_q + 84 >> 2] | 0;
 $24 = +($23 >>> 0);
 $26 = -($13 * $24);
 $27 = $_q + 92 | 0;
 HEAPF32[$27 >> 2] = $26;
 $29 = ~~+_roundf(+$26);
 $30 = $_q + 96 | 0;
 HEAP32[$30 >> 2] = $29;
 $delay$03 = $21 + -1 | 0;
 if (($29 | 0) < 0) {
  $33 = $29;
  $35 = $26;
  $delay$04 = $delay$03;
  while (1) {
   $32 = $23 + $33 | 0;
   $34 = $24 + $35;
   $delay$0 = $delay$04 + -1 | 0;
   if (($32 | 0) < 0) {
    $33 = $32;
    $35 = $34;
    $delay$04 = $delay$0;
   } else {
    $$lcssa = $32;
    $$lcssa17 = $34;
    $delay$0$lcssa18 = $delay$0;
    break;
   }
  }
  HEAP32[$30 >> 2] = $$lcssa;
  HEAPF32[$27 >> 2] = $$lcssa17;
  $delay$0$lcssa = $delay$0$lcssa18;
 } else $delay$0$lcssa = $delay$03;
 HEAP32[$_q + 100 >> 2] = 0;
 $38 = $_q + 128 | 0;
 _nco_crcf_set_frequency(HEAP32[$38 >> 2] | 0, +HEAPF32[$_q + 116 >> 2]);
 $47 = Math_imul((HEAP32[$19 >> 2] | 0) + (HEAP32[$_q + 132 >> 2] | 0) | 0, HEAP32[$16 >> 2] | 0) | 0;
 if (!$47) {
  $98 = $_q + 216 | 0;
  HEAP32[$98 >> 2] = 1;
  STACKTOP = sp;
  return;
 }
 $49 = $4 + 4 | 0;
 $50 = $y + 4 | 0;
 $51 = $_q + 64 | 0;
 $52 = $_q + 68 | 0;
 $53 = $1 + 4 | 0;
 $54 = $0 + 4 | 0;
 $55 = $2 + 4 | 0;
 $56 = $3 + 4 | 0;
 $57 = $_q + 72 | 0;
 $58 = $5 + 4 | 0;
 $i$02 = 0;
 do {
  if ($i$02 >>> 0 < $delay$0$lcssa >>> 0) {
   $60 = HEAP32[$38 >> 2] | 0;
   $61 = HEAP32[$rc >> 2] | 0;
   $65 = HEAP32[$61 + ($i$02 << 3) + 4 >> 2] | 0;
   HEAP32[$4 >> 2] = HEAP32[$61 + ($i$02 << 3) >> 2];
   HEAP32[$49 >> 2] = $65;
   HEAP32[$$byval_copy3 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
   _nco_crcf_mix_down($60, $$byval_copy3, $y);
   _nco_crcf_step(HEAP32[$38 >> 2] | 0);
   $67 = +HEAPF32[$y >> 2];
   $68 = +HEAPF32[$50 >> 2];
   $70 = HEAP32[$52 >> 2] | 0;
   HEAP32[$1 >> 2] = HEAP32[$51 >> 2];
   HEAP32[$53 >> 2] = $70;
   HEAP32[$$byval_copy3 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   _conjf($0, $$byval_copy3);
   $71 = +HEAPF32[$0 >> 2];
   $72 = +HEAPF32[$54 >> 2];
   $77 = $67 * $71 - $68 * $72;
   $78 = $68 * $71 + $67 * $72;
   if (($77 != $77 | 0.0 != 0.0) & ($78 != $78 | 0.0 != 0.0)) {
    ___mulsc3($2, $71, $72, $67, $68);
    $83 = +HEAPF32[$2 >> 2];
    $84 = +HEAPF32[$55 >> 2];
   } else {
    $83 = $77;
    $84 = $78;
   }
   HEAPF32[$3 >> 2] = $83;
   HEAPF32[$56 >> 2] = $84;
   HEAP32[$$byval_copy3 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   $85 = +_cargf($$byval_copy3);
   $88 = $85 * +((HEAP32[$16 >> 2] | 0) >>> 0);
   HEAPF32[$57 >> 2] = $88;
   HEAPF32[$51 >> 2] = $67;
   HEAPF32[$52 >> 2] = $68;
   _firpfb_rrrf_push(HEAP32[$6 >> 2] | 0, $88);
   _firpfb_rrrf_push(HEAP32[$8 >> 2] | 0, +HEAPF32[$57 >> 2]);
  } else {
   $92 = HEAP32[$rc >> 2] | 0;
   $96 = HEAP32[$92 + ($i$02 << 3) + 4 >> 2] | 0;
   HEAP32[$5 >> 2] = HEAP32[$92 + ($i$02 << 3) >> 2];
   HEAP32[$58 >> 2] = $96;
   HEAP32[$$byval_copy3 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
   _gmskframesync_execute_rxpreamble($_q, $$byval_copy3);
  }
  $i$02 = $i$02 + 1 | 0;
 } while (($i$02 | 0) != ($47 | 0));
 $98 = $_q + 216 | 0;
 HEAP32[$98 >> 2] = 1;
 STACKTOP = sp;
 return;
}

function _fft_create_plan_rader($_nfft, $_x, $_y, $_dir, $_flags) {
 $_nfft = $_nfft | 0;
 $_x = $_x | 0;
 $_y = $_y | 0;
 $_dir = $_dir | 0;
 $_flags = $_flags | 0;
 var $$byval_copy1 = 0, $$pre8 = 0, $0 = 0, $1 = 0, $104 = 0.0, $106 = 0.0, $11 = 0, $110 = 0, $118 = 0, $119 = 0, $120 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $26 = 0, $29 = 0, $3 = 0, $36 = 0.0, $38 = 0.0, $4 = 0, $42 = 0.0, $43 = 0.0, $46 = 0, $47 = 0, $48 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $60 = 0.0, $65 = 0.0, $66 = 0.0, $69 = 0.0, $74 = 0.0, $75 = 0.0, $81 = 0.0, $83 = 0.0, $87 = 0, $9 = 0, $94 = 0.0, $97 = 0.0, $98 = 0.0, $i$03 = 0, $i$12 = 0, $i$12$us = 0, sp = 0, $i$03$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy1 = sp + 40 | 0;
 $0 = sp + 32 | 0;
 $1 = sp;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $4 = _malloc(72) | 0;
 HEAP32[$4 >> 2] = $_nfft;
 HEAP32[$4 + 4 >> 2] = $_x;
 HEAP32[$4 + 8 >> 2] = $_y;
 HEAP32[$4 + 16 >> 2] = $_flags;
 $9 = ($_dir | 0) == 1 ? 1 : -1;
 HEAP32[$4 + 20 >> 2] = $9;
 $11 = $4 + 12 | 0;
 HEAP32[$11 >> 2] = $9;
 HEAP32[$4 + 24 >> 2] = 3;
 HEAP32[$4 + 28 >> 2] = fb + 10;
 $15 = ($_nfft << 3) + -8 | 0;
 $16 = _malloc($15) | 0;
 $17 = $4 + 40 | 0;
 $18 = $4 + 48 | 0;
 HEAP32[$18 >> 2] = $16;
 $19 = _malloc($15) | 0;
 HEAP32[$4 + 52 >> 2] = $19;
 $21 = $_nfft + -1 | 0;
 $22 = _fft_create_plan($21, $16, $19, 1, $_flags) | 0;
 HEAP32[$4 + 56 >> 2] = $22;
 HEAP32[$4 + 60 >> 2] = _fft_create_plan($21, $19, $16, -1, $_flags) | 0;
 $26 = _liquid_primitive_root_prime($_nfft) | 0;
 $29 = _malloc(($_nfft << 2) + -4 | 0) | 0;
 HEAP32[$17 >> 2] = $29;
 L1 : do if (($_nfft | 0) == 1) $118 = 1; else {
  $i$03 = 0;
  do {
   $i$03$looptemp = $i$03;
   $i$03 = $i$03 + 1 | 0;
   HEAP32[$29 + ($i$03$looptemp << 2) >> 2] = _liquid_modpow($26, $i$03, $_nfft) | 0;
  } while ($i$03 >>> 0 < $21 >>> 0);
  $$pre8 = HEAP32[$4 >> 2] | 0;
  $36 = (HEAP32[$11 >> 2] | 0) == 1 ? -1.0 : 1.0;
  if (($$pre8 | 0) == 1) $118 = 1; else {
   $38 = $36 * 0.0;
   $42 = $38 * 2.0 - $38;
   $43 = $36 * 2.0 + $38 * 0.0;
   $46 = $0 + 4 | 0;
   $47 = HEAP32[$17 >> 2] | 0;
   $48 = $1 + 8 | 0;
   $50 = +($$pre8 >>> 0);
   $51 = $3 + 4 | 0;
   $52 = $2 + 4 | 0;
   $53 = HEAP32[$18 >> 2] | 0;
   $54 = $$pre8 + -1 | 0;
   if (($42 != $42 | 0.0 != 0.0) & ($43 != $43 | 0.0 != 0.0)) {
    $i$12$us = 0;
    while (1) {
     ___mulsc3($0, $38, $36, 2.0, 0.0);
     $65 = +HEAPF32[$0 >> 2] * 3.141592653589793;
     $66 = +HEAPF32[$46 >> 2] * 3.141592653589793;
     $69 = +((HEAP32[$47 + ($i$12$us << 2) >> 2] | 0) >>> 0);
     $74 = $65 * $69 - $66 * 0.0;
     $75 = $65 * 0.0 + $66 * $69;
     if (($74 != $74 | 0.0 != 0.0) & ($75 != $75 | 0.0 != 0.0)) {
      ___muldc3($1, $65, $66, $69, 0.0);
      $81 = +HEAPF64[$1 >> 3];
      $83 = +HEAPF64[$48 >> 3];
     } else {
      $81 = $74;
      $83 = $75;
     }
     HEAPF32[$3 >> 2] = $81 / $50;
     HEAPF32[$51 >> 2] = $83 / $50;
     HEAP32[$$byval_copy1 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
     _cexpf($2, $$byval_copy1);
     $87 = HEAP32[$52 >> 2] | 0;
     HEAP32[$53 + ($i$12$us << 3) >> 2] = HEAP32[$2 >> 2];
     HEAP32[$53 + ($i$12$us << 3) + 4 >> 2] = $87;
     $i$12$us = $i$12$us + 1 | 0;
     if ($i$12$us >>> 0 >= $54 >>> 0) {
      $118 = $$pre8;
      break L1;
     }
    }
   }
   $57 = $42 * 3.141592653589793;
   $58 = $43 * 3.141592653589793;
   $59 = $58 * 0.0;
   $60 = $57 * 0.0;
   $i$12 = 0;
   do {
    $94 = +((HEAP32[$47 + ($i$12 << 2) >> 2] | 0) >>> 0);
    $97 = $57 * $94 - $59;
    $98 = $60 + $58 * $94;
    if (($97 != $97 | 0.0 != 0.0) & ($98 != $98 | 0.0 != 0.0)) {
     ___muldc3($1, $57, $58, $94, 0.0);
     $104 = +HEAPF64[$1 >> 3];
     $106 = +HEAPF64[$48 >> 3];
    } else {
     $104 = $97;
     $106 = $98;
    }
    HEAPF32[$3 >> 2] = $104 / $50;
    HEAPF32[$51 >> 2] = $106 / $50;
    HEAP32[$$byval_copy1 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
    _cexpf($2, $$byval_copy1);
    $110 = HEAP32[$52 >> 2] | 0;
    HEAP32[$53 + ($i$12 << 3) >> 2] = HEAP32[$2 >> 2];
    HEAP32[$53 + ($i$12 << 3) + 4 >> 2] = $110;
    $i$12 = $i$12 + 1 | 0;
   } while ($i$12 >>> 0 < $54 >>> 0);
   $118 = $$pre8;
  }
 } while (0);
 mftCall_vi(HEAP32[$22 + 28 >> 2] | 0, $22 | 0);
 $119 = ($118 << 3) + -8 | 0;
 $120 = _malloc($119) | 0;
 HEAP32[$4 + 44 >> 2] = $120;
 _memcpy($120 | 0, $19 | 0, $119 | 0) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function _fft_execute_radix2($_q) {
 $_q = $_q | 0;
 var $$lcssa21 = 0, $$pre$phiZ2D = 0, $0 = 0, $10 = 0, $101 = 0.0, $103 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $14 = 0, $15 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $26 = 0, $27 = 0, $30 = 0, $33 = 0, $34 = 0, $38 = 0, $39 = 0, $4 = 0, $42 = 0, $45 = 0, $46 = 0, $5 = 0, $50 = 0, $51 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $66 = 0, $68 = 0.0, $70 = 0.0, $73 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0.0, $84 = 0.0, $85 = 0.0, $9 = 0, $90 = 0, $92 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $i$013 = 0, $i$18 = 0, $j$02 = 0, $k$01 = 0, $n2$07 = 0, $stride$09 = 0, $twiddle_index$03 = 0, sp = 0, $n2$07$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 $2 = HEAP32[$_q >> 2] & -4;
 if (!$2) $$pre$phiZ2D = $_q + 8 | 0; else {
  $4 = $_q + 44 | 0;
  $5 = $_q + 4 | 0;
  $6 = $_q + 8 | 0;
  $i$013 = 0;
  do {
   $9 = HEAP32[(HEAP32[$4 >> 2] | 0) + ($i$013 << 2) >> 2] | 0;
   $10 = HEAP32[$5 >> 2] | 0;
   $14 = HEAP32[$10 + ($9 << 3) + 4 >> 2] | 0;
   $15 = HEAP32[$6 >> 2] | 0;
   HEAP32[$15 + ($i$013 << 3) >> 2] = HEAP32[$10 + ($9 << 3) >> 2];
   HEAP32[$15 + ($i$013 << 3) + 4 >> 2] = $14;
   $18 = $i$013 | 1;
   $21 = HEAP32[(HEAP32[$4 >> 2] | 0) + ($18 << 2) >> 2] | 0;
   $22 = HEAP32[$5 >> 2] | 0;
   $26 = HEAP32[$22 + ($21 << 3) + 4 >> 2] | 0;
   $27 = HEAP32[$6 >> 2] | 0;
   HEAP32[$27 + ($18 << 3) >> 2] = HEAP32[$22 + ($21 << 3) >> 2];
   HEAP32[$27 + ($18 << 3) + 4 >> 2] = $26;
   $30 = $i$013 | 2;
   $33 = HEAP32[(HEAP32[$4 >> 2] | 0) + ($30 << 2) >> 2] | 0;
   $34 = HEAP32[$5 >> 2] | 0;
   $38 = HEAP32[$34 + ($33 << 3) + 4 >> 2] | 0;
   $39 = HEAP32[$6 >> 2] | 0;
   HEAP32[$39 + ($30 << 3) >> 2] = HEAP32[$34 + ($33 << 3) >> 2];
   HEAP32[$39 + ($30 << 3) + 4 >> 2] = $38;
   $42 = $i$013 | 3;
   $45 = HEAP32[(HEAP32[$4 >> 2] | 0) + ($42 << 2) >> 2] | 0;
   $46 = HEAP32[$5 >> 2] | 0;
   $50 = HEAP32[$46 + ($45 << 3) + 4 >> 2] | 0;
   $51 = HEAP32[$6 >> 2] | 0;
   HEAP32[$51 + ($42 << 3) >> 2] = HEAP32[$46 + ($45 << 3) >> 2];
   HEAP32[$51 + ($42 << 3) + 4 >> 2] = $50;
   $i$013 = $i$013 + 4 | 0;
  } while ($i$013 >>> 0 < $2 >>> 0);
  $$pre$phiZ2D = $6;
 }
 $56 = HEAP32[$$pre$phiZ2D >> 2] | 0;
 $57 = $_q + 40 | 0;
 $58 = HEAP32[$57 >> 2] | 0;
 if (!$58) {
  STACKTOP = sp;
  return;
 }
 $60 = HEAP32[$_q >> 2] | 0;
 $61 = $_q + 48 | 0;
 $62 = $0 + 4 | 0;
 $109 = $58;
 $110 = $60;
 $i$18 = 0;
 $n2$07 = 1;
 $stride$09 = $60;
 while (1) {
  $n2$07$looptemp = $n2$07;
  $n2$07 = $n2$07 << 1;
  $stride$09 = $stride$09 >>> 1;
  if (!$n2$07$looptemp) {
   $108 = $109;
   $111 = $110;
  } else {
   $73 = $110;
   $j$02 = 0;
   $twiddle_index$03 = 0;
   while (1) {
    $66 = HEAP32[$61 >> 2] | 0;
    $68 = +HEAPF32[$66 + ($twiddle_index$03 << 3) >> 2];
    $70 = +HEAPF32[$66 + ($twiddle_index$03 << 3) + 4 >> 2];
    $twiddle_index$03 = (($twiddle_index$03 + $stride$09 | 0) >>> 0) % ($73 >>> 0) | 0;
    if ($j$02 >>> 0 < $73 >>> 0) {
     $k$01 = $j$02;
     do {
      $75 = $k$01 + $n2$07$looptemp | 0;
      $76 = $56 + ($75 << 3) | 0;
      $77 = +HEAPF32[$76 >> 2];
      $78 = $56 + ($75 << 3) + 4 | 0;
      $79 = +HEAPF32[$78 >> 2];
      $84 = $68 * $77 - $70 * $79;
      $85 = $70 * $77 + $68 * $79;
      if (($84 != $84 | 0.0 != 0.0) & ($85 != $85 | 0.0 != 0.0)) {
       ___mulsc3($0, $77, $79, $68, $70);
       $95 = +HEAPF32[$0 >> 2];
       $97 = +HEAPF32[$62 >> 2];
      } else {
       $95 = $84;
       $97 = $85;
      }
      $90 = $56 + ($k$01 << 3) | 0;
      $92 = $56 + ($k$01 << 3) + 4 | 0;
      $96 = +HEAPF32[$92 >> 2] - $97;
      HEAPF32[$76 >> 2] = +HEAPF32[$90 >> 2] - $95;
      HEAPF32[$78 >> 2] = $96;
      $101 = $97 + +HEAPF32[$92 >> 2];
      HEAPF32[$90 >> 2] = $95 + +HEAPF32[$90 >> 2];
      HEAPF32[$92 >> 2] = $101;
      $k$01 = $k$01 + $n2$07 | 0;
      $103 = HEAP32[$_q >> 2] | 0;
     } while ($k$01 >>> 0 < $103 >>> 0);
     $112 = $103;
    } else $112 = $73;
    $j$02 = $j$02 + 1 | 0;
    if (($j$02 | 0) == ($n2$07$looptemp | 0)) {
     $$lcssa21 = $112;
     break;
    } else $73 = $112;
   }
   $108 = HEAP32[$57 >> 2] | 0;
   $111 = $$lcssa21;
  }
  $i$18 = $i$18 + 1 | 0;
  if ($i$18 >>> 0 >= $108 >>> 0) break; else {
   $109 = $108;
   $110 = $111;
  }
 }
 STACKTOP = sp;
 return;
}

function _liquid_cplxpair_cleanup($_p, $_n, $_num_pairs) {
 $_p = $_p | 0;
 $_n = $_n | 0;
 $_num_pairs = $_num_pairs | 0;
 var $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $14 = 0.0, $17 = 0.0, $18 = 0.0, $2 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $5 = 0, $50 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $i$016 = 0, $i$114 = 0, $i$27 = 0, $j$0 = 0, $j$0$in10 = 0, $j$0$in10$phi = 0, $j$011 = 0, $j$09 = 0, $j$1 = 0, $j$1$in5 = 0, $j$1$in5$phi = 0, $j$14 = 0, $j$16 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy1 = sp + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp;
 $4 = ($_num_pairs | 0) == 0;
 if (!$4) {
  $5 = $3 + 4 | 0;
  $6 = $2 + 4 | 0;
  $7 = $1 + 4 | 0;
  $8 = $0 + 4 | 0;
  $i$016 = 0;
  do {
   $9 = $i$016 << 1;
   $10 = $_p + ($9 << 3) | 0;
   $11 = $_p + ($9 << 3) + 4 | 0;
   $12 = +HEAPF32[$11 >> 2];
   $14 = +HEAPF32[$10 >> 2];
   if ($12 < 0.0) {
    $17 = $14;
    $18 = $12;
   } else {
    HEAPF32[$1 >> 2] = $14;
    HEAPF32[$7 >> 2] = $12;
    HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
    _conjf($0, $$byval_copy1);
    $17 = +HEAPF32[$0 >> 2];
    $18 = +HEAPF32[$8 >> 2];
   }
   HEAPF32[$10 >> 2] = $17;
   HEAPF32[$11 >> 2] = $18;
   HEAPF32[$3 >> 2] = $17;
   HEAPF32[$5 >> 2] = $18;
   HEAP32[$$byval_copy1 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   _conjf($2, $$byval_copy1);
   $20 = HEAP32[$6 >> 2] | 0;
   $21 = $9 | 1;
   HEAP32[$_p + ($21 << 3) >> 2] = HEAP32[$2 >> 2];
   HEAP32[$_p + ($21 << 3) + 4 >> 2] = $20;
   $i$016 = $i$016 + 1 | 0;
  } while (($i$016 | 0) != ($_num_pairs | 0));
  if (!$4) {
   $j$09 = $_num_pairs + -1 | 0;
   $i$114 = 0;
   do {
    if ($j$09 >>> 0 > $i$114 >>> 0) {
     $j$0$in10 = $_num_pairs;
     $j$011 = $j$09;
     while (1) {
      $26 = $j$0$in10 << 1;
      $27 = $26 + -4 | 0;
      $28 = $_p + ($27 << 3) | 0;
      $29 = +HEAPF32[$28 >> 2];
      $30 = $j$011 << 1;
      $31 = $_p + ($30 << 3) | 0;
      $32 = +HEAPF32[$31 >> 2];
      if ($29 > $32) {
       $35 = $_p + ($27 << 3) + 4 | 0;
       $36 = HEAP32[$35 >> 2] | 0;
       $37 = $_p + ($30 << 3) + 4 | 0;
       $38 = HEAP32[$37 >> 2] | 0;
       HEAPF32[$28 >> 2] = $32;
       HEAP32[$35 >> 2] = $38;
       HEAPF32[$31 >> 2] = $29;
       HEAP32[$37 >> 2] = $36;
       $39 = $26 + -3 | 0;
       $40 = $_p + ($39 << 3) | 0;
       $41 = HEAP32[$40 >> 2] | 0;
       $42 = $_p + ($39 << 3) + 4 | 0;
       $43 = HEAP32[$42 >> 2] | 0;
       $44 = $30 | 1;
       $45 = $_p + ($44 << 3) | 0;
       $47 = $_p + ($44 << 3) + 4 | 0;
       $48 = HEAP32[$47 >> 2] | 0;
       HEAP32[$40 >> 2] = HEAP32[$45 >> 2];
       HEAP32[$42 >> 2] = $48;
       HEAP32[$45 >> 2] = $41;
       HEAP32[$47 >> 2] = $43;
      }
      $j$0 = $j$011 + -1 | 0;
      if ($j$0 >>> 0 > $i$114 >>> 0) {
       $j$0$in10$phi = $j$011;
       $j$011 = $j$0;
       $j$0$in10 = $j$0$in10$phi;
      } else break;
     }
    }
    $i$114 = $i$114 + 1 | 0;
   } while (($i$114 | 0) != ($_num_pairs | 0));
  }
 }
 $50 = $_num_pairs << 1;
 if ($50 >>> 0 >= $_n >>> 0) {
  STACKTOP = sp;
  return;
 }
 $j$14 = $_n + -1 | 0;
 $i$27 = $50;
 do {
  if ($j$14 >>> 0 > $i$27 >>> 0) {
   $j$1$in5 = $_n;
   $j$16 = $j$14;
   while (1) {
    $53 = $j$1$in5 + -2 | 0;
    $54 = $_p + ($53 << 3) | 0;
    $55 = +HEAPF32[$54 >> 2];
    $56 = $_p + ($j$16 << 3) | 0;
    $57 = +HEAPF32[$56 >> 2];
    if ($55 > $57) {
     $60 = $_p + ($53 << 3) + 4 | 0;
     $61 = HEAP32[$60 >> 2] | 0;
     $62 = $_p + ($j$16 << 3) + 4 | 0;
     $63 = HEAP32[$62 >> 2] | 0;
     HEAPF32[$54 >> 2] = $57;
     HEAP32[$60 >> 2] = $63;
     HEAPF32[$56 >> 2] = $55;
     HEAP32[$62 >> 2] = $61;
    }
    $j$1 = $j$16 + -1 | 0;
    if ($j$1 >>> 0 > $i$27 >>> 0) {
     $j$1$in5$phi = $j$16;
     $j$16 = $j$1;
     $j$1$in5 = $j$1$in5$phi;
    } else break;
   }
  }
  $i$27 = $i$27 + 1 | 0;
 } while (($i$27 | 0) != ($_n | 0));
 STACKTOP = sp;
 return;
}

function _gmskframesync_execute_rxheader($_q, $_x) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 var $$byval_copy3 = 0, $0 = 0, $1 = 0, $12 = 0.0, $14 = 0.0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0.0, $22 = 0.0, $27 = 0.0, $28 = 0.0, $3 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $4 = 0, $41 = 0.0, $42 = 0, $48 = 0, $5 = 0, $54 = 0, $58 = 0, $6 = 0, $62 = 0, $68 = 0, $78 = 0, $80 = 0, $81 = 0, $9 = 0, $93 = 0, $y = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy3 = sp + 48 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $y = sp;
 $4 = sp + 24 | 0;
 $5 = $_q + 128 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $9 = HEAP32[$_x + 4 >> 2] | 0;
 HEAP32[$4 >> 2] = HEAP32[$_x >> 2];
 HEAP32[$4 + 4 >> 2] = $9;
 HEAP32[$$byval_copy3 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
 _nco_crcf_mix_down($6, $$byval_copy3, $y);
 _nco_crcf_step(HEAP32[$5 >> 2] | 0);
 $12 = +HEAPF32[$y >> 2];
 $14 = +HEAPF32[$y + 4 >> 2];
 $15 = $_q + 64 | 0;
 $17 = $_q + 68 | 0;
 $18 = HEAP32[$17 >> 2] | 0;
 HEAP32[$1 >> 2] = HEAP32[$15 >> 2];
 HEAP32[$1 + 4 >> 2] = $18;
 HEAP32[$$byval_copy3 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 _conjf($0, $$byval_copy3);
 $20 = +HEAPF32[$0 >> 2];
 $22 = +HEAPF32[$0 + 4 >> 2];
 $27 = $12 * $20 - $14 * $22;
 $28 = $14 * $20 + $12 * $22;
 if (($27 != $27 | 0.0 != 0.0) & ($28 != $28 | 0.0 != 0.0)) {
  ___mulsc3($2, $20, $22, $12, $14);
  $35 = +HEAPF32[$2 >> 2];
  $36 = +HEAPF32[$2 + 4 >> 2];
 } else {
  $35 = $27;
  $36 = $28;
 }
 HEAPF32[$3 >> 2] = $35;
 HEAPF32[$3 + 4 >> 2] = $36;
 HEAP32[$$byval_copy3 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 $37 = +_cargf($$byval_copy3);
 $41 = $37 * +((HEAP32[$_q + 4 >> 2] | 0) >>> 0);
 $42 = $_q + 72 | 0;
 HEAPF32[$42 >> 2] = $41;
 HEAPF32[$15 >> 2] = $12;
 HEAPF32[$17 >> 2] = $14;
 HEAPF32[$0 >> 2] = 0.0;
 if (!(_gmskframesync_update_symsync($_q, $41, $0) | 0)) {
  STACKTOP = sp;
  return;
 }
 $48 = $_q + 224 | 0;
 HEAP8[(HEAP32[$_q + 156 >> 2] | 0) + (HEAP32[$48 >> 2] | 0) >> 0] = +HEAPF32[$0 >> 2] > 0.0 & 1;
 $54 = (HEAP32[$48 >> 2] | 0) + 1 | 0;
 HEAP32[$48 >> 2] = $54;
 if (($54 | 0) != (HEAP32[$_q + 152 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 _gmskframesync_decode_header($_q);
 $58 = $_q + 172 | 0;
 do if (!(HEAP32[$58 >> 2] | 0)) {
  $62 = HEAP32[$_q + 16 >> 2] | 0;
  if ($62 | 0) {
   $68 = $_q + 24 | 0;
   HEAPF32[$_q + 28 >> 2] = +_log10f(+HEAPF32[$_q + 120 >> 2]) * 20.0;
   HEAPF32[$68 >> 2] = 0.0;
   HEAP32[$_q + 36 >> 2] = 0;
   HEAP32[$_q + 40 >> 2] = 0;
   HEAP32[$_q + 44 >> 2] = 0;
   HEAP32[$_q + 48 >> 2] = 1;
   HEAP32[$_q + 52 >> 2] = 0;
   HEAP32[$_q + 56 >> 2] = 0;
   HEAP32[$_q + 60 >> 2] = 0;
   $78 = HEAP32[$_q + 164 >> 2] | 0;
   $80 = HEAP32[$_q + 20 >> 2] | 0;
   dest = $$byval_copy3;
   src = $68;
   stop = dest + 40 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   mftCall_iiiiiiii($62 | 0, $78 | 0, 0, 0, 0, 0, $$byval_copy3 | 0, $80 | 0) | 0;
   $81 = $_q + 216 | 0;
   HEAP32[$81 >> 2] = 0;
   HEAP32[$81 + 4 >> 2] = 0;
   HEAP32[$81 + 8 >> 2] = 0;
   HEAP32[$81 + 12 >> 2] = 0;
   _windowcf_clear(HEAP32[$_q + 124 >> 2] | 0);
   _detector_cccf_reset(HEAP32[$_q + 108 >> 2] | 0);
   _nco_crcf_reset(HEAP32[$5 >> 2] | 0);
   HEAPF32[$_q + 64 >> 2] = 0.0;
   HEAPF32[$17 >> 2] = 0.0;
   HEAPF32[$42 >> 2] = 0.0;
   _firpfb_rrrf_reset(HEAP32[$_q + 76 >> 2] | 0);
   _firpfb_rrrf_reset(HEAP32[$_q + 80 >> 2] | 0);
   HEAPF32[$_q + 88 >> 2] = 0.0;
   if (HEAP32[$58 >> 2] | 0) break;
  }
  $93 = $_q + 216 | 0;
  HEAP32[$93 >> 2] = 0;
  HEAP32[$93 + 4 >> 2] = 0;
  HEAP32[$93 + 8 >> 2] = 0;
  HEAP32[$93 + 12 >> 2] = 0;
  _windowcf_clear(HEAP32[$_q + 124 >> 2] | 0);
  _detector_cccf_reset(HEAP32[$_q + 108 >> 2] | 0);
  _nco_crcf_reset(HEAP32[$5 >> 2] | 0);
  HEAPF32[$_q + 64 >> 2] = 0.0;
  HEAPF32[$17 >> 2] = 0.0;
  HEAPF32[$42 >> 2] = 0.0;
  _firpfb_rrrf_reset(HEAP32[$_q + 76 >> 2] | 0);
  _firpfb_rrrf_reset(HEAP32[$_q + 80 >> 2] | 0);
  HEAPF32[$_q + 88 >> 2] = 0.0;
  STACKTOP = sp;
  return;
 } while (0);
 HEAP32[$_q + 216 >> 2] = 3;
 STACKTOP = sp;
 return;
}

function _modem_demodulate_sqam128($_q, $_x, $_sym_out) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 $_sym_out = $_sym_out | 0;
 var $$byval_copy4 = 0, $0 = 0, $1 = 0, $14 = 0.0, $17 = 0, $2 = 0, $3 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0.0, $56 = 0.0, $6 = 0, $61 = 0, $68 = 0.0, $7 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0.0, $dmin$03 = 0.0, $dmin$1 = 0.0, $i$04 = 0, $x_prime$sroa$0$0 = 0.0, $x_prime$sroa$10$0 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy4 = sp + 72 | 0;
 $0 = sp + 64 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 56 | 0;
 $5 = sp + 48 | 0;
 $6 = sp + 32 | 0;
 $7 = sp + 8 | 0;
 $8 = sp;
 $9 = +HEAPF32[$_x >> 2];
 $14 = +HEAPF32[$_x + 4 >> 2];
 $17 = ($9 < 0.0 & 1) << 1 | $14 < 0.0;
 switch ($17 | 0) {
 case 0:
  {
   $x_prime$sroa$0$0 = $9;
   $x_prime$sroa$10$0 = $14;
   break;
  }
 case 1:
  {
   HEAPF32[$5 >> 2] = $9;
   HEAPF32[$5 + 4 >> 2] = $14;
   HEAP32[$$byval_copy4 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
   _conjf($4, $$byval_copy4);
   $x_prime$sroa$0$0 = +HEAPF32[$4 >> 2];
   $x_prime$sroa$10$0 = +HEAPF32[$4 + 4 >> 2];
   break;
  }
 case 2:
  {
   HEAPF32[$7 >> 2] = $9;
   HEAPF32[$7 + 4 >> 2] = $14;
   HEAP32[$$byval_copy4 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
   _conjf($6, $$byval_copy4);
   $x_prime$sroa$0$0 = -+HEAPF32[$6 >> 2];
   $x_prime$sroa$10$0 = -+HEAPF32[$6 + 4 >> 2];
   break;
  }
 case 3:
  {
   $x_prime$sroa$0$0 = -$9;
   $x_prime$sroa$10$0 = -$14;
   break;
  }
 default:
  {}
 }
 if (!($x_prime$sroa$0$0 >= 0.0)) ___assert_fail(gb + 32068 | 0, gb + 32169 | 0, 99, gb + 32199 | 0);
 if (!($x_prime$sroa$10$0 >= 0.0)) ___assert_fail(gb + 32145 | 0, gb + 32169 | 0, 100, gb + 32199 | 0);
 $32 = $_q + 100 | 0;
 $33 = $8 + 4 | 0;
 $dmin$03 = 0.0;
 $i$04 = 0;
 while (1) {
  $34 = HEAP32[$32 >> 2] | 0;
  $40 = $x_prime$sroa$10$0 - +HEAPF32[$34 + ($i$04 << 3) + 4 >> 2];
  HEAPF32[$8 >> 2] = $x_prime$sroa$0$0 - +HEAPF32[$34 + ($i$04 << 3) >> 2];
  HEAPF32[$33 >> 2] = $40;
  HEAP32[$$byval_copy4 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
  $41 = +_cabsf($$byval_copy4);
  if (($i$04 | 0) == 0 | $41 < $dmin$03) {
   HEAP32[$_sym_out >> 2] = $i$04;
   $dmin$1 = $41;
  } else $dmin$1 = $dmin$03;
  $i$04 = $i$04 + 1 | 0;
  if (($i$04 | 0) == 32) break; else $dmin$03 = $dmin$1;
 }
 $46 = HEAP32[$_sym_out >> 2] | 0;
 $47 = $46 | $17 << 5;
 HEAP32[$_sym_out >> 2] = $47;
 $48 = $_q + 92 | 0;
 $51 = $46 & 31;
 $52 = HEAP32[$32 >> 2] | 0;
 $54 = +HEAPF32[$52 + ($51 << 3) >> 2];
 $56 = +HEAPF32[$52 + ($51 << 3) + 4 >> 2];
 switch ($47 >>> 5 & 3 | 0) {
 case 0:
  {
   HEAPF32[$48 >> 2] = $54;
   HEAPF32[$_q + 96 >> 2] = $56;
   $73 = $_q + 88 | 0;
   $74 = $_q + 84 | 0;
   HEAPF32[$74 >> 2] = $9;
   HEAPF32[$73 >> 2] = $14;
   STACKTOP = sp;
   return;
  }
 case 1:
  {
   HEAPF32[$1 >> 2] = $54;
   HEAPF32[$1 + 4 >> 2] = $56;
   HEAP32[$$byval_copy4 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   _conjf($0, $$byval_copy4);
   $61 = HEAP32[$0 + 4 >> 2] | 0;
   HEAP32[$48 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$_q + 96 >> 2] = $61;
   $73 = $_q + 88 | 0;
   $74 = $_q + 84 | 0;
   HEAPF32[$74 >> 2] = $9;
   HEAPF32[$73 >> 2] = $14;
   STACKTOP = sp;
   return;
  }
 case 2:
  {
   HEAPF32[$3 >> 2] = $54;
   HEAPF32[$3 + 4 >> 2] = $56;
   HEAP32[$$byval_copy4 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   _conjf($2, $$byval_copy4);
   $68 = -+HEAPF32[$2 + 4 >> 2];
   HEAPF32[$48 >> 2] = -+HEAPF32[$2 >> 2];
   HEAPF32[$_q + 96 >> 2] = $68;
   $73 = $_q + 88 | 0;
   $74 = $_q + 84 | 0;
   HEAPF32[$74 >> 2] = $9;
   HEAPF32[$73 >> 2] = $14;
   STACKTOP = sp;
   return;
  }
 case 3:
  {
   HEAPF32[$48 >> 2] = -$54;
   HEAPF32[$_q + 96 >> 2] = -$56;
   $73 = $_q + 88 | 0;
   $74 = $_q + 84 | 0;
   HEAPF32[$74 >> 2] = $9;
   HEAPF32[$73 >> 2] = $14;
   STACKTOP = sp;
   return;
  }
 default:
  {}
 }
}

function _fft_create_plan_dft($_nfft, $_x, $_y, $_dir, $_flags) {
 $_nfft = $_nfft | 0;
 $_x = $_x | 0;
 $_y = $_y | 0;
 $_dir = $_dir | 0;
 $_flags = $_flags | 0;
 var $$byval_copy1 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $12 = 0, $13 = 0, $2 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $34 = 0.0, $35 = 0.0, $38 = 0, $39 = 0, $40 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $47 = 0.0, $48 = 0, $57 = 0.0, $63 = 0.0, $65 = 0, $66 = 0, $7 = 0, $73 = 0.0, $8 = 0, $81 = 0, $82 = 0, $i$02 = 0, $k$01 = 0, $k$01$us = 0, $or$cond = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy1 = sp + 24 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp;
 $3 = _malloc(72) | 0;
 HEAP32[$3 >> 2] = $_nfft;
 HEAP32[$3 + 4 >> 2] = $_x;
 HEAP32[$3 + 8 >> 2] = $_y;
 HEAP32[$3 + 16 >> 2] = $_flags;
 $7 = ($_dir | 0) == 1;
 $8 = $7 ? 1 : -1;
 HEAP32[$3 + 20 >> 2] = $8;
 HEAP32[$3 + 12 >> 2] = $8;
 HEAP32[$3 + 24 >> 2] = 5;
 $12 = $3 + 40 | 0;
 HEAP32[$12 >> 2] = 0;
 $13 = $3 + 44 | 0;
 HEAP32[$13 >> 2] = 0;
 switch ($_nfft | 0) {
 case 2:
  {
   HEAP32[$3 + 28 >> 2] = fb + 12;
   STACKTOP = sp;
   return $3 | 0;
  }
 case 3:
  {
   HEAP32[$3 + 28 >> 2] = fb + 13;
   STACKTOP = sp;
   return $3 | 0;
  }
 case 4:
  {
   HEAP32[$3 + 28 >> 2] = fb + 14;
   STACKTOP = sp;
   return $3 | 0;
  }
 case 5:
  {
   HEAP32[$3 + 28 >> 2] = fb + 15;
   STACKTOP = sp;
   return $3 | 0;
  }
 case 6:
  {
   HEAP32[$3 + 28 >> 2] = fb + 16;
   STACKTOP = sp;
   return $3 | 0;
  }
 case 7:
  {
   HEAP32[$3 + 28 >> 2] = fb + 17;
   STACKTOP = sp;
   return $3 | 0;
  }
 case 8:
  {
   HEAP32[$3 + 28 >> 2] = fb + 18;
   STACKTOP = sp;
   return $3 | 0;
  }
 default:
  {
   $22 = $3 + 28 | 0;
   if (($_nfft | 0) == 16) {
    HEAP32[$22 >> 2] = fb + 19;
    STACKTOP = sp;
    return $3 | 0;
   }
   HEAP32[$22 >> 2] = fb + 20;
   $24 = _malloc($_nfft << 3) | 0;
   HEAP32[$12 >> 2] = $24;
   $26 = _malloc($_nfft << 2) | 0;
   HEAP32[$13 >> 2] = $26;
   $27 = $7 ? -1.0 : 1.0;
   if (!$_nfft) {
    STACKTOP = sp;
    return $3 | 0;
   }
   $29 = $_nfft >>> 0 > 1;
   $30 = $27 * 0.0;
   $34 = $30 * 2.0 - $30;
   $35 = $27 * 2.0 + $30 * 0.0;
   $or$cond = ($34 != $34 | 0.0 != 0.0) & ($35 != $35 | 0.0 != 0.0);
   $38 = $0 + 4 | 0;
   $39 = $2 + 4 | 0;
   $40 = $1 + 4 | 0;
   $43 = $34 * 3.141592653589793;
   $44 = $35 * 3.141592653589793;
   $i$02 = 0;
   do {
    if ($29) {
     $45 = HEAP32[$3 >> 2] | 0;
     $47 = +($45 >>> 0);
     $48 = HEAP32[$12 >> 2] | 0;
     if ($or$cond) {
      $k$01$us = 1;
      do {
       ___mulsc3($0, $30, $27, 2.0, 0.0);
       $57 = +((Math_imul($k$01$us, $i$02) | 0) >>> 0);
       $63 = $57 * (+HEAPF32[$38 >> 2] * 3.141592653589793) / $47;
       HEAPF32[$2 >> 2] = $57 * (+HEAPF32[$0 >> 2] * 3.141592653589793) / $47;
       HEAPF32[$39 >> 2] = $63;
       HEAP32[$$byval_copy1 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
       _cexpf($1, $$byval_copy1);
       $65 = HEAP32[$40 >> 2] | 0;
       $66 = $k$01$us + -1 | 0;
       HEAP32[$48 + ($66 << 3) >> 2] = HEAP32[$1 >> 2];
       HEAP32[$48 + ($66 << 3) + 4 >> 2] = $65;
       $k$01$us = $k$01$us + 1 | 0;
      } while ($k$01$us >>> 0 < $45 >>> 0);
      $$lcssa = $45;
     } else {
      $k$01 = 1;
      do {
       $73 = +((Math_imul($k$01, $i$02) | 0) >>> 0);
       HEAPF32[$2 >> 2] = $73 * $43 / $47;
       HEAPF32[$39 >> 2] = $73 * $44 / $47;
       HEAP32[$$byval_copy1 >> 2] = HEAP32[$2 >> 2];
       HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
       _cexpf($1, $$byval_copy1);
       $81 = HEAP32[$40 >> 2] | 0;
       $82 = $k$01 + -1 | 0;
       HEAP32[$48 + ($82 << 3) >> 2] = HEAP32[$1 >> 2];
       HEAP32[$48 + ($82 << 3) + 4 >> 2] = $81;
       $k$01 = $k$01 + 1 | 0;
      } while ($k$01 >>> 0 < $45 >>> 0);
      $$lcssa = $45;
     }
    } else $$lcssa = $_nfft;
    HEAP32[$26 + ($i$02 << 2) >> 2] = _dotprod_cccf_create($24, $$lcssa + -1 | 0) | 0;
    $i$02 = $i$02 + 1 | 0;
   } while ($i$02 >>> 0 < $_nfft >>> 0);
   STACKTOP = sp;
   return $3 | 0;
  }
 }
 return 0;
}

function _modem_demodsoft_gentab($_q, $_p) {
 $_q = $_q | 0;
 $_p = $_p | 0;
 var $$byval_copy = 0, $$symbol_valid$0$us$us = 0, $$symbol_valid$0$us$us$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $24 = 0, $27 = 0, $31 = 0, $33 = 0, $35 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $58 = 0.0, $59 = 0.0, $9 = 0, $dmin$09$us$us = 0.0, $dmin$1$us$us = 0.0, $i$02353 = 0, $i$121$us = 0, $i$215 = 0, $j$08$us$us = 0, $k$018$us = 0, $k$112$us = 0, $l$07$us$us = 0, $symbol_valid$06$us$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 8 | 0;
 $0 = sp;
 $1 = $_q + 8 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (($2 + -1 | 0) >>> 0 < $_p >>> 0) {
  _fwrite(gb + 31497 | 0, 63, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 HEAP32[$_q + 248 >> 2] = $_p;
 $9 = $_q + 244 | 0;
 HEAP32[$9 >> 2] = _malloc(Math_imul($2, $_p) | 0) | 0;
 $10 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($2 << 3) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $11 = ($2 | 0) == 0;
 if ($11) {
  STACKTOP = sp;
  return;
 }
 $12 = $_q + 80 | 0;
 $13 = $_q + 236 | 0;
 $14 = $_q + 76 | 0;
 if (!$2) {
  $24 = HEAP32[gb + 9336 >> 2] | 0;
  _fwrite(gb + 31561 | 0, 65, 1, $24) | 0;
  _exit(1);
 } else {
  $33 = $10;
  $i$02353 = 0;
 }
 while (1) {
  if (!(HEAP32[$12 >> 2] | 0)) mftCall_viii(HEAP32[$13 >> 2] | 0, $_q | 0, $i$02353 | 0, $33 | 0); else {
   $27 = HEAP32[$14 >> 2] | 0;
   $31 = HEAP32[$27 + ($i$02353 << 3) + 4 >> 2] | 0;
   HEAP32[$33 >> 2] = HEAP32[$27 + ($i$02353 << 3) >> 2];
   HEAP32[$10 + ($i$02353 << 3) + 4 >> 2] = $31;
  }
  $35 = $i$02353 + 1 | 0;
  if ($35 >>> 0 >= $2 >>> 0) break;
  if ((HEAP32[$1 >> 2] | 0) >>> 0 > $35 >>> 0) {
   $33 = $10 + ($35 << 3) | 0;
   $i$02353 = $35;
  } else {
   label = 10;
   break;
  }
 }
 if ((label | 0) == 10) {
  $24 = HEAP32[gb + 9336 >> 2] | 0;
  _fwrite(gb + 31561 | 0, 65, 1, $24) | 0;
  _exit(1);
 }
 if ($11) {
  STACKTOP = sp;
  return;
 }
 $17 = $2 & 255;
 if ($_p | 0) {
  $i$121$us = 0;
  do {
   $19 = Math_imul($i$121$us, $_p) | 0;
   $k$018$us = 0;
   do {
    HEAP8[(HEAP32[$9 >> 2] | 0) + ($k$018$us + $19) >> 0] = $17;
    $k$018$us = $k$018$us + 1 | 0;
   } while (($k$018$us | 0) != ($_p | 0));
   $i$121$us = $i$121$us + 1 | 0;
  } while (($i$121$us | 0) != ($2 | 0));
  if ($11) {
   STACKTOP = sp;
   return;
  }
 }
 $39 = ($_p | 0) == 0;
 $40 = $0 + 4 | 0;
 $i$215 = 0;
 do {
  if (!$39) {
   $41 = $10 + ($i$215 << 3) | 0;
   $42 = $10 + ($i$215 << 3) + 4 | 0;
   $43 = Math_imul($i$215, $_p) | 0;
   $k$112$us = 0;
   do {
    $44 = $k$112$us + $43 | 0;
    $dmin$09$us$us = 1.0e9;
    $j$08$us$us = 0;
    while (1) {
     $46 = HEAP32[$9 >> 2] | 0;
     $l$07$us$us = 0;
     $symbol_valid$06$us$us = ($i$215 | 0) != ($j$08$us$us | 0) & 1;
     while (1) {
      $$symbol_valid$0$us$us = (HEAPU8[$46 + ($l$07$us$us + $43) >> 0] | 0 | 0) == ($j$08$us$us | 0) ? 0 : $symbol_valid$06$us$us;
      $l$07$us$us = $l$07$us$us + 1 | 0;
      if (($l$07$us$us | 0) == ($_p | 0)) {
       $$symbol_valid$0$us$us$lcssa = $$symbol_valid$0$us$us;
       break;
      } else $symbol_valid$06$us$us = $$symbol_valid$0$us$us;
     }
     $58 = +HEAPF32[$42 >> 2] - +HEAPF32[$10 + ($j$08$us$us << 3) + 4 >> 2];
     HEAPF32[$0 >> 2] = +HEAPF32[$41 >> 2] - +HEAPF32[$10 + ($j$08$us$us << 3) >> 2];
     HEAPF32[$40 >> 2] = $58;
     HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
     HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$0 + 4 >> 2];
     $59 = +_cabsf($$byval_copy);
     if (($$symbol_valid$0$us$us$lcssa | 0) != 0 & $59 < $dmin$09$us$us) {
      HEAP8[(HEAP32[$9 >> 2] | 0) + $44 >> 0] = $j$08$us$us;
      $dmin$1$us$us = $59;
     } else $dmin$1$us$us = $dmin$09$us$us;
     $j$08$us$us = $j$08$us$us + 1 | 0;
     if (($j$08$us$us | 0) == ($2 | 0)) break; else $dmin$09$us$us = $dmin$1$us$us;
    }
    $k$112$us = $k$112$us + 1 | 0;
   } while (($k$112$us | 0) != ($_p | 0));
  }
  $i$215 = $i$215 + 1 | 0;
 } while (($i$215 | 0) != ($2 | 0));
 STACKTOP = sp;
 return;
}

function _gmskframesync_execute_rxpayload($_q, $_x) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 var $$byval_copy3 = 0, $0 = 0, $1 = 0, $101 = 0, $103 = 0, $104 = 0, $12 = 0.0, $14 = 0.0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0.0, $22 = 0.0, $27 = 0.0, $28 = 0.0, $3 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $4 = 0, $41 = 0.0, $42 = 0, $47 = 0, $5 = 0, $53 = 0, $54 = 0, $57 = 0, $6 = 0, $61 = 0, $69 = 0, $71 = 0, $74 = 0, $80 = 0, $9 = 0, $96 = 0, $98 = 0, $99 = 0, $y = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy3 = sp + 48 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $y = sp;
 $4 = sp + 24 | 0;
 $5 = $_q + 128 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $9 = HEAP32[$_x + 4 >> 2] | 0;
 HEAP32[$4 >> 2] = HEAP32[$_x >> 2];
 HEAP32[$4 + 4 >> 2] = $9;
 HEAP32[$$byval_copy3 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
 _nco_crcf_mix_down($6, $$byval_copy3, $y);
 _nco_crcf_step(HEAP32[$5 >> 2] | 0);
 $12 = +HEAPF32[$y >> 2];
 $14 = +HEAPF32[$y + 4 >> 2];
 $15 = $_q + 64 | 0;
 $17 = $_q + 68 | 0;
 $18 = HEAP32[$17 >> 2] | 0;
 HEAP32[$1 >> 2] = HEAP32[$15 >> 2];
 HEAP32[$1 + 4 >> 2] = $18;
 HEAP32[$$byval_copy3 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 _conjf($0, $$byval_copy3);
 $20 = +HEAPF32[$0 >> 2];
 $22 = +HEAPF32[$0 + 4 >> 2];
 $27 = $12 * $20 - $14 * $22;
 $28 = $14 * $20 + $12 * $22;
 if (($27 != $27 | 0.0 != 0.0) & ($28 != $28 | 0.0 != 0.0)) {
  ___mulsc3($2, $20, $22, $12, $14);
  $35 = +HEAPF32[$2 >> 2];
  $36 = +HEAPF32[$2 + 4 >> 2];
 } else {
  $35 = $27;
  $36 = $28;
 }
 HEAPF32[$3 >> 2] = $35;
 HEAPF32[$3 + 4 >> 2] = $36;
 HEAP32[$$byval_copy3 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 $37 = +_cargf($$byval_copy3);
 $41 = $37 * +((HEAP32[$_q + 4 >> 2] | 0) >>> 0);
 $42 = $_q + 72 | 0;
 HEAPF32[$42 >> 2] = $41;
 HEAPF32[$15 >> 2] = $12;
 HEAPF32[$17 >> 2] = $14;
 HEAPF32[$0 >> 2] = 0.0;
 if (!(_gmskframesync_update_symsync($_q, $41, $0) | 0)) {
  STACKTOP = sp;
  return;
 }
 $47 = $_q + 176 | 0;
 $53 = ((HEAPU8[$47 >> 0] | 0) << 1 | +HEAPF32[$0 >> 2] > 0.0) & 255;
 HEAP8[$47 >> 0] = $53;
 $54 = $_q + 228 | 0;
 $57 = $_q + 200 | 0;
 HEAP8[(HEAP32[$57 >> 2] | 0) + ((HEAP32[$54 >> 2] | 0) >>> 3) >> 0] = $53;
 $61 = (HEAP32[$54 >> 2] | 0) + 1 | 0;
 HEAP32[$54 >> 2] = $61;
 if (($61 | 0) != (HEAP32[$_q + 192 >> 2] << 3 | 0)) {
  STACKTOP = sp;
  return;
 }
 $69 = $_q + 204 | 0;
 $71 = _packetizer_decode(HEAP32[$_q + 208 >> 2] | 0, HEAP32[$57 >> 2] | 0, HEAP32[$69 >> 2] | 0) | 0;
 HEAP32[$_q + 212 >> 2] = $71;
 $74 = HEAP32[$_q + 16 >> 2] | 0;
 if ($74 | 0) {
  $80 = $_q + 24 | 0;
  HEAPF32[$_q + 28 >> 2] = +_log10f(+HEAPF32[$_q + 120 >> 2]) * 20.0;
  HEAPF32[$80 >> 2] = 0.0;
  HEAP32[$_q + 36 >> 2] = 0;
  HEAP32[$_q + 40 >> 2] = 0;
  HEAP32[$_q + 44 >> 2] = 0;
  HEAP32[$_q + 48 >> 2] = 1;
  HEAP32[$_q + 52 >> 2] = HEAP32[$_q + 180 >> 2];
  HEAP32[$_q + 56 >> 2] = HEAP32[$_q + 184 >> 2];
  HEAP32[$_q + 60 >> 2] = HEAP32[$_q + 188 >> 2];
  $96 = HEAP32[$_q + 164 >> 2] | 0;
  $98 = HEAP32[$_q + 172 >> 2] | 0;
  $99 = HEAP32[$69 >> 2] | 0;
  $101 = HEAP32[$_q + 196 >> 2] | 0;
  $103 = HEAP32[$_q + 20 >> 2] | 0;
  dest = $$byval_copy3;
  src = $80;
  stop = dest + 40 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  mftCall_iiiiiiii($74 | 0, $96 | 0, $98 | 0, $99 | 0, $101 | 0, $71 | 0, $$byval_copy3 | 0, $103 | 0) | 0;
 }
 $104 = $_q + 216 | 0;
 HEAP32[$104 >> 2] = 0;
 HEAP32[$104 + 4 >> 2] = 0;
 HEAP32[$104 + 8 >> 2] = 0;
 HEAP32[$104 + 12 >> 2] = 0;
 _windowcf_clear(HEAP32[$_q + 124 >> 2] | 0);
 _detector_cccf_reset(HEAP32[$_q + 108 >> 2] | 0);
 _nco_crcf_reset(HEAP32[$5 >> 2] | 0);
 HEAPF32[$_q + 64 >> 2] = 0.0;
 HEAPF32[$17 >> 2] = 0.0;
 HEAPF32[$42 >> 2] = 0.0;
 _firpfb_rrrf_reset(HEAP32[$_q + 76 >> 2] | 0);
 _firpfb_rrrf_reset(HEAP32[$_q + 80 >> 2] | 0);
 HEAPF32[$_q + 88 >> 2] = 0.0;
 STACKTOP = sp;
 return;
}

function _ofdmflexframesync_rxpayload($_q, $_X) {
 $_q = $_q | 0;
 $_X = $_X | 0;
 var $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $37 = 0, $4 = 0, $43 = 0, $46 = 0, $47 = 0, $5 = 0, $50 = 0, $55 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $81 = 0, $83 = 0, $85 = 0, $86 = 0, $88 = 0, $89 = 0, $9 = 0, $91 = 0, $92 = 0, $97 = 0, $98 = 0, $i$06 = 0, $sym = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy1 = sp + 16 | 0;
 $sym = sp;
 $0 = sp + 8 | 0;
 $1 = HEAP32[$_q >> 2] | 0;
 if (!$1) {
  STACKTOP = sp;
  return;
 }
 $3 = $_q + 12 | 0;
 $4 = $_q + 104 | 0;
 $5 = $0 + 4 | 0;
 $6 = $_q + 200 | 0;
 $7 = $_q + 128 | 0;
 $8 = $_q + 108 | 0;
 $9 = $_q + 116 | 0;
 $10 = $_q + 204 | 0;
 $11 = $_q + 80 | 0;
 $12 = $_q + 120 | 0;
 $98 = $1;
 $i$06 = 0;
 while (1) {
  if ((HEAP8[(HEAP32[$3 >> 2] | 0) + $i$06 >> 0] | 0) == 2) {
   $17 = HEAP32[$4 >> 2] | 0;
   $18 = $_X + ($i$06 << 3) | 0;
   $20 = $_X + ($i$06 << 3) + 4 | 0;
   $21 = HEAP32[$20 >> 2] | 0;
   HEAP32[$0 >> 2] = HEAP32[$18 >> 2];
   HEAP32[$5 >> 2] = $21;
   HEAP32[$$byval_copy1 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
   _modem_demodulate($17, $$byval_copy1, $sym);
   $23 = HEAP32[$20 >> 2] | 0;
   $24 = HEAP32[$6 >> 2] | 0;
   $25 = HEAP32[$7 >> 2] | 0;
   HEAP32[$25 + ($24 << 3) >> 2] = HEAP32[$18 >> 2];
   HEAP32[$25 + ($24 << 3) + 4 >> 2] = $23;
   _liquid_pack_array(HEAP32[$8 >> 2] | 0, HEAP32[$9 >> 2] | 0, HEAP32[$10 >> 2] | 0, HEAP32[$11 >> 2] | 0, HEAP32[$sym >> 2] | 0);
   HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + (HEAP32[$11 >> 2] | 0);
   $37 = (HEAP32[$6 >> 2] | 0) + 1 | 0;
   HEAP32[$6 >> 2] = $37;
   if (($37 | 0) == (HEAP32[$12 >> 2] | 0)) break;
   $97 = HEAP32[$_q >> 2] | 0;
  } else $97 = $98;
  $i$06 = $i$06 + 1 | 0;
  if ($i$06 >>> 0 >= $97 >>> 0) {
   label = 10;
   break;
  } else $98 = $97;
 }
 if ((label | 0) == 10) {
  STACKTOP = sp;
  return;
 }
 $43 = $_q + 112 | 0;
 $46 = $_q + 124 | 0;
 HEAP32[$46 >> 2] = _packetizer_decode(HEAP32[$_q + 100 >> 2] | 0, HEAP32[$8 >> 2] | 0, HEAP32[$43 >> 2] | 0) | 0;
 $47 = $_q + 132 | 0;
 if (!(HEAP32[$47 >> 2] | 0)) {
  $50 = $_q + 188 | 0;
  HEAP32[$50 >> 2] = 0;
  HEAP32[$50 + 4 >> 2] = 0;
  HEAP32[$50 + 8 >> 2] = 0;
  HEAP32[$50 + 12 >> 2] = 0;
  HEAP32[$50 + 16 >> 2] = 0;
  HEAPF32[$_q + 180 >> 2] = 9.999999960041972e-13;
  _framesyncstats_init_default($_q + 140 | 0);
  _ofdmframesync_reset(HEAP32[$_q + 184 >> 2] | 0);
  STACKTOP = sp;
  return;
 } else {
  $55 = $_q + 184 | 0;
  $58 = $_q + 140 | 0;
  HEAPF32[$_q + 144 >> 2] = +_ofdmframesync_get_rssi(HEAP32[$55 >> 2] | 0);
  HEAPF32[$_q + 148 >> 2] = +_ofdmframesync_get_cfo(HEAP32[$55 >> 2] | 0);
  HEAP32[$_q + 152 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$_q + 156 >> 2] = HEAP32[$12 >> 2];
  HEAP32[$_q + 160 >> 2] = HEAP32[$_q + 76 >> 2];
  HEAP32[$_q + 164 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$_q + 168 >> 2] = HEAP32[$_q + 88 >> 2];
  HEAP32[$_q + 172 >> 2] = HEAP32[$_q + 92 >> 2];
  HEAP32[$_q + 176 >> 2] = HEAP32[$_q + 96 >> 2];
  $81 = HEAP32[$47 >> 2] | 0;
  $83 = HEAP32[$_q + 44 >> 2] | 0;
  $85 = HEAP32[$_q + 72 >> 2] | 0;
  $86 = HEAP32[$43 >> 2] | 0;
  $88 = HEAP32[$_q + 84 >> 2] | 0;
  $89 = HEAP32[$46 >> 2] | 0;
  $91 = HEAP32[$_q + 136 >> 2] | 0;
  dest = $$byval_copy1;
  src = $58;
  stop = dest + 40 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  mftCall_iiiiiiii($81 | 0, $83 | 0, $85 | 0, $86 | 0, $88 | 0, $89 | 0, $$byval_copy1 | 0, $91 | 0) | 0;
  $92 = $_q + 188 | 0;
  HEAP32[$92 >> 2] = 0;
  HEAP32[$92 + 4 >> 2] = 0;
  HEAP32[$92 + 8 >> 2] = 0;
  HEAP32[$92 + 12 >> 2] = 0;
  HEAP32[$92 + 16 >> 2] = 0;
  HEAPF32[$_q + 180 >> 2] = 9.999999960041972e-13;
  _framesyncstats_init_default($58);
  _ofdmframesync_reset(HEAP32[$55 >> 2] | 0);
  STACKTOP = sp;
  return;
 }
}

function _gmskframesync_update_symsync($_q, $_x, $_y) {
 $_q = $_q | 0;
 $_x = +$_x;
 $_y = $_y | 0;
 var $$byval_copy = 0, $$lcssa = 0, $$lcssa34 = 0.0, $$lcssa35 = 0, $$lcssa36 = 0, $$lcssa37 = 0.0, $$lcssa38 = 0, $$promoted = 0.0, $0 = 0, $1 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $27 = 0, $29 = 0.0, $36 = 0.0, $37 = 0, $39 = 0.0, $4 = 0, $41 = 0, $44 = 0, $45 = 0.0, $46 = 0, $48 = 0, $49 = 0.0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0.0, $60 = 0.0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $70 = 0.0, $dmf_out = 0, $mf_out = 0, $sample_available$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 24 | 0;
 $mf_out = sp + 20 | 0;
 $dmf_out = sp + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp;
 $2 = $_q + 76 | 0;
 _firpfb_rrrf_push(HEAP32[$2 >> 2] | 0, $_x);
 $4 = $_q + 80 | 0;
 _firpfb_rrrf_push(HEAP32[$4 >> 2] | 0, $_x);
 HEAPF32[$mf_out >> 2] = 0.0;
 HEAPF32[$dmf_out >> 2] = 0.0;
 if (HEAP32[$_q + 232 >> 2] | 0) {
  _windowf_push(HEAP32[$_q + 244 >> 2] | 0, +HEAPF32[$_q + 72 >> 2]);
  _firpfb_rrrf_execute(HEAP32[$2 >> 2] | 0, HEAP32[$_q + 96 >> 2] | 0, $mf_out);
  _windowf_push(HEAP32[$_q + 248 >> 2] | 0, +HEAPF32[$mf_out >> 2]);
 }
 $19 = $_q + 100 | 0;
 $20 = HEAP32[$19 >> 2] | 0;
 if (($20 | 0) >= 1) {
  $65 = $20;
  $sample_available$0 = 0;
  $64 = $65 + -1 | 0;
  HEAP32[$19 >> 2] = $64;
  $66 = +HEAPF32[$mf_out >> 2];
  $67 = $_q + 4 | 0;
  $68 = HEAP32[$67 >> 2] | 0;
  $69 = +($68 >>> 0);
  $70 = $66 / $69;
  HEAPF32[$_y >> 2] = $70;
  STACKTOP = sp;
  return $sample_available$0 | 0;
 }
 HEAP32[$19 >> 2] = 2;
 $23 = $_q + 96 | 0;
 _firpfb_rrrf_execute(HEAP32[$2 >> 2] | 0, HEAP32[$23 >> 2] | 0, $mf_out);
 _firpfb_rrrf_execute(HEAP32[$4 >> 2] | 0, HEAP32[$23 >> 2] | 0, $dmf_out);
 $27 = $_q + 88 | 0;
 $29 = +HEAPF32[$27 >> 2] * .9900000095367432;
 HEAP32[$1 >> 2] = HEAP32[$mf_out >> 2];
 HEAPF32[$1 + 4 >> 2] = 0.0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 _conjf($0, $$byval_copy);
 $36 = $29 + +HEAPF32[$0 >> 2] * +HEAPF32[$dmf_out >> 2] * .05000000074505806;
 HEAPF32[$27 >> 2] = $36;
 $37 = $_q + 92 | 0;
 $39 = +HEAPF32[$37 >> 2] + $36;
 HEAPF32[$37 >> 2] = $39;
 $41 = ~~+_roundf(+$39);
 HEAP32[$23 >> 2] = $41;
 $44 = HEAP32[$_q + 84 >> 2] | 0;
 if (($41 | 0) < 0) {
  $45 = +($44 >>> 0);
  $51 = $41;
  $53 = $39;
  $55 = HEAP32[$19 >> 2] | 0;
  while (1) {
   $50 = $44 + $51 | 0;
   $52 = $45 + $53;
   $54 = $55 + -1 | 0;
   if (($50 | 0) < 0) {
    $51 = $50;
    $53 = $52;
    $55 = $54;
   } else {
    $$lcssa36 = $50;
    $$lcssa37 = $52;
    $$lcssa38 = $54;
    break;
   }
  }
  HEAP32[$23 >> 2] = $$lcssa36;
  HEAPF32[$37 >> 2] = $$lcssa37;
  HEAP32[$19 >> 2] = $$lcssa38;
  $$promoted = $$lcssa37;
  $48 = $$lcssa36;
 } else {
  $$promoted = $39;
  $48 = $41;
 }
 $46 = $44 + -1 | 0;
 if ($48 >>> 0 <= $46 >>> 0) {
  $65 = HEAP32[$19 >> 2] | 0;
  $sample_available$0 = 1;
  $64 = $65 + -1 | 0;
  HEAP32[$19 >> 2] = $64;
  $66 = +HEAPF32[$mf_out >> 2];
  $67 = $_q + 4 | 0;
  $68 = HEAP32[$67 >> 2] | 0;
  $69 = +($68 >>> 0);
  $70 = $66 / $69;
  HEAPF32[$_y >> 2] = $70;
  STACKTOP = sp;
  return $sample_available$0 | 0;
 }
 $49 = +($44 >>> 0);
 $58 = $48;
 $60 = $$promoted;
 $62 = HEAP32[$19 >> 2] | 0;
 while (1) {
  $57 = $58 - $44 | 0;
  $59 = $60 - $49;
  $61 = $62 + 1 | 0;
  if ($57 >>> 0 > $46 >>> 0) {
   $58 = $57;
   $60 = $59;
   $62 = $61;
  } else {
   $$lcssa = $57;
   $$lcssa34 = $59;
   $$lcssa35 = $61;
   break;
  }
 }
 HEAP32[$23 >> 2] = $$lcssa;
 HEAPF32[$37 >> 2] = $$lcssa34;
 HEAP32[$19 >> 2] = $$lcssa35;
 $65 = $$lcssa35;
 $sample_available$0 = 1;
 $64 = $65 + -1 | 0;
 HEAP32[$19 >> 2] = $64;
 $66 = +HEAPF32[$mf_out >> 2];
 $67 = $_q + 4 | 0;
 $68 = HEAP32[$67 >> 2] | 0;
 $69 = +($68 >>> 0);
 $70 = $66 / $69;
 HEAPF32[$_y >> 2] = $70;
 STACKTOP = sp;
 return $sample_available$0 | 0;
}

function _liquid_firdes_prototype($_type, $_k, $_m, $_beta, $_dt, $_h) {
 $_type = $_type | 0;
 $_k = $_k | 0;
 $_m = $_m | 0;
 $_beta = +$_beta;
 $_dt = +$_dt;
 $_h = $_h | 0;
 var $$lcssa = 0.0, $$lcssa6 = 0.0, $11 = 0.0, $13 = 0, $15 = 0, $19 = 0, $2 = 0, $23 = 0.0, $3 = 0.0, $33 = 0, $4 = 0.0, $5 = 0.0, $8 = 0.0, $9 = 0.0, $As0$05$i = 0.0, $As1$04$i = 0.0, $bands = 0, $des = 0, $i$06$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $weights = 0, $wtype = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $bands = sp + 56 | 0;
 $des = sp + 44 | 0;
 $weights = sp + 32 | 0;
 $wtype = sp + 20 | 0;
 $2 = Math_imul($_k << 1, $_m) | 0 | 1;
 $3 = +($_k >>> 0);
 $4 = .5 / $3;
 $5 = $_beta / $3;
 $8 = $5 * 14.260000228881836;
 $9 = +($2 >>> 0);
 if ($5 > .5 | $5 <= 0.0) {
  $13 = HEAP32[gb + 9336 >> 2] | 0;
  HEAPF64[$vararg_buffer >> 3] = $5;
  _fprintf($13, gb + 22115 | 0, $vararg_buffer) | 0;
  _exit(1);
 } else {
  $As0$05$i = .009999999776482582;
  $As1$04$i = 200.0;
  $i$06$i = 0;
 }
 while (1) {
  $11 = ($As0$05$i + $As1$04$i) * .5;
  if ($11 <= 0.0) {
   $$lcssa = $11;
   label = 4;
   break;
  }
  $19 = ($11 + -7.949999809265137) / $8 < $9;
  $i$06$i = $i$06$i + 1 | 0;
  if ($i$06$i >>> 0 >= 20) {
   $$lcssa6 = $11;
   break;
  } else {
   $As0$05$i = $19 ? $11 : $As0$05$i;
   $As1$04$i = $19 ? $As1$04$i : $11;
  }
 }
 if ((label | 0) == 4) {
  $15 = HEAP32[gb + 9336 >> 2] | 0;
  HEAPF64[$vararg_buffer1 >> 3] = $$lcssa;
  _fprintf($15, gb + 22052 | 0, $vararg_buffer1) | 0;
  _exit(1);
 }
 HEAPF32[$bands >> 2] = 0.0;
 $23 = $5 * .5;
 HEAPF32[$bands + 4 >> 2] = $4 - $23;
 HEAPF32[$bands + 8 >> 2] = $4;
 HEAPF32[$bands + 12 >> 2] = $4;
 HEAPF32[$bands + 16 >> 2] = $4 + $23;
 HEAPF32[$bands + 20 >> 2] = .5;
 HEAPF32[$des >> 2] = $3;
 HEAPF32[$des + 4 >> 2] = $3 * .5;
 HEAPF32[$des + 8 >> 2] = 0.0;
 HEAP32[$weights >> 2] = HEAP32[gb + 524 >> 2];
 HEAP32[$weights + 4 >> 2] = HEAP32[gb + 524 + 4 >> 2];
 HEAP32[$weights + 8 >> 2] = HEAP32[gb + 524 + 8 >> 2];
 HEAP32[$wtype >> 2] = 0;
 HEAP32[$wtype + 4 >> 2] = 0;
 HEAP32[$wtype + 8 >> 2] = 0;
 do switch ($_type | 0) {
 case 1:
  {
   _liquid_firdes_kaiser($2, $4, $$lcssa6, $_dt, $_h);
   STACKTOP = sp;
   return;
  }
 case 2:
  {
   _firdespm_run($2, 3, $bands, $des, $weights, $wtype, 0, $_h);
   STACKTOP = sp;
   return;
  }
 case 3:
  {
   _liquid_firdes_rcos($_k, $_m, $_beta, $_dt, $_h);
   STACKTOP = sp;
   return;
  }
 case 4:
  {
   _liquid_firdes_fexp($_k, $_m, $_beta, $_dt, $_h);
   STACKTOP = sp;
   return;
  }
 case 5:
  {
   _liquid_firdes_fsech($_k, $_m, $_beta, $_dt, $_h);
   STACKTOP = sp;
   return;
  }
 case 6:
  {
   _liquid_firdes_farcsech($_k, $_m, $_beta, $_dt, $_h);
   STACKTOP = sp;
   return;
  }
 case 7:
  {
   _liquid_firdes_arkaiser($_k, $_m, $_beta, $_dt, $_h);
   STACKTOP = sp;
   return;
  }
 case 8:
  {
   _liquid_firdes_rkaiser($_k, $_m, $_beta, $_dt, $_h);
   STACKTOP = sp;
   return;
  }
 case 9:
  {
   _liquid_firdes_rrcos($_k, $_m, $_beta, $_dt, $_h);
   STACKTOP = sp;
   return;
  }
 case 10:
  {
   _liquid_firdes_hM3($_k, $_m, $_beta, $_dt, $_h);
   STACKTOP = sp;
   return;
  }
 case 11:
  {
   _liquid_firdes_gmsktx($_k, $_m, $_beta, $_dt, $_h);
   STACKTOP = sp;
   return;
  }
 case 12:
  {
   _liquid_firdes_gmskrx($_k, $_m, $_beta, $_dt, $_h);
   STACKTOP = sp;
   return;
  }
 case 13:
  {
   _liquid_firdes_rfexp($_k, $_m, $_beta, $_dt, $_h);
   STACKTOP = sp;
   return;
  }
 case 14:
  {
   _liquid_firdes_rfsech($_k, $_m, $_beta, $_dt, $_h);
   STACKTOP = sp;
   return;
  }
 case 15:
  {
   _liquid_firdes_rfarcsech($_k, $_m, $_beta, $_dt, $_h);
   STACKTOP = sp;
   return;
  }
 default:
  {
   $33 = HEAP32[gb + 9336 >> 2] | 0;
   HEAP32[$vararg_buffer4 >> 2] = $_type;
   _fprintf($33, gb + 22401 | 0, $vararg_buffer4) | 0;
   _exit(1);
  }
 } while (0);
}

function _fft_execute_dft_3($_q) {
 $_q = $_q | 0;
 var $$byval_copy1 = 0, $0 = 0, $1 = 0, $101 = 0.0, $102 = 0, $104 = 0.0, $106 = 0.0, $111 = 0.0, $112 = 0.0, $118 = 0.0, $119 = 0.0, $120 = 0.0, $121 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $131 = 0, $2 = 0, $24 = 0.0, $25 = 0, $26 = 0, $28 = 0, $29 = 0.0, $3 = 0, $31 = 0.0, $33 = 0.0, $35 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $48 = 0.0, $5 = 0, $50 = 0.0, $52 = 0, $53 = 0.0, $55 = 0.0, $57 = 0.0, $59 = 0.0, $6 = 0, $64 = 0.0, $65 = 0.0, $7 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $78 = 0.0, $8 = 0, $80 = 0.0, $82 = 0.0, $84 = 0.0, $86 = 0.0, $9 = 0, $91 = 0.0, $92 = 0.0, $99 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy1 = sp + 64 | 0;
 $0 = sp + 56 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 40 | 0;
 $3 = sp + 32 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 16 | 0;
 $6 = sp + 8 | 0;
 $7 = sp;
 $8 = $_q + 4 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $24 = +HEAPF32[$9 + 4 >> 2] + +HEAPF32[$9 + 12 >> 2] + +HEAPF32[$9 + 20 >> 2];
 $25 = $_q + 8 | 0;
 $26 = HEAP32[$25 >> 2] | 0;
 HEAPF32[$26 >> 2] = +HEAPF32[$9 >> 2] + +HEAPF32[$9 + 8 >> 2] + +HEAPF32[$9 + 16 >> 2];
 HEAPF32[$26 + 4 >> 2] = $24;
 $28 = HEAP32[$8 >> 2] | 0;
 $29 = +HEAPF32[$28 >> 2];
 $31 = +HEAPF32[$28 + 4 >> 2];
 $33 = +HEAPF32[$28 + 8 >> 2];
 $35 = +HEAPF32[$28 + 12 >> 2];
 $40 = $35 * .8660253882408142 - $33 * .5;
 $41 = $35 * -.5 - $33 * .8660253882408142;
 if (($40 != $40 | 0.0 != 0.0) & ($41 != $41 | 0.0 != 0.0)) {
  ___mulsc3($0, $33, $35, -.5, -.8660253882408142);
  $48 = +HEAPF32[$0 >> 2];
  $50 = +HEAPF32[$0 + 4 >> 2];
  $52 = HEAP32[$8 >> 2] | 0;
 } else {
  $48 = $40;
  $50 = $41;
  $52 = $28;
 }
 $53 = +HEAPF32[$52 + 16 >> 2];
 $55 = +HEAPF32[$52 + 20 >> 2];
 HEAPF32[$2 >> 2] = -.5;
 HEAPF32[$2 + 4 >> 2] = -.8660253882408142;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 _conjf($1, $$byval_copy1);
 $57 = +HEAPF32[$1 >> 2];
 $59 = +HEAPF32[$1 + 4 >> 2];
 $64 = $53 * $57 - $55 * $59;
 $65 = $55 * $57 + $53 * $59;
 if (($64 != $64 | 0.0 != 0.0) & ($65 != $65 | 0.0 != 0.0)) {
  ___mulsc3($3, $53, $55, $57, $59);
  $72 = +HEAPF32[$3 >> 2];
  $74 = +HEAPF32[$3 + 4 >> 2];
 } else {
  $72 = $64;
  $74 = $65;
 }
 $71 = $29 + $48 + $72;
 $73 = $31 + $50 + $74;
 $75 = HEAP32[$8 >> 2] | 0;
 $76 = +HEAPF32[$75 >> 2];
 $78 = +HEAPF32[$75 + 4 >> 2];
 $80 = +HEAPF32[$75 + 8 >> 2];
 $82 = +HEAPF32[$75 + 12 >> 2];
 HEAPF32[$5 >> 2] = -.5;
 HEAPF32[$5 + 4 >> 2] = -.8660253882408142;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
 _conjf($4, $$byval_copy1);
 $84 = +HEAPF32[$4 >> 2];
 $86 = +HEAPF32[$4 + 4 >> 2];
 $91 = $80 * $84 - $82 * $86;
 $92 = $82 * $84 + $80 * $86;
 if (($91 != $91 | 0.0 != 0.0) & ($92 != $92 | 0.0 != 0.0)) {
  ___mulsc3($6, $80, $82, $84, $86);
  $101 = +HEAPF32[$6 + 4 >> 2];
  $99 = +HEAPF32[$6 >> 2];
 } else {
  $101 = $92;
  $99 = $91;
 }
 $102 = HEAP32[$8 >> 2] | 0;
 $104 = +HEAPF32[$102 + 16 >> 2];
 $106 = +HEAPF32[$102 + 20 >> 2];
 $111 = $106 * .8660253882408142 - $104 * .5;
 $112 = $106 * -.5 - $104 * .8660253882408142;
 if (($111 != $111 | 0.0 != 0.0) & ($112 != $112 | 0.0 != 0.0)) {
  ___mulsc3($7, $104, $106, -.5, -.8660253882408142);
  $119 = +HEAPF32[$7 >> 2];
  $121 = +HEAPF32[$7 + 4 >> 2];
 } else {
  $119 = $111;
  $121 = $112;
 }
 $118 = $76 + $99 + $119;
 $120 = $78 + $101 + $121;
 $125 = HEAP32[$25 >> 2] | 0;
 $126 = $125 + 8 | 0;
 $127 = $125 + 12 | 0;
 if ((HEAP32[$_q + 12 >> 2] | 0) == 1) {
  HEAPF32[$126 >> 2] = $71;
  HEAPF32[$127 >> 2] = $73;
  $128 = HEAP32[$25 >> 2] | 0;
  HEAPF32[$128 + 16 >> 2] = $118;
  HEAPF32[$128 + 20 >> 2] = $120;
  STACKTOP = sp;
  return;
 } else {
  HEAPF32[$126 >> 2] = $118;
  HEAPF32[$127 >> 2] = $120;
  $131 = HEAP32[$25 >> 2] | 0;
  HEAPF32[$131 + 16 >> 2] = $71;
  HEAPF32[$131 + 20 >> 2] = $73;
  STACKTOP = sp;
  return;
 }
}

function _modem_arb_init($_q, $_symbol_map, $_len) {
 $_q = $_q | 0;
 $_symbol_map = $_symbol_map | 0;
 $_len = $_len | 0;
 var $$byval_copy = 0, $$lcssa = 0.0, $$lcssa27 = 0, $$lcssa29 = 0.0, $$lcssa30 = 0.0, $$pre13 = 0, $0 = 0, $13 = 0, $14 = 0, $18 = 0, $20 = 0, $21 = 0, $26 = 0.0, $27 = 0.0, $29 = 0.0, $30 = 0.0, $32 = 0, $35 = 0.0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $44 = 0.0, $46 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $56 = 0, $57 = 0.0, $59 = 0.0, $61 = 0, $64 = 0.0, $65 = 0, $66 = 0, $68 = 0, $71 = 0.0, $75 = 0, $8 = 0, $e$04$i = 0.0, $i$03$i = 0, $i$05$i = 0, $i$07 = 0, $i$12$i3 = 0, $mean$sroa$0$04$i = 0.0, $mean$sroa$8$03$i = 0.0, $phitmp$i = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 8 | 0;
 $0 = sp;
 if ((HEAP32[$_q >> 2] | 0) != 60) {
  _fwrite(gb + 32277 | 0, 56, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 $4 = $_q + 8 | 0;
 if ((HEAP32[$4 >> 2] | 0) != ($_len | 0)) {
  _fwrite(gb + 32334 | 0, 50, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if (!$_len) label = 10; else {
  $8 = $_q + 76 | 0;
  $i$07 = 0;
  do {
   $13 = HEAP32[$_symbol_map + ($i$07 << 3) + 4 >> 2] | 0;
   $14 = HEAP32[$8 >> 2] | 0;
   HEAP32[$14 + ($i$07 << 3) >> 2] = HEAP32[$_symbol_map + ($i$07 << 3) >> 2];
   HEAP32[$14 + ($i$07 << 3) + 4 >> 2] = $13;
   $i$07 = $i$07 + 1 | 0;
  } while (($i$07 | 0) != ($_len | 0));
  if ((HEAP32[$_q >> 2] | 0) == 60) label = 10; else $49 = HEAP32[$4 >> 2] | 0;
 }
 if ((label | 0) == 10) {
  $18 = HEAP32[$4 >> 2] | 0;
  if (!$18) {
   $75 = $0;
   STACKTOP = sp;
   return;
  }
  $20 = $_q + 76 | 0;
  $21 = HEAP32[$20 >> 2] | 0;
  $i$05$i = 0;
  $mean$sroa$0$04$i = 0.0;
  $mean$sroa$8$03$i = 0.0;
  while (1) {
   $26 = $mean$sroa$0$04$i + +HEAPF32[$21 + ($i$05$i << 3) >> 2];
   $27 = $mean$sroa$8$03$i + +HEAPF32[$21 + ($i$05$i << 3) + 4 >> 2];
   $i$05$i = $i$05$i + 1 | 0;
   if (($i$05$i | 0) == ($18 | 0)) {
    $$lcssa29 = $26;
    $$lcssa30 = $27;
    break;
   } else {
    $mean$sroa$0$04$i = $26;
    $mean$sroa$8$03$i = $27;
   }
  }
  $phitmp$i = +($18 >>> 0);
  $29 = $$lcssa29 / $phitmp$i;
  $30 = $$lcssa30 / $phitmp$i;
  $32 = $21 + 4 | 0;
  $35 = +HEAPF32[$32 >> 2] - $30;
  HEAPF32[$21 >> 2] = +HEAPF32[$21 >> 2] - $29;
  HEAPF32[$32 >> 2] = $35;
  $36 = HEAP32[$4 >> 2] | 0;
  if ($36 >>> 0 > 1) {
   $39 = 1;
   do {
    $$pre13 = HEAP32[$20 >> 2] | 0;
    $38 = $$pre13 + ($39 << 3) | 0;
    $41 = $$pre13 + ($39 << 3) + 4 | 0;
    $44 = +HEAPF32[$41 >> 2] - $30;
    HEAPF32[$38 >> 2] = +HEAPF32[$38 >> 2] - $29;
    HEAPF32[$41 >> 2] = $44;
    $39 = $39 + 1 | 0;
    $46 = HEAP32[$4 >> 2] | 0;
   } while ($39 >>> 0 < $46 >>> 0);
   $49 = $46;
  } else $49 = $36;
 }
 if (!$49) {
  $75 = $0;
  STACKTOP = sp;
  return;
 }
 $50 = $_q + 76 | 0;
 $51 = $0 + 4 | 0;
 $e$04$i = 0.0;
 $i$03$i = 0;
 while (1) {
  $52 = HEAP32[$50 >> 2] | 0;
  $56 = HEAP32[$52 + ($i$03$i << 3) + 4 >> 2] | 0;
  HEAP32[$0 >> 2] = HEAP32[$52 + ($i$03$i << 3) >> 2];
  HEAP32[$51 >> 2] = $56;
  HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$0 + 4 >> 2];
  $57 = +_cabsf($$byval_copy);
  $59 = $e$04$i + $57 * $57;
  $i$03$i = $i$03$i + 1 | 0;
  $61 = HEAP32[$4 >> 2] | 0;
  if ($i$03$i >>> 0 >= $61 >>> 0) {
   $$lcssa = $59;
   $$lcssa27 = $61;
   break;
  } else $e$04$i = $59;
 }
 $64 = +Math_sqrt(+($$lcssa / +($$lcssa27 >>> 0)));
 if (!$$lcssa27) {
  $75 = $0;
  STACKTOP = sp;
  return;
 } else $i$12$i3 = 0;
 do {
  $65 = HEAP32[$50 >> 2] | 0;
  $66 = $65 + ($i$12$i3 << 3) | 0;
  $68 = $65 + ($i$12$i3 << 3) + 4 | 0;
  $71 = +HEAPF32[$68 >> 2] / $64;
  HEAPF32[$66 >> 2] = +HEAPF32[$66 >> 2] / $64;
  HEAPF32[$68 >> 2] = $71;
  $i$12$i3 = $i$12$i3 + 1 | 0;
 } while ($i$12$i3 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0);
 $75 = $0;
 STACKTOP = sp;
 return;
}

function _decoder_profile($root, $profilename) {
 $root = $root | 0;
 $profilename = $profilename | 0;
 var $$ = 0, $$2 = 0, $0 = 0, $10 = 0, $13 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $24 = 0, $26 = 0, $29 = 0, $31 = 0, $34 = 0, $36 = 0, $39 = 0, $4 = 0, $41 = 0, $51 = 0, $53 = 0, $55 = 0, $57 = 0, $61 = 0, $63 = 0, $66 = 0, $68 = 0, $71 = 0, $77 = 0, $79 = 0, $8 = 0, $81 = 0, $84 = 0, $89 = 0, $94 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = _json_object_get($root, $profilename) | 0;
 if (!$0) {
  HEAP32[$vararg_buffer >> 2] = $profilename;
  _printf(gb + 10663 | 0, $vararg_buffer) | 0;
  $$2 = 0;
  STACKTOP = sp;
  return $$2 | 0;
 }
 $2 = _calloc(1, 64) | 0;
 if (!$2) {
  _puts(gb + 11183 | 0) | 0;
  $$2 = 0;
  STACKTOP = sp;
  return $$2 | 0;
 }
 $4 = _json_object_get($0, gb + 10779 | 0) | 0;
 if (!$4) $13 = 0; else {
  $8 = (_strcmp(_json_string_value($4) | 0, gb + 10790 | 0) | 0) == 0;
  $$ = $8 ? 2 : 1;
  HEAP32[$2 + 56 >> 2] = $$;
  $13 = $$;
 }
 $10 = _json_object_get($0, gb + 10808 | 0) | 0;
 if ($10 | 0) {
  if (($13 | 0) == 2) {
   _puts(gb + 10813 | 0) | 0;
   $$2 = 0;
   STACKTOP = sp;
   return $$2 | 0;
  }
  HEAP32[$2 + 56 >> 2] = 0;
  $15 = _json_object_get($10, gb + 10860 | 0) | 0;
  if ($15 | 0) {
   $17 = _json_integer_value($15) | 0;
   getTempRet0() | 0;
   HEAP32[$2 >> 2] = $17;
  }
  $19 = _json_object_get($10, gb + 10876 | 0) | 0;
  if ($19 | 0) {
   $21 = _json_integer_value($19) | 0;
   getTempRet0() | 0;
   HEAP32[$2 + 4 >> 2] = $21;
  }
  $24 = _json_object_get($10, gb + 10897 | 0) | 0;
  if ($24 | 0) {
   $26 = _json_integer_value($24) | 0;
   getTempRet0() | 0;
   HEAP32[$2 + 8 >> 2] = $26;
  }
  $29 = _json_object_get($10, gb + 10910 | 0) | 0;
  if ($29 | 0) {
   $31 = _json_integer_value($29) | 0;
   getTempRet0() | 0;
   HEAP32[$2 + 12 >> 2] = $31;
  }
  $34 = _json_object_get($10, gb + 10920 | 0) | 0;
  if ($34 | 0) {
   $36 = _json_integer_value($34) | 0;
   getTempRet0() | 0;
   HEAP32[$2 + 16 >> 2] = $36;
  }
 }
 $39 = _json_object_get($0, gb + 10931 | 0) | 0;
 if ($39 | 0) {
  $41 = _json_object_get($39, gb + 10942 | 0) | 0;
  if ($41 | 0) HEAPF32[$2 + 36 >> 2] = +_json_number_value($41) / 44100.0 * 3.141592653589793 * 2.0;
 }
 $51 = _json_object_get($0, gb + 11003 | 0) | 0;
 if (!$51) HEAP32[$2 + 24 >> 2] = 1; else {
  $53 = _json_object_get($51, gb + 11017 | 0) | 0;
  if (!$53) HEAP32[$2 + 20 >> 2] = 1; else {
   $55 = _json_string_value($53) | 0;
   $57 = (_strcmp($55, gb + 10790 | 0) | 0) == 0;
   HEAP32[$2 + 20 >> 2] = _liquid_getopt_str2firfilt($57 ? gb + 22543 | 0 : $55) | 0;
  }
  $61 = _json_object_get($51, gb + 11023 | 0) | 0;
  if ($61 | 0) {
   $63 = _json_integer_value($61) | 0;
   getTempRet0() | 0;
   HEAP32[$2 + 24 >> 2] = $63;
  }
  $66 = _json_object_get($51, gb + 11042 | 0) | 0;
  if ($66 | 0) {
   $68 = _json_integer_value($66) | 0;
   getTempRet0() | 0;
   HEAP32[$2 + 28 >> 2] = $68;
  }
  $71 = _json_object_get($51, gb + 11055 | 0) | 0;
  if ($71 | 0) HEAPF32[$2 + 32 >> 2] = +_json_number_value($71);
 }
 $77 = _json_object_get($0, gb + 11104 | 0) | 0;
 if (!$77) {
  $$2 = $2;
  STACKTOP = sp;
  return $$2 | 0;
 }
 $79 = _json_object_get($77, gb + 11114 | 0) | 0;
 if ($79 | 0) {
  $81 = _json_integer_value($79) | 0;
  getTempRet0() | 0;
  HEAP32[$2 + 40 >> 2] = $81;
 }
 $84 = _json_object_get($77, gb + 11120 | 0) | 0;
 if ($84 | 0) HEAPF32[$2 + 44 >> 2] = +_json_number_value($84);
 $89 = _json_object_get($77, gb + 11130 | 0) | 0;
 if ($89 | 0) HEAPF32[$2 + 48 >> 2] = +_json_number_value($89);
 $94 = _json_object_get($77, gb + 11142 | 0) | 0;
 if (!$94) {
  $$2 = $2;
  STACKTOP = sp;
  return $$2 | 0;
 }
 HEAP32[$2 + 52 >> 2] = ~~+_json_number_value($94) >>> 0;
 $$2 = $2;
 STACKTOP = sp;
 return $$2 | 0;
}

function _liquid_cplxpair($_z, $_n, $_tol, $_p) {
 $_z = $_z | 0;
 $_n = $_n | 0;
 $_tol = +$_tol;
 $_p = $_p | 0;
 var $$lcssa = 0, $$lcssa44 = 0, $$lcssa45 = 0, $$lcssa46 = 0.0, $13 = 0, $16 = 0, $17 = 0, $18 = 0.0, $2 = 0, $24 = 0.0, $29 = 0, $3 = 0, $33 = 0, $4 = 0, $42 = 0, $43 = 0, $47 = 0.0, $7 = 0, $9 = 0.0, $i$019$us = 0, $i$115 = 0, $j$016$us = 0, $k$018$us = 0, $k$1$us = 0, $k$1$us$lcssa = 0, $k$214 = 0, $k$3 = 0, $num_pairs$0$lcssa3234 = 0, $num_pairs$022$us = 0, $num_pairs$1$us = 0, $num_pairs$1$us$lcssa = 0, sp = 0;
 sp = STACKTOP;
 if ($_tol < 0.0) {
  _fwrite(gb + 23831 | 0, 53, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 $2 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $_n | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 _memset($2 | 0, 0, $_n | 0) | 0;
 $3 = ($_n | 0) == 0;
 if ($3) {
  $num_pairs$0$lcssa3234 = 0;
  _liquid_cplxpair_cleanup($_p, $_n, $num_pairs$0$lcssa3234);
  STACKTOP = sp;
  return;
 } else {
  $i$019$us = 0;
  $k$018$us = 0;
  $num_pairs$022$us = 0;
 }
 while (1) {
  $4 = $2 + $i$019$us | 0;
  L8 : do if (!(HEAP8[$4 >> 0] | 0)) {
   $7 = $_z + ($i$019$us << 3) | 0;
   $9 = +HEAPF32[$_z + ($i$019$us << 3) + 4 >> 2];
   if (+Math_abs(+$9) < $_tol) {
    $k$1$us = $k$018$us;
    $num_pairs$1$us = $num_pairs$022$us;
   } else {
    $j$016$us = 0;
    while (1) {
     if (($j$016$us | 0) != ($i$019$us | 0)) {
      $13 = $2 + $j$016$us | 0;
      if (!(HEAP8[$13 >> 0] | 0)) {
       $16 = $_z + ($j$016$us << 3) | 0;
       $17 = $_z + ($j$016$us << 3) + 4 | 0;
       $18 = +HEAPF32[$17 >> 2];
       if (!(+Math_abs(+$18) < $_tol)) if (+Math_abs(+($18 + $9)) < $_tol) {
        $24 = +HEAPF32[$7 >> 2];
        if (+Math_abs(+($24 - +HEAPF32[$16 >> 2])) < $_tol) {
         $$lcssa = $13;
         $$lcssa44 = $16;
         $$lcssa45 = $17;
         $$lcssa46 = $24;
         break;
        }
       }
      }
     }
     $j$016$us = $j$016$us + 1 | 0;
     if ($j$016$us >>> 0 >= $_n >>> 0) {
      $k$1$us = $k$018$us;
      $num_pairs$1$us = $num_pairs$022$us;
      break L8;
     }
    }
    $29 = $k$018$us + 1 | 0;
    HEAPF32[$_p + ($k$018$us << 3) >> 2] = $$lcssa46;
    HEAPF32[$_p + ($k$018$us << 3) + 4 >> 2] = $9;
    $33 = HEAP32[$$lcssa45 >> 2] | 0;
    HEAP32[$_p + ($29 << 3) >> 2] = HEAP32[$$lcssa44 >> 2];
    HEAP32[$_p + ($29 << 3) + 4 >> 2] = $33;
    HEAP8[$4 >> 0] = 1;
    HEAP8[$$lcssa >> 0] = 1;
    $k$1$us = $k$018$us + 2 | 0;
    $num_pairs$1$us = $num_pairs$022$us + 1 | 0;
   }
  } else {
   $k$1$us = $k$018$us;
   $num_pairs$1$us = $num_pairs$022$us;
  } while (0);
  $i$019$us = $i$019$us + 1 | 0;
  if (($i$019$us | 0) == ($_n | 0)) {
   $k$1$us$lcssa = $k$1$us;
   $num_pairs$1$us$lcssa = $num_pairs$1$us;
   break;
  } else {
   $k$018$us = $k$1$us;
   $num_pairs$022$us = $num_pairs$1$us;
  }
 }
 if ($k$1$us$lcssa >>> 0 > $_n >>> 0) ___assert_fail(gb + 23885 | 0, gb + 23893 | 0, 102, gb + 23917 | 0);
 if ($3) {
  $num_pairs$0$lcssa3234 = $num_pairs$1$us$lcssa;
  _liquid_cplxpair_cleanup($_p, $_n, $num_pairs$0$lcssa3234);
  STACKTOP = sp;
  return;
 }
 $42 = HEAP32[gb + 9336 >> 2] | 0;
 $i$115 = 0;
 $k$214 = $k$1$us$lcssa;
 while (1) {
  $43 = $2 + $i$115 | 0;
  do if (!(HEAP8[$43 >> 0] | 0)) {
   $47 = +HEAPF32[$_z + ($i$115 << 3) + 4 >> 2];
   if ($47 > $_tol) {
    _fwrite(gb + 23933 | 0, 61, 1, $42) | 0;
    $k$3 = $k$214;
    break;
   } else {
    HEAP32[$_p + ($k$214 << 3) >> 2] = HEAP32[$_z + ($i$115 << 3) >> 2];
    HEAPF32[$_p + ($k$214 << 3) + 4 >> 2] = $47;
    HEAP8[$43 >> 0] = 1;
    $k$3 = $k$214 + 1 | 0;
    break;
   }
  } else $k$3 = $k$214; while (0);
  $i$115 = $i$115 + 1 | 0;
  if (($i$115 | 0) == ($_n | 0)) {
   $num_pairs$0$lcssa3234 = $num_pairs$1$us$lcssa;
   break;
  } else $k$214 = $k$3;
 }
 _liquid_cplxpair_cleanup($_p, $_n, $num_pairs$0$lcssa3234);
 STACKTOP = sp;
 return;
}

function _parse_object($lex, $flags, $error) {
 $lex = $lex | 0;
 $flags = $flags | 0;
 $error = $error | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $74 = 0, $83 = 0, $key = 0, $len = 0, $object = 0, $value = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer7 = sp + 32 | 0;
 $vararg_buffer5 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $0 = sp + 64 | 0;
 $1 = sp + 60 | 0;
 $2 = sp + 56 | 0;
 $3 = sp + 52 | 0;
 $object = sp + 48 | 0;
 $key = sp + 44 | 0;
 $len = sp + 40 | 0;
 $value = sp + 36 | 0;
 HEAP32[$1 >> 2] = $lex;
 HEAP32[$2 >> 2] = $flags;
 HEAP32[$3 >> 2] = $error;
 HEAP32[$object >> 2] = _json_object() | 0;
 if (!(HEAP32[$object >> 2] | 0)) {
  HEAP32[$0 >> 2] = 0;
  $83 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $83 | 0;
 }
 _lex_scan(HEAP32[$1 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
 if ((HEAP32[(HEAP32[$1 >> 2] | 0) + 56 >> 2] | 0) == 125) {
  HEAP32[$0 >> 2] = HEAP32[$object >> 2];
  $83 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $83 | 0;
 }
 while (1) {
  if ((HEAP32[(HEAP32[$1 >> 2] | 0) + 56 >> 2] | 0) != 256) {
   label = 6;
   break;
  }
  HEAP32[$key >> 2] = _lex_steal_string(HEAP32[$1 >> 2] | 0, $len) | 0;
  if (!(HEAP32[$key >> 2] | 0)) {
   label = 8;
   break;
  }
  if (_memchr(HEAP32[$key >> 2] | 0, 0, HEAP32[$len >> 2] | 0) | 0) {
   label = 10;
   break;
  }
  if (HEAP32[$2 >> 2] & 1 | 0) if (_json_object_get(HEAP32[$object >> 2] | 0, HEAP32[$key >> 2] | 0) | 0) {
   label = 13;
   break;
  }
  _lex_scan(HEAP32[$1 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
  if ((HEAP32[(HEAP32[$1 >> 2] | 0) + 56 >> 2] | 0) != 58) {
   label = 15;
   break;
  }
  _lex_scan(HEAP32[$1 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
  HEAP32[$value >> 2] = _parse_value(HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
  if (!(HEAP32[$value >> 2] | 0)) {
   label = 17;
   break;
  }
  if (_json_object_set_nocheck(HEAP32[$object >> 2] | 0, HEAP32[$key >> 2] | 0, HEAP32[$value >> 2] | 0) | 0) {
   label = 19;
   break;
  }
  _json_decref(HEAP32[$value >> 2] | 0);
  _jsonp_free(HEAP32[$key >> 2] | 0);
  _lex_scan(HEAP32[$1 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
  $74 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[(HEAP32[$1 >> 2] | 0) + 56 >> 2] | 0) != 44) {
   label = 22;
   break;
  }
  _lex_scan($74, HEAP32[$3 >> 2] | 0) | 0;
 }
 do if ((label | 0) == 6) _error_set(HEAP32[$3 >> 2] | 0, HEAP32[$1 >> 2] | 0, gb + 41916 | 0, $vararg_buffer); else if ((label | 0) == 8) {
  HEAP32[$0 >> 2] = 0;
  $83 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $83 | 0;
 } else if ((label | 0) == 10) {
  _jsonp_free(HEAP32[$key >> 2] | 0);
  _error_set(HEAP32[$3 >> 2] | 0, HEAP32[$1 >> 2] | 0, gb + 41939 | 0, $vararg_buffer1);
 } else if ((label | 0) == 13) {
  _jsonp_free(HEAP32[$key >> 2] | 0);
  _error_set(HEAP32[$3 >> 2] | 0, HEAP32[$1 >> 2] | 0, gb + 41976 | 0, $vararg_buffer3);
 } else if ((label | 0) == 15) {
  _jsonp_free(HEAP32[$key >> 2] | 0);
  _error_set(HEAP32[$3 >> 2] | 0, HEAP32[$1 >> 2] | 0, gb + 41997 | 0, $vararg_buffer5);
 } else if ((label | 0) == 17) _jsonp_free(HEAP32[$key >> 2] | 0); else if ((label | 0) == 19) {
  _jsonp_free(HEAP32[$key >> 2] | 0);
  _json_decref(HEAP32[$value >> 2] | 0);
 } else if ((label | 0) == 22) {
  if ((HEAP32[$74 + 56 >> 2] | 0) != 125) {
   _error_set(HEAP32[$3 >> 2] | 0, HEAP32[$1 >> 2] | 0, gb + 42010 | 0, $vararg_buffer7);
   break;
  }
  HEAP32[$0 >> 2] = HEAP32[$object >> 2];
  $83 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $83 | 0;
 } while (0);
 _json_decref(HEAP32[$object >> 2] | 0);
 HEAP32[$0 >> 2] = 0;
 $83 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $83 | 0;
}

function _fft_execute_rader2($_q) {
 $_q = $_q | 0;
 var $$lcssa = 0, $0 = 0, $10 = 0, $100 = 0.0, $102 = 0, $105 = 0, $112 = 0, $117 = 0.0, $118 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $31 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $43 = 0, $45 = 0, $46 = 0, $54 = 0, $58 = 0, $6 = 0, $60 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0.0, $71 = 0.0, $72 = 0.0, $77 = 0.0, $78 = 0.0, $8 = 0, $81 = 0, $84 = 0, $85 = 0, $89 = 0.0, $90 = 0, $95 = 0, $97 = 0, $i$015 = 0, $i$111 = 0, $i$27 = 0, $i$34 = 0, $i$43 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 $2 = HEAP32[$_q + 52 >> 2] | 0;
 $4 = HEAP32[$_q + 56 >> 2] | 0;
 $6 = HEAP32[$_q + 48 >> 2] | 0;
 $8 = HEAP32[$_q + 44 >> 2] | 0;
 $10 = HEAP32[$_q + 40 >> 2] | 0;
 $14 = HEAP32[$8 + ((HEAP32[$_q >> 2] | 0) + -2 << 2) >> 2] | 0;
 $15 = $_q + 4 | 0;
 $16 = HEAP32[$15 >> 2] | 0;
 $20 = HEAP32[$16 + ($14 << 3) + 4 >> 2] | 0;
 HEAP32[$2 >> 2] = HEAP32[$16 + ($14 << 3) >> 2];
 HEAP32[$2 + 4 >> 2] = $20;
 $22 = HEAP32[$_q >> 2] | 0;
 $23 = $10 + 1 | 0;
 if (($23 | 0) == ($22 | 0)) $26 = $22; else {
  $i$015 = 0;
  do {
   $i$015 = $i$015 + 1 | 0;
   HEAPF32[$2 + ($i$015 << 3) >> 2] = 0.0;
   HEAPF32[$2 + ($i$015 << 3) + 4 >> 2] = 0.0;
   $31 = HEAP32[$_q >> 2] | 0;
  } while ($i$015 >>> 0 < ($23 - $31 | 0) >>> 0);
  $26 = $31;
 }
 $25 = $26 + -1 | 0;
 if ($25 >>> 0 > 1) {
  $36 = $25;
  $46 = $26;
  $i$111 = 1;
  do {
   $38 = HEAP32[$8 + ($36 + ~$i$111 << 2) >> 2] | 0;
   $39 = HEAP32[$15 >> 2] | 0;
   $43 = HEAP32[$39 + ($38 << 3) + 4 >> 2] | 0;
   $45 = $23 + $i$111 - $46 | 0;
   HEAP32[$2 + ($45 << 3) >> 2] = HEAP32[$39 + ($38 << 3) >> 2];
   HEAP32[$2 + ($45 << 3) + 4 >> 2] = $43;
   $i$111 = $i$111 + 1 | 0;
   $46 = HEAP32[$_q >> 2] | 0;
   $36 = $46 + -1 | 0;
  } while ($36 >>> 0 > $i$111 >>> 0);
 }
 $54 = HEAP32[$_q + 60 >> 2] | 0;
 mftCall_vi(HEAP32[$54 + 28 >> 2] | 0, $54 | 0);
 if ($10 | 0) {
  $58 = $0 + 4 | 0;
  $i$27 = 0;
  do {
   $60 = +HEAPF32[$6 + ($i$27 << 3) >> 2];
   $62 = +HEAPF32[$6 + ($i$27 << 3) + 4 >> 2];
   $63 = $4 + ($i$27 << 3) | 0;
   $64 = +HEAPF32[$63 >> 2];
   $65 = $4 + ($i$27 << 3) + 4 | 0;
   $66 = +HEAPF32[$65 >> 2];
   $71 = $60 * $64 - $62 * $66;
   $72 = $62 * $64 + $60 * $66;
   if (($71 != $71 | 0.0 != 0.0) & ($72 != $72 | 0.0 != 0.0)) {
    ___mulsc3($0, $64, $66, $60, $62);
    $77 = +HEAPF32[$0 >> 2];
    $78 = +HEAPF32[$58 >> 2];
   } else {
    $77 = $71;
    $78 = $72;
   }
   HEAPF32[$63 >> 2] = $77;
   HEAPF32[$65 >> 2] = $78;
   $i$27 = $i$27 + 1 | 0;
  } while (($i$27 | 0) != ($10 | 0));
 }
 $81 = HEAP32[$_q + 64 >> 2] | 0;
 mftCall_vi(HEAP32[$81 + 28 >> 2] | 0, $81 | 0);
 $84 = $_q + 8 | 0;
 $85 = HEAP32[$84 >> 2] | 0;
 HEAPF32[$85 >> 2] = 0.0;
 HEAPF32[$85 + 4 >> 2] = 0.0;
 if (HEAP32[$_q >> 2] | 0) {
  $i$34 = 0;
  do {
   $90 = HEAP32[$15 >> 2] | 0;
   $95 = HEAP32[$84 >> 2] | 0;
   $97 = $95 + 4 | 0;
   $100 = +HEAPF32[$90 + ($i$34 << 3) + 4 >> 2] + +HEAPF32[$97 >> 2];
   HEAPF32[$95 >> 2] = +HEAPF32[$90 + ($i$34 << 3) >> 2] + +HEAPF32[$95 >> 2];
   HEAPF32[$97 >> 2] = $100;
   $i$34 = $i$34 + 1 | 0;
   $102 = HEAP32[$_q >> 2] | 0;
  } while ($i$34 >>> 0 < $102 >>> 0);
  $$lcssa = $102;
  if (($$lcssa | 0) == 1) {
   STACKTOP = sp;
   return;
  }
 }
 $89 = +($10 >>> 0);
 $i$43 = 0;
 do {
  $105 = HEAP32[$8 + ($i$43 << 2) >> 2] | 0;
  $112 = HEAP32[$15 >> 2] | 0;
  $117 = +HEAPF32[$2 + ($i$43 << 3) + 4 >> 2] / $89 + +HEAPF32[$112 + 4 >> 2];
  $118 = HEAP32[$84 >> 2] | 0;
  HEAPF32[$118 + ($105 << 3) >> 2] = +HEAPF32[$2 + ($i$43 << 3) >> 2] / $89 + +HEAPF32[$112 >> 2];
  HEAPF32[$118 + ($105 << 3) + 4 >> 2] = $117;
  $i$43 = $i$43 + 1 | 0;
 } while ($i$43 >>> 0 < ((HEAP32[$_q >> 2] | 0) + -1 | 0) >>> 0);
 STACKTOP = sp;
 return;
}

function _fec_conv_punctured_decode_hard($_q, $_dec_msg_len, $_msg_enc, $_msg_dec) {
 $_q = $_q | 0;
 $_dec_msg_len = $_dec_msg_len | 0;
 $_msg_enc = $_msg_enc | 0;
 $_msg_dec = $_msg_dec | 0;
 var $$pre$phi18Z2D = 0, $$pre$phi20Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $23 = 0, $25 = 0, $29 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $44 = 0, $58 = 0, $6 = 0, $60 = 0, $67 = 0, $73 = 0, $77 = 0, $8 = 0, $byte_in$013 = 0, $byte_in$1$lcssa = 0, $byte_in$14 = 0, $byte_in$2 = 0, $i$012 = 0, $k$09 = 0, $k$1$lcssa = 0, $k$13 = 0, $k$2 = 0, $n$08 = 0, $n$1$lcssa = 0, $n$12 = 0, $n$2 = 0, $p$010 = 0, $r$01 = 0;
 $0 = $_q + 8 | 0;
 if ((HEAP32[$0 >> 2] | 0) == ($_dec_msg_len | 0)) {
  $$pre$phi18Z2D = $_q + 28 | 0;
  $$pre$phiZ2D = $_q + 32 | 0;
  $29 = $_dec_msg_len;
 } else {
  HEAP32[$0 >> 2] = $_dec_msg_len;
  HEAP32[$_q + 12 >> 2] = _fec_get_enc_msg_length(HEAP32[$_q >> 2] | 0, $_dec_msg_len) | 0;
  $6 = HEAP32[$0 >> 2] | 0;
  $8 = $_q + 32 | 0;
  $12 = $_q + 28 | 0;
  $14 = Math_imul((HEAP32[$8 >> 2] | 0) + -1 + ($6 << 3) | 0, HEAP32[$12 >> 2] | 0) | 0;
  $15 = $_q + 20 | 0;
  $16 = HEAP32[$15 >> 2] | 0;
  if (!$16) $23 = $6; else {
   mftCall_vi(HEAP32[$_q + 60 >> 2] | 0, $16 | 0);
   $23 = HEAP32[$0 >> 2] | 0;
  }
  HEAP32[$15 >> 2] = mftCall_ii(HEAP32[$_q + 44 >> 2] | 0, $23 << 3 | 0) | 0;
  $25 = $_q + 16 | 0;
  HEAP32[$25 >> 2] = _realloc(HEAP32[$25 >> 2] | 0, $14) | 0;
  $$pre$phi18Z2D = $12;
  $$pre$phiZ2D = $8;
  $29 = HEAP32[$0 >> 2] | 0;
 }
 $33 = HEAP32[$$pre$phi18Z2D >> 2] | 0;
 $34 = Math_imul((HEAP32[$$pre$phiZ2D >> 2] | 0) + -1 + ($29 << 3) | 0, $33) | 0;
 if (!$34) $$pre$phi20Z2D = $_q + 16 | 0; else {
  $37 = $_q + 36 | 0;
  $38 = $_q + 40 | 0;
  $39 = $_q + 16 | 0;
  $41 = $33;
  $byte_in$013 = HEAP8[$_msg_enc >> 0] | 0;
  $i$012 = 0;
  $k$09 = 0;
  $n$08 = 0;
  $p$010 = 0;
  while (1) {
   if (!$41) {
    $73 = 0;
    $byte_in$1$lcssa = $byte_in$013;
    $k$1$lcssa = $k$09;
    $n$1$lcssa = $n$08;
   } else {
    $byte_in$14 = $byte_in$013;
    $k$13 = $k$09;
    $n$12 = $n$08;
    $r$01 = 0;
    while (1) {
     $44 = (Math_imul(HEAP32[$37 >> 2] | 0, $r$01) | 0) + $p$010 | 0;
     if (!(HEAP32[(HEAP32[$38 >> 2] | 0) + ($44 << 2) >> 2] | 0)) {
      HEAP8[(HEAP32[$39 >> 2] | 0) + ($r$01 + $i$012) >> 0] = 127;
      $byte_in$2 = $byte_in$14;
      $k$2 = $k$13;
      $n$2 = $n$12;
     } else {
      HEAP8[(HEAP32[$39 >> 2] | 0) + ($r$01 + $i$012) >> 0] = (($byte_in$14 & 255 & 1 << 7 - $k$13 | 0) != 0) << 31 >> 31;
      $58 = $k$13 + 1 | 0;
      if (($58 | 0) == 8) {
       $60 = $n$12 + 1 | 0;
       $byte_in$2 = HEAP8[$_msg_enc + $60 >> 0] | 0;
       $k$2 = 0;
       $n$2 = $60;
      } else {
       $byte_in$2 = $byte_in$14;
       $k$2 = $58;
       $n$2 = $n$12;
      }
     }
     $r$01 = $r$01 + 1 | 0;
     $67 = HEAP32[$$pre$phi18Z2D >> 2] | 0;
     if ($r$01 >>> 0 >= $67 >>> 0) {
      $73 = $67;
      $byte_in$1$lcssa = $byte_in$2;
      $k$1$lcssa = $k$2;
      $n$1$lcssa = $n$2;
      break;
     } else {
      $byte_in$14 = $byte_in$2;
      $k$13 = $k$2;
      $n$12 = $n$2;
     }
    }
   }
   $i$012 = $73 + $i$012 | 0;
   if ($i$012 >>> 0 >= $34 >>> 0) {
    $$pre$phi20Z2D = $39;
    break;
   } else {
    $41 = $73;
    $byte_in$013 = $byte_in$1$lcssa;
    $k$09 = $k$1$lcssa;
    $n$08 = $n$1$lcssa;
    $p$010 = (($p$010 + 1 | 0) >>> 0) % ((HEAP32[$37 >> 2] | 0) >>> 0) | 0;
   }
  }
 }
 $77 = $_q + 20 | 0;
 mftCall_iii(HEAP32[$_q + 48 >> 2] | 0, HEAP32[$77 >> 2] | 0, 0) | 0;
 mftCall_iiii(HEAP32[$_q + 52 >> 2] | 0, HEAP32[$77 >> 2] | 0, HEAP32[$$pre$phi20Z2D >> 2] | 0, (HEAP32[$$pre$phiZ2D >> 2] | 0) + -1 + (HEAP32[$0 >> 2] << 3) | 0) | 0;
 mftCall_iiiii(HEAP32[$_q + 56 >> 2] | 0, HEAP32[$77 >> 2] | 0, $_msg_dec | 0, HEAP32[$0 >> 2] << 3 | 0, 0) | 0;
 return;
}

function _fec_secded3932_encode($_q, $_dec_msg_len, $_msg_dec, $_msg_enc) {
 $_q = $_q | 0;
 $_dec_msg_len = $_dec_msg_len | 0;
 $_msg_dec = $_msg_dec | 0;
 $_msg_enc = $_msg_enc | 0;
 var $$lcssa = 0, $$lcssa28 = 0, $0 = 0, $1 = 0, $10 = 0, $127 = 0, $129 = 0, $13 = 0, $130 = 0, $3 = 0, $4 = 0, $49 = 0, $6 = 0, $71 = 0, $72 = 0, $77 = 0, $79 = 0, $8 = 0, $81 = 0, $83 = 0, $85 = 0, $86 = 0, $88 = 0, $91 = 0, $i$0$lcssa = 0, $i$01$i = 0, $i$01$i$i = 0, $i$08 = 0, $i$1 = 0, $j$0$lcssa = 0, $j$07 = 0, $j$1 = 0, $m = 0, $parity$02$i = 0, $parity$02$i$i = 0, $v = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $m = sp;
 $v = sp + 4 | 0;
 $0 = $_dec_msg_len & 3;
 $1 = $_dec_msg_len - $0 | 0;
 if (($0 | 0) == ($_dec_msg_len | 0)) {
  $i$0$lcssa = 0;
  $j$0$lcssa = 0;
 } else {
  $i$08 = 0;
  $j$07 = 0;
  while (1) {
   $3 = $_msg_dec + $i$08 | 0;
   $4 = HEAP8[$3 >> 0] | 0;
   $6 = HEAP8[$3 + 1 >> 0] | 0;
   $8 = HEAP8[$3 + 2 >> 0] | 0;
   $10 = HEAP8[$3 + 3 >> 0] | 0;
   $i$01$i = 0;
   $parity$02$i = 0;
   while (1) {
    $13 = $i$01$i << 2;
    $49 = (HEAPU8[(HEAP8[($13 | 1) + (gb + 19131) >> 0] & $6 & 255) + (gb + 39229) >> 0] | 0) + (HEAPU8[(HEAP8[gb + 19131 + $13 >> 0] & $4 & 255) + (gb + 39229) >> 0] | 0) + (HEAPU8[(HEAP8[($13 | 2) + (gb + 19131) >> 0] & $8 & 255) + (gb + 39229) >> 0] | 0) + (HEAPU8[(HEAP8[($13 | 3) + (gb + 19131) >> 0] & $10 & 255) + (gb + 39229) >> 0] | 0) & 1 | $parity$02$i << 1 & 510;
    $i$01$i = $i$01$i + 1 | 0;
    if (($i$01$i | 0) == 7) {
     $$lcssa28 = $49;
     break;
    } else $parity$02$i = $49;
   }
   HEAP8[$_msg_enc + $j$07 >> 0] = $$lcssa28;
   HEAP8[$_msg_enc + ($j$07 + 1) >> 0] = HEAP8[$3 >> 0] | 0;
   HEAP8[$_msg_enc + ($j$07 + 2) >> 0] = HEAP8[$_msg_dec + ($i$08 | 1) >> 0] | 0;
   HEAP8[$_msg_enc + ($j$07 + 3) >> 0] = HEAP8[$_msg_dec + ($i$08 | 2) >> 0] | 0;
   HEAP8[$_msg_enc + ($j$07 + 4) >> 0] = HEAP8[$_msg_dec + ($i$08 | 3) >> 0] | 0;
   $71 = $j$07 + 5 | 0;
   $72 = $i$08 + 4 | 0;
   if ($72 >>> 0 < $1 >>> 0) {
    $i$08 = $72;
    $j$07 = $71;
   } else {
    $i$0$lcssa = $72;
    $j$0$lcssa = $71;
    break;
   }
  }
 }
 if (!$0) {
  $i$1 = $i$0$lcssa;
  $j$1 = $j$0$lcssa;
 } else {
  HEAP32[$m >> 2] = 0;
  _memcpy($m | 0, $_msg_dec + $i$0$lcssa | 0, $_dec_msg_len & 3 | 0) | 0;
  $77 = HEAP32[$m >> 2] | 0;
  $79 = $77 & 255;
  $81 = ($77 & 65535) >>> 8 & 255;
  $83 = $77 >>> 16 & 255;
  $85 = $77 >>> 24 & 255;
  $86 = $77 & 255;
  $88 = (HEAPU16[$m >> 1] | 0) >>> 8 & 255;
  $i$01$i$i = 0;
  $parity$02$i$i = 0;
  while (1) {
   $91 = $i$01$i$i << 2;
   $127 = (HEAPU8[(HEAP8[($91 | 1) + (gb + 19131) >> 0] & $81 & 255) + (gb + 39229) >> 0] | 0) + (HEAPU8[(HEAP8[gb + 19131 + $91 >> 0] & $79 & 255) + (gb + 39229) >> 0] | 0) + (HEAPU8[(HEAP8[($91 | 2) + (gb + 19131) >> 0] & $83 & 255) + (gb + 39229) >> 0] | 0) + (HEAPU8[(HEAP8[($91 | 3) + (gb + 19131) >> 0] & $85 & 255) + (gb + 39229) >> 0] | 0) & 1 | $parity$02$i$i << 1 & 510;
   $i$01$i$i = $i$01$i$i + 1 | 0;
   if (($i$01$i$i | 0) == 7) {
    $$lcssa = $127;
    break;
   } else $parity$02$i$i = $127;
  }
  $129 = $$lcssa & 255;
  HEAP8[$v >> 0] = $129;
  $130 = $v + 1 | 0;
  HEAP8[$130 >> 0] = $86;
  HEAP8[$v + 2 >> 0] = $88;
  HEAP8[$v + 3 >> 0] = $83;
  HEAP8[$v + 4 >> 0] = $85;
  HEAP8[$_msg_enc + $j$0$lcssa >> 0] = $129;
  _memcpy($_msg_enc + ($j$0$lcssa + 1) | 0, $130 | 0, $_dec_msg_len & 3 | 0) | 0;
  $i$1 = $i$0$lcssa | $0;
  $j$1 = $0 + 1 + $j$0$lcssa | 0;
 }
 if (($j$1 | 0) != (_fec_get_enc_msg_length(9, $_dec_msg_len) | 0)) ___assert_fail(gb + 19198 | 0, gb + 19262 | 0, 296, gb + 19291 | 0);
 if (($i$1 | 0) == ($_dec_msg_len | 0)) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(gb + 19586 | 0, gb + 19262 | 0, 297, gb + 19291 | 0);
}

function _liquid_cacosf($agg$result, $_z) {
 $agg$result = $agg$result | 0;
 $_z = $_z | 0;
 var $$byval_copy5 = 0, $0 = 0, $1 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $2 = 0, $21 = 0.0, $22 = 0.0, $24 = 0.0, $25 = 0.0, $28 = 0.0, $3 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $42 = 0.0, $44 = 0.0, $46 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $57 = 0.0, $58 = 0.0, $6 = 0.0, $62 = 0.0, $63 = 0.0, $65 = 0.0, $66 = 0.0, $69 = 0.0, $72 = 0.0, $73 = 0, $74 = 0.0, $79 = 0.0, $80 = 0.0, $83 = 0.0, $85 = 0.0, $87 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy5 = sp + 48 | 0;
 $0 = sp + 8 | 0;
 $1 = sp;
 $2 = sp + 40 | 0;
 $3 = sp + 32 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 16 | 0;
 $6 = +HEAPF32[$_z >> 2];
 $9 = +HEAPF32[$_z + 4 >> 2];
 $13 = $6 * $9;
 $14 = $6 * $6 - $9 * $9;
 $15 = $13 + $13;
 $or$cond = ($14 != $14 | 0.0 != 0.0) & ($15 != $15 | 0.0 != 0.0);
 if ($6 > 0.0 ^ $9 > 0.0) {
  if ($or$cond) {
   ___mulsc3($4, $6, $9, $6, $9);
   $63 = +HEAPF32[$4 >> 2];
   $65 = +HEAPF32[$4 + 4 >> 2];
  } else {
   $63 = $14;
   $65 = $15;
  }
  $62 = $63 + -1.0;
  HEAPF32[$0 >> 2] = $62;
  HEAPF32[$0 + 4 >> 2] = $65;
  HEAP32[$$byval_copy5 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$$byval_copy5 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
  $66 = +_cabsf($$byval_copy5);
  $69 = +Math_sqrt(+(($62 + $66) * .5));
  $72 = +Math_sqrt(+(($66 - $62) * .5));
  $73 = $65 > 0.0;
  $74 = $72 * 0.0;
  $79 = $6 - ($69 + ($73 ? $74 : -$74));
  $80 = $9 - ($73 ? $72 : -$72);
  HEAPF32[$0 >> 2] = $79;
  HEAPF32[$0 + 4 >> 2] = $80;
  HEAP32[$$byval_copy5 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$$byval_copy5 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
  $83 = +Math_log(+(+_cabsf($$byval_copy5)));
  HEAPF32[$1 >> 2] = $79;
  HEAPF32[$1 + 4 >> 2] = $80;
  HEAP32[$$byval_copy5 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$$byval_copy5 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  $85 = +_cargf($$byval_copy5);
  $87 = $83 + $85 * 0.0;
  $90 = $85 - $87 * 0.0;
  $91 = $85 * -0.0 - $87;
  if (($91 != $91 | 0.0 != 0.0) & ($90 != $90 | 0.0 != 0.0)) {
   ___mulsc3($5, -0.0, -1.0, $87, $85);
   $98 = +HEAPF32[$5 >> 2];
   $99 = +HEAPF32[$5 + 4 >> 2];
  } else {
   $98 = $90;
   $99 = $91;
  }
  HEAPF32[$agg$result >> 2] = $98;
  HEAPF32[$agg$result + 4 >> 2] = $99;
  STACKTOP = sp;
  return;
 } else {
  if ($or$cond) {
   ___mulsc3($2, $6, $9, $6, $9);
   $22 = +HEAPF32[$2 >> 2];
   $24 = +HEAPF32[$2 + 4 >> 2];
  } else {
   $22 = $14;
   $24 = $15;
  }
  $21 = $22 + -1.0;
  HEAPF32[$0 >> 2] = $21;
  HEAPF32[$0 + 4 >> 2] = $24;
  HEAP32[$$byval_copy5 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$$byval_copy5 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
  $25 = +_cabsf($$byval_copy5);
  $28 = +Math_sqrt(+(($21 + $25) * .5));
  $31 = +Math_sqrt(+(($25 - $21) * .5));
  $32 = $24 > 0.0;
  $33 = $31 * 0.0;
  $38 = $6 + ($28 + ($32 ? $33 : -$33));
  $39 = $9 + ($32 ? $31 : -$31);
  HEAPF32[$0 >> 2] = $38;
  HEAPF32[$0 + 4 >> 2] = $39;
  HEAP32[$$byval_copy5 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$$byval_copy5 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
  $42 = +Math_log(+(+_cabsf($$byval_copy5)));
  HEAPF32[$1 >> 2] = $38;
  HEAPF32[$1 + 4 >> 2] = $39;
  HEAP32[$$byval_copy5 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$$byval_copy5 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  $44 = +_cargf($$byval_copy5);
  $46 = $42 + $44 * 0.0;
  $49 = $44 - $46 * 0.0;
  $50 = $44 * -0.0 - $46;
  if (($50 != $50 | 0.0 != 0.0) & ($49 != $49 | 0.0 != 0.0)) {
   ___mulsc3($3, -0.0, -1.0, $46, $44);
   $57 = +HEAPF32[$3 >> 2];
   $58 = +HEAPF32[$3 + 4 >> 2];
  } else {
   $57 = $49;
   $58 = $50;
  }
  HEAPF32[$agg$result >> 2] = $57;
  HEAPF32[$agg$result + 4 >> 2] = $58;
  STACKTOP = sp;
  return;
 }
}

function _liquid_vectorcf_mulscalar($_x, $_n, $_v, $_y) {
 $_x = $_x | 0;
 $_n = $_n | 0;
 $_v = $_v | 0;
 $_y = $_y | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $105 = 0.0, $106 = 0.0, $11 = 0, $113 = 0.0, $114 = 0.0, $12 = 0, $13 = 0, $14 = 0, $16 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $21 = 0.0, $23 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $4 = 0, $40 = 0.0, $42 = 0.0, $47 = 0.0, $48 = 0.0, $5 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $59 = 0.0, $61 = 0.0, $66 = 0.0, $67 = 0.0, $7 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $78 = 0.0, $80 = 0.0, $85 = 0.0, $86 = 0.0, $9 = 0.0, $93 = 0.0, $94 = 0.0, $98 = 0.0, $i$0$lcssa = 0, $i$06 = 0, $i$15 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp;
 $5 = $_n & -4;
 if (!$5) $i$0$lcssa = 0; else {
  $7 = +HEAPF32[$_v >> 2];
  $9 = +HEAPF32[$_v + 4 >> 2];
  $10 = $0 + 4 | 0;
  $11 = $1 + 4 | 0;
  $12 = $2 + 4 | 0;
  $13 = $3 + 4 | 0;
  $14 = $_n & -4;
  $i$06 = 0;
  do {
   $21 = +HEAPF32[$_x + ($i$06 << 3) >> 2];
   $23 = +HEAPF32[$_x + ($i$06 << 3) + 4 >> 2];
   $28 = $21 * $7 - $23 * $9;
   $29 = $23 * $7 + $21 * $9;
   if (($28 != $28 | 0.0 != 0.0) & ($29 != $29 | 0.0 != 0.0)) {
    ___mulsc3($0, $21, $23, $7, $9);
    $36 = +HEAPF32[$0 >> 2];
    $37 = +HEAPF32[$10 >> 2];
   } else {
    $36 = $28;
    $37 = $29;
   }
   HEAPF32[$_y + ($i$06 << 3) >> 2] = $36;
   HEAPF32[$_y + ($i$06 << 3) + 4 >> 2] = $37;
   $38 = $i$06 | 1;
   $40 = +HEAPF32[$_x + ($38 << 3) >> 2];
   $42 = +HEAPF32[$_x + ($38 << 3) + 4 >> 2];
   $47 = $40 * $7 - $42 * $9;
   $48 = $42 * $7 + $40 * $9;
   if (($47 != $47 | 0.0 != 0.0) & ($48 != $48 | 0.0 != 0.0)) {
    ___mulsc3($1, $40, $42, $7, $9);
    $55 = +HEAPF32[$1 >> 2];
    $56 = +HEAPF32[$11 >> 2];
   } else {
    $55 = $47;
    $56 = $48;
   }
   HEAPF32[$_y + ($38 << 3) >> 2] = $55;
   HEAPF32[$_y + ($38 << 3) + 4 >> 2] = $56;
   $57 = $i$06 | 2;
   $59 = +HEAPF32[$_x + ($57 << 3) >> 2];
   $61 = +HEAPF32[$_x + ($57 << 3) + 4 >> 2];
   $66 = $59 * $7 - $61 * $9;
   $67 = $61 * $7 + $59 * $9;
   if (($66 != $66 | 0.0 != 0.0) & ($67 != $67 | 0.0 != 0.0)) {
    ___mulsc3($2, $59, $61, $7, $9);
    $74 = +HEAPF32[$2 >> 2];
    $75 = +HEAPF32[$12 >> 2];
   } else {
    $74 = $66;
    $75 = $67;
   }
   HEAPF32[$_y + ($57 << 3) >> 2] = $74;
   HEAPF32[$_y + ($57 << 3) + 4 >> 2] = $75;
   $76 = $i$06 | 3;
   $78 = +HEAPF32[$_x + ($76 << 3) >> 2];
   $80 = +HEAPF32[$_x + ($76 << 3) + 4 >> 2];
   $85 = $78 * $7 - $80 * $9;
   $86 = $80 * $7 + $78 * $9;
   if (($85 != $85 | 0.0 != 0.0) & ($86 != $86 | 0.0 != 0.0)) {
    ___mulsc3($3, $78, $80, $7, $9);
    $93 = +HEAPF32[$3 >> 2];
    $94 = +HEAPF32[$13 >> 2];
   } else {
    $93 = $85;
    $94 = $86;
   }
   HEAPF32[$_y + ($76 << 3) >> 2] = $93;
   HEAPF32[$_y + ($76 << 3) + 4 >> 2] = $94;
   $i$06 = $i$06 + 4 | 0;
  } while ($i$06 >>> 0 < $5 >>> 0);
  $i$0$lcssa = $14;
 }
 if ($i$0$lcssa >>> 0 >= $_n >>> 0) {
  STACKTOP = sp;
  return;
 }
 $16 = +HEAPF32[$_v >> 2];
 $18 = +HEAPF32[$_v + 4 >> 2];
 $19 = $4 + 4 | 0;
 $i$15 = $i$0$lcssa;
 do {
  $98 = +HEAPF32[$_x + ($i$15 << 3) >> 2];
  $100 = +HEAPF32[$_x + ($i$15 << 3) + 4 >> 2];
  $105 = $98 * $16 - $100 * $18;
  $106 = $100 * $16 + $98 * $18;
  if (($105 != $105 | 0.0 != 0.0) & ($106 != $106 | 0.0 != 0.0)) {
   ___mulsc3($4, $98, $100, $16, $18);
   $113 = +HEAPF32[$4 >> 2];
   $114 = +HEAPF32[$19 >> 2];
  } else {
   $113 = $105;
   $114 = $106;
  }
  HEAPF32[$_y + ($i$15 << 3) >> 2] = $113;
  HEAPF32[$_y + ($i$15 << 3) + 4 >> 2] = $114;
  $i$15 = $i$15 + 1 | 0;
 } while (($i$15 | 0) != ($_n | 0));
 STACKTOP = sp;
 return;
}

function _quiet_decoder_flush($d) {
 $d = $d | 0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$pre11 = 0, $$pre9 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $22 = 0, $23 = 0, $26 = 0, $28 = 0, $32 = 0, $33 = 0, $35 = 0, $39 = 0, $41 = 0, $43 = 0, $5 = 0, $52 = 0, $53 = 0, $57 = 0, $58 = 0, $6 = 0, $62 = 0, $66 = 0, $72 = 0, $78 = 0, $79 = 0, $9 = 0, $i1$02 = 0, $leftover$0 = 0, $resamp_write = 0, $symbol_len$0 = 0, $symbol_len$1 = 0, $symbol_len$21 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $resamp_write = sp;
 if (!$d) {
  STACKTOP = sp;
  return;
 }
 $2 = HEAP32[$d + 88 >> 2] | 0;
 if (!$2) {
  $$pre$phiZ2D = $d + 96 | 0;
  $symbol_len$0 = 0;
 } else {
  $5 = HEAP32[$d + 40 >> 2] | 0;
  $6 = _calloc($5, 4) | 0;
  $9 = $d + 68 | 0;
  $13 = Math_imul(HEAP32[(HEAP32[$9 >> 2] | 0) + 4 >> 2] | 0, HEAP32[$d + 76 >> 2] | 0) | 0;
  $14 = $d + 92 | 0;
  $16 = $d + 96 | 0;
  $17 = HEAP32[$16 >> 2] | 0;
  _resamp_rrrf_execute_output_block($2, $6, $5, sp + 4 | 0, (HEAP32[$14 >> 2] | 0) + ($17 << 2) | 0, $13 - $17 | 0, $resamp_write) | 0;
  $22 = (HEAP32[$resamp_write >> 2] | 0) + (HEAP32[$16 >> 2] | 0) | 0;
  HEAP32[$resamp_write >> 2] = $22;
  $23 = HEAP32[$9 >> 2] | 0;
  $26 = ($22 >>> 0) % ((HEAP32[$23 + 4 >> 2] | 0) >>> 0) | 0;
  if (!$26) {
   $32 = $22;
   $leftover$0 = 0;
  } else {
   $28 = $22 - $26 | 0;
   HEAP32[$resamp_write >> 2] = $28;
   $32 = $28;
   $leftover$0 = $26;
  }
  $33 = _demodulator_recv($23, HEAP32[$14 >> 2] | 0, $32, HEAP32[$d + 72 >> 2] | 0) | 0;
  if ($leftover$0 | 0) {
   $35 = HEAP32[$14 >> 2] | 0;
   _memmove($35 | 0, $35 + (HEAP32[$resamp_write >> 2] << 2) | 0, $leftover$0 << 2 | 0) | 0;
  }
  HEAP32[$16 >> 2] = $leftover$0;
  _free($6);
  $$pre$phiZ2D = $16;
  $symbol_len$0 = $33;
 }
 $39 = HEAP32[$$pre$phiZ2D >> 2] | 0;
 $$pre9 = $d + 68 | 0;
 if (!$39) $symbol_len$1 = $symbol_len$0; else {
  $41 = HEAP32[$$pre9 >> 2] | 0;
  $43 = HEAP32[$41 + 4 >> 2] | 0;
  $$pre11 = $d + 92 | 0;
  if (($43 | 0) == ($39 | 0)) {
   $52 = $41;
   $53 = $39;
  } else {
   _memset(HEAP32[$$pre11 >> 2] | 0, 0, $43 - $39 << 2 | 0) | 0;
   $$pre = HEAP32[$$pre9 >> 2] | 0;
   $52 = $$pre;
   $53 = HEAP32[$$pre + 4 >> 2] | 0;
  }
  $symbol_len$1 = (_demodulator_recv($52, HEAP32[$$pre11 >> 2] | 0, $53, (HEAP32[$d + 72 >> 2] | 0) + ($symbol_len$0 << 3) | 0) | 0) + $symbol_len$0 | 0;
 }
 $57 = _demodulator_flush_symbol_len(HEAP32[$$pre9 >> 2] | 0) | 0;
 $58 = $d + 76 | 0;
 if ($57 >>> 0 >= (HEAP32[$58 >> 2] | 0) >>> 0) ___assert_fail(gb + 10410 | 0, gb + 10336 | 0, 365, gb + 10468 | 0);
 $62 = $d + 72 | 0;
 $66 = (_demodulator_flush(HEAP32[$$pre9 >> 2] | 0, (HEAP32[$62 >> 2] | 0) + ($symbol_len$1 << 3) | 0) | 0) + $symbol_len$1 | 0;
 switch (HEAP32[$d + 56 >> 2] | 0) {
 case 0:
  {
   _ofdmflexframesync_execute(HEAP32[$d + 64 >> 2] | 0, HEAP32[$62 >> 2] | 0, $66);
   STACKTOP = sp;
   return;
  }
 case 1:
  {
   $72 = $66 + 60 | 0;
   if ($72 >>> 0 < (HEAP32[$58 >> 2] | 0) >>> 0) {
    $i1$02 = 0;
    $symbol_len$21 = $66;
   } else ___assert_fail(gb + 10488 | 0, gb + 10336 | 0, 379, gb + 10468 | 0);
   while (1) {
    $78 = $i1$02 + $symbol_len$21 | 0;
    $79 = HEAP32[$62 >> 2] | 0;
    HEAPF32[$79 + ($78 << 3) >> 2] = 0.0;
    HEAPF32[$79 + ($78 << 3) + 4 >> 2] = 0.0;
    $i1$02 = $i1$02 + 1 | 0;
    if (($i1$02 | 0) == 60) break; else $symbol_len$21 = $symbol_len$21 + 1 | 0;
   }
   _flexframesync_execute(HEAP32[$d + 64 >> 2] | 0, HEAP32[$62 >> 2] | 0, $72);
   STACKTOP = sp;
   return;
  }
 case 2:
  {
   _gmskframesync_execute(HEAP32[$d + 64 >> 2] | 0, HEAP32[$62 >> 2] | 0, $66);
   STACKTOP = sp;
   return;
  }
 default:
  {
   STACKTOP = sp;
   return;
  }
 }
}

function _fft_execute_mixed_radix($_q) {
 $_q = $_q | 0;
 var $0 = 0, $10 = 0, $12 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0.0, $25 = 0.0, $26 = 0, $28 = 0.0, $30 = 0.0, $35 = 0.0, $36 = 0.0, $4 = 0, $42 = 0, $45 = 0.0, $46 = 0.0, $49 = 0, $53 = 0, $57 = 0, $6 = 0, $61 = 0, $62 = 0, $67 = 0, $69 = 0, $70 = 0, $74 = 0, $75 = 0, $79 = 0, $8 = 0, $83 = 0, $86 = 0, $90 = 0, $i$018 = 0, $i$018$us = 0, $i$18 = 0, $i$18$us = 0, $k$011$us = 0, $k$114$us = 0, $k$23$us = 0, $k$34$us = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 $2 = HEAP32[$_q + 40 >> 2] | 0;
 $4 = HEAP32[$_q + 44 >> 2] | 0;
 $6 = HEAP32[$_q + 52 >> 2] | 0;
 $8 = HEAP32[$_q + 56 >> 2] | 0;
 $10 = HEAP32[$_q + 48 >> 2] | 0;
 $12 = HEAP32[$_q + 60 >> 2] | 0;
 _memmove($10 | 0, HEAP32[$_q + 4 >> 2] | 0, HEAP32[$_q >> 2] << 3 | 0) | 0;
 $17 = ($4 | 0) == 0;
 L1 : do if (!$17) {
  $19 = $_q + 64 | 0;
  $20 = $0 + 4 | 0;
  if (!$2) {
   $i$018 = 0;
   while (1) {
    $86 = HEAP32[$19 >> 2] | 0;
    mftCall_vi(HEAP32[$86 + 28 >> 2] | 0, $86 | 0);
    $i$018 = $i$018 + 1 | 0;
    if (($i$018 | 0) == ($4 | 0)) break L1;
   }
  } else $i$018$us = 0;
  do {
   $k$011$us = 0;
   do {
    $49 = (Math_imul($k$011$us, $4) | 0) + $i$018$us | 0;
    $53 = HEAP32[$10 + ($49 << 3) + 4 >> 2] | 0;
    HEAP32[$6 + ($k$011$us << 3) >> 2] = HEAP32[$10 + ($49 << 3) >> 2];
    HEAP32[$6 + ($k$011$us << 3) + 4 >> 2] = $53;
    $k$011$us = $k$011$us + 1 | 0;
   } while (($k$011$us | 0) != ($2 | 0));
   $57 = HEAP32[$19 >> 2] | 0;
   mftCall_vi(HEAP32[$57 + 28 >> 2] | 0, $57 | 0);
   $k$114$us = 0;
   do {
    $23 = +HEAPF32[$8 + ($k$114$us << 3) >> 2];
    $25 = +HEAPF32[$8 + ($k$114$us << 3) + 4 >> 2];
    $26 = Math_imul($k$114$us, $i$018$us) | 0;
    $28 = +HEAPF32[$12 + ($26 << 3) >> 2];
    $30 = +HEAPF32[$12 + ($26 << 3) + 4 >> 2];
    $35 = $23 * $28 - $25 * $30;
    $36 = $25 * $28 + $23 * $30;
    if (($35 != $35 | 0.0 != 0.0) & ($36 != $36 | 0.0 != 0.0)) {
     ___mulsc3($0, $23, $25, $28, $30);
     $45 = +HEAPF32[$0 >> 2];
     $46 = +HEAPF32[$20 >> 2];
    } else {
     $45 = $35;
     $46 = $36;
    }
    $42 = (Math_imul($k$114$us, $4) | 0) + $i$018$us | 0;
    HEAPF32[$10 + ($42 << 3) >> 2] = $45;
    HEAPF32[$10 + ($42 << 3) + 4 >> 2] = $46;
    $k$114$us = $k$114$us + 1 | 0;
   } while (($k$114$us | 0) != ($2 | 0));
   $i$018$us = $i$018$us + 1 | 0;
  } while (($i$018$us | 0) != ($4 | 0));
 } while (0);
 if (!$2) {
  STACKTOP = sp;
  return;
 }
 $61 = $_q + 68 | 0;
 $62 = $_q + 8 | 0;
 if ($17) {
  $i$18 = 0;
  do {
   $90 = HEAP32[$61 >> 2] | 0;
   mftCall_vi(HEAP32[$90 + 28 >> 2] | 0, $90 | 0);
   $i$18 = $i$18 + 1 | 0;
  } while (($i$18 | 0) != ($2 | 0));
  STACKTOP = sp;
  return;
 } else $i$18$us = 0;
 do {
  $75 = Math_imul($i$18$us, $4) | 0;
  $k$23$us = 0;
  do {
   $74 = $k$23$us + $75 | 0;
   $79 = HEAP32[$10 + ($74 << 3) + 4 >> 2] | 0;
   HEAP32[$6 + ($k$23$us << 3) >> 2] = HEAP32[$10 + ($74 << 3) >> 2];
   HEAP32[$6 + ($k$23$us << 3) + 4 >> 2] = $79;
   $k$23$us = $k$23$us + 1 | 0;
  } while (($k$23$us | 0) != ($4 | 0));
  $83 = HEAP32[$61 >> 2] | 0;
  mftCall_vi(HEAP32[$83 + 28 >> 2] | 0, $83 | 0);
  $k$34$us = 0;
  do {
   $67 = HEAP32[$8 + ($k$34$us << 3) + 4 >> 2] | 0;
   $69 = (Math_imul($k$34$us, $2) | 0) + $i$18$us | 0;
   $70 = HEAP32[$62 >> 2] | 0;
   HEAP32[$70 + ($69 << 3) >> 2] = HEAP32[$8 + ($k$34$us << 3) >> 2];
   HEAP32[$70 + ($69 << 3) + 4 >> 2] = $67;
   $k$34$us = $k$34$us + 1 | 0;
  } while (($k$34$us | 0) != ($4 | 0));
  $i$18$us = $i$18$us + 1 | 0;
 } while (($i$18$us | 0) != ($2 | 0));
 STACKTOP = sp;
 return;
}

function _fec_golay2412_encode($_q, $_dec_msg_len, $_msg_dec, $_msg_enc) {
 $_q = $_q | 0;
 $_dec_msg_len = $_dec_msg_len | 0;
 $_msg_dec = $_msg_dec | 0;
 $_msg_enc = $_msg_enc | 0;
 var $$lcssa = 0, $$lcssa37 = 0, $$lcssa38 = 0, $0 = 0, $1 = 0, $13 = 0, $16 = 0, $19 = 0, $21 = 0, $25 = 0, $37 = 0, $4 = 0, $40 = 0, $44 = 0, $56 = 0, $6 = 0, $79 = 0, $84 = 0, $93 = 0, $i$01$i$i = 0, $i$01$i$i2 = 0, $i$01$i$i7 = 0, $i$018 = 0, $i$1$lcssa = 0, $i$115 = 0, $j$0$lcssa = 0, $j$017 = 0, $j$1$lcssa = 0, $j$114 = 0, $x$02$i$i = 0, $x$02$i$i$lcssa = 0, $x$02$i$i1 = 0, $x$02$i$i1$lcssa = 0, $x$02$i$i6 = 0, $x$02$i$i6$lcssa = 0;
 $0 = ($_dec_msg_len >>> 0) % 3 | 0;
 $1 = $_dec_msg_len - $0 | 0;
 if (($0 | 0) == ($_dec_msg_len | 0)) $j$0$lcssa = 0; else {
  $4 = HEAPU8[gb + 39229 >> 0] | 0;
  $i$018 = 0;
  $j$017 = 0;
  while (1) {
   $13 = HEAPU8[$_msg_dec + ($i$018 + 1) >> 0] | 0;
   $16 = HEAP8[$_msg_dec + ($i$018 + 2) >> 0] | 0;
   $19 = $13 >>> 4 | (HEAPU8[$_msg_dec + $i$018 >> 0] | 0) << 4;
   $21 = $13 << 8 & 3840;
   $i$01$i$i = 0;
   $x$02$i$i = 0;
   while (1) {
    $25 = HEAP32[gb + 380 + ($i$01$i$i << 2) >> 2] & $19;
    $37 = (HEAPU8[($25 >>> 8) + (gb + 39229) >> 0] | 0) + (HEAPU8[($25 & 255) + (gb + 39229) >> 0] | 0) + $4 & 1 | $x$02$i$i << 1;
    $i$01$i$i = $i$01$i$i + 1 | 0;
    if (($i$01$i$i | 0) == 24) {
     $$lcssa37 = $37;
     $x$02$i$i$lcssa = $x$02$i$i;
     break;
    } else $x$02$i$i = $37;
   }
   $40 = $21 | $16 & 255;
   $i$01$i$i2 = 0;
   $x$02$i$i1 = 0;
   while (1) {
    $44 = HEAP32[gb + 380 + ($i$01$i$i2 << 2) >> 2] & $40;
    $56 = (HEAPU8[($44 >>> 8) + (gb + 39229) >> 0] | 0) + (HEAPU8[($44 & 255) + (gb + 39229) >> 0] | 0) + $4 & 1 | $x$02$i$i1 << 1;
    $i$01$i$i2 = $i$01$i$i2 + 1 | 0;
    if (($i$01$i$i2 | 0) == 24) {
     $$lcssa38 = $56;
     $x$02$i$i1$lcssa = $x$02$i$i1;
     break;
    } else $x$02$i$i1 = $56;
   }
   HEAP8[$_msg_enc + $j$017 >> 0] = $x$02$i$i$lcssa >>> 15;
   HEAP8[$_msg_enc + ($j$017 | 1) >> 0] = $x$02$i$i$lcssa >>> 7;
   HEAP8[$_msg_enc + ($j$017 + 2) >> 0] = $$lcssa37;
   HEAP8[$_msg_enc + ($j$017 + 3) >> 0] = $x$02$i$i1$lcssa >>> 15;
   HEAP8[$_msg_enc + ($j$017 + 4) >> 0] = $x$02$i$i1$lcssa >>> 7;
   HEAP8[$_msg_enc + ($j$017 + 5) >> 0] = $$lcssa38;
   $79 = $j$017 + 6 | 0;
   $i$018 = $i$018 + 3 | 0;
   if ($i$018 >>> 0 >= $1 >>> 0) {
    $j$0$lcssa = $79;
    break;
   } else $j$017 = $79;
  }
 }
 if ($1 >>> 0 < $_dec_msg_len >>> 0) {
  $6 = $0 * 3 | 0;
  $i$115 = $1;
  $j$114 = $j$0$lcssa;
  while (1) {
   $84 = HEAPU8[$_msg_dec + $i$115 >> 0] | 0;
   $i$01$i$i7 = 0;
   $x$02$i$i6 = 0;
   while (1) {
    $93 = (HEAPU8[(HEAP32[gb + 380 + ($i$01$i$i7 << 2) >> 2] & $84) + (gb + 39229) >> 0] | 0) & 1 | $x$02$i$i6 << 1;
    $i$01$i$i7 = $i$01$i$i7 + 1 | 0;
    if (($i$01$i$i7 | 0) == 24) {
     $$lcssa = $93;
     $x$02$i$i6$lcssa = $x$02$i$i6;
     break;
    } else $x$02$i$i6 = $93;
   }
   HEAP8[$_msg_enc + $j$114 >> 0] = $x$02$i$i6$lcssa >>> 15;
   HEAP8[$_msg_enc + ($j$114 + 1) >> 0] = $x$02$i$i6$lcssa >>> 7;
   HEAP8[$_msg_enc + ($j$114 + 2) >> 0] = $$lcssa;
   $i$115 = $i$115 + 1 | 0;
   if (($i$115 | 0) == ($_dec_msg_len | 0)) break; else $j$114 = $j$114 + 3 | 0;
  }
  $i$1$lcssa = $_dec_msg_len;
  $j$1$lcssa = $j$0$lcssa + $6 | 0;
 } else {
  $i$1$lcssa = $1;
  $j$1$lcssa = $j$0$lcssa;
 }
 if (($j$1$lcssa | 0) != (_fec_get_enc_msg_length(7, $_dec_msg_len) | 0)) ___assert_fail(gb + 13418 | 0, gb + 13481 | 0, 326, gb + 13509 | 0);
 if (($i$1$lcssa | 0) == ($_dec_msg_len | 0)) return; else ___assert_fail(gb + 19586 | 0, gb + 13481 | 0, 327, gb + 13509 | 0);
}

function _ofdmflexframesync_decode_header($_q) {
 $_q = $_q | 0;
 var $$pr = 0, $$pr3 = 0, $$pr4 = 0, $$pre$phiZ2D = 0, $16 = 0, $18 = 0, $19 = 0, $22 = 0, $23 = 0, $30 = 0, $38 = 0, $41 = 0, $42 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $56 = 0, $64 = 0, $69 = 0, $7 = 0, $70 = 0, $73 = 0, $77 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $85 = 0, $9 = 0, $97 = 0, $99 = 0, $check$0 = 0, $d = 0, $fec0$0 = 0, $num_written = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $num_written = sp + 8 | 0;
 $d = sp;
 $5 = $_q + 48 | 0;
 $7 = $_q + 64 | 0;
 _liquid_repack_bytes(HEAP32[$_q + 52 >> 2] | 0, HEAP32[gb + 580 + 764 >> 2] | 0, HEAP32[$_q + 68 >> 2] | 0, HEAP32[$5 >> 2] | 0, 8, HEAP32[$7 >> 2] | 0, $num_written);
 $9 = HEAP32[$num_written >> 2] | 0;
 if (($9 | 0) != (HEAP32[$7 >> 2] | 0)) ___assert_fail(gb + 29233 | 0, gb + 29265 | 0, 492, gb + 29301 | 0);
 _unscramble_data(HEAP32[$5 >> 2] | 0, $9);
 $16 = $_q + 44 | 0;
 $18 = _packetizer_decode(HEAP32[$_q + 40 >> 2] | 0, HEAP32[$5 >> 2] | 0, HEAP32[$16 >> 2] | 0) | 0;
 $19 = $_q + 72 | 0;
 HEAP32[$19 >> 2] = $18;
 if (!$18) {
  STACKTOP = sp;
  return;
 }
 $22 = HEAP32[$_q + 56 >> 2] | 0;
 $23 = HEAP32[$16 >> 2] | 0;
 if ((HEAP8[$23 + $22 >> 0] | 0) == 104) {
  $$pr4 = $18;
  $30 = $23;
 } else {
  _fwrite(gb + 29333 | 0, 68, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  HEAP32[$19 >> 2] = 0;
  $$pr4 = 0;
  $30 = HEAP32[$16 >> 2] | 0;
 }
 $38 = HEAPU8[$30 + ($22 + 1) >> 0] << 8 | HEAPU8[$30 + ($22 + 2) >> 0];
 $41 = HEAP8[$30 + ($22 + 3) >> 0] | 0;
 $42 = $41 & 255;
 if (($41 + -1 & 255) > 59) {
  _fwrite(gb + 29402 | 0, 70, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  HEAP32[$19 >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 $49 = HEAPU8[$30 + ($22 + 4) >> 0] | 0;
 $50 = $49 >>> 5;
 $51 = $49 & 31;
 $56 = HEAPU8[$30 + ($22 + 5) >> 0] & 31;
 if (($50 | 0) == 7) {
  _fwrite(gb + 29473 | 0, 74, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  HEAP32[$19 >> 2] = 0;
  $$pr3 = 0;
  $check$0 = 0;
 } else {
  $$pr3 = $$pr4;
  $check$0 = $50;
 }
 if ($51 >>> 0 > 27) {
  _fwrite(gb + 29548 | 0, 82, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  HEAP32[$19 >> 2] = 0;
  $$pr = 0;
  $fec0$0 = 0;
 } else {
  $$pr = $$pr3;
  $fec0$0 = $51;
 }
 if ($56 >>> 0 > 27) {
  _fwrite(gb + 29631 | 0, 82, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  HEAP32[$19 >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 if (!$$pr) {
  STACKTOP = sp;
  return;
 }
 $64 = $_q + 76 | 0;
 if (($42 | 0) == (HEAP32[$64 >> 2] | 0)) $$pre$phiZ2D = $_q + 80 | 0; else {
  HEAP32[$64 >> 2] = $42;
  $69 = $_q + 80 | 0;
  HEAP32[$69 >> 2] = HEAP32[gb + 580 + ($42 << 4) + 12 >> 2];
  $70 = $_q + 104 | 0;
  HEAP32[$70 >> 2] = _modem_recreate(HEAP32[$70 >> 2] | 0, $42) | 0;
  $$pre$phiZ2D = $69;
 }
 $73 = $_q + 84 | 0;
 HEAP32[$73 >> 2] = $38;
 HEAP32[$_q + 88 >> 2] = $check$0;
 HEAP32[$_q + 92 >> 2] = $fec0$0;
 HEAP32[$_q + 96 >> 2] = $56;
 $77 = $_q + 100 | 0;
 $79 = _packetizer_recreate(HEAP32[$77 >> 2] | 0, $38, $check$0, $fec0$0, $56) | 0;
 HEAP32[$77 >> 2] = $79;
 $80 = _packetizer_get_enc_msg_len($79) | 0;
 $81 = $_q + 116 | 0;
 HEAP32[$81 >> 2] = $80;
 $82 = $_q + 108 | 0;
 HEAP32[$82 >> 2] = _realloc(HEAP32[$82 >> 2] | 0, $80) | 0;
 $85 = $_q + 112 | 0;
 HEAP32[$85 >> 2] = _realloc(HEAP32[$85 >> 2] | 0, HEAP32[$73 >> 2] | 0) | 0;
 _div($d, HEAP32[$81 >> 2] << 3, HEAP32[$$pre$phiZ2D >> 2] | 0);
 $97 = ((HEAP32[$d + 4 >> 2] | 0) != 0 & 1) + (HEAP32[$d >> 2] | 0) | 0;
 HEAP32[$_q + 120 >> 2] = $97;
 $99 = $_q + 128 | 0;
 HEAP32[$99 >> 2] = _realloc(HEAP32[$99 >> 2] | 0, $97 << 3) | 0;
 STACKTOP = sp;
 return;
}

function _quiet_decoder_consume($d, $samplebuf, $sample_len) {
 $d = $d | 0;
 $samplebuf = $samplebuf | 0;
 $sample_len = $sample_len | 0;
 var $$ = 0, $$pn = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $27 = 0, $3 = 0, $35 = 0, $36 = 0, $45 = 0, $48 = 0, $50 = 0, $53 = 0, $54 = 0, $7 = 0, $i$02 = 0, $resamp_read = 0, $resamp_write = 0, $sample_chunk_len$1 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $resamp_read = sp + 24 | 0;
 $resamp_write = sp + 20 | 0;
 if (!$d) {
  STACKTOP = sp;
  return;
 }
 $3 = $d + 68 | 0;
 $7 = Math_imul(HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0, HEAP32[$d + 76 >> 2] | 0) | 0;
 if (HEAP8[$d + 344 >> 0] | 0) HEAP32[$d + 340 >> 2] = 0;
 if (!$sample_len) {
  STACKTOP = sp;
  return;
 }
 $13 = $d + 88 | 0;
 $14 = $d + 96 | 0;
 $15 = $d + 92 | 0;
 $16 = $d + 72 | 0;
 $17 = $d + 56 | 0;
 $18 = $d + 64 | 0;
 $19 = $d + 60 | 0;
 $20 = $d + 80 | 0;
 $21 = $d + 64 | 0;
 $i$02 = 0;
 do {
  $22 = HEAP32[$13 >> 2] | 0;
  if (!$22) {
   $35 = HEAP32[$14 >> 2] | 0;
   $36 = $35 + ($sample_len - $i$02) | 0;
   $$ = $36 >>> 0 < $7 >>> 0 ? $36 : $7;
   _memmove((HEAP32[$15 >> 2] | 0) + ($35 << 2) | 0, $samplebuf + ($i$02 << 2) | 0, $$ - $35 << 2 | 0) | 0;
   $$pn = $$ - (HEAP32[$14 >> 2] | 0) | 0;
   $sample_chunk_len$1 = $$;
  } else {
   $27 = HEAP32[$14 >> 2] | 0;
   _resamp_rrrf_execute_output_block($22, $samplebuf + ($i$02 << 2) | 0, $sample_len - $i$02 | 0, $resamp_read, (HEAP32[$15 >> 2] | 0) + ($27 << 2) | 0, $7 - $27 | 0, $resamp_write) | 0;
   $$pn = HEAP32[$resamp_read >> 2] | 0;
   $sample_chunk_len$1 = (HEAP32[$14 >> 2] | 0) + (HEAP32[$resamp_write >> 2] | 0) | 0;
  }
  $i$02 = $$pn + $i$02 | 0;
  $45 = HEAP32[$3 >> 2] | 0;
  $48 = ($sample_chunk_len$1 >>> 0) % ((HEAP32[$45 + 4 >> 2] | 0) >>> 0) | 0;
  $50 = $sample_chunk_len$1 - $48 | 0;
  $53 = _demodulator_recv($45, HEAP32[$15 >> 2] | 0, $50, HEAP32[$16 >> 2] | 0) | 0;
  if ($48 | 0) {
   $54 = HEAP32[$15 >> 2] | 0;
   _memmove($54 | 0, $54 + ($50 << 2) | 0, $48 << 2 | 0) | 0;
  }
  HEAP32[$14 >> 2] = $48;
  switch (HEAP32[$17 >> 2] | 0) {
  case 0:
   {
    _ofdmflexframesync_execute(HEAP32[$18 >> 2] | 0, HEAP32[$16 >> 2] | 0, $53);
    if (HEAP8[$19 >> 0] | 0) {
     HEAP32[$vararg_buffer >> 2] = HEAP32[$20 >> 2];
     _sprintf($resamp_read, gb + 10393 | 0, $vararg_buffer) | 0;
     _ofdmflexframesync_debug_print(HEAP32[$18 >> 2] | 0, $resamp_read);
     HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) + 1;
    }
    break;
   }
  case 1:
   {
    _flexframesync_execute(HEAP32[$21 >> 2] | 0, HEAP32[$16 >> 2] | 0, $53);
    if (HEAP8[$19 >> 0] | 0) {
     HEAP32[$vararg_buffer1 >> 2] = HEAP32[$20 >> 2];
     _sprintf($resamp_read, gb + 10393 | 0, $vararg_buffer1) | 0;
     _flexframesync_debug_print(HEAP32[$21 >> 2] | 0, $resamp_read);
     HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) + 1;
    }
    break;
   }
  case 2:
   {
    _gmskframesync_execute(HEAP32[$21 >> 2] | 0, HEAP32[$16 >> 2] | 0, $53);
    if (HEAP8[$19 >> 0] | 0) {
     HEAP32[$vararg_buffer4 >> 2] = HEAP32[$20 >> 2];
     _sprintf($resamp_read, gb + 10393 | 0, $vararg_buffer4) | 0;
     _gmskframesync_debug_print(HEAP32[$21 >> 2] | 0, $resamp_read);
     HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) + 1;
    }
    break;
   }
  default:
   {}
  }
 } while ($i$02 >>> 0 < $sample_len >>> 0);
 STACKTOP = sp;
 return;
}

function _modem_create_apsk($_bits_per_symbol) {
 $_bits_per_symbol = $_bits_per_symbol | 0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $3 = 0, $35 = 0, $4 = 0, $44 = 0, $45 = 0, $5 = 0, $7 = 0, $8 = 0, $apskdef$0 = 0, $i$02 = 0, $i$11 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 switch ($_bits_per_symbol | 0) {
 case 2:
  {
   $apskdef$0 = gb + 1576 | 0;
   break;
  }
 case 3:
  {
   $apskdef$0 = gb + 1624 | 0;
   break;
  }
 case 4:
  {
   $apskdef$0 = gb + 1672 | 0;
   break;
  }
 case 5:
  {
   $apskdef$0 = gb + 1732 | 0;
   break;
  }
 case 6:
  {
   $apskdef$0 = gb + 1804 | 0;
   break;
  }
 case 7:
  {
   $apskdef$0 = gb + 1888 | 0;
   break;
  }
 case 8:
  {
   $apskdef$0 = gb + 1996 | 0;
   break;
  }
 default:
  {
   $0 = HEAP32[gb + 9336 >> 2] | 0;
   HEAP32[$vararg_buffer >> 2] = $_bits_per_symbol;
   _fprintf($0, gb + 31945 | 0, $vararg_buffer) | 0;
   _exit(1);
  }
 }
 $1 = _malloc(252) | 0;
 HEAP32[$1 >> 2] = HEAP32[$apskdef$0 >> 2];
 $3 = $1 + 76 | 0;
 HEAP32[$3 >> 2] = 0;
 $4 = $1 + 80 | 0;
 HEAP32[$4 >> 2] = 0;
 $5 = $1 + 4 | 0;
 HEAP32[$5 >> 2] = $_bits_per_symbol;
 $7 = $1 + 8 | 0;
 HEAP32[$7 >> 2] = 1 << $_bits_per_symbol;
 $8 = $1 + 236 | 0;
 HEAP32[$8 >> 2] = 0;
 HEAP32[$8 + 4 >> 2] = 0;
 HEAP32[$8 + 8 >> 2] = 0;
 HEAP32[$8 + 12 >> 2] = 0;
 $10 = HEAP32[$apskdef$0 + 4 >> 2] | 0;
 $11 = $1 + 100 | 0;
 HEAP32[$11 >> 2] = $10;
 if (!$10) label = 12; else {
  $14 = HEAP32[$apskdef$0 + 8 >> 2] | 0;
  $15 = $1 + 104 | 0;
  $17 = HEAP32[$apskdef$0 + 12 >> 2] | 0;
  $18 = $1 + 136 | 0;
  $20 = HEAP32[$apskdef$0 + 16 >> 2] | 0;
  $21 = $1 + 200 | 0;
  $i$02 = 0;
  do {
   HEAP32[$15 + ($i$02 << 2) >> 2] = HEAP32[$14 + ($i$02 << 2) >> 2];
   HEAP32[$18 + ($i$02 << 2) >> 2] = HEAP32[$17 + ($i$02 << 2) >> 2];
   HEAP32[$21 + ($i$02 << 2) >> 2] = HEAP32[$20 + ($i$02 << 2) >> 2];
   $i$02 = $i$02 + 1 | 0;
   $35 = HEAP32[$11 >> 2] | 0;
  } while ($i$02 >>> 0 < $35 >>> 0);
  $$lcssa = $35;
  if (($$lcssa | 0) != 1) label = 12;
 }
 if ((label | 0) == 12) {
  $23 = HEAP32[$apskdef$0 + 20 >> 2] | 0;
  $24 = $1 + 168 | 0;
  $i$11 = 0;
  do {
   HEAP32[$24 + ($i$11 << 2) >> 2] = HEAP32[$23 + ($i$11 << 2) >> 2];
   $i$11 = $i$11 + 1 | 0;
  } while ($i$11 >>> 0 < ((HEAP32[$11 >> 2] | 0) + -1 | 0) >>> 0);
 }
 $44 = HEAP32[$7 >> 2] | 0;
 $45 = _malloc($44) | 0;
 HEAP32[$1 + 232 >> 2] = $45;
 _memmove($45 | 0, HEAP32[$apskdef$0 + 24 >> 2] | 0, $44 | 0) | 0;
 HEAP32[$8 >> 2] = fb + 21;
 HEAP32[$1 + 240 >> 2] = fb + 22;
 switch (HEAP32[$5 >> 2] | 0) {
 case 2:
  {
   _modem_demodsoft_gentab($1, 3);
   break;
  }
 case 3:
  {
   _modem_demodsoft_gentab($1, 3);
   break;
  }
 case 4:
  {
   _modem_demodsoft_gentab($1, 4);
   break;
  }
 case 5:
  {
   _modem_demodsoft_gentab($1, 4);
   break;
  }
 case 6:
  {
   _modem_demodsoft_gentab($1, 4);
   break;
  }
 case 7:
  {
   _modem_demodsoft_gentab($1, 5);
   break;
  }
 case 8:
  {
   _modem_demodsoft_gentab($1, 5);
   break;
  }
 default:
  {}
 }
 HEAP32[$3 >> 2] = _malloc(HEAP32[$7 >> 2] << 3) | 0;
 _modem_init_map($1);
 HEAP32[$4 >> 2] = 1;
 HEAPF32[$1 + 84 >> 2] = 1.0;
 HEAPF32[$1 + 88 >> 2] = 0.0;
 HEAP32[$1 + 92 >> 2] = 1065353216;
 HEAPF32[$1 + 96 >> 2] = 0.0;
 if (!(_liquid_modem_is_dpsk(HEAP32[$1 >> 2] | 0) | 0)) {
  STACKTOP = sp;
  return $1 | 0;
 }
 HEAPF32[$1 + 104 >> 2] = 0.0;
 STACKTOP = sp;
 return $1 | 0;
}

function _quiet_encoder_create($opt, $sample_rate) {
 $opt = $opt | 0;
 $sample_rate = +$sample_rate;
 var $$0 = 0, $$pre$phi3Z2D = 0, $1 = 0, $21 = 0, $23 = 0, $27 = 0, $3 = 0.0, $30 = 0, $34 = 0, $47 = 0, $49 = 0, $52 = 0, $54 = 0, $57 = 0, $60 = 0, $65 = 0, $68 = 0, $69 = 0, $7 = 0, $71 = 0.0, $84 = 0, $props$i1 = 0, $vararg_buffer = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $props$i1 = sp + 8 | 0;
 if (!$opt) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $1 = $opt + 20 | 0;
 $3 = +HEAPF32[$opt + 40 >> 2];
 if ($3 < 0.0 | $3 > .5) {
  HEAPF64[$vararg_buffer >> 3] = $3;
  _printf(gb + 10964 | 0, $vararg_buffer) | 0;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $7 = _malloc(156) | 0;
 dest = $7;
 src = $opt;
 stop = dest + 88 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 switch (HEAP32[$7 + 64 >> 2] | 0) {
 case 0:
  {
   HEAP32[$props$i1 >> 2] = HEAP32[$opt + 68 >> 2];
   HEAP32[$props$i1 + 4 >> 2] = HEAP32[$opt + 72 >> 2];
   HEAP32[$props$i1 + 8 >> 2] = HEAP32[$opt + 76 >> 2];
   HEAP32[$props$i1 + 12 >> 2] = HEAP32[$opt + 80 >> 2];
   $21 = _ofdm_subcarriers_create($opt) | 0;
   $23 = $opt + 4 | 0;
   $27 = _ofdmflexframegen_create(HEAP32[$opt >> 2] | 0, HEAP32[$23 >> 2] | 0, HEAP32[$opt + 8 >> 2] | 0, $21, $props$i1) | 0;
   _ofdmflexframegen_set_header_len($27, 0);
   $30 = (HEAP32[$23 >> 2] | 0) + (HEAP32[$opt >> 2] | 0) | 0;
   HEAP32[$7 + 100 >> 2] = _malloc($30 << 3) | 0;
   $34 = $7 + 104 | 0;
   HEAP32[$34 >> 2] = $30;
   _free($21);
   HEAP32[$7 + 88 >> 2] = $27;
   $$pre$phi3Z2D = $34;
   break;
  }
 case 1:
  {
   HEAP32[$props$i1 >> 2] = HEAP32[$opt + 68 >> 2];
   HEAP32[$props$i1 + 4 >> 2] = HEAP32[$opt + 72 >> 2];
   HEAP32[$props$i1 + 8 >> 2] = HEAP32[$opt + 76 >> 2];
   HEAP32[$props$i1 + 12 >> 2] = HEAP32[$opt + 80 >> 2];
   $47 = _flexframegen_create($props$i1) | 0;
   _flexframegen_set_header_len($47, 0);
   HEAP32[$7 + 100 >> 2] = 0;
   $49 = $7 + 104 | 0;
   HEAP32[$49 >> 2] = 0;
   HEAP32[$7 + 88 >> 2] = $47;
   HEAP32[$7 + 92 >> 2] = 0;
   $$pre$phi3Z2D = $49;
   break;
  }
 case 2:
  {
   $52 = _gmskframegen_create() | 0;
   _gmskframegen_set_header_len($52, 0);
   HEAP32[$7 + 100 >> 2] = 0;
   $54 = $7 + 104 | 0;
   HEAP32[$54 >> 2] = 0;
   HEAP32[$7 + 88 >> 2] = $52;
   HEAP32[$7 + 92 >> 2] = 2;
   $$pre$phi3Z2D = $54;
   break;
  }
 default:
  $$pre$phi3Z2D = $7 + 104 | 0;
 }
 $57 = _modulator_create($1) | 0;
 HEAP32[$7 + 96 >> 2] = $57;
 $60 = _modulator_sample_len($57, HEAP32[$$pre$phi3Z2D >> 2] | 0) | 0;
 HEAP32[$7 + 112 >> 2] = $60;
 HEAP32[$7 + 108 >> 2] = _malloc($60 << 2) | 0;
 $65 = $7 + 116 | 0;
 HEAP32[$65 >> 2] = 0;
 HEAP32[$65 + 4 >> 2] = 0;
 HEAP32[$65 + 8 >> 2] = 0;
 HEAP32[$65 + 12 >> 2] = 0;
 HEAP8[$7 + 132 >> 0] = 1;
 HEAP8[$7 + 133 >> 0] = 0;
 $68 = $7 + 136 | 0;
 HEAPF32[$68 >> 2] = 1.0;
 $69 = $7 + 140 | 0;
 HEAP32[$69 >> 2] = 0;
 if ($sample_rate != 44100.0) {
  $71 = $sample_rate / 44100.0;
  HEAP32[$69 >> 2] = _resamp_rrrf_create($71, HEAP32[$opt + 48 >> 2] | 0, +HEAPF32[$opt + 52 >> 2], +HEAPF32[$opt + 56 >> 2], HEAP32[$opt + 60 >> 2] | 0) | 0;
  HEAPF32[$68 >> 2] = $71;
 }
 HEAP32[$7 + 144 >> 2] = _ring_create(65536) | 0;
 $84 = HEAP32[$7 + 84 >> 2] | 0;
 HEAP32[$7 + 148 >> 2] = _malloc($84 + 4 | 0) | 0;
 HEAP32[$7 + 152 >> 2] = _malloc($84) | 0;
 $$0 = $7;
 STACKTOP = sp;
 return $$0 | 0;
}

function _rkaiser_approximate_rho($_m, $_beta) {
 $_m = $_m | 0;
 $_beta = +$_beta;
 var $12 = 0.0, $17 = 0.0, $c0$0 = 0.0, $c1$0 = 0.0, $c2$0 = 0.0, $rho_hat$0 = 0.0;
 if (!$_m) {
  _fwrite(gb + 24890 | 0, 59, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if ($_beta < 0.0 | $_beta > 1.0) {
  _fwrite(gb + 24950 | 0, 56, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 do switch ($_m | 0) {
 case 1:
  {
   $c0$0 = .7574973106384277;
   $c1$0 = .061343029141426086;
   $c2$0 = -.08729662746191025;
   break;
  }
 case 2:
  {
   $c0$0 = .8115186095237732;
   $c1$0 = .07437658309936523;
   $c2$0 = -.01427088025957346;
   break;
  }
 case 3:
  {
   $c0$0 = .8424953818321228;
   $c1$0 = .07684185355901718;
   $c2$0 = -.005368790123611689;
   break;
  }
 case 4:
  {
   $c0$0 = .8614078164100647;
   $c1$0 = .07144126296043396;
   $c2$0 = -.005586519837379456;
   break;
  }
 case 5:
  {
   $c0$0 = .8745774030685425;
   $c1$0 = .0657869428396225;
   $c2$0 = -.006504470016807318;
   break;
  }
 case 6:
  {
   $c0$0 = .8843879699707031;
   $c1$0 = .06074265018105507;
   $c2$0 = -.007364050019532442;
   break;
  }
 case 7:
  {
   $c0$0 = .8921661972999573;
   $c1$0 = .05669236183166504;
   $c2$0 = -.007912220433354378;
   break;
  }
 case 8:
  {
   $c0$0 = .898749828338623;
   $c1$0 = .0536169596016407;
   $c2$0 = -.008153010159730911;
   break;
  }
 case 9:
  {
   $c0$0 = .9046003222465515;
   $c1$0 = .051679521799087524;
   $c2$0 = -.008078929968178272;
   break;
  }
 case 10:
  {
   $c0$0 = .9103443026542664;
   $c1$0 = .05130752921104431;
   $c2$0 = -.007461919914931059;
   break;
  }
 case 11:
  {
   $c0$0 = .9158767461776733;
   $c1$0 = .05180436000227928;
   $c2$0 = -.006707109976559877;
   break;
  }
 case 12:
  {
   $c0$0 = .921218752861023;
   $c1$0 = .0527380108833313;
   $c2$0 = -.00588351022452116;
   break;
  }
 case 13:
  {
   $c0$0 = .9263819456100464;
   $c1$0 = .054007638245821;
   $c2$0 = -.00508452020585537;
   break;
  }
 case 14:
  {
   $c0$0 = .9312355518341064;
   $c1$0 = .05516162887215614;
   $c2$0 = -4.3730600737035275e-03;
   break;
  }
 case 15:
  {
   $c0$0 = .9356499314308167;
   $c1$0 = .0559656098484993;
   $c2$0 = -3.8815198931843042e-03;
   break;
  }
 case 16:
  {
   $c0$0 = .9397674202919006;
   $c1$0 = .056622739881277084;
   $c2$0 = -3.4827999770641327e-03;
   break;
  }
 case 17:
  {
   $c0$0 = .9435170292854309;
   $c1$0 = .0569412000477314;
   $c2$0 = -3.1882100738584995e-03;
   break;
  }
 case 18:
  {
   $c0$0 = .9455727338790894;
   $c1$0 = .05227591097354889;
   $c2$0 = -.004006760194897652;
   break;
  }
 case 19:
  {
   $c0$0 = .9500161409378052;
   $c1$0 = .05681641027331352;
   $c2$0 = -3.0062799341976643e-03;
   break;
  }
 case 20:
  {
   $c0$0 = .9528170824050903;
   $c1$0 = .05637606978416443;
   $c2$0 = -.003047900041565299;
   break;
  }
 case 21:
  {
   $c0$0 = .9553625583648682;
   $c1$0 = .055758800357580185;
   $c2$0 = -.00312987994402647;
   break;
  }
 case 22:
  {
   $c0$0 = .9575420618057251;
   $c1$0 = .05426060035824776;
   $c2$0 = -3.8594501093029976e-03;
   break;
  }
 default:
  {
   $c0$0 = +Math_log(+(+($_m >>> 0) + 1.0000000474974513e-03)) * .056873 + .781388;
   $c1$0 = .054260000586509705;
   $c2$0 = -.003860000055283308;
  }
 } while (0);
 $12 = +Math_log(+$_beta);
 $17 = $c0$0 + $c1$0 * $12 + $12 * ($c2$0 * $12);
 if ($17 < 0.0) {
  $rho_hat$0 = 0.0;
  return +$rho_hat$0;
 }
 if (!($17 > 1.0)) {
  $rho_hat$0 = $17;
  return +$rho_hat$0;
 }
 $rho_hat$0 = 1.0;
 return +$rho_hat$0;
}

function _fft_execute_rader($_q) {
 $_q = $_q | 0;
 var $$lcssa = 0, $$pre = 0, $0 = 0, $103 = 0.0, $104 = 0, $11 = 0, $111 = 0, $12 = 0, $16 = 0, $17 = 0, $2 = 0, $25 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $47 = 0.0, $48 = 0.0, $5 = 0, $53 = 0.0, $54 = 0.0, $60 = 0, $63 = 0, $64 = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $77 = 0, $79 = 0, $8 = 0, $82 = 0.0, $84 = 0, $88 = 0, $89 = 0, $94 = 0.0, $95 = 0, $98 = 0, $i$09 = 0, $i$15 = 0, $i$22 = 0, $i$31 = 0, $phitmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 $2 = (HEAP32[$_q >> 2] | 0) + -1 | 0;
 $$pre = $_q + 40 | 0;
 if ($2 | 0) {
  $4 = $_q + 4 | 0;
  $5 = $_q + 48 | 0;
  $8 = $2;
  $i$09 = 0;
  do {
   $11 = HEAP32[(HEAP32[$$pre >> 2] | 0) + ($8 + ~$i$09 << 2) >> 2] | 0;
   $12 = HEAP32[$4 >> 2] | 0;
   $16 = HEAP32[$12 + ($11 << 3) + 4 >> 2] | 0;
   $17 = HEAP32[$5 >> 2] | 0;
   HEAP32[$17 + ($i$09 << 3) >> 2] = HEAP32[$12 + ($11 << 3) >> 2];
   HEAP32[$17 + ($i$09 << 3) + 4 >> 2] = $16;
   $i$09 = $i$09 + 1 | 0;
   $8 = (HEAP32[$_q >> 2] | 0) + -1 | 0;
  } while ($8 >>> 0 > $i$09 >>> 0);
 }
 $25 = HEAP32[$_q + 56 >> 2] | 0;
 mftCall_vi(HEAP32[$25 + 28 >> 2] | 0, $25 | 0);
 if ((HEAP32[$_q >> 2] | 0) != 1) {
  $30 = $_q + 44 | 0;
  $31 = $_q + 52 | 0;
  $32 = $0 + 4 | 0;
  $i$15 = 0;
  do {
   $33 = HEAP32[$30 >> 2] | 0;
   $35 = +HEAPF32[$33 + ($i$15 << 3) >> 2];
   $37 = +HEAPF32[$33 + ($i$15 << 3) + 4 >> 2];
   $38 = HEAP32[$31 >> 2] | 0;
   $39 = $38 + ($i$15 << 3) | 0;
   $40 = +HEAPF32[$39 >> 2];
   $41 = $38 + ($i$15 << 3) + 4 | 0;
   $42 = +HEAPF32[$41 >> 2];
   $47 = $35 * $40 - $37 * $42;
   $48 = $37 * $40 + $35 * $42;
   if (($47 != $47 | 0.0 != 0.0) & ($48 != $48 | 0.0 != 0.0)) {
    ___mulsc3($0, $40, $42, $35, $37);
    $53 = +HEAPF32[$0 >> 2];
    $54 = +HEAPF32[$32 >> 2];
   } else {
    $53 = $47;
    $54 = $48;
   }
   HEAPF32[$39 >> 2] = $53;
   HEAPF32[$41 >> 2] = $54;
   $i$15 = $i$15 + 1 | 0;
  } while ($i$15 >>> 0 < ((HEAP32[$_q >> 2] | 0) + -1 | 0) >>> 0);
 }
 $60 = HEAP32[$_q + 60 >> 2] | 0;
 mftCall_vi(HEAP32[$60 + 28 >> 2] | 0, $60 | 0);
 $63 = $_q + 8 | 0;
 $64 = HEAP32[$63 >> 2] | 0;
 HEAPF32[$64 >> 2] = 0.0;
 HEAPF32[$64 + 4 >> 2] = 0.0;
 if (!(HEAP32[$_q >> 2] | 0)) $111 = -1; else {
  $68 = $_q + 4 | 0;
  $i$22 = 0;
  do {
   $72 = HEAP32[$68 >> 2] | 0;
   $77 = HEAP32[$63 >> 2] | 0;
   $79 = $77 + 4 | 0;
   $82 = +HEAPF32[$72 + ($i$22 << 3) + 4 >> 2] + +HEAPF32[$79 >> 2];
   HEAPF32[$77 >> 2] = +HEAPF32[$72 + ($i$22 << 3) >> 2] + +HEAPF32[$77 >> 2];
   HEAPF32[$79 >> 2] = $82;
   $i$22 = $i$22 + 1 | 0;
   $84 = HEAP32[$_q >> 2] | 0;
  } while ($i$22 >>> 0 < $84 >>> 0);
  $$lcssa = $84;
  $phitmp = $$lcssa + -1 | 0;
  if (!$phitmp) {
   STACKTOP = sp;
   return;
  } else $111 = $phitmp;
 }
 $70 = $_q + 48 | 0;
 $71 = $_q + 4 | 0;
 $95 = $111;
 $i$31 = 0;
 do {
  $88 = HEAP32[(HEAP32[$$pre >> 2] | 0) + ($i$31 << 2) >> 2] | 0;
  $89 = HEAP32[$70 >> 2] | 0;
  $94 = +($95 >>> 0);
  $98 = HEAP32[$71 >> 2] | 0;
  $103 = +HEAPF32[$89 + ($i$31 << 3) + 4 >> 2] / $94 + +HEAPF32[$98 + 4 >> 2];
  $104 = HEAP32[$63 >> 2] | 0;
  HEAPF32[$104 + ($88 << 3) >> 2] = +HEAPF32[$89 + ($i$31 << 3) >> 2] / $94 + +HEAPF32[$98 >> 2];
  HEAPF32[$104 + ($88 << 3) + 4 >> 2] = $103;
  $i$31 = $i$31 + 1 | 0;
  $95 = (HEAP32[$_q >> 2] | 0) + -1 | 0;
 } while ($i$31 >>> 0 < $95 >>> 0);
 STACKTOP = sp;
 return;
}

function _iirdes_dzpk2sosf($_zd, $_pd, $_n, $_kd, $_B, $_A) {
 $_zd = $_zd | 0;
 $_pd = $_pd | 0;
 $_n = $_n | 0;
 $_kd = $_kd | 0;
 $_B = $_B | 0;
 $_A = $_A | 0;
 var $0 = 0, $1 = 0, $102 = 0, $11 = 0.0, $13 = 0.0, $14 = 0, $16 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $21 = 0.0, $23 = 0.0, $27 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $32 = 0, $35 = 0, $4 = 0, $41 = 0.0, $42 = 0.0, $49 = 0, $51 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $65 = 0.0, $68 = 0, $71 = 0.0, $74 = 0.0, $76 = 0, $78 = 0, $8 = 0, $84 = 0, $87 = 0.0, $89 = 0, $9 = 0, $92 = 0, $93 = 0, $94 = 0, $98 = 0, $i$0$lcssa = 0, $i$03 = 0, $i$12 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 8 | 0;
 $1 = sp;
 $2 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($_n << 3) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 _liquid_cplxpair($_zd, $_n, 9.999999974752427e-07, $2);
 $3 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($_n << 3) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 _liquid_cplxpair($_pd, $_n, 9.999999974752427e-07, $3);
 $4 = $_n & 1;
 $6 = ($_n - $4 | 0) >>> 1;
 if (!$6) $i$0$lcssa = 0; else {
  $8 = $_n >>> 1;
  $i$03 = 0;
  do {
   $9 = $i$03 << 1;
   $11 = +HEAPF32[$3 + ($9 << 3) >> 2];
   $13 = +HEAPF32[$3 + ($9 << 3) + 4 >> 2];
   $14 = $9 | 1;
   $16 = +HEAPF32[$3 + ($14 << 3) >> 2];
   $18 = +HEAPF32[$3 + ($14 << 3) + 4 >> 2];
   $19 = -$16;
   $21 = +HEAPF32[$2 + ($9 << 3) >> 2];
   $23 = +HEAPF32[$2 + ($9 << 3) + 4 >> 2];
   $27 = +HEAPF32[$2 + ($14 << 3) >> 2];
   $29 = +HEAPF32[$2 + ($14 << 3) + 4 >> 2];
   $30 = -$27;
   $32 = $i$03 * 3 | 0;
   HEAPF32[$_A + ($32 << 2) >> 2] = 1.0;
   $35 = $32 + 1 | 0;
   HEAPF32[$_A + ($35 << 2) >> 2] = $19 - $11;
   $41 = $11 * $16 - $13 * $18;
   $42 = $13 * $16 + $11 * $18;
   if (($41 != $41 | 0.0 != 0.0) & ($42 != $42 | 0.0 != 0.0)) {
    ___mulsc3($0, -$11, -$13, $19, -$18);
    $51 = +HEAPF32[$0 >> 2];
   } else $51 = $41;
   $49 = $32 + 2 | 0;
   HEAPF32[$_A + ($49 << 2) >> 2] = $51;
   HEAPF32[$_B + ($32 << 2) >> 2] = 1.0;
   HEAPF32[$_B + ($35 << 2) >> 2] = $30 - $21;
   $59 = $21 * $27 - $23 * $29;
   $60 = $23 * $27 + $21 * $29;
   if (($59 != $59 | 0.0 != 0.0) & ($60 != $60 | 0.0 != 0.0)) {
    ___mulsc3($1, -$21, -$23, $30, -$29);
    $65 = +HEAPF32[$1 >> 2];
   } else $65 = $59;
   HEAPF32[$_B + ($49 << 2) >> 2] = $65;
   $i$03 = $i$03 + 1 | 0;
  } while (($i$03 | 0) != ($8 | 0));
  $i$0$lcssa = $6 * 3 | 0;
 }
 if ($4 | 0) {
  $68 = $_n + -1 | 0;
  $71 = -+HEAPF32[$3 + ($68 << 3) >> 2];
  $74 = -+HEAPF32[$2 + ($68 << 3) >> 2];
  HEAPF32[$_A + ($i$0$lcssa << 2) >> 2] = 1.0;
  $76 = $i$0$lcssa + 1 | 0;
  HEAPF32[$_A + ($76 << 2) >> 2] = $71;
  $78 = $i$0$lcssa + 2 | 0;
  HEAPF32[$_A + ($78 << 2) >> 2] = 0.0;
  HEAPF32[$_B + ($i$0$lcssa << 2) >> 2] = 1.0;
  HEAPF32[$_B + ($76 << 2) >> 2] = $74;
  HEAPF32[$_B + ($78 << 2) >> 2] = 0.0;
 }
 $84 = $6 + $4 | 0;
 $87 = +Math_pow(+(+HEAPF32[$_kd >> 2]), +(1.0 / +($84 >>> 0)));
 if (!$84) {
  STACKTOP = sp;
  return;
 }
 $89 = $_n & 1;
 $92 = (($_n - $89 | 0) >>> 1) + $89 | 0;
 $i$12 = 0;
 do {
  $93 = $i$12 * 3 | 0;
  $94 = $_B + ($93 << 2) | 0;
  HEAPF32[$94 >> 2] = $87 * +HEAPF32[$94 >> 2];
  $98 = $_B + ($93 + 1 << 2) | 0;
  HEAPF32[$98 >> 2] = $87 * +HEAPF32[$98 >> 2];
  $102 = $_B + ($93 + 2 << 2) | 0;
  HEAPF32[$102 >> 2] = $87 * +HEAPF32[$102 >> 2];
  $i$12 = $i$12 + 1 | 0;
 } while (($i$12 | 0) != ($92 | 0));
 STACKTOP = sp;
 return;
}

function _gmskframesync_create($_callback, $_userdata) {
 $_callback = $_callback | 0;
 $_userdata = $_userdata | 0;
 var $0 = 0, $14 = 0, $15 = 0, $19 = 0, $24 = 0, $27 = 0, $3 = 0, $32 = 0, $4 = 0, $47 = 0, $5 = 0, $54 = 0, $55 = 0, $60 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $74 = 0, $76 = 0, $9 = 0, $i$01 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = _malloc(256) | 0;
 HEAP32[$0 + 16 >> 2] = $_callback;
 HEAP32[$0 + 20 >> 2] = $_userdata;
 $3 = $0 + 4 | 0;
 HEAP32[$3 >> 2] = 2;
 $4 = $0 + 8 | 0;
 HEAP32[$4 >> 2] = 3;
 $5 = $0 + 12 | 0;
 HEAPF32[$5 >> 2] = .5;
 HEAP32[$0 >> 2] = _iirfilt_crcf_create_lowpass(3, .375) | 0;
 $7 = $0 + 132 | 0;
 HEAP32[$7 >> 2] = 63;
 $9 = $0 + 136 | 0;
 HEAP32[$9 >> 2] = _malloc(252) | 0;
 HEAP32[$0 + 140 >> 2] = _malloc(252) | 0;
 $14 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ((HEAP32[$3 >> 2] | 0) * 63 << 3) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $15 = _msequence_create(6, 109, 1) | 0;
 $19 = _gmskmod_create(HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0, +HEAPF32[$5 >> 2]) | 0;
 if ((HEAP32[$4 >> 2] | 0) != (0 - (HEAP32[$7 >> 2] | 0) | 0)) {
  $i$01 = 0;
  do {
   $24 = _msequence_advance($15) | 0;
   $27 = $24 & 255;
   if ($i$01 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) HEAPF32[(HEAP32[$9 >> 2] | 0) + ($i$01 << 2) >> 2] = $27 | 0 ? 1.0 : -1.0;
   $32 = HEAP32[$4 >> 2] | 0;
   if ($i$01 >>> 0 < $32 >>> 0) _gmskmod_modulate($19, $27, $14); else _gmskmod_modulate($19, $27, $14 + ((Math_imul(HEAP32[$3 >> 2] | 0, $i$01 - $32 | 0) | 0) << 3) | 0);
   $i$01 = $i$01 + 1 | 0;
  } while ($i$01 >>> 0 < ((HEAP32[$4 >> 2] | 0) + (HEAP32[$7 >> 2] | 0) | 0) >>> 0);
 }
 _gmskmod_destroy($19);
 _msequence_destroy($15);
 $47 = $0 + 108 | 0;
 HEAP32[$47 >> 2] = _detector_cccf_create($14, Math_imul(HEAP32[$3 >> 2] | 0, HEAP32[$7 >> 2] | 0) | 0, .5, .05000000074505806) | 0;
 $54 = $0 + 124 | 0;
 HEAP32[$54 >> 2] = _windowcf_create(Math_imul((HEAP32[$4 >> 2] | 0) + (HEAP32[$7 >> 2] | 0) | 0, HEAP32[$3 >> 2] | 0) | 0) | 0;
 $55 = $0 + 84 | 0;
 HEAP32[$55 >> 2] = 32;
 $60 = $0 + 76 | 0;
 HEAP32[$60 >> 2] = _firpfb_rrrf_create_rnyquist(12, 32, HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0, +HEAPF32[$5 >> 2]) | 0;
 $66 = $0 + 80 | 0;
 HEAP32[$66 >> 2] = _firpfb_rrrf_create_drnyquist(12, HEAP32[$55 >> 2] | 0, HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0, +HEAPF32[$5 >> 2]) | 0;
 $68 = $0 + 128 | 0;
 HEAP32[$68 >> 2] = _nco_crcf_create(0) | 0;
 $69 = $0 + 156 | 0;
 HEAP32[$69 >> 2] = 0;
 HEAP32[$69 + 4 >> 2] = 0;
 HEAP32[$69 + 8 >> 2] = 0;
 HEAP32[$69 + 12 >> 2] = 0;
 _gmskframesync_set_header_len($0, 8);
 $70 = $0 + 196 | 0;
 HEAP32[$70 >> 2] = 1;
 HEAP32[$0 + 180 >> 2] = 6;
 HEAP32[$0 + 184 >> 2] = 1;
 HEAP32[$0 + 188 >> 2] = 1;
 $74 = _packetizer_create(1, 6, 1, 1) | 0;
 HEAP32[$0 + 208 >> 2] = $74;
 $76 = _packetizer_get_enc_msg_len($74) | 0;
 HEAP32[$0 + 192 >> 2] = $76;
 HEAP32[$0 + 204 >> 2] = _malloc(HEAP32[$70 >> 2] | 0) | 0;
 HEAP32[$0 + 200 >> 2] = _malloc($76) | 0;
 dest = $0 + 216 | 0;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _windowcf_clear(HEAP32[$54 >> 2] | 0);
 _detector_cccf_reset(HEAP32[$47 >> 2] | 0);
 _nco_crcf_reset(HEAP32[$68 >> 2] | 0);
 HEAPF32[$0 + 64 >> 2] = 0.0;
 HEAPF32[$0 + 68 >> 2] = 0.0;
 HEAPF32[$0 + 72 >> 2] = 0.0;
 _firpfb_rrrf_reset(HEAP32[$60 >> 2] | 0);
 _firpfb_rrrf_reset(HEAP32[$66 >> 2] | 0);
 HEAPF32[$0 + 88 >> 2] = 0.0;
 STACKTOP = sp;
 return $0 | 0;
}

function _ccoshf($agg$result, $z) {
 $agg$result = $agg$result | 0;
 $z = $z | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $17 = 0.0, $2 = 0.0, $20 = 0.0, $25 = 0.0, $27 = 0.0, $3 = 0, $30 = 0.0, $35 = 0, $37 = 0.0, $39 = 0.0, $4 = 0.0, $41 = 0.0, $46 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $52 = 0.0, $55 = 0, $58 = 0.0, $6 = 0, $60 = 0.0, $64 = 0.0, $66 = 0.0, $7 = 0, $71 = 0.0, $78 = 0.0, $8 = 0, $80 = 0.0, $fabs = 0.0, $fabs35 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp;
 $2 = +HEAPF32[$z >> 2];
 $3 = $z + 4 | 0;
 $4 = +HEAPF32[$3 >> 2];
 $5 = (HEAPF32[tempDoublePtr >> 2] = $2, HEAP32[tempDoublePtr >> 2] | 0);
 $fabs = +Math_abs(+$2);
 $6 = (HEAPF32[tempDoublePtr >> 2] = $fabs, HEAP32[tempDoublePtr >> 2] | 0);
 $fabs35 = +Math_abs(+$4);
 $7 = (HEAPF32[tempDoublePtr >> 2] = $fabs35, HEAP32[tempDoublePtr >> 2] | 0);
 $8 = ($6 | 0) < 2139095040;
 do if ($8 & ($7 | 0) < 2139095040) {
  if (!$7) {
   HEAPF32[$agg$result >> 2] = +_coshf($2);
   HEAPF32[$agg$result + 4 >> 2] = $2 * $4;
   break;
  }
  if (($6 | 0) < 1091567616) {
   $17 = +_coshf($2) * +Math_cos(+$4);
   $20 = +_sinhf($2) * +Math_sin(+$4);
   HEAPF32[$agg$result >> 2] = $17;
   HEAPF32[$agg$result + 4 >> 2] = $20;
   break;
  }
  if (($6 | 0) < 1118925336) {
   $25 = +Math_exp(+(+Math_abs(+$2))) * .5;
   $27 = $25 * +Math_cos(+$4);
   $30 = +_copysignf($25, $2) * +Math_sin(+$4);
   HEAPF32[$agg$result >> 2] = $27;
   HEAPF32[$agg$result + 4 >> 2] = $30;
   break;
  }
  if (($6 | 0) < 1128313319) {
   HEAPF32[$1 >> 2] = +Math_abs(+$2);
   HEAPF32[$1 + 4 >> 2] = $4;
   HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   ___ldexp_cexpf($0, $$byval_copy, -1);
   $35 = HEAP32[$0 >> 2] | 0;
   $37 = +HEAPF32[$0 + 4 >> 2];
   HEAP32[$z >> 2] = $35;
   HEAPF32[$3 >> 2] = $37;
   $39 = $37 * +_copysignf(1.0, $2);
   HEAP32[$agg$result >> 2] = $35;
   HEAPF32[$agg$result + 4 >> 2] = $39;
   break;
  } else {
   $41 = $2 * 1701411834604692317316873.0e14;
   $46 = $41 * +Math_sin(+$4);
   HEAPF32[$agg$result >> 2] = $41 * $41 * +Math_cos(+$4);
   HEAPF32[$agg$result + 4 >> 2] = $46;
   break;
  }
 } else {
  $49 = ($7 | 0) > 2139095039;
  if (($6 | 0) == 0 & $49) {
   $50 = $4 - $4;
   $52 = +_copysignf(0.0, $2 * $50);
   HEAPF32[$agg$result >> 2] = $50;
   HEAPF32[$agg$result + 4 >> 2] = $52;
   break;
  }
  $55 = ($6 | 0) > 2139095039;
  if ($55 & ($7 | 0) == 0) {
   $58 = $2 * $2;
   if (!($5 & 8388607)) {
    $60 = $4 * +_copysignf(0.0, $2);
    HEAPF32[$agg$result >> 2] = $58;
    HEAPF32[$agg$result + 4 >> 2] = $60;
    break;
   } else {
    $64 = +_copysignf(0.0, ($2 + $2) * $4);
    HEAPF32[$agg$result >> 2] = $58;
    HEAPF32[$agg$result + 4 >> 2] = $64;
    break;
   }
  }
  if ($8 & $49) {
   $66 = $4 - $4;
   HEAPF32[$agg$result >> 2] = $66;
   HEAPF32[$agg$result + 4 >> 2] = $2 * $66;
   break;
  }
  $71 = $2 * $2;
  if (!($55 & ($5 & 8388607 | 0) == 0)) {
   $80 = $4 - $4;
   HEAPF32[$agg$result >> 2] = $71 * $80;
   HEAPF32[$agg$result + 4 >> 2] = ($2 + $2) * $80;
   break;
  }
  if ($49) {
   HEAPF32[$agg$result >> 2] = $71;
   HEAPF32[$agg$result + 4 >> 2] = $2 * ($4 - $4);
   break;
  } else {
   $78 = $2 * +Math_sin(+$4);
   HEAPF32[$agg$result >> 2] = $71 * +Math_cos(+$4);
   HEAPF32[$agg$result + 4 >> 2] = $78;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function runPostSets2() {
 HEAP32[gb + 1644 >> 2] = (HEAP32[gb + 1644 >> 2] | 0) + (gb + 1620 | 0);
 HEAP32[gb + 1648 >> 2] = (HEAP32[gb + 1648 >> 2] | 0) + (gb + 34926 | 0);
 HEAP32[gb + 1680 >> 2] = (HEAP32[gb + 1680 >> 2] | 0) + (gb + 1652 | 0);
 HEAP32[gb + 1684 >> 2] = (HEAP32[gb + 1684 >> 2] | 0) + (gb + 1660 | 0);
 HEAP32[gb + 1688 >> 2] = (HEAP32[gb + 1688 >> 2] | 0) + (gb + 44904 | 0);
 HEAP32[gb + 1692 >> 2] = (HEAP32[gb + 1692 >> 2] | 0) + (gb + 1668 | 0);
 HEAP32[gb + 1696 >> 2] = (HEAP32[gb + 1696 >> 2] | 0) + (gb + 34934 | 0);
 HEAP32[gb + 1740 >> 2] = (HEAP32[gb + 1740 >> 2] | 0) + (gb + 1700 | 0);
 HEAP32[gb + 1744 >> 2] = (HEAP32[gb + 1744 >> 2] | 0) + (gb + 1712 | 0);
 HEAP32[gb + 1748 >> 2] = (HEAP32[gb + 1748 >> 2] | 0) + (gb + 44912 | 0);
 HEAP32[gb + 1752 >> 2] = (HEAP32[gb + 1752 >> 2] | 0) + (gb + 1724 | 0);
 HEAP32[gb + 1756 >> 2] = (HEAP32[gb + 1756 >> 2] | 0) + (gb + 34950 | 0);
 HEAP32[gb + 1812 >> 2] = (HEAP32[gb + 1812 >> 2] | 0) + (gb + 1760 | 0);
 HEAP32[gb + 1816 >> 2] = (HEAP32[gb + 1816 >> 2] | 0) + (gb + 1776 | 0);
 HEAP32[gb + 1820 >> 2] = (HEAP32[gb + 1820 >> 2] | 0) + (gb + 44924 | 0);
 HEAP32[gb + 1824 >> 2] = (HEAP32[gb + 1824 >> 2] | 0) + (gb + 1792 | 0);
 HEAP32[gb + 1828 >> 2] = (HEAP32[gb + 1828 >> 2] | 0) + (gb + 34982 | 0);
 HEAP32[gb + 1896 >> 2] = (HEAP32[gb + 1896 >> 2] | 0) + (gb + 1832 | 0);
 HEAP32[gb + 1900 >> 2] = (HEAP32[gb + 1900 >> 2] | 0) + (gb + 1852 | 0);
 HEAP32[gb + 1904 >> 2] = (HEAP32[gb + 1904 >> 2] | 0) + (gb + 44940 | 0);
 HEAP32[gb + 1908 >> 2] = (HEAP32[gb + 1908 >> 2] | 0) + (gb + 1872 | 0);
 HEAP32[gb + 1912 >> 2] = (HEAP32[gb + 1912 >> 2] | 0) + (gb + 35046 | 0);
 HEAP32[gb + 2004 >> 2] = (HEAP32[gb + 2004 >> 2] | 0) + (gb + 1916 | 0);
 HEAP32[gb + 2008 >> 2] = (HEAP32[gb + 2008 >> 2] | 0) + (gb + 1944 | 0);
 HEAP32[gb + 2012 >> 2] = (HEAP32[gb + 2012 >> 2] | 0) + (gb + 44960 | 0);
 HEAP32[gb + 2016 >> 2] = (HEAP32[gb + 2016 >> 2] | 0) + (gb + 1972 | 0);
 HEAP32[gb + 2020 >> 2] = (HEAP32[gb + 2020 >> 2] | 0) + (gb + 35174 | 0);
 HEAP32[gb + 9304 >> 2] = fb + 1;
 HEAP32[gb + 9308 >> 2] = fb + 1;
 HEAP32[gb + 9336 >> 2] = (HEAP32[gb + 9336 >> 2] | 0) + (gb + 9340 | 0);
 HEAP32[gb + 9352 >> 2] = fb + 2;
 HEAP32[gb + 9376 >> 2] = fb + 1;
 HEAP32[gb + 9380 >> 2] = fb + 2;
 HEAP32[gb + 9384 >> 2] = (HEAP32[gb + 9384 >> 2] | 0) + (gb + 45577 | 0);
 HEAP32[gb + 9452 >> 2] = (HEAP32[gb + 9452 >> 2] | 0) + (gb + 9456 | 0);
 HEAP32[gb + 9468 >> 2] = fb + 2;
 HEAP32[gb + 9492 >> 2] = fb + 3;
 HEAP32[gb + 9496 >> 2] = fb + 2;
 HEAP32[gb + 9500 >> 2] = (HEAP32[gb + 9500 >> 2] | 0) + (gb + 45585 | 0);
 HEAP32[gb + 9568 >> 2] = (HEAP32[gb + 9568 >> 2] | 0) + (gb + 9456 | 0);
 HEAP32[gb + 9608 >> 2] = fb + 4;
 HEAP32[gb + 9716 >> 2] = (HEAP32[gb + 9716 >> 2] | 0) + (gb + 44871 | 0);
 HEAP32[gb + 9720 >> 2] = (HEAP32[gb + 9720 >> 2] | 0) + (gb + 46617 | 0);
 HEAP32[gb + 9724 >> 2] = (HEAP32[gb + 9724 >> 2] | 0) + (gb + 46617 | 0);
 HEAP32[gb + 9728 >> 2] = (HEAP32[gb + 9728 >> 2] | 0) + (gb + 46617 | 0);
 HEAP32[gb + 9732 >> 2] = (HEAP32[gb + 9732 >> 2] | 0) + (gb + 46617 | 0);
 HEAP32[gb + 9736 >> 2] = (HEAP32[gb + 9736 >> 2] | 0) + (gb + 46617 | 0);
 HEAP32[gb + 9740 >> 2] = (HEAP32[gb + 9740 >> 2] | 0) + (gb + 46617 | 0);
 HEAP32[gb + 9744 >> 2] = (HEAP32[gb + 9744 >> 2] | 0) + (gb + 46617 | 0);
 HEAP32[gb + 9748 >> 2] = (HEAP32[gb + 9748 >> 2] | 0) + (gb + 46617 | 0);
 HEAP32[gb + 9752 >> 2] = (HEAP32[gb + 9752 >> 2] | 0) + (gb + 46617 | 0);
}

function _ofdmframegen_create($_M, $_cp_len, $_taper_len, $_p) {
 $_M = $_M | 0;
 $_cp_len = $_cp_len | 0;
 $_taper_len = $_taper_len | 0;
 $_p = $_p | 0;
 var $11 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $44 = 0, $46 = 0, $54 = 0, $56 = 0, $62 = 0.0, $69 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $i$01 = 0;
 if ($_M >>> 0 < 2) {
  _fwrite(gb + 35703 | 0, 71, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if ($_M & 1 | 0) {
  _fwrite(gb + 35775 | 0, 65, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if ($_cp_len >>> 0 > $_M >>> 0) {
  _fwrite(gb + 35841 | 0, 72, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if ($_taper_len >>> 0 > $_cp_len >>> 0) {
  _fwrite(gb + 35914 | 0, 71, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 $9 = _malloc(80) | 0;
 HEAP32[$9 >> 2] = $_M;
 HEAP32[$9 + 4 >> 2] = $_cp_len;
 $11 = $9 + 12 | 0;
 HEAP32[$11 >> 2] = $_taper_len;
 $12 = _malloc($_M) | 0;
 $13 = $9 + 8 | 0;
 HEAP32[$13 >> 2] = $12;
 if (!$_p) {
  _ofdmframe_init_default_sctype($_M, $12);
  $18 = HEAP32[$13 >> 2] | 0;
  $19 = HEAP32[$9 >> 2] | 0;
 } else {
  _memcpy($12 | 0, $_p | 0, $_M | 0) | 0;
  $18 = $12;
  $19 = $_M;
 }
 $16 = $9 + 28 | 0;
 $17 = $9 + 32 | 0;
 _ofdmframe_validate_sctype($18, $19, $9 + 24 | 0, $16, $17);
 $20 = HEAP32[$16 >> 2] | 0;
 $21 = HEAP32[$17 >> 2] | 0;
 if (($20 | 0) == (0 - $21 | 0)) {
  _fwrite(gb + 35986 | 0, 72, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if (!$21) {
  _fwrite(gb + 36059 | 0, 70, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if ($20 >>> 0 < 2) {
  _fwrite(gb + 36130 | 0, 71, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 $29 = HEAP32[$9 >> 2] | 0;
 $30 = $29 << 3;
 $31 = _malloc($30) | 0;
 HEAP32[$9 + 52 >> 2] = $31;
 $33 = _malloc($30) | 0;
 HEAP32[$9 + 56 >> 2] = $33;
 HEAP32[$9 + 48 >> 2] = _fft_create_plan($29, $31, $33, -1, 0) | 0;
 $37 = HEAP32[$9 >> 2] | 0;
 $38 = $37 << 3;
 $39 = _malloc($38) | 0;
 HEAP32[$9 + 60 >> 2] = $39;
 $41 = _malloc($38) | 0;
 HEAP32[$9 + 64 >> 2] = $41;
 $44 = $9 + 68 | 0;
 HEAP32[$44 >> 2] = _malloc($38) | 0;
 $46 = $9 + 72 | 0;
 HEAP32[$46 >> 2] = _malloc($38) | 0;
 _ofdmframe_init_S0(HEAP32[$13 >> 2] | 0, $37, $39, $41, $9 + 36 | 0);
 _ofdmframe_init_S1(HEAP32[$13 >> 2] | 0, HEAP32[$9 >> 2] | 0, HEAP32[$44 >> 2] | 0, HEAP32[$46 >> 2] | 0, $9 + 40 | 0);
 $54 = HEAP32[$11 >> 2] | 0;
 $56 = _malloc($54 << 2) | 0;
 HEAP32[$9 + 16 >> 2] = $56;
 HEAP32[$9 + 20 >> 2] = _malloc($54 << 3) | 0;
 if (!$54) {
  $74 = HEAP32[$16 >> 2] | 0;
  $75 = HEAP32[$17 >> 2] | 0;
  $76 = $75 + $74 | 0;
  $77 = +($76 >>> 0);
  $78 = +Math_sqrt(+$77);
  $79 = 1.0 / $78;
  $80 = $9 + 44 | 0;
  HEAPF32[$80 >> 2] = $79;
  $81 = _msequence_create_default(8) | 0;
  $82 = $9 + 76 | 0;
  HEAP32[$82 >> 2] = $81;
  return $9 | 0;
 }
 $62 = +($54 >>> 0);
 $i$01 = 0;
 do {
  $69 = +Math_sin(+((+($i$01 >>> 0) + .5) / $62 * 1.5707963267948966));
  HEAPF32[$56 + ($i$01 << 2) >> 2] = $69 * $69;
  $i$01 = $i$01 + 1 | 0;
 } while ($i$01 >>> 0 < $54 >>> 0);
 $74 = HEAP32[$16 >> 2] | 0;
 $75 = HEAP32[$17 >> 2] | 0;
 $76 = $75 + $74 | 0;
 $77 = +($76 >>> 0);
 $78 = +Math_sqrt(+$77);
 $79 = 1.0 / $78;
 $80 = $9 + 44 | 0;
 HEAPF32[$80 >> 2] = $79;
 $81 = _msequence_create_default(8) | 0;
 $82 = $9 + 76 | 0;
 HEAP32[$82 >> 2] = $81;
 return $9 | 0;
}

function _scanexp($f, $pok) {
 $f = $f | 0;
 $pok = $pok | 0;
 var $$lcssa22 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $20 = 0, $35 = 0, $36 = 0, $48 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $59 = 0, $61 = 0, $62 = 0, $63 = 0, $78 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$112 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $x$013 = 0;
 $0 = $f + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $f + 100 | 0;
 if ($1 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
  HEAP32[$0 >> 2] = $1 + 1;
  $10 = HEAPU8[$1 >> 0] | 0;
 } else $10 = ___shgetc($f) | 0;
 switch ($10 | 0) {
 case 43:
 case 45:
  {
   $11 = ($10 | 0) == 45 & 1;
   $12 = HEAP32[$0 >> 2] | 0;
   if ($12 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
    HEAP32[$0 >> 2] = $12 + 1;
    $20 = HEAPU8[$12 >> 0] | 0;
   } else $20 = ___shgetc($f) | 0;
   if (($pok | 0) != 0 & ($20 + -48 | 0) >>> 0 > 9) if (!(HEAP32[$2 >> 2] | 0)) {
    $c$0 = $20;
    $neg$0 = $11;
   } else {
    HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
    $c$0 = $20;
    $neg$0 = $11;
   } else {
    $c$0 = $20;
    $neg$0 = $11;
   }
   break;
  }
 default:
  {
   $c$0 = $10;
   $neg$0 = 0;
  }
 }
 if (($c$0 + -48 | 0) >>> 0 > 9) if (!(HEAP32[$2 >> 2] | 0)) {
  $98 = -2147483648;
  $99 = 0;
 } else {
  HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
  $98 = -2147483648;
  $99 = 0;
 } else {
  $c$112 = $c$0;
  $x$013 = 0;
  while (1) {
   $35 = $c$112 + -48 + ($x$013 * 10 | 0) | 0;
   $36 = HEAP32[$0 >> 2] | 0;
   if ($36 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
    HEAP32[$0 >> 2] = $36 + 1;
    $c$1$be = HEAPU8[$36 >> 0] | 0;
   } else $c$1$be = ___shgetc($f) | 0;
   if (($c$1$be + -48 | 0) >>> 0 < 10 & ($35 | 0) < 214748364) {
    $c$112 = $c$1$be;
    $x$013 = $35;
   } else {
    $$lcssa22 = $35;
    $c$1$be$lcssa = $c$1$be;
    break;
   }
  }
  $48 = (($$lcssa22 | 0) < 0) << 31 >> 31;
  if (($c$1$be$lcssa + -48 | 0) >>> 0 < 10) {
   $53 = $$lcssa22;
   $54 = $48;
   $c$27 = $c$1$be$lcssa;
   while (1) {
    $55 = ___muldi3($53 | 0, $54 | 0, 10, 0) | 0;
    $56 = getTempRet0() | 0;
    $59 = _i64Add($c$27 | 0, (($c$27 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0;
    $61 = _i64Add($59 | 0, getTempRet0() | 0, $55 | 0, $56 | 0) | 0;
    $62 = getTempRet0() | 0;
    $63 = HEAP32[$0 >> 2] | 0;
    if ($63 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $63 + 1;
     $c$2$be = HEAPU8[$63 >> 0] | 0;
    } else $c$2$be = ___shgetc($f) | 0;
    if (($c$2$be + -48 | 0) >>> 0 < 10 & (($62 | 0) < 21474836 | ($62 | 0) == 21474836 & $61 >>> 0 < 2061584302)) {
     $53 = $61;
     $54 = $62;
     $c$27 = $c$2$be;
    } else {
     $92 = $61;
     $93 = $62;
     $c$2$lcssa = $c$2$be;
     break;
    }
   }
  } else {
   $92 = $$lcssa22;
   $93 = $48;
   $c$2$lcssa = $c$1$be$lcssa;
  }
  if (($c$2$lcssa + -48 | 0) >>> 0 < 10) do {
   $78 = HEAP32[$0 >> 2] | 0;
   if ($78 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
    HEAP32[$0 >> 2] = $78 + 1;
    $c$3$be = HEAPU8[$78 >> 0] | 0;
   } else $c$3$be = ___shgetc($f) | 0;
  } while (($c$3$be + -48 | 0) >>> 0 < 10);
  if (HEAP32[$2 >> 2] | 0) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
  $91 = ($neg$0 | 0) != 0;
  $94 = _i64Subtract(0, 0, $92 | 0, $93 | 0) | 0;
  $95 = getTempRet0() | 0;
  $98 = $91 ? $95 : $93;
  $99 = $91 ? $94 : $92;
 }
 setTempRet0($98 | 0);
 return $99 | 0;
}

function _gmskframesync_debug_print($_q, $_filename) {
 $_q = $_q | 0;
 $_filename = $_filename | 0;
 var $10 = 0, $13 = 0.0, $16 = 0.0, $23 = 0.0, $30 = 0.0, $4 = 0, $6 = 0, $i$03 = 0, $i$12 = 0, $i$21 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer20 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer20 = sp + 80 | 0;
 $vararg_buffer16 = sp + 64 | 0;
 $vararg_buffer12 = sp + 48 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 if (!(HEAP32[$_q + 236 >> 2] | 0)) {
  _fwrite(gb + 27964 | 0, 86, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  STACKTOP = sp;
  return;
 }
 $4 = _fopen($_filename, gb + 36856 | 0) | 0;
 if (!$4) {
  $6 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = $_filename;
  _fprintf($6, gb + 28051 | 0, $vararg_buffer) | 0;
  STACKTOP = sp;
  return;
 }
 HEAP32[$vararg_buffer1 >> 2] = $_filename;
 _fprintf($4, gb + 28120 | 0, $vararg_buffer1) | 0;
 _fwrite(gb + 37424 | 0, 2, 1, $4) | 0;
 _fwrite(gb + 36995 | 0, 11, 1, $4) | 0;
 _fwrite(gb + 28147 | 0, 12, 1, $4) | 0;
 HEAP32[$vararg_buffer4 >> 2] = 2e3;
 _fprintf($4, gb + 28160 | 0, $vararg_buffer4) | 0;
 _fwrite(gb + 28179 | 0, 23, 1, $4) | 0;
 _fwrite(gb + 28203 | 0, 26, 1, $4) | 0;
 _windowcf_read(HEAP32[$_q + 240 >> 2] | 0, $vararg_buffer4);
 $i$03 = 0;
 do {
  $10 = HEAP32[$vararg_buffer4 >> 2] | 0;
  $13 = +HEAPF32[$10 + ($i$03 << 3) >> 2];
  $16 = +HEAPF32[$10 + ($i$03 << 3) + 4 >> 2];
  $i$03 = $i$03 + 1 | 0;
  HEAP32[$vararg_buffer7 >> 2] = $i$03;
  HEAPF64[$vararg_buffer7 + 8 >> 3] = $13;
  HEAPF64[$vararg_buffer7 + 16 >> 3] = $16;
  _fprintf($4, gb + 37250 | 0, $vararg_buffer7) | 0;
 } while (($i$03 | 0) != 2e3);
 _fwrite(gb + 37424 | 0, 2, 1, $4) | 0;
 _fwrite(gb + 37279 | 0, 8, 1, $4) | 0;
 _fwrite(gb + 28230 | 0, 48, 1, $4) | 0;
 _fwrite(gb + 37353 | 0, 30, 1, $4) | 0;
 _fwrite(gb + 37424 | 0, 2, 1, $4) | 0;
 _fwrite(gb + 28279 | 0, 27, 1, $4) | 0;
 _windowf_read(HEAP32[$_q + 244 >> 2] | 0, $vararg_buffer7);
 $i$12 = 0;
 do {
  $23 = +HEAPF32[(HEAP32[$vararg_buffer7 >> 2] | 0) + ($i$12 << 2) >> 2];
  $i$12 = $i$12 + 1 | 0;
  HEAP32[$vararg_buffer12 >> 2] = $i$12;
  HEAPF64[$vararg_buffer12 + 8 >> 3] = $23;
  _fprintf($4, gb + 28307 | 0, $vararg_buffer12) | 0;
 } while (($i$12 | 0) != 2e3);
 _fwrite(gb + 37424 | 0, 2, 1, $4) | 0;
 _fwrite(gb + 37279 | 0, 8, 1, $4) | 0;
 _fwrite(gb + 28326 | 0, 23, 1, $4) | 0;
 _fwrite(gb + 28350 | 0, 23, 1, $4) | 0;
 _fwrite(gb + 37424 | 0, 2, 1, $4) | 0;
 _fwrite(gb + 28374 | 0, 27, 1, $4) | 0;
 _windowf_read(HEAP32[$_q + 248 >> 2] | 0, $vararg_buffer7);
 $i$21 = 0;
 do {
  $30 = +HEAPF32[(HEAP32[$vararg_buffer7 >> 2] | 0) + ($i$21 << 2) >> 2];
  $i$21 = $i$21 + 1 | 0;
  HEAP32[$vararg_buffer16 >> 2] = $i$21;
  HEAPF64[$vararg_buffer16 + 8 >> 3] = $30;
  _fprintf($4, gb + 28402 | 0, $vararg_buffer16) | 0;
 } while (($i$21 | 0) != 2e3);
 _fwrite(gb + 37424 | 0, 2, 1, $4) | 0;
 _fwrite(gb + 37279 | 0, 8, 1, $4) | 0;
 _fwrite(gb + 28421 | 0, 23, 1, $4) | 0;
 _fwrite(gb + 28445 | 0, 21, 1, $4) | 0;
 _fwrite(gb + 37424 | 0, 2, 1, $4) | 0;
 _fclose($4) | 0;
 HEAP32[$vararg_buffer20 >> 2] = $_filename;
 _printf(gb + 28467 | 0, $vararg_buffer20) | 0;
 STACKTOP = sp;
 return;
}

function _gmskframesync_execute($_q, $_x, $_n) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 $_n = $_n | 0;
 var $$byval_copy6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $28 = 0, $3 = 0, $31 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $42 = 0, $44 = 0, $46 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $i$02 = 0, $xf = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy6 = sp + 64 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 8 | 0;
 $xf = sp;
 $2 = sp + 56 | 0;
 $3 = sp + 48 | 0;
 $4 = sp + 40 | 0;
 $5 = sp + 32 | 0;
 $6 = sp + 16 | 0;
 if (!$_n) {
  STACKTOP = sp;
  return;
 }
 $8 = $2 + 4 | 0;
 $9 = $_q + 232 | 0;
 $10 = $_q + 216 | 0;
 $11 = $xf + 4 | 0;
 $12 = $_q + 124 | 0;
 $13 = $0 + 4 | 0;
 $14 = $_q + 108 | 0;
 $15 = $_q + 112 | 0;
 $16 = $_q + 116 | 0;
 $17 = $_q + 120 | 0;
 $18 = $1 + 4 | 0;
 $19 = $4 + 4 | 0;
 $20 = $5 + 4 | 0;
 $21 = $6 + 4 | 0;
 $22 = $_q + 240 | 0;
 $23 = $3 + 4 | 0;
 $i$02 = 0;
 do {
  $24 = HEAP32[$_q >> 2] | 0;
  $28 = HEAP32[$_x + ($i$02 << 3) + 4 >> 2] | 0;
  HEAP32[$2 >> 2] = HEAP32[$_x + ($i$02 << 3) >> 2];
  HEAP32[$8 >> 2] = $28;
  HEAP32[$$byval_copy6 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
  _iirfilt_crcf_execute($24, $$byval_copy6, $xf);
  if (HEAP32[$9 >> 2] | 0) {
   $31 = HEAP32[$22 >> 2] | 0;
   $33 = HEAP32[$11 >> 2] | 0;
   HEAP32[$3 >> 2] = HEAP32[$xf >> 2];
   HEAP32[$23 >> 2] = $33;
   HEAP32[$$byval_copy6 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   _windowcf_push($31, $$byval_copy6);
  }
  switch (HEAP32[$10 >> 2] | 0) {
  case 0:
   {
    $35 = HEAP32[$xf >> 2] | 0;
    $36 = HEAP32[$11 >> 2] | 0;
    $37 = HEAP32[$12 >> 2] | 0;
    HEAP32[$0 >> 2] = $35;
    HEAP32[$13 >> 2] = $36;
    HEAP32[$$byval_copy6 >> 2] = HEAP32[$0 >> 2];
    HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
    _windowcf_push($37, $$byval_copy6);
    $38 = HEAP32[$14 >> 2] | 0;
    HEAP32[$1 >> 2] = $35;
    HEAP32[$18 >> 2] = $36;
    HEAP32[$$byval_copy6 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
    if (_detector_cccf_correlate($38, $$byval_copy6, $15, $16, $17) | 0) _gmskframesync_pushpn($_q);
    break;
   }
  case 1:
   {
    $42 = HEAP32[$11 >> 2] | 0;
    HEAP32[$4 >> 2] = HEAP32[$xf >> 2];
    HEAP32[$19 >> 2] = $42;
    HEAP32[$$byval_copy6 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
    _gmskframesync_execute_rxpreamble($_q, $$byval_copy6);
    break;
   }
  case 2:
   {
    $44 = HEAP32[$11 >> 2] | 0;
    HEAP32[$5 >> 2] = HEAP32[$xf >> 2];
    HEAP32[$20 >> 2] = $44;
    HEAP32[$$byval_copy6 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
    _gmskframesync_execute_rxheader($_q, $$byval_copy6);
    break;
   }
  case 3:
   {
    $46 = HEAP32[$11 >> 2] | 0;
    HEAP32[$6 >> 2] = HEAP32[$xf >> 2];
    HEAP32[$21 >> 2] = $46;
    HEAP32[$$byval_copy6 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
    _gmskframesync_execute_rxpayload($_q, $$byval_copy6);
    break;
   }
  default:
   {}
  }
  $i$02 = $i$02 + 1 | 0;
 } while (($i$02 | 0) != ($_n | 0));
 STACKTOP = sp;
 return;
}

function _csinhf($agg$result, $z) {
 $agg$result = $agg$result | 0;
 $z = $z | 0;
 var $$byval_copy = 0, $$cast = 0.0, $0 = 0, $1 = 0, $16 = 0.0, $19 = 0.0, $2 = 0.0, $24 = 0.0, $29 = 0.0, $3 = 0, $34 = 0, $36 = 0, $4 = 0.0, $40 = 0.0, $45 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $54 = 0, $58 = 0.0, $6 = 0, $60 = 0.0, $7 = 0, $70 = 0.0, $72 = 0.0, $75 = 0.0, $8 = 0, $fabs = 0.0, $fabs35 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp;
 $2 = +HEAPF32[$z >> 2];
 $3 = $z + 4 | 0;
 $4 = +HEAPF32[$3 >> 2];
 $5 = (HEAPF32[tempDoublePtr >> 2] = $2, HEAP32[tempDoublePtr >> 2] | 0);
 $fabs = +Math_abs(+$2);
 $6 = (HEAPF32[tempDoublePtr >> 2] = $fabs, HEAP32[tempDoublePtr >> 2] | 0);
 $fabs35 = +Math_abs(+$4);
 $7 = (HEAPF32[tempDoublePtr >> 2] = $fabs35, HEAP32[tempDoublePtr >> 2] | 0);
 $8 = ($6 | 0) < 2139095040;
 do if ($8 & ($7 | 0) < 2139095040) {
  if (!$7) {
   HEAPF32[$agg$result >> 2] = +_sinhf($2);
   HEAPF32[$agg$result + 4 >> 2] = $4;
   break;
  }
  if (($6 | 0) < 1091567616) {
   $16 = +_sinhf($2) * +Math_cos(+$4);
   $19 = +_coshf($2) * +Math_sin(+$4);
   HEAPF32[$agg$result >> 2] = $16;
   HEAPF32[$agg$result + 4 >> 2] = $19;
   break;
  }
  if (($6 | 0) < 1118925336) {
   $24 = +Math_exp(+(+Math_abs(+$2))) * .5;
   $29 = $24 * +Math_sin(+$4);
   HEAPF32[$agg$result >> 2] = +_copysignf($24, $2) * +Math_cos(+$4);
   HEAPF32[$agg$result + 4 >> 2] = $29;
   break;
  }
  if (($6 | 0) < 1128313319) {
   HEAPF32[$1 >> 2] = +Math_abs(+$2);
   HEAPF32[$1 + 4 >> 2] = $4;
   HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   ___ldexp_cexpf($0, $$byval_copy, -1);
   $34 = HEAP32[$0 >> 2] | 0;
   $36 = HEAP32[$0 + 4 >> 2] | 0;
   HEAP32[$z >> 2] = $34;
   HEAP32[$3 >> 2] = $36;
   $$cast = (HEAP32[tempDoublePtr >> 2] = $34, +HEAPF32[tempDoublePtr >> 2]);
   HEAPF32[$agg$result >> 2] = $$cast * +_copysignf(1.0, $2);
   HEAP32[$agg$result + 4 >> 2] = $36;
   break;
  } else {
   $40 = $2 * 1701411834604692317316873.0e14;
   $45 = $40 * $40 * +Math_sin(+$4);
   HEAPF32[$agg$result >> 2] = $40 * +Math_cos(+$4);
   HEAPF32[$agg$result + 4 >> 2] = $45;
   break;
  }
 } else {
  $48 = ($7 | 0) > 2139095039;
  if (($6 | 0) == 0 & $48) {
   $49 = $4 - $4;
   HEAPF32[$agg$result >> 2] = +_copysignf(0.0, $2 * $49);
   HEAPF32[$agg$result + 4 >> 2] = $49;
   break;
  }
  $54 = ($6 | 0) > 2139095039;
  if ($54 & ($7 | 0) == 0) if (!($5 & 8388607)) {
   HEAPF32[$agg$result >> 2] = $2;
   HEAPF32[$agg$result + 4 >> 2] = $4;
   break;
  } else {
   $58 = +_copysignf(0.0, $4);
   HEAPF32[$agg$result >> 2] = $2;
   HEAPF32[$agg$result + 4 >> 2] = $58;
   break;
  }
  if ($8 & $48) {
   $60 = $4 - $4;
   HEAPF32[$agg$result >> 2] = $60;
   HEAPF32[$agg$result + 4 >> 2] = $2 * $60;
   break;
  }
  if (!($54 & ($5 & 8388607 | 0) == 0)) {
   $75 = $4 - $4;
   HEAPF32[$agg$result >> 2] = $2 * $2 * $75;
   HEAPF32[$agg$result + 4 >> 2] = ($2 + $2) * $75;
   break;
  }
  if ($48) {
   HEAPF32[$agg$result >> 2] = $2 * $2;
   HEAPF32[$agg$result + 4 >> 2] = $2 * ($4 - $4);
   break;
  } else {
   $70 = $2 * +Math_cos(+$4);
   $72 = +Math_sin(+$4) * inf;
   HEAPF32[$agg$result >> 2] = $70;
   HEAPF32[$agg$result + 4 >> 2] = $72;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function _ofdmframesync_execute($_q, $_x, $_n) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 $_n = $_n | 0;
 var $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $25 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $35 = 0, $37 = 0, $39 = 0.0, $4 = 0, $41 = 0.0, $46 = 0, $5 = 0, $55 = 0.0, $59 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $s_hat$i = 0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy2 = sp + 40 | 0;
 $s_hat$i = sp + 16 | 0;
 $x = sp;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 8 | 0;
 if (!$_n) {
  STACKTOP = sp;
  return;
 }
 $4 = $x + 4 | 0;
 $5 = $_q + 104 | 0;
 $6 = $_q + 60 | 0;
 $7 = $1 + 4 | 0;
 $8 = $_q + 168 | 0;
 $9 = $_q + 124 | 0;
 $10 = $_q + 4 | 0;
 $11 = $_q + 8 | 0;
 $12 = $_q + 84 | 0;
 $13 = $_q + 80 | 0;
 $14 = $s_hat$i + 4 | 0;
 $15 = $_q + 140 | 0;
 $16 = $_q + 136 | 0;
 $17 = $_q + 176 | 0;
 $18 = $2 + 4 | 0;
 $19 = $_q + 180 | 0;
 $20 = $_q + 108 | 0;
 $21 = $0 + 4 | 0;
 $i$03 = 0;
 do {
  $23 = HEAP32[$_x + ($i$03 << 3) >> 2] | 0;
  $25 = HEAP32[$_x + ($i$03 << 3) + 4 >> 2] | 0;
  HEAP32[$x >> 2] = $23;
  HEAP32[$4 >> 2] = $25;
  if (!(HEAP32[$5 >> 2] | 0)) {
   $31 = $23;
   $32 = $25;
  } else {
   $28 = HEAP32[$20 >> 2] | 0;
   HEAP32[$0 >> 2] = $23;
   HEAP32[$21 >> 2] = $25;
   HEAP32[$$byval_copy2 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$$byval_copy2 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
   _nco_crcf_mix_down($28, $$byval_copy2, $x);
   _nco_crcf_step(HEAP32[$20 >> 2] | 0);
   $31 = HEAP32[$x >> 2] | 0;
   $32 = HEAP32[$4 >> 2] | 0;
  }
  $30 = HEAP32[$6 >> 2] | 0;
  HEAP32[$1 >> 2] = $31;
  HEAP32[$7 >> 2] = $32;
  HEAP32[$$byval_copy2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$$byval_copy2 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  _windowcf_push($30, $$byval_copy2);
  if (HEAP32[$8 >> 2] | 0) {
   $35 = HEAP32[$17 >> 2] | 0;
   $37 = HEAP32[$4 >> 2] | 0;
   HEAP32[$2 >> 2] = HEAP32[$x >> 2];
   HEAP32[$18 >> 2] = $37;
   HEAP32[$$byval_copy2 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy2 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
   _windowcf_push($35, $$byval_copy2);
   $39 = +HEAPF32[$x >> 2];
   $41 = +HEAPF32[$4 >> 2];
   _windowf_push(HEAP32[$19 >> 2] | 0, $39 * $39 + $41 * $41);
  }
  switch (HEAP32[$5 >> 2] | 0) {
  case 0:
   {
    _ofdmframesync_execute_seekplcp($_q);
    break;
   }
  case 1:
   {
    $46 = (HEAP32[$9 >> 2] | 0) + 1 | 0;
    HEAP32[$9 >> 2] = $46;
    if ($46 >>> 0 >= (HEAP32[$10 >> 2] | 0) >>> 0) {
     HEAP32[$9 >> 2] = 0;
     _windowcf_read(HEAP32[$6 >> 2] | 0, $$byval_copy2);
     _ofdmframesync_estimate_gain_S0($_q, (HEAP32[$$byval_copy2 >> 2] | 0) + (HEAP32[$11 >> 2] << 3) | 0, HEAP32[$12 >> 2] | 0);
     _ofdmframesync_S0_metrics($_q, HEAP32[$12 >> 2] | 0, $s_hat$i);
     $55 = +HEAPF32[$13 >> 2];
     $59 = $55 * +HEAPF32[$14 >> 2];
     HEAPF32[$16 >> 2] = $55 * +HEAPF32[$s_hat$i >> 2];
     HEAPF32[$15 >> 2] = $59;
     HEAP32[$5 >> 2] = 2;
    }
    break;
   }
  case 2:
   {
    _ofdmframesync_execute_S0b($_q);
    break;
   }
  case 3:
   {
    _ofdmframesync_execute_S1($_q);
    break;
   }
  case 4:
   {
    _ofdmframesync_execute_rxsymbols($_q);
    break;
   }
  default:
   {}
  }
  $i$03 = $i$03 + 1 | 0;
 } while (($i$03 | 0) != ($_n | 0));
 STACKTOP = sp;
 return;
}

function _flexframesync_execute_rxheader($_q, $_x) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 var $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $12 = 0, $13 = 0, $18 = 0, $19 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $29 = 0, $33 = 0, $37 = 0, $4 = 0, $41 = 0, $46 = 0, $5 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $9 = 0, $mf_out$sroa$0$0 = 0, $mf_out$sroa$5$0 = 0, $v$i = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy2 = sp + 24 | 0;
 $v$i = sp + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp;
 $4 = HEAP32[$_x + 4 >> 2] | 0;
 $5 = $_q + 92 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 HEAP32[$0 >> 2] = HEAP32[$_x >> 2];
 HEAP32[$0 + 4 >> 2] = $4;
 HEAP32[$$byval_copy2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy2 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 _nco_crcf_mix_down($6, $$byval_copy2, $v$i);
 _nco_crcf_step(HEAP32[$5 >> 2] | 0);
 $9 = $_q + 100 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 $12 = $v$i + 4 | 0;
 $13 = HEAP32[$12 >> 2] | 0;
 HEAP32[$1 >> 2] = HEAP32[$v$i >> 2];
 HEAP32[$1 + 4 >> 2] = $13;
 HEAP32[$$byval_copy2 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$$byval_copy2 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 _firpfb_crcf_push($10, $$byval_copy2);
 _firpfb_crcf_execute(HEAP32[$9 >> 2] | 0, HEAP32[$_q + 112 >> 2] | 0, $v$i);
 $18 = $_q + 108 | 0;
 $19 = HEAP32[$18 >> 2] | 0;
 HEAP32[$18 >> 2] = $19 + 1;
 if (($19 | 0) > -1) {
  $22 = HEAP32[$v$i >> 2] | 0;
  $23 = HEAP32[$12 >> 2] | 0;
  HEAP32[$18 >> 2] = $19 + -1;
  $mf_out$sroa$0$0 = $22;
  $mf_out$sroa$5$0 = $23;
 } else {
  $mf_out$sroa$0$0 = 0;
  $mf_out$sroa$5$0 = 0;
 }
 if (($19 | 0) < 0) {
  STACKTOP = sp;
  return;
 }
 $26 = $_q + 196 | 0;
 $27 = HEAP32[$26 >> 2] | 0;
 $29 = HEAP32[$_q + 124 >> 2] | 0;
 HEAP32[$29 + ($27 << 3) >> 2] = $mf_out$sroa$0$0;
 HEAP32[$29 + ($27 << 3) + 4 >> 2] = $mf_out$sroa$5$0;
 $33 = (HEAP32[$26 >> 2] | 0) + 1 | 0;
 HEAP32[$26 >> 2] = $33;
 if (($33 | 0) != (HEAP32[$_q + 128 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 _flexframesync_decode_header($_q);
 $37 = $_q + 160 | 0;
 if (HEAP32[$37 >> 2] | 0) {
  HEAP32[$26 >> 2] = 0;
  HEAP32[$_q + 200 >> 2] = 3;
  STACKTOP = sp;
  return;
 }
 $41 = $_q + 48 | 0;
 HEAP32[$41 >> 2] = (HEAP32[$41 >> 2] | 0) + 1;
 if (HEAP32[$_q >> 2] | 0) {
  $46 = $_q + 8 | 0;
  HEAPF32[$46 >> 2] = 0.0;
  HEAPF32[$_q + 12 >> 2] = +_log10f(+HEAPF32[$_q + 88 >> 2]) * 20.0;
  HEAPF32[$_q + 16 >> 2] = +_nco_crcf_get_frequency(HEAP32[$5 >> 2] | 0);
  $55 = $_q + 20 | 0;
  HEAP32[$55 >> 2] = 0;
  HEAP32[$55 + 4 >> 2] = 0;
  HEAP32[$55 + 8 >> 2] = 0;
  HEAP32[$55 + 12 >> 2] = 0;
  HEAP32[$55 + 16 >> 2] = 0;
  HEAP32[$55 + 20 >> 2] = 0;
  HEAP32[$55 + 24 >> 2] = 0;
  $56 = HEAP32[$_q >> 2] | 0;
  $58 = HEAP32[$_q + 156 >> 2] | 0;
  $59 = HEAP32[$37 >> 2] | 0;
  $61 = HEAP32[$_q + 4 >> 2] | 0;
  dest = $$byval_copy2;
  src = $46;
  stop = dest + 40 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  mftCall_iiiiiiii($56 | 0, $58 | 0, $59 | 0, 0, 0, 0, $$byval_copy2 | 0, $61 | 0) | 0;
 }
 _nco_crcf_reset(HEAP32[$5 >> 2] | 0);
 _nco_crcf_reset(HEAP32[$_q + 96 >> 2] | 0);
 _firpfb_crcf_reset(HEAP32[$9 >> 2] | 0);
 HEAP32[$_q + 200 >> 2] = 0;
 HEAP32[$_q + 192 >> 2] = 0;
 HEAP32[$26 >> 2] = 0;
 HEAPF32[$_q + 8 >> 2] = 0.0;
 STACKTOP = sp;
 return;
}

function _fecsoft_hamming128_decode_n3($_soft_bits) {
 $_soft_bits = $_soft_bits | 0;
 var $$s_hat$0 = 0, $$s_hat$0$lcssa = 0, $105 = 0, $106 = 0, $112 = 0, $113 = 0, $119 = 0, $120 = 0, $126 = 0, $127 = 0, $13 = 0, $133 = 0, $134 = 0, $140 = 0, $141 = 0, $146 = 0, $149 = 0, $18 = 0, $196 = 0, $197 = 0, $23 = 0, $28 = 0, $3 = 0, $33 = 0, $38 = 0, $43 = 0, $48 = 0, $53 = 0, $57 = 0, $60 = 0, $64 = 0, $65 = 0, $70 = 0, $71 = 0, $77 = 0, $78 = 0, $8 = 0, $84 = 0, $85 = 0, $91 = 0, $92 = 0, $98 = 0, $99 = 0, $dmin$01 = 0, $i$03 = 0, $s_hat$02 = 0;
 $3 = $_soft_bits + 1 | 0;
 $8 = $_soft_bits + 2 | 0;
 $13 = $_soft_bits + 3 | 0;
 $18 = $_soft_bits + 4 | 0;
 $23 = $_soft_bits + 5 | 0;
 $28 = $_soft_bits + 6 | 0;
 $33 = $_soft_bits + 7 | 0;
 $38 = $_soft_bits + 8 | 0;
 $43 = $_soft_bits + 9 | 0;
 $48 = $_soft_bits + 10 | 0;
 $53 = $_soft_bits + 11 | 0;
 $57 = _fec_hamming128_decode_symbol(((HEAP8[$3 >> 0] | 0) < 0 ? 1024 : 0) | ((HEAP8[$_soft_bits >> 0] | 0) < 0 ? 2048 : 0) | ((HEAP8[$8 >> 0] | 0) < 0 ? 512 : 0) | ((HEAP8[$13 >> 0] | 0) < 0 ? 256 : 0) | ((HEAP8[$18 >> 0] | 0) < 0 ? 128 : 0) | ((HEAP8[$23 >> 0] | 0) < 0 ? 64 : 0) | ((HEAP8[$28 >> 0] | 0) < 0 ? 32 : 0) | ((HEAP8[$33 >> 0] | 0) < 0 ? 16 : 0) | ((HEAP8[$38 >> 0] | 0) < 0 ? 8 : 0) | ((HEAP8[$43 >> 0] | 0) < 0 ? 4 : 0) | ((HEAP8[$48 >> 0] | 0) < 0 ? 2 : 0) | (HEAPU8[$53 >> 0] | 0) >>> 7 & 255) | 0;
 $60 = HEAPU16[gb + 9772 + ($57 << 1) >> 1] | 0;
 $64 = HEAPU8[$_soft_bits >> 0] | 0;
 $65 = $64 ^ 255;
 $70 = HEAPU8[$3 >> 0] | 0;
 $71 = $70 ^ 255;
 $77 = HEAPU8[$8 >> 0] | 0;
 $78 = $77 ^ 255;
 $84 = HEAPU8[$13 >> 0] | 0;
 $85 = $84 ^ 255;
 $91 = HEAPU8[$18 >> 0] | 0;
 $92 = $91 ^ 255;
 $98 = HEAPU8[$23 >> 0] | 0;
 $99 = $98 ^ 255;
 $105 = HEAPU8[$28 >> 0] | 0;
 $106 = $105 ^ 255;
 $112 = HEAPU8[$33 >> 0] | 0;
 $113 = $112 ^ 255;
 $119 = HEAPU8[$38 >> 0] | 0;
 $120 = $119 ^ 255;
 $126 = HEAPU8[$43 >> 0] | 0;
 $127 = $126 ^ 255;
 $133 = HEAPU8[$48 >> 0] | 0;
 $134 = $133 ^ 255;
 $140 = HEAPU8[$53 >> 0] | 0;
 $141 = $140 ^ 255;
 $dmin$01 = ($60 & 1024 | 0 ? $71 : $70) + ($60 & 2048 | 0 ? $65 : $64) + ($60 & 512 | 0 ? $78 : $77) + ($60 & 256 | 0 ? $85 : $84) + ($60 & 128 | 0 ? $92 : $91) + ($60 & 64 | 0 ? $99 : $98) + ($60 & 32 | 0 ? $106 : $105) + ($60 & 16 | 0 ? $113 : $112) + ($60 & 8 | 0 ? $120 : $119) + ($60 & 4 | 0 ? $127 : $126) + ($60 & 2 | 0 ? $134 : $133) + ($60 & 1 | 0 ? $141 : $140) | 0;
 $i$03 = 0;
 $s_hat$02 = $57;
 while (1) {
  $146 = HEAPU8[gb + 14375 + ($s_hat$02 * 17 | 0) + $i$03 >> 0] | 0;
  $149 = HEAPU16[gb + 9772 + ($146 << 1) >> 1] | 0;
  $196 = ($149 & 1024 | 0 ? $71 : $70) + ($149 & 2048 | 0 ? $65 : $64) + ($149 & 512 | 0 ? $78 : $77) + ($149 & 256 | 0 ? $85 : $84) + ($149 & 128 | 0 ? $92 : $91) + ($149 & 64 | 0 ? $99 : $98) + ($149 & 32 | 0 ? $106 : $105) + ($149 & 16 | 0 ? $113 : $112) + ($149 & 8 | 0 ? $120 : $119) + ($149 & 4 | 0 ? $127 : $126) + ($149 & 2 | 0 ? $134 : $133) + ($149 & 1 | 0 ? $141 : $140) | 0;
  $197 = $196 >>> 0 < $dmin$01 >>> 0;
  $$s_hat$0 = $197 ? $146 : $s_hat$02;
  $i$03 = $i$03 + 1 | 0;
  if (($i$03 | 0) == 17) {
   $$s_hat$0$lcssa = $$s_hat$0;
   break;
  } else {
   $dmin$01 = $197 ? $196 : $dmin$01;
   $s_hat$02 = $$s_hat$0;
  }
 }
 return $$s_hat$0$lcssa | 0;
}

function _stream_get($stream, $error) {
 $stream = $stream | 0;
 $error = $error | 0;
 var $0 = 0, $1 = 0, $102 = 0, $108 = 0, $109 = 0, $111 = 0, $2 = 0, $47 = 0, $53 = 0, $7 = 0, $72 = 0, $73 = 0, $81 = 0, $87 = 0, $c = 0, $count = 0, $i = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 24 | 0;
 $1 = sp + 20 | 0;
 $2 = sp + 16 | 0;
 $c = sp + 12 | 0;
 $i = sp + 8 | 0;
 $count = sp + 4 | 0;
 HEAP32[$1 >> 2] = $stream;
 HEAP32[$2 >> 2] = $error;
 $7 = HEAP32[$1 >> 2] | 0;
 if (HEAP32[(HEAP32[$1 >> 2] | 0) + 20 >> 2] | 0) {
  HEAP32[$0 >> 2] = HEAP32[$7 + 20 >> 2];
  $111 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $111 | 0;
 }
 do if (!(HEAP8[(HEAP32[$1 >> 2] | 0) + 8 + (HEAP32[$7 + 16 >> 2] | 0) >> 0] | 0)) {
  HEAP32[$c >> 2] = mftCall_ii(HEAP32[HEAP32[$1 >> 2] >> 2] | 0, HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) | 0;
  if ((HEAP32[$c >> 2] | 0) == -1) {
   HEAP32[(HEAP32[$1 >> 2] | 0) + 20 >> 2] = -1;
   HEAP32[$0 >> 2] = -1;
   $111 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $111 | 0;
  }
  HEAP8[(HEAP32[$1 >> 2] | 0) + 8 >> 0] = HEAP32[$c >> 2];
  HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] = 0;
  if (!(128 <= (HEAP32[$c >> 2] | 0) & (HEAP32[$c >> 2] | 0) <= 255)) {
   HEAP8[(HEAP32[$1 >> 2] | 0) + 8 + 1 >> 0] = 0;
   break;
  }
  HEAP32[$count >> 2] = _utf8_check_first(HEAP32[$c >> 2] & 255) | 0;
  if (HEAP32[$count >> 2] | 0) {
   if ((HEAP32[$count >> 2] | 0) >>> 0 < 2) ___assert_fail(gb + 41338 | 0, gb + 41349 | 0, 179, gb + 41356 | 0);
   HEAP32[$i >> 2] = 1;
   while (1) {
    $47 = HEAP32[$1 >> 2] | 0;
    if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$count >> 2] | 0) >>> 0) break;
    $53 = (mftCall_ii(HEAP32[$47 >> 2] | 0, HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) | 0) & 255;
    HEAP8[(HEAP32[$1 >> 2] | 0) + 8 + (HEAP32[$i >> 2] | 0) >> 0] = $53;
    HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
   }
   if (_utf8_check_full($47 + 8 | 0, HEAP32[$count >> 2] | 0, 0) | 0) {
    HEAP8[(HEAP32[$1 >> 2] | 0) + 8 + (HEAP32[$count >> 2] | 0) >> 0] = 0;
    break;
   }
  }
  HEAP32[(HEAP32[$1 >> 2] | 0) + 20 >> 2] = -2;
  $108 = HEAP32[$2 >> 2] | 0;
  $109 = HEAP32[$1 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = HEAP32[$c >> 2];
  _error_set($108, $109, gb + 41367 | 0, $vararg_buffer);
  HEAP32[$0 >> 2] = -2;
  $111 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $111 | 0;
 } while (0);
 $72 = (HEAP32[$1 >> 2] | 0) + 16 | 0;
 $73 = HEAP32[$72 >> 2] | 0;
 HEAP32[$72 >> 2] = $73 + 1;
 HEAP32[$c >> 2] = HEAP8[(HEAP32[$1 >> 2] | 0) + 8 + $73 >> 0];
 $81 = (HEAP32[$1 >> 2] | 0) + 36 | 0;
 HEAP32[$81 >> 2] = (HEAP32[$81 >> 2] | 0) + 1;
 if ((HEAP32[$c >> 2] | 0) == 10) {
  $87 = (HEAP32[$1 >> 2] | 0) + 24 | 0;
  HEAP32[$87 >> 2] = (HEAP32[$87 >> 2] | 0) + 1;
  HEAP32[(HEAP32[$1 >> 2] | 0) + 32 >> 2] = HEAP32[(HEAP32[$1 >> 2] | 0) + 28 >> 2];
  HEAP32[(HEAP32[$1 >> 2] | 0) + 28 >> 2] = 0;
 } else if (_utf8_check_first(HEAP32[$c >> 2] & 255) | 0) {
  $102 = (HEAP32[$1 >> 2] | 0) + 28 | 0;
  HEAP32[$102 >> 2] = (HEAP32[$102 >> 2] | 0) + 1;
 }
 HEAP32[$0 >> 2] = HEAP32[$c >> 2];
 $111 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $111 | 0;
}

function _crc_generate_key($_scheme, $_msg, $_n) {
 $_scheme = $_scheme | 0;
 $_msg = $_msg | 0;
 $_n = $_n | 0;
 var $$0 = 0, $$lcssa = 0, $$lcssa19 = 0, $$lcssa20 = 0, $102 = 0, $104 = 0, $13 = 0, $18 = 0, $23 = 0, $28 = 0, $33 = 0, $38 = 0, $43 = 0, $48 = 0, $5 = 0, $53 = 0, $57 = 0, $62 = 0, $67 = 0, $72 = 0, $77 = 0, $8 = 0, $82 = 0, $87 = 0, $92 = 0, $97 = 0, $i$02$i = 0, $i$04$i = 0, $i$04$i4 = 0, $key32$03$i = 0, $key8$03$i = 0, $sum$01$i = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 switch ($_scheme | 0) {
 case 0:
  {
   _fwrite(gb + 11448 | 0, 71, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
   _exit(-1);
   break;
  }
 case 2:
  {
   if (!$_n) {
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else {
    $i$02$i = 0;
    $sum$01$i = 0;
   }
   while (1) {
    $5 = (HEAPU8[$_msg + $i$02$i >> 0] | 0) + $sum$01$i | 0;
    $i$02$i = $i$02$i + 1 | 0;
    if (($i$02$i | 0) == ($_n | 0)) {
     $$lcssa = $5;
     break;
    } else $sum$01$i = $5;
   }
   $$0 = ($$lcssa ^ 255) + 1 & 255;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 3:
  {
   $8 = HEAPU8[gb + 39741 + 7 >> 0] | 0;
   if (!$_n) {
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else {
    $i$04$i4 = 0;
    $key8$03$i = -1;
   }
   while (1) {
    $13 = (HEAPU8[$_msg + $i$04$i4 >> 0] | 0) ^ $key8$03$i;
    $18 = $8 & 0 - ($13 & 1) ^ $13 >>> 1;
    $23 = $8 & 0 - ($18 & 1) ^ $18 >>> 1;
    $28 = $8 & 0 - ($23 & 1) ^ $23 >>> 1;
    $33 = $8 & 0 - ($28 & 1) ^ $28 >>> 1;
    $38 = $8 & 0 - ($33 & 1) ^ $33 >>> 1;
    $43 = $8 & 0 - ($38 & 1) ^ $38 >>> 1;
    $48 = $8 & 0 - ($43 & 1) ^ $43 >>> 1;
    $53 = $8 & 0 - ($48 & 1) ^ $48 >>> 1;
    $i$04$i4 = $i$04$i4 + 1 | 0;
    if (($i$04$i4 | 0) == ($_n | 0)) {
     $$lcssa19 = $53;
     break;
    } else $key8$03$i = $53;
   }
   $$0 = $$lcssa19 & 255 ^ 255;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 4:
  {
   $$0 = _crc16_generate_key($_msg, $_n) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 5:
  {
   $$0 = _crc24_generate_key($_msg, $_n) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 6:
  {
   $57 = _liquid_reverse_uint32(79764919) | 0;
   if (!$_n) {
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else {
    $i$04$i = 0;
    $key32$03$i = -1;
   }
   while (1) {
    $62 = (HEAPU8[$_msg + $i$04$i >> 0] | 0) ^ $key32$03$i;
    $67 = $57 & 0 - ($62 & 1) ^ $62 >>> 1;
    $72 = $57 & 0 - ($67 & 1) ^ $67 >>> 1;
    $77 = $57 & 0 - ($72 & 1) ^ $72 >>> 1;
    $82 = $57 & 0 - ($77 & 1) ^ $77 >>> 1;
    $87 = $57 & 0 - ($82 & 1) ^ $82 >>> 1;
    $92 = $57 & 0 - ($87 & 1) ^ $87 >>> 1;
    $97 = $57 & 0 - ($92 & 1) ^ $92 >>> 1;
    $102 = $57 & 0 - ($97 & 1) ^ $97 >>> 1;
    $i$04$i = $i$04$i + 1 | 0;
    if (($i$04$i | 0) == ($_n | 0)) {
     $$lcssa20 = $102;
     break;
    } else $key32$03$i = $102;
   }
   $$0 = ~$$lcssa20;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 1:
  {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 default:
  {
   $104 = HEAP32[gb + 9336 >> 2] | 0;
   HEAP32[$vararg_buffer >> 2] = $_scheme;
   _fprintf($104, gb + 11520 | 0, $vararg_buffer) | 0;
   _exit(1);
  }
 }
 return 0;
}

function _fec_secded2216_estimate_ehat($_sym_enc, $_e_hat) {
 $_sym_enc = $_sym_enc | 0;
 $_e_hat = $_e_hat | 0;
 var $$lcssa = 0, $15 = 0, $3 = 0, $34 = 0, $36 = 0, $5 = 0, $52 = 0, $7 = 0, $d = 0, $i$02$i = 0, $n$03$lcssa = 0, $syndrome$01$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $d = sp;
 HEAP8[$_e_hat >> 0] = 0;
 HEAP8[$_e_hat + 1 >> 0] = 0;
 HEAP8[$_e_hat + 2 >> 0] = 0;
 $3 = HEAPU8[$_sym_enc >> 0] | 0;
 $5 = HEAP8[$_sym_enc + 1 >> 0] | 0;
 $7 = HEAP8[$_sym_enc + 2 >> 0] | 0;
 $i$02$i = 0;
 $syndrome$01$i = 0;
 while (1) {
  $15 = $i$02$i << 1;
  $34 = ((1 << 5 - $i$02$i & $3 | 0) != 0 & 1) + (HEAPU8[(HEAP8[gb + 18960 + $15 >> 0] & $5 & 255) + (gb + 39229) >> 0] | 0) + (HEAPU8[(HEAP8[($15 | 1) + (gb + 18960) >> 0] & $7 & 255) + (gb + 39229) >> 0] | 0) & 1 | $syndrome$01$i << 1 & 510;
  $i$02$i = $i$02$i + 1 | 0;
  if (($i$02$i | 0) == 6) {
   $$lcssa = $34;
   break;
  } else $syndrome$01$i = $34;
 }
 $36 = $$lcssa & 255;
 if (!(HEAP8[($$lcssa & 255) + (gb + 39229) >> 0] | 0)) {
  $52 = 0;
  STACKTOP = sp;
  return $52 | 0;
 }
 do if ($36 << 24 >> 24 == (HEAP8[gb + 18972 >> 0] | 0)) $n$03$lcssa = 0; else if ($36 << 24 >> 24 == (HEAP8[gb + 18972 + 1 >> 0] | 0)) $n$03$lcssa = 1; else if ($36 << 24 >> 24 == (HEAP8[gb + 18972 + 2 >> 0] | 0)) $n$03$lcssa = 2; else if ($36 << 24 >> 24 == (HEAP8[gb + 18972 + 3 >> 0] | 0)) $n$03$lcssa = 3; else if ($36 << 24 >> 24 == (HEAP8[gb + 18972 + 4 >> 0] | 0)) $n$03$lcssa = 4; else if ($36 << 24 >> 24 == (HEAP8[gb + 18972 + 5 >> 0] | 0)) $n$03$lcssa = 5; else if ($36 << 24 >> 24 == (HEAP8[gb + 18972 + 6 >> 0] | 0)) $n$03$lcssa = 6; else if ($36 << 24 >> 24 == (HEAP8[gb + 18972 + 7 >> 0] | 0)) $n$03$lcssa = 7; else if ($36 << 24 >> 24 == (HEAP8[gb + 18972 + 8 >> 0] | 0)) $n$03$lcssa = 8; else if ($36 << 24 >> 24 == (HEAP8[gb + 18972 + 9 >> 0] | 0)) $n$03$lcssa = 9; else if ($36 << 24 >> 24 == (HEAP8[gb + 18972 + 10 >> 0] | 0)) $n$03$lcssa = 10; else if ($36 << 24 >> 24 == (HEAP8[gb + 18972 + 11 >> 0] | 0)) $n$03$lcssa = 11; else if ($36 << 24 >> 24 == (HEAP8[gb + 18972 + 12 >> 0] | 0)) $n$03$lcssa = 12; else if ($36 << 24 >> 24 == (HEAP8[gb + 18972 + 13 >> 0] | 0)) $n$03$lcssa = 13; else if ($36 << 24 >> 24 == (HEAP8[gb + 18972 + 14 >> 0] | 0)) $n$03$lcssa = 14; else if ($36 << 24 >> 24 == (HEAP8[gb + 18972 + 15 >> 0] | 0)) $n$03$lcssa = 15; else if ($36 << 24 >> 24 == (HEAP8[gb + 18972 + 16 >> 0] | 0)) $n$03$lcssa = 16; else if ($36 << 24 >> 24 == (HEAP8[gb + 18972 + 17 >> 0] | 0)) $n$03$lcssa = 17; else {
  if ($36 << 24 >> 24 == (HEAP8[gb + 18972 + 18 >> 0] | 0)) {
   $n$03$lcssa = 18;
   break;
  }
  if ($36 << 24 >> 24 == (HEAP8[gb + 18972 + 19 >> 0] | 0)) {
   $n$03$lcssa = 19;
   break;
  }
  if ($36 << 24 >> 24 == (HEAP8[gb + 18972 + 20 >> 0] | 0)) {
   $n$03$lcssa = 20;
   break;
  }
  if ($36 << 24 >> 24 == (HEAP8[gb + 18972 + 21 >> 0] | 0)) {
   $n$03$lcssa = 21;
   break;
  } else $52 = 2;
  STACKTOP = sp;
  return $52 | 0;
 } while (0);
 _div($d, $n$03$lcssa, 8);
 HEAP8[$_e_hat + (2 - (HEAP32[$d >> 2] | 0)) >> 0] = 1 << HEAP32[$d + 4 >> 2];
 $52 = 1;
 STACKTOP = sp;
 return $52 | 0;
}

function _liquid_repack_bytes($_sym_in, $_sym_in_bps, $_sym_in_len, $_sym_out, $_sym_out_bps, $_sym_out_len, $_num_written) {
 $_sym_in = $_sym_in | 0;
 $_sym_in_bps = $_sym_in_bps | 0;
 $_sym_in_len = $_sym_in_len | 0;
 $_sym_out = $_sym_out | 0;
 $_sym_out_bps = $_sym_out_bps | 0;
 $_sym_out_len = $_sym_out_len | 0;
 $_num_written = $_num_written | 0;
 var $0 = 0, $10 = 0, $11 = 0, $23 = 0, $30 = 0, $36 = 0, $6 = 0, $9 = 0, $d = 0, $i$06 = 0, $i$13 = 0, $i_in$07 = 0, $i_in$1 = 0, $i_out$0$lcssa = 0, $i_out$08 = 0, $i_out$1 = 0, $i_out$2 = 0, $k$09 = 0, $n$0$lcssa = 0, $n$010 = 0, $s_in$04 = 0, $s_in$1 = 0, $s_out$0$lcssa = 0, $s_out$05 = 0, $s_out$1 = 0, $s_out$2$lcssa = 0, $s_out$22 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $d = sp + 16 | 0;
 $0 = Math_imul($_sym_in_len, $_sym_in_bps) | 0;
 _div($d, $0, $_sym_out_bps);
 $6 = ((HEAP32[$d + 4 >> 2] | 0) > 0 & 1) + (HEAP32[$d >> 2] | 0) | 0;
 if ($6 >>> 0 > $_sym_out_len >>> 0) {
  $11 = HEAP32[gb + 9336 >> 2] | 0;
  _fwrite(gb + 40199 | 0, 40, 1, $11) | 0;
  HEAP32[$vararg_buffer >> 2] = $_sym_in_len;
  HEAP32[$vararg_buffer + 4 >> 2] = $_sym_in_bps;
  HEAP32[$vararg_buffer + 8 >> 2] = $_sym_out_len;
  HEAP32[$vararg_buffer + 12 >> 2] = $_sym_out_bps;
  _fprintf($11, gb + 40240 | 0, $vararg_buffer) | 0;
  _exit(-1);
 }
 if (!$0) {
  $i_out$0$lcssa = 0;
  $n$0$lcssa = 0;
  $s_out$0$lcssa = 0;
 } else {
  $9 = $_sym_in_bps + -1 | 0;
  $10 = $_sym_out_bps + -1 | 0;
  $i$06 = 0;
  $i_in$07 = 0;
  $i_out$08 = 0;
  $k$09 = 0;
  $n$010 = 0;
  $s_in$04 = 0;
  $s_out$05 = 0;
  while (1) {
   if (!$k$09) {
    $i_in$1 = $i_in$07 + 1 | 0;
    $s_in$1 = HEAP8[$_sym_in + $i_in$07 >> 0] | 0;
   } else {
    $i_in$1 = $i_in$07;
    $s_in$1 = $s_in$04;
   }
   $23 = (($s_in$1 & 255) >>> ($9 - $k$09 | 0) & 1 | ($s_out$05 & 255) << 1) & 255;
   if (($n$010 | 0) == ($10 | 0)) {
    HEAP8[$_sym_out + $i_out$08 >> 0] = $23;
    $i_out$1 = $i_out$08 + 1 | 0;
    $s_out$1 = 0;
   } else {
    $i_out$1 = $i_out$08;
    $s_out$1 = $23;
   }
   $30 = (($n$010 + 1 | 0) >>> 0) % ($_sym_out_bps >>> 0) | 0;
   $i$06 = $i$06 + 1 | 0;
   if (($i$06 | 0) == ($0 | 0)) {
    $i_out$0$lcssa = $i_out$1;
    $n$0$lcssa = $30;
    $s_out$0$lcssa = $s_out$1;
    break;
   } else {
    $i_in$07 = $i_in$1;
    $i_out$08 = $i_out$1;
    $k$09 = (($k$09 + 1 | 0) >>> 0) % ($_sym_in_bps >>> 0) | 0;
    $n$010 = $30;
    $s_in$04 = $s_in$1;
    $s_out$05 = $s_out$1;
   }
  }
 }
 if (($i_out$0$lcssa | 0) == ($6 | 0)) {
  $i_out$2 = $6;
  HEAP32[$_num_written >> 2] = $i_out$2;
  STACKTOP = sp;
  return;
 }
 if ($n$0$lcssa >>> 0 < $_sym_out_bps >>> 0) {
  $i$13 = $n$0$lcssa;
  $s_out$22 = $s_out$0$lcssa;
  while (1) {
   $36 = ($s_out$22 & 255) << 1 & 255;
   $i$13 = $i$13 + 1 | 0;
   if (($i$13 | 0) == ($_sym_out_bps | 0)) {
    $s_out$2$lcssa = $36;
    break;
   } else $s_out$22 = $36;
  }
 } else $s_out$2$lcssa = $s_out$0$lcssa;
 HEAP8[$_sym_out + $i_out$0$lcssa >> 0] = $s_out$2$lcssa;
 $i_out$2 = $i_out$0$lcssa + 1 | 0;
 HEAP32[$_num_written >> 2] = $i_out$2;
 STACKTOP = sp;
 return;
}

function ___stpncpy($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 var $$0$lcssa = 0, $$0$lcssa42 = 0, $$031 = 0, $$04$lcssa = 0, $$04$lcssa43 = 0, $$0430 = 0, $$06$lcssa = 0, $$06$lcssa44 = 0, $$0629 = 0, $$1$lcssa = 0, $$117 = 0, $$15$ph = 0, $$1511 = 0, $$17$ph = 0, $$1710 = 0, $$2$ph = 0, $$212 = 0, $$28 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $16 = 0, $20 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $7 = 0, $8 = 0, $wd$0$lcssa = 0, $wd$018 = 0, $ws$0$lcssa = 0, $ws$019 = 0, label = 0;
 $0 = $s;
 do if (!(($0 ^ $d) & 3)) {
  $7 = ($n | 0) != 0;
  L3 : do if ($7 & ($0 & 3 | 0) != 0) {
   $$031 = $n;
   $$0430 = $s;
   $$0629 = $d;
   while (1) {
    $8 = HEAP8[$$0430 >> 0] | 0;
    HEAP8[$$0629 >> 0] = $8;
    if (!($8 << 24 >> 24)) {
     $$0$lcssa42 = $$031;
     $$04$lcssa43 = $$0430;
     $$06$lcssa44 = $$0629;
     break L3;
    }
    $10 = $$031 + -1 | 0;
    $11 = $$0430 + 1 | 0;
    $12 = $$0629 + 1 | 0;
    $16 = ($10 | 0) != 0;
    if ($16 & ($11 & 3 | 0) != 0) {
     $$031 = $10;
     $$0430 = $11;
     $$0629 = $12;
    } else {
     $$0$lcssa = $10;
     $$04$lcssa = $11;
     $$06$lcssa = $12;
     $$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;
   $$04$lcssa = $s;
   $$06$lcssa = $d;
   $$lcssa = $7;
   label = 5;
  } while (0);
  if ((label | 0) == 5) if ($$lcssa) {
   $$0$lcssa42 = $$0$lcssa;
   $$04$lcssa43 = $$04$lcssa;
   $$06$lcssa44 = $$06$lcssa;
  } else {
   $$28 = $$06$lcssa;
   $$3 = 0;
   break;
  }
  if (!(HEAP8[$$04$lcssa43 >> 0] | 0)) {
   $$28 = $$06$lcssa44;
   $$3 = $$0$lcssa42;
  } else {
   L11 : do if ($$0$lcssa42 >>> 0 > 3) {
    $$117 = $$0$lcssa42;
    $wd$018 = $$06$lcssa44;
    $ws$019 = $$04$lcssa43;
    while (1) {
     $20 = HEAP32[$ws$019 >> 2] | 0;
     if (($20 & -2139062144 ^ -2139062144) & $20 + -16843009 | 0) {
      $$1$lcssa = $$117;
      $wd$0$lcssa = $wd$018;
      $ws$0$lcssa = $ws$019;
      break L11;
     }
     HEAP32[$wd$018 >> 2] = $20;
     $26 = $$117 + -4 | 0;
     $27 = $ws$019 + 4 | 0;
     $28 = $wd$018 + 4 | 0;
     if ($26 >>> 0 > 3) {
      $$117 = $26;
      $wd$018 = $28;
      $ws$019 = $27;
     } else {
      $$1$lcssa = $26;
      $wd$0$lcssa = $28;
      $ws$0$lcssa = $27;
      break;
     }
    }
   } else {
    $$1$lcssa = $$0$lcssa42;
    $wd$0$lcssa = $$06$lcssa44;
    $ws$0$lcssa = $$04$lcssa43;
   } while (0);
   $$15$ph = $ws$0$lcssa;
   $$17$ph = $wd$0$lcssa;
   $$2$ph = $$1$lcssa;
   label = 11;
  }
 } else {
  $$15$ph = $s;
  $$17$ph = $d;
  $$2$ph = $n;
  label = 11;
 } while (0);
 L16 : do if ((label | 0) == 11) if (!$$2$ph) {
  $$28 = $$17$ph;
  $$3 = 0;
 } else {
  $$1511 = $$15$ph;
  $$1710 = $$17$ph;
  $$212 = $$2$ph;
  while (1) {
   $31 = HEAP8[$$1511 >> 0] | 0;
   HEAP8[$$1710 >> 0] = $31;
   if (!($31 << 24 >> 24)) {
    $$28 = $$1710;
    $$3 = $$212;
    break L16;
   }
   $$212 = $$212 + -1 | 0;
   $35 = $$1710 + 1 | 0;
   if (!$$212) {
    $$28 = $35;
    $$3 = 0;
    break;
   } else {
    $$1511 = $$1511 + 1 | 0;
    $$1710 = $35;
   }
  }
 } while (0);
 _memset($$28 | 0, 0, $$3 | 0) | 0;
 return $$28 | 0;
}

function _modulator_emit($m, $symbols, $symbol_len, $samples) {
 $m = $m | 0;
 $symbols = $symbols | 0;
 $symbol_len = $symbol_len | 0;
 $samples = $samples | 0;
 var $$0 = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $23 = 0, $27 = 0, $31 = 0, $32 = 0, $35 = 0, $4 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $i$04 = 0, $j$02 = 0, $mixed = 0, $written$0$lcssa = 0, $written$03 = 0, $written$1$lcssa = 0, $written$11 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy2 = sp + 32 | 0;
 $0 = sp + 24 | 0;
 $mixed = sp + 8 | 0;
 $1 = sp + 16 | 0;
 $2 = sp;
 if (!$m) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $4 = $m + 4 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = _llvm_stacksave() | 0;
 $7 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($5 << 3) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 if (!$symbol_len) $written$0$lcssa = 0; else {
  $9 = $m + 32 | 0;
  $10 = $7 + 4 | 0;
  $11 = $0 + 4 | 0;
  $12 = $m + 28 | 0;
  $13 = $1 + 4 | 0;
  $14 = $m + 36 | 0;
  $15 = $m + 20 | 0;
  $16 = $mixed + 4 | 0;
  $17 = $2 + 4 | 0;
  $i$04 = 0;
  $written$03 = 0;
  while (1) {
   $18 = HEAP32[$9 >> 2] | 0;
   $21 = HEAP32[$symbols + ($i$04 << 3) >> 2] | 0;
   $23 = HEAP32[$symbols + ($i$04 << 3) + 4 >> 2] | 0;
   if (!$18) {
    HEAP32[$7 >> 2] = $21;
    HEAP32[$10 >> 2] = $23;
   } else {
    HEAP32[$0 >> 2] = $21;
    HEAP32[$11 >> 2] = $23;
    HEAP32[$$byval_copy2 >> 2] = HEAP32[$0 >> 2];
    HEAP32[$$byval_copy2 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
    _firinterp_crcf_execute($18, $$byval_copy2, $7);
   }
   if (!(HEAP32[$4 >> 2] | 0)) $written$1$lcssa = $written$03; else {
    $j$02 = 0;
    $written$11 = $written$03;
    while (1) {
     $27 = HEAP32[$12 >> 2] | 0;
     $31 = HEAP32[$7 + ($j$02 << 3) + 4 >> 2] | 0;
     HEAP32[$1 >> 2] = HEAP32[$7 + ($j$02 << 3) >> 2];
     HEAP32[$13 >> 2] = $31;
     HEAP32[$$byval_copy2 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$$byval_copy2 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
     _nco_crcf_mix_up($27, $$byval_copy2, $mixed);
     $32 = HEAP32[$14 >> 2] | 0;
     if ($32 | 0) {
      $35 = HEAP32[$16 >> 2] | 0;
      HEAP32[$2 >> 2] = HEAP32[$mixed >> 2];
      HEAP32[$17 >> 2] = $35;
      HEAP32[$$byval_copy2 >> 2] = HEAP32[$2 >> 2];
      HEAP32[$$byval_copy2 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
      _iirfilt_crcf_execute($32, $$byval_copy2, $mixed);
     }
     HEAPF32[$samples + ((Math_imul(HEAP32[$4 >> 2] | 0, $i$04) | 0) + $j$02 << 2) >> 2] = +HEAPF32[$mixed >> 2] * +HEAPF32[$15 >> 2];
     $43 = $written$11 + 1 | 0;
     _nco_crcf_step(HEAP32[$12 >> 2] | 0);
     $j$02 = $j$02 + 1 | 0;
     if ($j$02 >>> 0 >= (HEAP32[$4 >> 2] | 0) >>> 0) {
      $written$1$lcssa = $43;
      break;
     } else $written$11 = $43;
    }
   }
   $i$04 = $i$04 + 1 | 0;
   if (($i$04 | 0) == ($symbol_len | 0)) {
    $written$0$lcssa = $written$1$lcssa;
    break;
   } else $written$03 = $written$1$lcssa;
  }
 }
 _llvm_stackrestore($6 | 0);
 $$0 = $written$0$lcssa;
 STACKTOP = sp;
 return $$0 | 0;
}

function _ellip_acdf($agg$result, $_w, $_k, $_n) {
 $agg$result = $agg$result | 0;
 $_w = $_w | 0;
 $_k = +$_k;
 $_n = $_n | 0;
 var $$byval_copy1 = 0, $0 = 0, $1 = 0, $13 = 0.0, $19 = 0.0, $2 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $43 = 0.0, $5 = 0, $6 = 0, $61 = 0.0, $64 = 0.0, $65 = 0.0, $7 = 0, $78 = 0.0, $i$01 = 0, $i$02$i = 0, $k$01$i = 0.0, $w$sroa$0$0$lcssa = 0.0, $w$sroa$0$02 = 0.0, $w$sroa$8$0$lcssa = 0.0, $w$sroa$8$03 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy1 = sp + 48 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 8 | 0;
 $5 = sp;
 $6 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($_n << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $7 = ($_n | 0) == 0;
 if ($7) {
  $w$sroa$0$0$lcssa = +HEAPF32[$_w >> 2];
  $w$sroa$8$0$lcssa = +HEAPF32[$_w + 4 >> 2];
 } else {
  $i$02$i = 0;
  $k$01$i = $_k;
  do {
   $13 = +Math_sqrt(+(1.0 - $k$01$i * $k$01$i));
   $k$01$i = (1.0 - $13) / ($13 + 1.0);
   HEAPF32[$6 + ($i$02$i << 2) >> 2] = $k$01$i;
   $i$02$i = $i$02$i + 1 | 0;
  } while (($i$02$i | 0) != ($_n | 0));
  $19 = +HEAPF32[$_w >> 2];
  $21 = +HEAPF32[$_w + 4 >> 2];
  if ($7) {
   $w$sroa$0$0$lcssa = $19;
   $w$sroa$8$0$lcssa = $21;
  } else {
   $22 = $0 + 4 | 0;
   $23 = $2 + 4 | 0;
   $24 = $1 + 4 | 0;
   $25 = $3 + 4 | 0;
   $i$01 = 0;
   $w$sroa$0$02 = $19;
   $w$sroa$8$03 = $21;
   while (1) {
    if (!$i$01) $40 = $_k; else $40 = +HEAPF32[$6 + ($i$01 + -1 << 2) >> 2];
    $32 = $w$sroa$0$02 * $w$sroa$8$03;
    $33 = $w$sroa$0$02 * $w$sroa$0$02 - $w$sroa$8$03 * $w$sroa$8$03;
    $34 = $32 + $32;
    if (($33 != $33 | 0.0 != 0.0) & ($34 != $34 | 0.0 != 0.0)) {
     ___mulsc3($0, $w$sroa$0$02, $w$sroa$8$03, $w$sroa$0$02, $w$sroa$8$03);
     $41 = +HEAPF32[$0 >> 2];
     $43 = +HEAPF32[$22 >> 2];
    } else {
     $41 = $33;
     $43 = $34;
    }
    HEAPF32[$2 >> 2] = 1.0 - $40 * ($40 * $41);
    HEAPF32[$23 >> 2] = 0.0 - $40 * ($40 * $43);
    HEAP32[$$byval_copy1 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
    _liquid_csqrtf($1, $$byval_copy1);
    ___divsc3($3, $w$sroa$0$02, $w$sroa$8$03, +HEAPF32[$1 >> 2] + 1.0, +HEAPF32[$24 >> 2] + 0.0);
    $61 = +HEAPF32[$6 + ($i$01 << 2) >> 2] + 1.0;
    $64 = +HEAPF32[$3 >> 2] * 2.0 / $61;
    $65 = +HEAPF32[$25 >> 2] * 2.0 / $61;
    $i$01 = $i$01 + 1 | 0;
    if (($i$01 | 0) == ($_n | 0)) {
     $w$sroa$0$0$lcssa = $64;
     $w$sroa$8$0$lcssa = $65;
     break;
    } else {
     $w$sroa$0$02 = $64;
     $w$sroa$8$03 = $65;
    }
   }
  }
 }
 HEAPF32[$5 >> 2] = $w$sroa$0$0$lcssa;
 HEAPF32[$5 + 4 >> 2] = $w$sroa$8$0$lcssa;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
 _liquid_cacosf($4, $$byval_copy1);
 $78 = +HEAPF32[$4 + 4 >> 2] * 2.0 / 3.141592653589793;
 HEAPF32[$agg$result >> 2] = +HEAPF32[$4 >> 2] * 2.0 / 3.141592653589793;
 HEAPF32[$agg$result + 4 >> 2] = $78;
 STACKTOP = sp;
 return;
}

function _liquid_firdes_hM3($_k, $_m, $_beta, $_dt, $_h) {
 $_k = $_k | 0;
 $_m = $_m | 0;
 $_beta = +$_beta;
 $_dt = +$_dt;
 $_h = $_h | 0;
 var $$lcssa = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $20 = 0, $27 = 0, $28 = 0, $43 = 0, $46 = 0.0, $48 = 0.0, $50 = 0.0, $52 = 0, $7 = 0, $9 = 0, $bands = 0, $des = 0, $e2$04 = 0.0, $i$05 = 0, $i$13 = 0, $isi_max = 0, $isi_rms = 0, $isi_rms_min$06 = 0.0, $p$07 = 0, $weights = 0, $wtype = 0, sp = 0, $isi_rms_min$06$looptemp = 0.0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $bands = sp + 48 | 0;
 $des = sp + 32 | 0;
 $weights = sp + 20 | 0;
 $wtype = sp + 8 | 0;
 $isi_max = sp + 4 | 0;
 $isi_rms = sp;
 if ($_k >>> 0 < 2) {
  _fwrite(gb + 23672 | 0, 53, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if (!$_m) {
  _fwrite(gb + 23726 | 0, 53, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if ($_beta < 0.0 | $_beta > 1.0) {
  _fwrite(gb + 23780 | 0, 50, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 $7 = $_k << 1;
 $9 = Math_imul($7, $_m) | 0 | 1;
 $11 = 1.0 / +($7 >>> 0);
 $12 = $11;
 $13 = $_beta;
 HEAPF32[$bands >> 2] = 0.0;
 $20 = $bands + 4 | 0;
 HEAPF32[$20 >> 2] = $12 * (1.0 - $13);
 HEAPF32[$bands + 8 >> 2] = $11;
 HEAPF32[$bands + 12 >> 2] = $11;
 HEAPF32[$bands + 16 >> 2] = $12 * ($13 + 1.0);
 HEAPF32[$bands + 20 >> 2] = .5;
 HEAPF32[$des >> 2] = 1.0;
 HEAPF32[$des + 4 >> 2] = .7071067690849304;
 HEAPF32[$des + 8 >> 2] = 0.0;
 HEAP32[$weights >> 2] = HEAP32[gb + 524 >> 2];
 HEAP32[$weights + 4 >> 2] = HEAP32[gb + 524 + 4 >> 2];
 HEAP32[$weights + 8 >> 2] = HEAP32[gb + 524 + 8 >> 2];
 HEAP32[$wtype >> 2] = HEAP32[gb + 536 >> 2];
 HEAP32[$wtype + 4 >> 2] = HEAP32[gb + 536 + 4 >> 2];
 HEAP32[$wtype + 8 >> 2] = HEAP32[gb + 536 + 8 >> 2];
 $27 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($9 << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 _firdespm_run($9, 3, $bands, $des, $weights, $wtype, 0, $27);
 $28 = $9 << 2;
 _memcpy($_h | 0, $27 | 0, $28 | 0) | 0;
 _liquid_filter_isi($27, $_k, $_m, $isi_rms, $isi_max);
 $isi_rms_min$06 = +HEAPF32[$isi_rms >> 2];
 $p$07 = 0;
 do {
  HEAPF32[$20 >> 2] = $12 * (1.0 - +($p$07 >>> 0) * $_beta / 100.0);
  _firdespm_run($9, 3, $bands, $des, $weights, $wtype, 0, $27);
  _liquid_filter_isi($27, $_k, $_m, $isi_rms, $isi_max);
  $isi_rms_min$06$looptemp = $isi_rms_min$06;
  $isi_rms_min$06 = +HEAPF32[$isi_rms >> 2];
  if ($isi_rms_min$06 > $isi_rms_min$06$looptemp) break;
  _memcpy($_h | 0, $27 | 0, $28 | 0) | 0;
  $p$07 = $p$07 + 1 | 0;
 } while ($p$07 >>> 0 < 100);
 $43 = (Math_imul($_m, $_k) | 0) << 1 | 1;
 $e2$04 = 0.0;
 $i$05 = 0;
 while (1) {
  $48 = +HEAPF32[$_h + ($i$05 << 2) >> 2];
  $50 = $e2$04 + $48 * $48;
  $i$05 = $i$05 + 1 | 0;
  if (($i$05 | 0) == ($43 | 0)) {
   $$lcssa = $50;
   break;
  } else $e2$04 = $50;
 }
 $46 = +Math_sqrt(+(+($_k >>> 0) / $$lcssa));
 $i$13 = 0;
 do {
  $52 = $_h + ($i$13 << 2) | 0;
  HEAPF32[$52 >> 2] = $46 * +HEAPF32[$52 >> 2];
  $i$13 = $i$13 + 1 | 0;
 } while (($i$13 | 0) != ($43 | 0));
 STACKTOP = sp;
 return;
}

function _ofdmflexframesync_rxheader($_q, $_X) {
 $_q = $_q | 0;
 $_X = $_X | 0;
 var $$byval_copy1 = 0, $0 = 0, $1 = 0, $14 = 0, $18 = 0, $27 = 0.0, $3 = 0, $4 = 0, $40 = 0, $41 = 0, $45 = 0, $5 = 0, $52 = 0, $54 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $i$04 = 0, $sym = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy1 = sp + 16 | 0;
 $sym = sp;
 $0 = sp + 8 | 0;
 $1 = HEAP32[$_q >> 2] | 0;
 if (!$1) {
  STACKTOP = sp;
  return;
 }
 $3 = $_q + 12 | 0;
 $4 = $_q + 36 | 0;
 $5 = $0 + 4 | 0;
 $6 = $_q + 196 | 0;
 $7 = $_q + 52 | 0;
 $8 = $_q + 180 | 0;
 $9 = $_q + 68 | 0;
 $65 = $1;
 $i$04 = 0;
 while (1) {
  if ((HEAP8[(HEAP32[$3 >> 2] | 0) + $i$04 >> 0] | 0) == 2) {
   $14 = HEAP32[$4 >> 2] | 0;
   $18 = HEAP32[$_X + ($i$04 << 3) + 4 >> 2] | 0;
   HEAP32[$0 >> 2] = HEAP32[$_X + ($i$04 << 3) >> 2];
   HEAP32[$5 >> 2] = $18;
   HEAP32[$$byval_copy1 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
   _modem_demodulate($14, $$byval_copy1, $sym);
   HEAP8[(HEAP32[$7 >> 2] | 0) + (HEAP32[$6 >> 2] | 0) >> 0] = HEAP32[$sym >> 2];
   HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1;
   $27 = +_modem_get_demodulator_evm(HEAP32[$4 >> 2] | 0);
   HEAPF32[$8 >> 2] = +HEAPF32[$8 >> 2] + $27 * $27;
   if ((HEAP32[$6 >> 2] | 0) == (HEAP32[$9 >> 2] | 0)) break;
   $64 = HEAP32[$_q >> 2] | 0;
  } else $64 = $65;
  $i$04 = $i$04 + 1 | 0;
  if ($i$04 >>> 0 >= $64 >>> 0) {
   label = 10;
   break;
  } else $65 = $64;
 }
 if ((label | 0) == 10) {
  STACKTOP = sp;
  return;
 }
 _ofdmflexframesync_decode_header($_q);
 $40 = $_q + 140 | 0;
 HEAPF32[$40 >> 2] = +_log10f(+HEAPF32[$8 >> 2] / +((HEAP32[$9 >> 2] | 0) >>> 0)) * 10.0;
 $41 = $_q + 72 | 0;
 if (!(HEAP32[$41 >> 2] | 0)) {
  $45 = $_q + 184 | 0;
  HEAPF32[$_q + 144 >> 2] = +_ofdmframesync_get_rssi(HEAP32[$45 >> 2] | 0);
  HEAPF32[$_q + 148 >> 2] = +_ofdmframesync_get_cfo(HEAP32[$45 >> 2] | 0);
  $52 = $_q + 152 | 0;
  HEAP32[$52 >> 2] = 0;
  HEAP32[$52 + 4 >> 2] = 0;
  HEAP32[$52 + 8 >> 2] = 0;
  HEAP32[$52 + 12 >> 2] = 0;
  HEAP32[$52 + 16 >> 2] = 0;
  HEAP32[$52 + 20 >> 2] = 0;
  HEAP32[$52 + 24 >> 2] = 0;
  $54 = HEAP32[$_q + 132 >> 2] | 0;
  $56 = HEAP32[$_q + 44 >> 2] | 0;
  $57 = HEAP32[$41 >> 2] | 0;
  $59 = HEAP32[$_q + 136 >> 2] | 0;
  dest = $$byval_copy1;
  src = $40;
  stop = dest + 40 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  mftCall_iiiiiiii($54 | 0, $56 | 0, $57 | 0, 0, 0, 0, $$byval_copy1 | 0, $59 | 0) | 0;
  $60 = $_q + 188 | 0;
  HEAP32[$60 >> 2] = 0;
  HEAP32[$60 + 4 >> 2] = 0;
  HEAP32[$60 + 8 >> 2] = 0;
  HEAP32[$60 + 12 >> 2] = 0;
  HEAP32[$60 + 16 >> 2] = 0;
  HEAPF32[$8 >> 2] = 9.999999960041972e-13;
  _framesyncstats_init_default($40);
  _ofdmframesync_reset(HEAP32[$45 >> 2] | 0);
  STACKTOP = sp;
  return;
 } else {
  HEAP32[$_q + 192 >> 2] = 1;
  STACKTOP = sp;
  return;
 }
}

function ___mulsc3($agg$result, $__a, $__b, $__c, $__d) {
 $agg$result = $agg$result | 0;
 $__a = +$__a;
 $__b = +$__b;
 $__c = +$__c;
 $__d = +$__d;
 var $$0 = 0.0, $$01 = 0.0, $$06 = 0.0, $$1 = 0.0, $$112 = 0.0, $$17 = 0.0, $$3 = 0.0, $$34 = 0.0, $$39 = 0.0, $$4$ph = 0.0, $$410$ph = 0.0, $$415$ph = 0.0, $$45$ph = 0.0, $0 = 0.0, $1 = 0.0, $11 = 0, $13 = 0.0, $15 = 0.0, $2 = 0.0, $21 = 0, $23 = 0, $25 = 0.0, $27 = 0.0, $3 = 0.0, $34 = 0, $4 = 0.0, $5 = 0.0, $57 = 0, $9 = 0, $__recalc$0 = 0, $or$cond21 = 0, $or$cond23 = 0, $z$sroa$0$1 = 0.0, $z$sroa$6$1 = 0.0;
 $0 = $__a * $__c;
 $1 = $__b * $__d;
 $2 = $__a * $__d;
 $3 = $__b * $__c;
 $4 = $0 - $1;
 $5 = $3 + $2;
 if (!(($4 != $4 | 0.0 != 0.0) & ($5 != $5 | 0.0 != 0.0))) {
  $z$sroa$0$1 = $4;
  $z$sroa$6$1 = $5;
  $57 = $agg$result + 4 | 0;
  HEAPF32[$agg$result >> 2] = $z$sroa$0$1;
  HEAPF32[$57 >> 2] = $z$sroa$6$1;
  return;
 }
 $9 = +Math_abs(+$__a) == inf;
 $11 = +Math_abs(+$__b) == inf;
 if ($9 | $11) {
  $13 = +_copysignf(+($9 & 1), $__a);
  $15 = +_copysignf(+($11 & 1), $__b);
  if ($__c != $__c | 0.0 != 0.0) $$06 = +_copysignf(0.0, $__c); else $$06 = $__c;
  if ($__d != $__d | 0.0 != 0.0) {
   $$0 = $13;
   $$01 = $15;
   $$112 = +_copysignf(0.0, $__d);
   $$17 = $$06;
   $__recalc$0 = 1;
  } else {
   $$0 = $13;
   $$01 = $15;
   $$112 = $__d;
   $$17 = $$06;
   $__recalc$0 = 1;
  }
 } else {
  $$0 = $__a;
  $$01 = $__b;
  $$112 = $__d;
  $$17 = $__c;
  $__recalc$0 = 0;
 }
 $21 = +Math_abs(+$$17) == inf;
 $23 = +Math_abs(+$$112) == inf;
 if ($23 | $21) {
  $25 = +_copysignf(+($21 & 1), $$17);
  $27 = +_copysignf(+($23 & 1), $$112);
  if ($$0 != $$0 | 0.0 != 0.0) $$1 = +_copysignf(0.0, $$0); else $$1 = $$0;
  if ($$01 != $$01 | 0.0 != 0.0) {
   $$4$ph = $$1;
   $$410$ph = $25;
   $$415$ph = $27;
   $$45$ph = +_copysignf(0.0, $$01);
  } else {
   $$4$ph = $$1;
   $$410$ph = $25;
   $$415$ph = $27;
   $$45$ph = $$01;
  }
 } else if (!$__recalc$0) {
  $34 = +Math_abs(+$0) == inf;
  $or$cond21 = $34 | +Math_abs(+$1) == inf;
  $or$cond23 = +Math_abs(+$2) == inf | $or$cond21;
  if (!(+Math_abs(+$3) == inf | $or$cond23)) {
   $z$sroa$0$1 = $4;
   $z$sroa$6$1 = $5;
   $57 = $agg$result + 4 | 0;
   HEAPF32[$agg$result >> 2] = $z$sroa$0$1;
   HEAPF32[$57 >> 2] = $z$sroa$6$1;
   return;
  }
  if ($$0 != $$0 | 0.0 != 0.0) $$3 = +_copysignf(0.0, $$0); else $$3 = $$0;
  if ($$01 != $$01 | 0.0 != 0.0) $$34 = +_copysignf(0.0, $$01); else $$34 = $$01;
  if ($$17 != $$17 | 0.0 != 0.0) $$39 = +_copysignf(0.0, $$17); else $$39 = $$17;
  if ($$112 != $$112 | 0.0 != 0.0) {
   $$4$ph = $$3;
   $$410$ph = $$39;
   $$415$ph = +_copysignf(0.0, $$112);
   $$45$ph = $$34;
  } else {
   $$4$ph = $$3;
   $$410$ph = $$39;
   $$415$ph = $$112;
   $$45$ph = $$34;
  }
 } else {
  $$4$ph = $$0;
  $$410$ph = $$17;
  $$415$ph = $$112;
  $$45$ph = $$01;
 }
 $z$sroa$0$1 = ($$410$ph * $$4$ph - $$415$ph * $$45$ph) * inf;
 $z$sroa$6$1 = ($$410$ph * $$45$ph + $$415$ph * $$4$ph) * inf;
 $57 = $agg$result + 4 | 0;
 HEAPF32[$agg$result >> 2] = $z$sroa$0$1;
 HEAPF32[$57 >> 2] = $z$sroa$6$1;
 return;
}
function _flexframesync_decode_header($_q) {
 $_q = $_q | 0;
 var $0 = 0, $11 = 0, $12 = 0, $15 = 0.0, $17 = 0.0, $18 = 0, $27 = 0, $28 = 0, $30 = 0, $33 = 0, $4 = 0, $43 = 0, $44 = 0, $47 = 0, $48 = 0, $52 = 0, $53 = 0, $54 = 0, $59 = 0, $70 = 0, $73 = 0, $76 = 0, $78 = 0, $82 = 0, $85 = 0, $9 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = $_q + 132 | 0;
 $4 = $_q + 136 | 0;
 _qpilotsync_execute(HEAP32[$0 >> 2] | 0, HEAP32[$_q + 124 >> 2] | 0, HEAP32[$4 >> 2] | 0);
 $9 = $_q + 156 | 0;
 $11 = _qpacketmodem_decode(HEAP32[$_q + 144 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$9 >> 2] | 0) | 0;
 $12 = $_q + 160 | 0;
 HEAP32[$12 >> 2] = $11;
 if (!$11) {
  STACKTOP = sp;
  return;
 }
 $15 = +_qpilotsync_get_dphi(HEAP32[$0 >> 2] | 0);
 $17 = +_qpilotsync_get_phi(HEAP32[$0 >> 2] | 0);
 $18 = $_q + 96 | 0;
 _nco_crcf_set_frequency(HEAP32[$18 >> 2] | 0, $15);
 _nco_crcf_set_phase(HEAP32[$18 >> 2] | 0, $17 + $15 * +((HEAP32[$_q + 128 >> 2] | 0) >>> 0));
 $27 = HEAP32[$_q + 148 >> 2] | 0;
 $28 = HEAP32[$9 >> 2] | 0;
 $30 = HEAP8[$28 + $27 >> 0] | 0;
 if ($30 << 24 >> 24 != 101) {
  $33 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = $30 & 255;
  HEAP32[$vararg_buffer + 4 >> 2] = 101;
  _fprintf($33, gb + 25992 | 0, $vararg_buffer) | 0;
  HEAP32[$12 >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 $43 = (HEAPU8[$28 + ($27 + 1) >> 0] | 0) << 8 | (HEAPU8[$28 + ($27 + 2) >> 0] | 0);
 $44 = $_q + 184 | 0;
 HEAP32[$44 >> 2] = $43;
 $47 = HEAP8[$28 + ($27 + 3) >> 0] | 0;
 $48 = $47 & 255;
 $52 = HEAPU8[$28 + ($27 + 4) >> 0] | 0;
 $53 = $52 >>> 5;
 $54 = $52 & 31;
 $59 = (HEAPU8[$28 + ($27 + 5) >> 0] | 0) & 31;
 if (($47 + -1 & 255) > 59) {
  _fwrite(gb + 26075 | 0, 66, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  HEAP32[$12 >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 switch ($53 | 0) {
 case 0:
 case 7:
  {
   _fwrite(gb + 26142 | 0, 70, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
   HEAP32[$12 >> 2] = 0;
   STACKTOP = sp;
   return;
  }
 default:
  {}
 }
 if (($54 + -1 | 0) >>> 0 > 26) {
  _fwrite(gb + 26213 | 0, 78, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  HEAP32[$12 >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 if (($59 + -1 | 0) >>> 0 > 26) {
  _fwrite(gb + 26292 | 0, 78, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  HEAP32[$12 >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 $70 = $_q + 164 | 0;
 HEAP32[$70 >> 2] = _modem_recreate(HEAP32[$70 >> 2] | 0, $48) | 0;
 $73 = $_q + 176 | 0;
 _qpacketmodem_configure(HEAP32[$73 >> 2] | 0, $43, $53, $54, $59, $48) | 0;
 $76 = _qpacketmodem_get_frame_len(HEAP32[$73 >> 2] | 0) | 0;
 HEAP32[$_q + 172 >> 2] = $76;
 $78 = $_q + 168 | 0;
 HEAP32[$78 >> 2] = _realloc(HEAP32[$78 >> 2] | 0, $76 << 3) | 0;
 $82 = $_q + 180 | 0;
 $85 = _realloc(HEAP32[$82 >> 2] | 0, HEAP32[$44 >> 2] | 0) | 0;
 HEAP32[$82 >> 2] = $85;
 if (!(($85 | 0) == 0 | (HEAP32[$78 >> 2] | 0) == 0)) {
  STACKTOP = sp;
  return;
 }
 _fwrite(gb + 26371 | 0, 75, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
 HEAP32[$12 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function _firpfb_rrrf_create_drnyquist($_type, $_M, $_k, $_m, $_beta) {
 $_type = $_type | 0;
 $_M = $_M | 0;
 $_k = $_k | 0;
 $_m = $_m | 0;
 $_beta = +$_beta;
 var $1 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0.0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $3 = 0, $46 = 0.0, $49 = 0, $5 = 0, $56 = 0, $8 = 0, $HdH_max$03 = 0.0, $HdH_max$1 = 0.0, $HdH_max$1$lcssa = 0.0, $i$04 = 0, $i$12 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 if (!$_M) {
  $1 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = gb + 19626;
  _fprintf($1, gb + 19631 | 0, $vararg_buffer) | 0;
  _exit(1);
 }
 if ($_k >>> 0 < 2) {
  $3 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer1 >> 2] = gb + 19626;
  _fprintf($3, gb + 19713 | 0, $vararg_buffer1) | 0;
  _exit(1);
 }
 if (!$_m) {
  $5 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer4 >> 2] = gb + 19626;
  _fprintf($5, gb + 19796 | 0, $vararg_buffer4) | 0;
  _exit(1);
 }
 if ($_beta < 0.0 | $_beta > 1.0) {
  $8 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer7 >> 2] = gb + 19626;
  _fprintf($8, gb + 19870 | 0, $vararg_buffer7) | 0;
  _exit(1);
 }
 $11 = Math_imul(Math_imul($_M << 1, $_k) | 0, $_m) | 0;
 $12 = $11 | 1;
 $13 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($12 << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 _liquid_firdes_prototype($_type, Math_imul($_k, $_M) | 0, $_m, $_beta, 0.0, $13);
 $15 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($12 << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $16 = $13 + ($11 << 2) | 0;
 $17 = +HEAPF32[$13 >> 2];
 $21 = (Math_imul(Math_imul($_m, $_k) | 0, $_M) | 0) << 1 | 1;
 $22 = $13 + 4 | 0;
 $24 = $13 + ($11 + -1 << 2) | 0;
 $25 = $15 + ($11 << 2) | 0;
 $HdH_max$03 = 0.0;
 $i$04 = 0;
 while (1) {
  do if (!$i$04) HEAPF32[$15 >> 2] = +HEAPF32[$22 >> 2] - +HEAPF32[$16 >> 2]; else if (($i$04 | 0) == ($11 | 0)) {
   HEAPF32[$25 >> 2] = $17 - +HEAPF32[$24 >> 2];
   break;
  } else {
   HEAPF32[$15 + ($i$04 << 2) >> 2] = +HEAPF32[$13 + ($i$04 + 1 << 2) >> 2] - +HEAPF32[$13 + ($i$04 + -1 << 2) >> 2];
   break;
  } while (0);
  $46 = +Math_abs(+(+HEAPF32[$13 + ($i$04 << 2) >> 2] * +HEAPF32[$15 + ($i$04 << 2) >> 2]));
  $HdH_max$1 = $46 > $HdH_max$03 ? $46 : $HdH_max$03;
  $i$04 = $i$04 + 1 | 0;
  if (($i$04 | 0) == ($21 | 0)) {
   $HdH_max$1$lcssa = $HdH_max$1;
   break;
  } else $HdH_max$03 = $HdH_max$1;
 }
 $49 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($12 << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $i$12 = 0;
 do {
  HEAPF32[$49 + ($i$12 << 2) >> 2] = +HEAPF32[$15 + ($i$12 << 2) >> 2] * .05999999865889549 / $HdH_max$1$lcssa;
  $i$12 = $i$12 + 1 | 0;
 } while (($i$12 | 0) != ($21 | 0));
 $56 = _firpfb_rrrf_create($_M, $49, $12) | 0;
 STACKTOP = sp;
 return $56 | 0;
}
function ___muldc3($agg$result, $__a, $__b, $__c, $__d) {
 $agg$result = $agg$result | 0;
 $__a = +$__a;
 $__b = +$__b;
 $__c = +$__c;
 $__d = +$__d;
 var $$0 = 0.0, $$01 = 0.0, $$06 = 0.0, $$1 = 0.0, $$112 = 0.0, $$17 = 0.0, $$3 = 0.0, $$34 = 0.0, $$39 = 0.0, $$4$ph = 0.0, $$410$ph = 0.0, $$415$ph = 0.0, $$45$ph = 0.0, $0 = 0.0, $1 = 0.0, $11 = 0, $13 = 0.0, $15 = 0.0, $2 = 0.0, $21 = 0, $23 = 0, $25 = 0.0, $27 = 0.0, $3 = 0.0, $34 = 0, $4 = 0.0, $5 = 0.0, $57 = 0, $9 = 0, $__recalc$0 = 0, $or$cond21 = 0, $or$cond23 = 0, $z$sroa$0$1 = 0.0, $z$sroa$6$1 = 0.0;
 $0 = $__a * $__c;
 $1 = $__b * $__d;
 $2 = $__a * $__d;
 $3 = $__b * $__c;
 $4 = $0 - $1;
 $5 = $3 + $2;
 if (!(($4 != $4 | 0.0 != 0.0) & ($5 != $5 | 0.0 != 0.0))) {
  $z$sroa$0$1 = $4;
  $z$sroa$6$1 = $5;
  $57 = $agg$result + 8 | 0;
  HEAPF64[$agg$result >> 3] = $z$sroa$0$1;
  HEAPF64[$57 >> 3] = $z$sroa$6$1;
  return;
 }
 $9 = +Math_abs(+$__a) == inf;
 $11 = +Math_abs(+$__b) == inf;
 if ($9 | $11) {
  $13 = +_copysign(+($9 & 1), $__a);
  $15 = +_copysign(+($11 & 1), $__b);
  if ($__c != $__c | 0.0 != 0.0) $$06 = +_copysign(0.0, $__c); else $$06 = $__c;
  if ($__d != $__d | 0.0 != 0.0) {
   $$0 = $13;
   $$01 = $15;
   $$112 = +_copysign(0.0, $__d);
   $$17 = $$06;
   $__recalc$0 = 1;
  } else {
   $$0 = $13;
   $$01 = $15;
   $$112 = $__d;
   $$17 = $$06;
   $__recalc$0 = 1;
  }
 } else {
  $$0 = $__a;
  $$01 = $__b;
  $$112 = $__d;
  $$17 = $__c;
  $__recalc$0 = 0;
 }
 $21 = +Math_abs(+$$17) == inf;
 $23 = +Math_abs(+$$112) == inf;
 if ($23 | $21) {
  $25 = +_copysign(+($21 & 1), $$17);
  $27 = +_copysign(+($23 & 1), $$112);
  if ($$0 != $$0 | 0.0 != 0.0) $$1 = +_copysign(0.0, $$0); else $$1 = $$0;
  if ($$01 != $$01 | 0.0 != 0.0) {
   $$4$ph = $$1;
   $$410$ph = $25;
   $$415$ph = $27;
   $$45$ph = +_copysign(0.0, $$01);
  } else {
   $$4$ph = $$1;
   $$410$ph = $25;
   $$415$ph = $27;
   $$45$ph = $$01;
  }
 } else if (!$__recalc$0) {
  $34 = +Math_abs(+$0) == inf;
  $or$cond21 = $34 | +Math_abs(+$1) == inf;
  $or$cond23 = +Math_abs(+$2) == inf | $or$cond21;
  if (!(+Math_abs(+$3) == inf | $or$cond23)) {
   $z$sroa$0$1 = $4;
   $z$sroa$6$1 = $5;
   $57 = $agg$result + 8 | 0;
   HEAPF64[$agg$result >> 3] = $z$sroa$0$1;
   HEAPF64[$57 >> 3] = $z$sroa$6$1;
   return;
  }
  if ($$0 != $$0 | 0.0 != 0.0) $$3 = +_copysign(0.0, $$0); else $$3 = $$0;
  if ($$01 != $$01 | 0.0 != 0.0) $$34 = +_copysign(0.0, $$01); else $$34 = $$01;
  if ($$17 != $$17 | 0.0 != 0.0) $$39 = +_copysign(0.0, $$17); else $$39 = $$17;
  if ($$112 != $$112 | 0.0 != 0.0) {
   $$4$ph = $$3;
   $$410$ph = $$39;
   $$415$ph = +_copysign(0.0, $$112);
   $$45$ph = $$34;
  } else {
   $$4$ph = $$3;
   $$410$ph = $$39;
   $$415$ph = $$112;
   $$45$ph = $$34;
  }
 } else {
  $$4$ph = $$0;
  $$410$ph = $$17;
  $$415$ph = $$112;
  $$45$ph = $$01;
 }
 $z$sroa$0$1 = ($$410$ph * $$4$ph - $$415$ph * $$45$ph) * inf;
 $z$sroa$6$1 = ($$410$ph * $$45$ph + $$415$ph * $$4$ph) * inf;
 $57 = $agg$result + 8 | 0;
 HEAPF64[$agg$result >> 3] = $z$sroa$0$1;
 HEAPF64[$57 >> 3] = $z$sroa$6$1;
 return;
}

function _polycf_expandroots($_a, $_n, $_c) {
 $_a = $_a | 0;
 $_n = $_n | 0;
 $_c = $_c | 0;
 var $$lcssa = 0, $$lcssa60 = 0, $$lcssa61 = 0.0, $$lcssa62 = 0.0, $$lcssa63 = 0.0, $$lcssa64 = 0.0, $$lcssa65 = 0.0, $$lcssa66 = 0.0, $0 = 0, $1 = 0, $12 = 0, $14 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0.0, $25 = 0.0, $26 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $39 = 0, $4 = 0, $41 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $5 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $60 = 0.0, $61 = 0.0, $66 = 0.0, $67 = 0.0, $i$020 = 0, $i$118 = 0, $j$010 = 0, sp = 0, $j$010$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 8 | 0;
 $1 = sp;
 if (!$_n) {
  HEAPF32[$_c >> 2] = 0.0;
  HEAPF32[$_c + 4 >> 2] = 0.0;
  STACKTOP = sp;
  return;
 } else $i$020 = 0;
 while (1) {
  HEAPF32[$_c + ($i$020 << 3) >> 2] = +(($i$020 | 0) == 0 & 1);
  HEAPF32[$_c + ($i$020 << 3) + 4 >> 2] = 0.0;
  if (($i$020 | 0) == ($_n | 0)) break; else $i$020 = $i$020 + 1 | 0;
 }
 $4 = $1 + 4 | 0;
 $5 = $0 + 4 | 0;
 $i$118 = 0;
 do {
  $12 = $_a + ($i$118 << 3) | 0;
  $14 = $_a + ($i$118 << 3) + 4 | 0;
  $i$118 = $i$118 + 1 | 0;
  $16 = -+HEAPF32[$12 >> 2];
  $17 = -+HEAPF32[$14 >> 2];
  $18 = $_c + ($i$118 << 3) | 0;
  $19 = +HEAPF32[$18 >> 2];
  $20 = $_c + ($i$118 << 3) + 4 | 0;
  $21 = +HEAPF32[$20 >> 2];
  $25 = $16;
  $26 = $21;
  $28 = $17;
  $29 = $19;
  $31 = $19 * $16;
  $32 = $21 * $17;
  $47 = $18;
  $48 = $20;
  $j$010 = $i$118;
  while (1) {
   $30 = $31 - $32;
   $33 = $28 * $29 + $25 * $26;
   if (($30 != $30 | 0.0 != 0.0) & ($33 != $33 | 0.0 != 0.0)) {
    ___mulsc3($0, $25, $28, $29, $26);
    $44 = +HEAPF32[$0 >> 2];
    $46 = +HEAPF32[$5 >> 2];
   } else {
    $44 = $30;
    $46 = $33;
   }
   $j$010$looptemp = $j$010;
   $j$010 = $j$010 + -1 | 0;
   $39 = $_c + ($j$010 << 3) | 0;
   $41 = $_c + ($j$010 << 3) + 4 | 0;
   $45 = $46 + +HEAPF32[$41 >> 2];
   HEAPF32[$47 >> 2] = $44 + +HEAPF32[$39 >> 2];
   HEAPF32[$48 >> 2] = $45;
   $52 = -+HEAPF32[$12 >> 2];
   $53 = -+HEAPF32[$14 >> 2];
   $54 = +HEAPF32[$39 >> 2];
   $55 = +HEAPF32[$41 >> 2];
   $56 = $54 * $52;
   $57 = $55 * $53;
   if (($j$010$looptemp | 0) <= 1) {
    $$lcssa = $39;
    $$lcssa60 = $41;
    $$lcssa61 = $52;
    $$lcssa62 = $53;
    $$lcssa63 = $54;
    $$lcssa64 = $55;
    $$lcssa65 = $56;
    $$lcssa66 = $57;
    break;
   } else {
    $25 = $52;
    $26 = $55;
    $28 = $53;
    $29 = $54;
    $31 = $56;
    $32 = $57;
    $47 = $39;
    $48 = $41;
   }
  }
  $60 = $$lcssa65 - $$lcssa66;
  $61 = $$lcssa63 * $$lcssa62 + $$lcssa64 * $$lcssa61;
  if (($60 != $60 | 0.0 != 0.0) & ($61 != $61 | 0.0 != 0.0)) {
   ___mulsc3($1, $$lcssa63, $$lcssa64, $$lcssa61, $$lcssa62);
   $66 = +HEAPF32[$1 >> 2];
   $67 = +HEAPF32[$4 >> 2];
  } else {
   $66 = $60;
   $67 = $61;
  }
  HEAPF32[$$lcssa >> 2] = $66;
  HEAPF32[$$lcssa60 >> 2] = $67;
 } while (($i$118 | 0) != ($_n | 0));
 STACKTOP = sp;
 return;
}

function _quiet_decoder_create($opt, $sample_rate) {
 $opt = $opt | 0;
 $sample_rate = +$sample_rate;
 var $$0 = 0, $1 = 0, $10 = 0, $16 = 0, $22 = 0, $30 = 0, $39 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0.0, $59 = 0, $6 = 0, dest = 0, src = 0, stop = 0;
 if (!$opt) {
  $$0 = 0;
  return $$0 | 0;
 }
 $1 = _malloc(348) | 0;
 dest = $1;
 src = $opt;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 switch (HEAP32[$1 + 56 >> 2] | 0) {
 case 0:
  {
   $4 = _ofdm_subcarriers_create($opt) | 0;
   $6 = $opt + 4 | 0;
   $10 = _ofdmflexframesync_create(HEAP32[$opt >> 2] | 0, HEAP32[$6 >> 2] | 0, HEAP32[$opt + 8 >> 2] | 0, $4, fb + 1 | 0, $1) | 0;
   _ofdmflexframesync_set_header_len($10, 0);
   if (HEAP8[$opt + 60 >> 0] | 0) _ofdmflexframesync_debug_enable($10);
   $16 = (HEAP32[$6 >> 2] | 0) + (HEAP32[$opt >> 2] | 0) | 0;
   HEAP32[$1 + 72 >> 2] = _malloc($16 << 3) | 0;
   HEAP32[$1 + 76 >> 2] = $16;
   _free($4);
   HEAP32[$1 + 64 >> 2] = $10;
   break;
  }
 case 1:
  {
   $22 = _flexframesync_create(fb + 1 | 0, $1) | 0;
   _flexframesync_set_header_len($22, 0);
   if (HEAP8[$opt + 60 >> 0] | 0) _flexframesync_debug_enable($22);
   HEAP32[$1 + 72 >> 2] = _malloc(2048) | 0;
   HEAP32[$1 + 76 >> 2] = 256;
   HEAP32[$1 + 64 >> 2] = $22;
   break;
  }
 case 2:
  {
   $30 = _gmskframesync_create(fb + 1 | 0, $1) | 0;
   _gmskframesync_set_header_len($30, 0);
   if (HEAP8[$opt + 60 >> 0] | 0) _gmskframesync_debug_enable($30);
   HEAP32[$1 + 72 >> 2] = _malloc(2048) | 0;
   HEAP32[$1 + 76 >> 2] = 256;
   HEAP32[$1 + 64 >> 2] = $30;
   break;
  }
 default:
  {}
 }
 $39 = _demodulator_create($opt + 20 | 0) | 0;
 $40 = $1 + 68 | 0;
 HEAP32[$40 >> 2] = $39;
 HEAP32[$1 + 80 >> 2] = 0;
 $42 = $1 + 84 | 0;
 HEAPF32[$42 >> 2] = 1.0;
 $43 = $1 + 92 | 0;
 HEAP32[$43 >> 2] = 0;
 $44 = $1 + 88 | 0;
 HEAP32[$44 >> 2] = 0;
 if ($sample_rate != 44100.0) {
  $46 = 44100.0 / $sample_rate;
  HEAP32[$44 >> 2] = _resamp_rrrf_create($46, HEAP32[$opt + 40 >> 2] | 0, +HEAPF32[$opt + 44 >> 2], +HEAPF32[$opt + 48 >> 2], HEAP32[$opt + 52 >> 2] | 0) | 0;
  HEAPF32[$42 >> 2] = $46;
  $59 = HEAP32[$40 >> 2] | 0;
 } else $59 = $39;
 HEAP32[$43 >> 2] = _malloc(Math_imul(HEAP32[$1 + 76 >> 2] << 2, HEAP32[$59 + 4 >> 2] | 0) | 0) | 0;
 HEAP32[$1 + 96 >> 2] = 0;
 HEAP32[$1 + 100 >> 2] = 0;
 HEAP32[$1 + 104 >> 2] = _ring_create(65536) | 0;
 HEAP32[$1 + 112 >> 2] = 0;
 HEAP32[$1 + 108 >> 2] = 0;
 HEAP8[$1 + 344 >> 0] = 0;
 HEAP32[$1 + 276 >> 2] = 0;
 HEAP32[$1 + 308 >> 2] = 0;
 HEAP32[$1 + 280 >> 2] = 0;
 HEAP32[$1 + 312 >> 2] = 0;
 HEAP32[$1 + 284 >> 2] = 0;
 HEAP32[$1 + 316 >> 2] = 0;
 HEAP32[$1 + 288 >> 2] = 0;
 HEAP32[$1 + 320 >> 2] = 0;
 HEAP32[$1 + 292 >> 2] = 0;
 HEAP32[$1 + 324 >> 2] = 0;
 HEAP32[$1 + 296 >> 2] = 0;
 HEAP32[$1 + 328 >> 2] = 0;
 HEAP32[$1 + 300 >> 2] = 0;
 HEAP32[$1 + 332 >> 2] = 0;
 HEAP32[$1 + 304 >> 2] = 0;
 HEAP32[$1 + 336 >> 2] = 0;
 $$0 = $1;
 return $$0 | 0;
}

function _modem_demodulate_apsk($_q, $_x, $_sym_out) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 $_sym_out = $_sym_out | 0;
 var $$byval_copy1 = 0, $0 = 0, $1 = 0, $17 = 0.0, $2 = 0, $23 = 0, $34 = 0, $36 = 0, $37 = 0, $4 = 0, $40 = 0, $43 = 0, $51 = 0, $59 = 0, $6 = 0.0, $63 = 0, $67 = 0, $68 = 0, $9 = 0, $i$011 = 0, $i$17 = 0, $i$21 = 0, $p$1 = 0, $s_hat$0$lcssa = 0, $s_hat$06 = 0, $s_prime$0 = 0, $theta$0 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy1 = sp + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp;
 $2 = HEAP32[$_x >> 2] | 0;
 $4 = HEAP32[$_x + 4 >> 2] | 0;
 HEAP32[$0 >> 2] = $2;
 HEAP32[$0 + 4 >> 2] = $4;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 $6 = +_cabsf($$byval_copy1);
 $9 = (HEAP32[$_q + 100 >> 2] | 0) + -1 | 0;
 L1 : do if (!$9) $p$1 = 0; else {
  $i$011 = 0;
  while (1) {
   if ($6 < +HEAPF32[$_q + 168 + ($i$011 << 2) >> 2]) {
    $p$1 = $i$011;
    break L1;
   }
   $i$011 = $i$011 + 1 | 0;
   if ($i$011 >>> 0 >= $9 >>> 0) {
    $p$1 = $9;
    break;
   }
  }
 } while (0);
 HEAP32[$1 >> 2] = $2;
 HEAP32[$1 + 4 >> 2] = $4;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 $17 = +_cargf($$byval_copy1);
 if ($17 < 0.0) $theta$0 = $17 + 6.283185307179586; else $theta$0 = $17;
 $23 = HEAP32[$_q + 104 + ($p$1 << 2) >> 2] | 0;
 $34 = (~~+_roundf(+(($theta$0 - +HEAPF32[$_q + 200 + ($p$1 << 2) >> 2]) / (6.283185307179586 / +($23 >>> 0)))) >>> 0 >>> 0) % ($23 >>> 0) | 0;
 if (!$p$1) $s_hat$0$lcssa = $34; else {
  $i$17 = 0;
  $s_hat$06 = $34;
  while (1) {
   $43 = (HEAP32[$_q + 104 + ($i$17 << 2) >> 2] | 0) + $s_hat$06 | 0;
   $i$17 = $i$17 + 1 | 0;
   if (($i$17 | 0) == ($p$1 | 0)) {
    $s_hat$0$lcssa = $43;
    break;
   } else $s_hat$06 = $43;
  }
 }
 $36 = $_q + 8 | 0;
 $37 = HEAP32[$36 >> 2] | 0;
 L13 : do if (!$37) $s_prime$0 = 0; else {
  $40 = HEAP32[$_q + 232 >> 2] | 0;
  $i$21 = 0;
  while (1) {
   if ((HEAPU8[$40 + $i$21 >> 0] | 0 | 0) == ($s_hat$0$lcssa | 0)) {
    $s_prime$0 = $i$21;
    break L13;
   }
   $i$21 = $i$21 + 1 | 0;
   if ($i$21 >>> 0 >= $37 >>> 0) {
    $s_prime$0 = 0;
    break;
   }
  }
 } while (0);
 HEAP32[$_sym_out >> 2] = $s_prime$0;
 $51 = $_q + 92 | 0;
 if ((HEAP32[$36 >> 2] | 0) >>> 0 <= $s_prime$0 >>> 0) {
  _fwrite(gb + 31561 | 0, 65, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if (!(HEAP32[$_q + 80 >> 2] | 0)) {
  mftCall_viii(HEAP32[$_q + 236 >> 2] | 0, $_q | 0, $s_prime$0 | 0, $51 | 0);
  $67 = $_q + 84 | 0;
  $68 = $_q + 88 | 0;
  HEAP32[$67 >> 2] = $2;
  HEAP32[$68 >> 2] = $4;
  STACKTOP = sp;
  return;
 } else {
  $59 = HEAP32[$_q + 76 >> 2] | 0;
  $63 = HEAP32[$59 + ($s_prime$0 << 3) + 4 >> 2] | 0;
  HEAP32[$51 >> 2] = HEAP32[$59 + ($s_prime$0 << 3) >> 2];
  HEAP32[$_q + 96 >> 2] = $63;
  $67 = $_q + 84 | 0;
  $68 = $_q + 88 | 0;
  HEAP32[$67 >> 2] = $2;
  HEAP32[$68 >> 2] = $4;
  STACKTOP = sp;
  return;
 }
}

function _fec_golay2412_decode_symbol($_sym_enc) {
 $_sym_enc = $_sym_enc | 0;
 var $$lcssa = 0, $$lcssa42 = 0, $$lcssa44 = 0, $$lcssa46 = 0, $110 = 0, $111 = 0, $23 = 0, $40 = 0, $5 = 0, $59 = 0, $77 = 0, $95 = 0, $e_hat$3 = 0, $i$01$i = 0, $i$01$i3 = 0, $i$02$i = 0, $i$02$i$lcssa = 0, $i$02$i7 = 0, $i$02$i7$lcssa = 0, $x$02$i = 0, $x$02$i$lcssa = 0, $x$02$i2 = 0, $x$02$i2$lcssa = 0, label = 0;
 if ($_sym_enc >>> 0 > 16777215) {
  _fwrite(gb + 13356 | 0, 61, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 } else {
  $i$01$i = 0;
  $x$02$i = 0;
 }
 while (1) {
  $5 = HEAP32[gb + 476 + ($i$01$i << 2) >> 2] & $_sym_enc;
  $23 = (HEAPU8[($5 >>> 8 & 255) + (gb + 39229) >> 0] | 0) + (HEAPU8[($5 & 255) + (gb + 39229) >> 0] | 0) + (HEAPU8[($5 >>> 16 & 255) + (gb + 39229) >> 0] | 0) & 1 | $x$02$i << 1;
  $i$01$i = $i$01$i + 1 | 0;
  if (($i$01$i | 0) == 12) {
   $$lcssa46 = $23;
   $x$02$i$lcssa = $x$02$i;
   break;
  } else $x$02$i = $23;
 }
 if (((HEAPU8[($x$02$i$lcssa >>> 7 & 255) + (gb + 39229) >> 0] | 0) + (HEAPU8[($$lcssa46 & 255) + (gb + 39229) >> 0] | 0) | 0) >>> 0 < 4) {
  $e_hat$3 = 0;
  $110 = $e_hat$3 ^ $_sym_enc;
  $111 = $110 & 4095;
  return $111 | 0;
 } else $i$02$i7 = 0;
 while (1) {
  $40 = HEAP32[gb + 332 + ($i$02$i7 << 2) >> 2] ^ $$lcssa46;
  if (((HEAPU8[($40 >>> 8 & 255) + (gb + 39229) >> 0] | 0) + (HEAPU8[($40 & 255) + (gb + 39229) >> 0] | 0) | 0) >>> 0 < 3) {
   $$lcssa44 = $40;
   $i$02$i7$lcssa = $i$02$i7;
   label = 7;
   break;
  }
  $i$02$i7 = $i$02$i7 + 1 | 0;
  if ($i$02$i7 >>> 0 >= 12) {
   $i$01$i3 = 0;
   $x$02$i2 = 0;
   break;
  }
 }
 if ((label | 0) == 7) {
  $e_hat$3 = $$lcssa44 << 12 | 1 << 11 - $i$02$i7$lcssa;
  $110 = $e_hat$3 ^ $_sym_enc;
  $111 = $110 & 4095;
  return $111 | 0;
 }
 while (1) {
  $59 = HEAP32[gb + 332 + ($i$01$i3 << 2) >> 2] & $$lcssa46;
  $77 = (HEAPU8[($59 >>> 8 & 255) + (gb + 39229) >> 0] | 0) + (HEAPU8[($59 & 255) + (gb + 39229) >> 0] | 0) + (HEAPU8[($59 >>> 16 & 255) + (gb + 39229) >> 0] | 0) & 1 | $x$02$i2 << 1;
  $i$01$i3 = $i$01$i3 + 1 | 0;
  if (($i$01$i3 | 0) == 12) {
   $$lcssa42 = $77;
   $x$02$i2$lcssa = $x$02$i2;
   break;
  } else $x$02$i2 = $77;
 }
 if (((HEAPU8[($x$02$i2$lcssa >>> 7 & 255) + (gb + 39229) >> 0] | 0) + (HEAPU8[($$lcssa42 & 255) + (gb + 39229) >> 0] | 0) | 1 | 0) == 3) {
  $e_hat$3 = $$lcssa42;
  $110 = $e_hat$3 ^ $_sym_enc;
  $111 = $110 & 4095;
  return $111 | 0;
 } else $i$02$i = 0;
 while (1) {
  $95 = HEAP32[gb + 332 + ($i$02$i << 2) >> 2] ^ $$lcssa42;
  if (((HEAPU8[($95 >>> 8 & 255) + (gb + 39229) >> 0] | 0) + (HEAPU8[($95 & 255) + (gb + 39229) >> 0] | 0) | 0) >>> 0 < 3) {
   $$lcssa = $95;
   $i$02$i$lcssa = $i$02$i;
   break;
  }
  $i$02$i = $i$02$i + 1 | 0;
  if ($i$02$i >>> 0 >= 12) {
   $e_hat$3 = 0;
   label = 13;
   break;
  }
 }
 if ((label | 0) == 13) {
  $110 = $e_hat$3 ^ $_sym_enc;
  $111 = $110 & 4095;
  return $111 | 0;
 }
 $e_hat$3 = $$lcssa | 1 << 23 - $i$02$i$lcssa;
 $110 = $e_hat$3 ^ $_sym_enc;
 $111 = $110 & 4095;
 return $111 | 0;
}

function _fec_conv_punctured_decode_soft($_q, $_dec_msg_len, $_msg_enc, $_msg_dec) {
 $_q = $_q | 0;
 $_dec_msg_len = $_dec_msg_len | 0;
 $_msg_enc = $_msg_enc | 0;
 $_msg_dec = $_msg_dec | 0;
 var $$pre$phi12Z2D = 0, $$pre$phi14Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $23 = 0, $25 = 0, $29 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $40 = 0, $43 = 0, $58 = 0, $6 = 0, $64 = 0, $68 = 0, $8 = 0, $i$04 = 0, $n$05 = 0, $n$1$lcssa = 0, $n$12 = 0, $n$2 = 0, $p$06 = 0, $r$01 = 0;
 $0 = $_q + 8 | 0;
 if ((HEAP32[$0 >> 2] | 0) == ($_dec_msg_len | 0)) {
  $$pre$phi12Z2D = $_q + 28 | 0;
  $$pre$phiZ2D = $_q + 32 | 0;
  $29 = $_dec_msg_len;
 } else {
  HEAP32[$0 >> 2] = $_dec_msg_len;
  HEAP32[$_q + 12 >> 2] = _fec_get_enc_msg_length(HEAP32[$_q >> 2] | 0, $_dec_msg_len) | 0;
  $6 = HEAP32[$0 >> 2] | 0;
  $8 = $_q + 32 | 0;
  $12 = $_q + 28 | 0;
  $14 = Math_imul((HEAP32[$8 >> 2] | 0) + -1 + ($6 << 3) | 0, HEAP32[$12 >> 2] | 0) | 0;
  $15 = $_q + 20 | 0;
  $16 = HEAP32[$15 >> 2] | 0;
  if (!$16) $23 = $6; else {
   mftCall_vi(HEAP32[$_q + 60 >> 2] | 0, $16 | 0);
   $23 = HEAP32[$0 >> 2] | 0;
  }
  HEAP32[$15 >> 2] = mftCall_ii(HEAP32[$_q + 44 >> 2] | 0, $23 << 3 | 0) | 0;
  $25 = $_q + 16 | 0;
  HEAP32[$25 >> 2] = _realloc(HEAP32[$25 >> 2] | 0, $14) | 0;
  $$pre$phi12Z2D = $12;
  $$pre$phiZ2D = $8;
  $29 = HEAP32[$0 >> 2] | 0;
 }
 $33 = HEAP32[$$pre$phi12Z2D >> 2] | 0;
 $34 = Math_imul((HEAP32[$$pre$phiZ2D >> 2] | 0) + -1 + ($29 << 3) | 0, $33) | 0;
 if (!$34) $$pre$phi14Z2D = $_q + 16 | 0; else {
  $36 = $_q + 36 | 0;
  $37 = $_q + 40 | 0;
  $38 = $_q + 16 | 0;
  $40 = $33;
  $i$04 = 0;
  $n$05 = 0;
  $p$06 = 0;
  while (1) {
   if (!$40) {
    $64 = 0;
    $n$1$lcssa = $n$05;
   } else {
    $n$12 = $n$05;
    $r$01 = 0;
    while (1) {
     $43 = (Math_imul(HEAP32[$36 >> 2] | 0, $r$01) | 0) + $p$06 | 0;
     if (!(HEAP32[(HEAP32[$37 >> 2] | 0) + ($43 << 2) >> 2] | 0)) {
      HEAP8[(HEAP32[$38 >> 2] | 0) + ($r$01 + $i$04) >> 0] = 127;
      $n$2 = $n$12;
     } else {
      HEAP8[(HEAP32[$38 >> 2] | 0) + ($r$01 + $i$04) >> 0] = HEAP8[$_msg_enc + $n$12 >> 0] | 0;
      $n$2 = $n$12 + 1 | 0;
     }
     $r$01 = $r$01 + 1 | 0;
     $58 = HEAP32[$$pre$phi12Z2D >> 2] | 0;
     if ($r$01 >>> 0 >= $58 >>> 0) {
      $64 = $58;
      $n$1$lcssa = $n$2;
      break;
     } else $n$12 = $n$2;
    }
   }
   $i$04 = $64 + $i$04 | 0;
   if ($i$04 >>> 0 >= $34 >>> 0) {
    $$pre$phi14Z2D = $38;
    break;
   } else {
    $40 = $64;
    $n$05 = $n$1$lcssa;
    $p$06 = (($p$06 + 1 | 0) >>> 0) % ((HEAP32[$36 >> 2] | 0) >>> 0) | 0;
   }
  }
 }
 $68 = $_q + 20 | 0;
 mftCall_iii(HEAP32[$_q + 48 >> 2] | 0, HEAP32[$68 >> 2] | 0, 0) | 0;
 mftCall_iiii(HEAP32[$_q + 52 >> 2] | 0, HEAP32[$68 >> 2] | 0, HEAP32[$$pre$phi14Z2D >> 2] | 0, (HEAP32[$$pre$phiZ2D >> 2] | 0) + -1 + (HEAP32[$0 >> 2] << 3) | 0) | 0;
 mftCall_iiiii(HEAP32[$_q + 56 >> 2] | 0, HEAP32[$68 >> 2] | 0, $_msg_dec | 0, HEAP32[$0 >> 2] << 3 | 0, 0) | 0;
 return;
}

function _matrixf_gjelim($_X, $_XR, $_XC) {
 $_X = $_X | 0;
 $_XR = $_XR | 0;
 $_XC = $_XC | 0;
 var $0 = 0, $1 = 0, $11 = 0, $2 = 0, $20 = 0.0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $38 = 0.0, $41 = 0, $45 = 0.0, $5 = 0, $51 = 0, $56 = 0, $9 = 0.0, $c$01$i = 0, $c$02$us$i = 0, $c$03$us = 0, $or$cond = 0, $r$015 = 0, $r$03$us$i = 0, $r$14$us = 0, $r_hat$09 = 0, $r_opt$014 = 0, $r_opt$18 = 0, $r_opt$2 = 0, $r_opt$2$lcssa = 0, $v_max$013 = 0.0, $v_max$17 = 0.0, $v_max$2 = 0.0, $v_max$2$lcssa = 0.0;
 $0 = ($_XR | 0) == 0;
 if ($0) return;
 $1 = HEAP32[gb + 9336 >> 2] | 0;
 $2 = ($_XC | 0) == 0;
 $3 = ($_XC | 0) != 0;
 $r$015 = 0;
 $r_opt$014 = 0;
 $v_max$013 = 0.0;
 while (1) {
  $r_hat$09 = $r$015;
  $r_opt$18 = $r_opt$014;
  $v_max$17 = $v_max$013;
  while (1) {
   $20 = +Math_abs(+(+HEAPF32[$_X + ((Math_imul($r_hat$09, $_XC) | 0) + $r$015 << 2) >> 2]));
   $or$cond = ($r_hat$09 | 0) == ($r$015 | 0) | $20 > $v_max$17;
   $v_max$2 = $or$cond ? $20 : $v_max$17;
   $r_opt$2 = $or$cond ? $r_hat$09 : $r_opt$18;
   $r_hat$09 = $r_hat$09 + 1 | 0;
   if (($r_hat$09 | 0) == ($_XR | 0)) {
    $r_opt$2$lcssa = $r_opt$2;
    $v_max$2$lcssa = $v_max$2;
    break;
   } else {
    $r_opt$18 = $r_opt$2;
    $v_max$17 = $v_max$2;
   }
  }
  if ($v_max$2$lcssa == 0.0) _fwrite(gb + 30950 | 0, 63, 1, $1) | 0;
  $27 = Math_imul($r$015, $_XC) | 0;
  if (($r$015 | 0) != ($r_opt$2$lcssa | 0) & $3) {
   $28 = Math_imul($r_opt$2$lcssa, $_XC) | 0;
   $c$01$i = 0;
   do {
    $30 = $_X + ($c$01$i + $27 << 2) | 0;
    $31 = HEAP32[$30 >> 2] | 0;
    $33 = $_X + ($c$01$i + $28 << 2) | 0;
    HEAP32[$30 >> 2] = HEAP32[$33 >> 2];
    HEAP32[$33 >> 2] = $31;
    $c$01$i = $c$01$i + 1 | 0;
   } while (($c$01$i | 0) != ($_XC | 0));
  }
  $38 = +HEAPF32[$_X + ($27 + $r$015 << 2) >> 2];
  if ($38 == 0.0) _fwrite(gb + 31014 | 0, 42, 1, $1) | 0; else if (!$2) {
   $r$03$us$i = 0;
   do {
    if (($r$03$us$i | 0) != ($r$015 | 0)) {
     $41 = Math_imul($r$03$us$i, $_XC) | 0;
     $45 = +HEAPF32[$_X + ($41 + $r$015 << 2) >> 2] / $38;
     $c$02$us$i = 0;
     do {
      $51 = $_X + ($c$02$us$i + $41 << 2) | 0;
      HEAPF32[$51 >> 2] = $45 * +HEAPF32[$_X + ($c$02$us$i + $27 << 2) >> 2] - +HEAPF32[$51 >> 2];
      $c$02$us$i = $c$02$us$i + 1 | 0;
     } while (($c$02$us$i | 0) != ($_XC | 0));
    }
    $r$03$us$i = $r$03$us$i + 1 | 0;
   } while (($r$03$us$i | 0) != ($_XR | 0));
  }
  $56 = $r$015 + 1 | 0;
  if (($56 | 0) == ($_XR | 0)) break; else {
   $r$015 = $56;
   $r_opt$014 = $r_opt$2$lcssa;
   $v_max$013 = $v_max$2$lcssa;
  }
 }
 if ($0 | ($_XC | 0) == 0) return; else $r$14$us = 0;
 do {
  $5 = Math_imul($r$14$us, $_XC) | 0;
  $9 = 1.0 / +HEAPF32[$_X + ($5 + $r$14$us << 2) >> 2];
  $c$03$us = 0;
  do {
   $11 = $_X + ($c$03$us + $5 << 2) | 0;
   HEAPF32[$11 >> 2] = $9 * +HEAPF32[$11 >> 2];
   $c$03$us = $c$03$us + 1 | 0;
  } while (($c$03$us | 0) != ($_XC | 0));
  $r$14$us = $r$14$us + 1 | 0;
 } while (($r$14$us | 0) != ($_XR | 0));
 return;
}

function _resamp_rrrf_create($_rate, $_m, $_fc, $_As, $_npfb) {
 $_rate = +$_rate;
 $_m = $_m | 0;
 $_fc = +$_fc;
 $_As = +$_As;
 $_npfb = $_npfb | 0;
 var $$lcssa = 0.0, $1 = 0, $10 = 0, $11 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $27 = 0, $3 = 0, $30 = 0.0, $32 = 0.0, $38 = 0, $43 = 0, $5 = 0, $8 = 0, $gain$04 = 0.0, $i$03 = 0, $i$12 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer10 = sp + 32 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 if ($_rate <= 0.0) {
  $1 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = gb + 19626;
  _fprintf($1, gb + 19956 | 0, $vararg_buffer) | 0;
  _exit(1);
 }
 if (!$_m) {
  $3 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer1 >> 2] = gb + 19626;
  _fprintf($3, gb + 20026 | 0, $vararg_buffer1) | 0;
  _exit(1);
 }
 if (!$_npfb) {
  $5 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer4 >> 2] = gb + 19626;
  _fprintf($5, gb + 20099 | 0, $vararg_buffer4) | 0;
  _exit(1);
 }
 if ($_fc <= 0.0 | $_fc >= .5) {
  $8 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer7 >> 2] = gb + 19626;
  _fprintf($8, gb + 20176 | 0, $vararg_buffer7) | 0;
  _exit(1);
 }
 if ($_As <= 0.0) {
  $10 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer10 >> 2] = gb + 19626;
  _fprintf($10, gb + 20237 | 0, $vararg_buffer10) | 0;
  _exit(1);
 }
 $11 = _malloc(56) | 0;
 HEAPF32[$11 + 12 >> 2] = $_rate;
 HEAPF32[$11 + 16 >> 2] = 1.0 / $_rate;
 HEAP32[$11 >> 2] = $_m;
 HEAPF32[$11 + 8 >> 2] = $_fc;
 HEAPF32[$11 + 4 >> 2] = $_As;
 HEAP32[$11 + 44 >> 2] = $_npfb;
 $19 = Math_imul($_m << 1, $_npfb) | 0;
 $20 = $19 | 1;
 $21 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($20 << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $22 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($20 << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $23 = +($_npfb >>> 0);
 _liquid_firdes_kaiser($20, $_fc / $23, $_As, 0.0, $21);
 $27 = (Math_imul($_m, $_npfb) | 0) << 1 | 1;
 $gain$04 = 0.0;
 $i$03 = 0;
 while (1) {
  $30 = $gain$04 + +HEAPF32[$21 + ($i$03 << 2) >> 2];
  $i$03 = $i$03 + 1 | 0;
  if (($i$03 | 0) == ($27 | 0)) {
   $$lcssa = $30;
   break;
  } else $gain$04 = $30;
 }
 $32 = $23 / $$lcssa;
 $i$12 = 0;
 do {
  HEAPF32[$22 + ($i$12 << 2) >> 2] = $32 * +HEAPF32[$21 + ($i$12 << 2) >> 2];
  $i$12 = $i$12 + 1 | 0;
 } while (($i$12 | 0) != ($27 | 0));
 $38 = _firpfb_rrrf_create($_npfb, $22, $19) | 0;
 HEAP32[$11 + 48 >> 2] = $38;
 _windowf_clear(HEAP32[$38 + 16 >> 2] | 0);
 HEAP32[$11 + 52 >> 2] = 1;
 $43 = $11 + 20 | 0;
 HEAP32[$43 >> 2] = 0;
 HEAP32[$43 + 4 >> 2] = 0;
 HEAP32[$43 + 8 >> 2] = 0;
 HEAP32[$43 + 12 >> 2] = 0;
 HEAP32[$43 + 16 >> 2] = 0;
 HEAP32[$43 + 20 >> 2] = 0;
 STACKTOP = sp;
 return $11 | 0;
}

function _ofdmframegen_writesymbol($_q, $_x, $_y) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 $_y = $_y | 0;
 var $$lcssa = 0, $$lcssa$i = 0, $$pre$phi$iZ2D = 0, $0 = 0, $13 = 0, $18 = 0, $2 = 0, $22 = 0, $29 = 0.0, $3 = 0, $31 = 0.0, $32 = 0, $4 = 0, $41 = 0, $42 = 0, $44 = 0, $5 = 0, $53 = 0, $56 = 0, $57 = 0, $60 = 0.0, $61 = 0, $63 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $7 = 0, $77 = 0.0, $81 = 0.0, $83 = 0, $85 = 0, $86 = 0, $9 = 0, $i$01$i = 0, $i$02 = 0;
 $0 = HEAP32[$_q >> 2] | 0;
 L1 : do if ($0 | 0) {
  $2 = $_q + 8 | 0;
  $3 = $_q + 44 | 0;
  $4 = $_q + 52 | 0;
  $5 = $_q + 76 | 0;
  $7 = $0;
  $i$02 = 0;
  while (1) {
   $9 = ((($7 >>> 1) + $i$02 | 0) >>> 0) % ($7 >>> 0) | 0;
   switch (HEAP8[(HEAP32[$2 >> 2] | 0) + $9 >> 0] | 0) {
   case 0:
    {
     $13 = HEAP32[$4 >> 2] | 0;
     HEAPF32[$13 + ($9 << 3) >> 2] = 0.0;
     HEAPF32[$13 + ($9 << 3) + 4 >> 2] = 0.0;
     break;
    }
   case 1:
    {
     $18 = (_msequence_advance(HEAP32[$5 >> 2] | 0) | 0) != 0;
     $22 = HEAP32[$4 >> 2] | 0;
     HEAPF32[$22 + ($9 << 3) >> 2] = +HEAPF32[$3 >> 2] * ($18 ? 1.0 : -1.0);
     HEAPF32[$22 + ($9 << 3) + 4 >> 2] = 0.0;
     break;
    }
   default:
    {
     $29 = +HEAPF32[$3 >> 2];
     $31 = +HEAPF32[$_x + ($9 << 3) + 4 >> 2] * $29;
     $32 = HEAP32[$4 >> 2] | 0;
     HEAPF32[$32 + ($9 << 3) >> 2] = +HEAPF32[$_x + ($9 << 3) >> 2] * $29;
     HEAPF32[$32 + ($9 << 3) + 4 >> 2] = $31;
    }
   }
   $i$02 = $i$02 + 1 | 0;
   $7 = HEAP32[$_q >> 2] | 0;
   if ($i$02 >>> 0 >= $7 >>> 0) break L1;
  }
 } while (0);
 _fft_execute(HEAP32[$_q + 48 >> 2] | 0);
 $41 = $_q + 4 | 0;
 $42 = HEAP32[$41 >> 2] | 0;
 $44 = $_q + 56 | 0;
 _memmove($_y | 0, (HEAP32[$44 >> 2] | 0) + ((HEAP32[$_q >> 2] | 0) - $42 << 3) | 0, $42 << 3 | 0) | 0;
 _memmove($_y + (HEAP32[$41 >> 2] << 3) | 0, HEAP32[$44 >> 2] | 0, HEAP32[$_q >> 2] << 3 | 0) | 0;
 $53 = $_q + 12 | 0;
 if (!(HEAP32[$53 >> 2] | 0)) {
  $$lcssa$i = 0;
  $$pre$phi$iZ2D = $_q + 20 | 0;
  $85 = HEAP32[$$pre$phi$iZ2D >> 2] | 0;
  $86 = HEAP32[$44 >> 2] | 0;
  _memmove($85 | 0, $86 | 0, $$lcssa$i | 0) | 0;
  return;
 }
 $56 = $_q + 16 | 0;
 $57 = $_q + 20 | 0;
 $i$01$i = 0;
 do {
  $60 = +HEAPF32[(HEAP32[$56 >> 2] | 0) + ($i$01$i << 2) >> 2];
  $61 = $_y + ($i$01$i << 3) | 0;
  $63 = $_y + ($i$01$i << 3) + 4 | 0;
  $65 = $60 * +HEAPF32[$61 >> 2];
  $66 = $60 * +HEAPF32[$63 >> 2];
  HEAPF32[$61 >> 2] = $65;
  HEAPF32[$63 >> 2] = $66;
  $67 = HEAP32[$57 >> 2] | 0;
  $77 = +HEAPF32[(HEAP32[$56 >> 2] | 0) + ((HEAP32[$53 >> 2] | 0) + ~$i$01$i << 2) >> 2];
  $81 = $66 + +HEAPF32[$67 + ($i$01$i << 3) + 4 >> 2] * $77;
  HEAPF32[$61 >> 2] = $65 + +HEAPF32[$67 + ($i$01$i << 3) >> 2] * $77;
  HEAPF32[$63 >> 2] = $81;
  $i$01$i = $i$01$i + 1 | 0;
  $83 = HEAP32[$53 >> 2] | 0;
 } while ($i$01$i >>> 0 < $83 >>> 0);
 $$lcssa = $83;
 $$lcssa$i = $$lcssa << 3;
 $$pre$phi$iZ2D = $57;
 $85 = HEAP32[$$pre$phi$iZ2D >> 2] | 0;
 $86 = HEAP32[$44 >> 2] | 0;
 _memmove($85 | 0, $86 | 0, $$lcssa$i | 0) | 0;
 return;
}

function _fft_create_plan_radix2($_nfft, $_x, $_y, $_dir, $_flags) {
 $_nfft = $_nfft | 0;
 $_x = $_x | 0;
 $_y = $_y | 0;
 $_dir = $_dir | 0;
 $_flags = $_flags | 0;
 var $$byval_copy1 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $14 = 0, $17 = 0, $2 = 0, $24 = 0, $27 = 0, $28 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $35 = 0.0, $36 = 0.0, $39 = 0, $41 = 0.0, $42 = 0, $43 = 0, $46 = 0.0, $47 = 0.0, $55 = 0.0, $61 = 0.0, $63 = 0, $69 = 0.0, $77 = 0, $8 = 0, $i$02 = 0, $i$11 = 0, $i$11$us = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy1 = sp + 24 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp;
 $3 = _malloc(72) | 0;
 HEAP32[$3 >> 2] = $_nfft;
 HEAP32[$3 + 4 >> 2] = $_x;
 HEAP32[$3 + 8 >> 2] = $_y;
 HEAP32[$3 + 16 >> 2] = $_flags;
 $8 = ($_dir | 0) == 1 ? 1 : -1;
 HEAP32[$3 + 20 >> 2] = $8;
 $10 = $3 + 12 | 0;
 HEAP32[$10 >> 2] = $8;
 HEAP32[$3 + 24 >> 2] = 1;
 HEAP32[$3 + 28 >> 2] = fb + 8;
 $14 = (_liquid_msb_index($_nfft) | 0) + -1 | 0;
 HEAP32[$3 + 40 >> 2] = $14;
 $17 = _malloc($_nfft << 2) | 0;
 HEAP32[$3 + 44 >> 2] = $17;
 if (!$_nfft) {
  $$lcssa = 0;
  $27 = $8;
  $30 = 0;
 } else {
  $i$02 = 0;
  do {
   HEAP32[$17 + ($i$02 << 2) >> 2] = _fft_reverse_index($i$02, $14) | 0;
   $i$02 = $i$02 + 1 | 0;
  } while ($i$02 >>> 0 < $_nfft >>> 0);
  $$lcssa = $_nfft << 3;
  $27 = HEAP32[$10 >> 2] | 0;
  $30 = HEAP32[$3 >> 2] | 0;
 }
 $24 = _malloc($$lcssa) | 0;
 HEAP32[$3 + 48 >> 2] = $24;
 $28 = ($27 | 0) == 1 ? -1.0 : 1.0;
 if (!$30) {
  STACKTOP = sp;
  return $3 | 0;
 }
 $31 = $28 * 0.0;
 $35 = $31 * 2.0 - $31;
 $36 = $28 * 2.0 + $31 * 0.0;
 $39 = $0 + 4 | 0;
 $41 = +($30 >>> 0);
 $42 = $2 + 4 | 0;
 $43 = $1 + 4 | 0;
 if (($35 != $35 | 0.0 != 0.0) & ($36 != $36 | 0.0 != 0.0)) {
  $i$11$us = 0;
  do {
   ___mulsc3($0, $31, $28, 2.0, 0.0);
   $55 = +($i$11$us >>> 0);
   $61 = $55 * (+HEAPF32[$39 >> 2] * 3.141592653589793) / $41;
   HEAPF32[$2 >> 2] = $55 * (+HEAPF32[$0 >> 2] * 3.141592653589793) / $41;
   HEAPF32[$42 >> 2] = $61;
   HEAP32[$$byval_copy1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
   _cexpf($1, $$byval_copy1);
   $63 = HEAP32[$43 >> 2] | 0;
   HEAP32[$24 + ($i$11$us << 3) >> 2] = HEAP32[$1 >> 2];
   HEAP32[$24 + ($i$11$us << 3) + 4 >> 2] = $63;
   $i$11$us = $i$11$us + 1 | 0;
  } while ($i$11$us >>> 0 < $30 >>> 0);
  STACKTOP = sp;
  return $3 | 0;
 }
 $46 = $35 * 3.141592653589793;
 $47 = $36 * 3.141592653589793;
 $i$11 = 0;
 do {
  $69 = +($i$11 >>> 0);
  HEAPF32[$2 >> 2] = $69 * $46 / $41;
  HEAPF32[$42 >> 2] = $69 * $47 / $41;
  HEAP32[$$byval_copy1 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
  _cexpf($1, $$byval_copy1);
  $77 = HEAP32[$43 >> 2] | 0;
  HEAP32[$24 + ($i$11 << 3) >> 2] = HEAP32[$1 >> 2];
  HEAP32[$24 + ($i$11 << 3) + 4 >> 2] = $77;
  $i$11 = $i$11 + 1 | 0;
 } while ($i$11 >>> 0 < $30 >>> 0);
 STACKTOP = sp;
 return $3 | 0;
}

function _fec_secded3932_decode($_q, $_dec_msg_len, $_msg_enc, $_msg_dec) {
 $_q = $_q | 0;
 $_dec_msg_len = $_dec_msg_len | 0;
 $_msg_enc = $_msg_enc | 0;
 $_msg_dec = $_msg_dec | 0;
 var $$pre = 0, $$pre18 = 0, $$pre19 = 0, $$pre20 = 0, $0 = 0, $1 = 0, $28 = 0, $29 = 0, $3 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $e_hat$i = 0, $i$0$lcssa = 0, $i$08 = 0, $i$1 = 0, $j$0$lcssa = 0, $j$07 = 0, $j$1 = 0, $m_hat = 0, $v = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $e_hat$i = sp + 9 | 0;
 $v = sp + 4 | 0;
 $m_hat = sp;
 $0 = $_dec_msg_len & 3;
 $1 = $_dec_msg_len - $0 | 0;
 if (($0 | 0) == ($_dec_msg_len | 0)) {
  $i$0$lcssa = 0;
  $j$0$lcssa = 0;
 } else {
  $3 = $e_hat$i + 1 | 0;
  $4 = $e_hat$i + 2 | 0;
  $5 = $e_hat$i + 3 | 0;
  $6 = $e_hat$i + 4 | 0;
  $i$08 = 0;
  $j$07 = 0;
  while (1) {
   $7 = $_msg_enc + $j$07 | 0;
   $8 = $_msg_dec + $i$08 | 0;
   HEAP8[$e_hat$i >> 0] = 0;
   HEAP8[$e_hat$i + 1 >> 0] = 0;
   HEAP8[$e_hat$i + 2 >> 0] = 0;
   HEAP8[$e_hat$i + 3 >> 0] = 0;
   HEAP8[$e_hat$i + 4 >> 0] = 0;
   _fec_secded3932_estimate_ehat($7, $e_hat$i) | 0;
   HEAP8[$8 >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$7 + 1 >> 0];
   HEAP8[$8 + 1 >> 0] = HEAP8[$4 >> 0] ^ HEAP8[$7 + 2 >> 0];
   HEAP8[$8 + 2 >> 0] = HEAP8[$5 >> 0] ^ HEAP8[$7 + 3 >> 0];
   HEAP8[$8 + 3 >> 0] = HEAP8[$6 >> 0] ^ HEAP8[$7 + 4 >> 0];
   $28 = $j$07 + 5 | 0;
   $29 = $i$08 + 4 | 0;
   if ($29 >>> 0 < $1 >>> 0) {
    $i$08 = $29;
    $j$07 = $28;
   } else {
    $i$0$lcssa = $29;
    $j$0$lcssa = $28;
    break;
   }
  }
 }
 if (!$0) {
  $i$1 = $i$0$lcssa;
  $j$1 = $j$0$lcssa;
 } else {
  HEAP8[$v >> 0] = HEAP8[$_msg_enc + $j$0$lcssa >> 0] | 0;
  $34 = $v + 1 | 0;
  HEAP8[$34 >> 0] = 0;
  HEAP8[$34 + 1 >> 0] = 0;
  HEAP8[$34 + 2 >> 0] = 0;
  HEAP8[$34 + 3 >> 0] = 0;
  _memcpy($34 | 0, $_msg_enc + ($j$0$lcssa + 1) | 0, $_dec_msg_len & 3 | 0) | 0;
  $$pre = HEAP8[$34 >> 0] | 0;
  $$pre18 = HEAP8[$v + 2 >> 0] | 0;
  $$pre19 = HEAP8[$v + 3 >> 0] | 0;
  $$pre20 = HEAP8[$v + 4 >> 0] | 0;
  HEAP8[$e_hat$i >> 0] = 0;
  HEAP8[$e_hat$i + 1 >> 0] = 0;
  HEAP8[$e_hat$i + 2 >> 0] = 0;
  HEAP8[$e_hat$i + 3 >> 0] = 0;
  HEAP8[$e_hat$i + 4 >> 0] = 0;
  _fec_secded3932_estimate_ehat($v, $e_hat$i) | 0;
  HEAP8[$m_hat >> 0] = HEAP8[$e_hat$i + 1 >> 0] ^ $$pre;
  HEAP8[$m_hat + 1 >> 0] = HEAP8[$e_hat$i + 2 >> 0] ^ $$pre18;
  HEAP8[$m_hat + 2 >> 0] = HEAP8[$e_hat$i + 3 >> 0] ^ $$pre19;
  HEAP8[$m_hat + 3 >> 0] = HEAP8[$e_hat$i + 4 >> 0] ^ $$pre20;
  _memcpy($_msg_dec + $i$0$lcssa | 0, $m_hat | 0, $_dec_msg_len & 3 | 0) | 0;
  $i$1 = $i$0$lcssa | $0;
  $j$1 = $0 + 1 + $j$0$lcssa | 0;
 }
 if (($j$1 | 0) != (_fec_get_enc_msg_length(9, $_dec_msg_len) | 0)) ___assert_fail(gb + 19198 | 0, gb + 19262 | 0, 349, gb + 19313 | 0);
 if (($i$1 | 0) == ($_dec_msg_len | 0)) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(gb + 19586 | 0, gb + 19262 | 0, 350, gb + 19313 | 0);
}

function _firdespm_compute_taps($_q, $_h) {
 $_q = $_q | 0;
 $_h = $_h | 0;
 var $$lcssa = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0.0, $19 = 0.0, $2 = 0, $24 = 0, $25 = 0.0, $26 = 0, $3 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0.0, $42 = 0.0, $46 = 0.0, $47 = 0, $49 = 0.0, $5 = 0, $51 = 0.0, $56 = 0.0, $6 = 0, $64 = 0.0, $67 = 0, $71 = 0, $8 = 0, $9 = 0, $g$0 = 0.0, $i$05 = 0, $i$13 = 0, $i$13$us = 0, $j$01$us = 0, $v$02$us = 0.0, sp = 0;
 sp = STACKTOP;
 _firdespm_compute_interp($_q);
 $0 = $_q + 12 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $_q + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $1 - $3 | 0;
 $5 = $4 + 1 | 0;
 $6 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($5 << 3) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 L1 : do if (!$5) $38 = HEAP32[$_q + 28 >> 2] | 0; else {
  $8 = $_q + 64 | 0;
  $9 = $_q + 72 | 0;
  $10 = $_q + 68 | 0;
  $11 = $_q + 28 | 0;
  $13 = $1 + 1 - $3 | 0;
  $24 = $1;
  $i$05 = 0;
  while (1) {
   $14 = +($i$05 >>> 0);
   $19 = +Math_cos(+($14 / +((HEAP32[$_q >> 2] | 0) >>> 0) * 6.283185307179586));
   $25 = +_poly_val_lagrange_barycentric(HEAP32[$8 >> 2] | 0, HEAP32[$9 >> 2] | 0, HEAP32[$10 >> 2] | 0, $19, $24 + 1 | 0);
   $26 = HEAP32[$11 >> 2] | 0;
   if (!$26) if (!(HEAP32[$2 >> 2] | 0)) $g$0 = +Math_cos(+($14 * 3.141592653589793 / +((HEAP32[$_q >> 2] | 0) >>> 0))); else $g$0 = 1.0; else $g$0 = 1.0;
   HEAPF64[$6 + ($i$05 << 3) >> 3] = $25 * $g$0;
   $36 = $i$05 + 1 | 0;
   if (($36 | 0) == ($13 | 0)) {
    $38 = $26;
    break L1;
   }
   $24 = HEAP32[$0 >> 2] | 0;
   $i$05 = $36;
  }
 } while (0);
 if ($38 | 0) switch (HEAP32[$2 >> 2] | 0) {
 case 1:
  {
   _fwrite(gb + 22976 | 0, 73, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
   STACKTOP = sp;
   return;
  }
 case 0:
  {
   _fwrite(gb + 22976 | 0, 73, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
   STACKTOP = sp;
   return;
  }
 default:
  {
   STACKTOP = sp;
   return;
  }
 }
 $39 = HEAP32[$_q >> 2] | 0;
 if (!$39) {
  STACKTOP = sp;
  return;
 }
 $41 = +HEAPF64[$6 >> 3];
 $42 = +($4 >>> 0);
 $46 = +((1 - (HEAP32[$2 >> 2] | 0) | 0) >>> 0) * .5;
 $47 = HEAP32[$0 >> 2] | 0;
 $49 = +($39 >>> 0);
 if ($47 >>> 0 > 1) {
  $67 = $47;
  $i$13$us = 0;
 } else {
  $51 = $41 / $49;
  $i$13 = 0;
  do {
   HEAPF32[$_h + ($i$13 << 2) >> 2] = $51;
   $i$13 = $i$13 + 1 | 0;
  } while ($i$13 >>> 0 < $39 >>> 0);
  STACKTOP = sp;
  return;
 }
 while (1) {
  $56 = (+($i$13$us >>> 0) - $42 + $46) / $49 * 6.283185307179586;
  $j$01$us = 1;
  $v$02$us = $41;
  while (1) {
   $64 = $v$02$us + +HEAPF64[$6 + ($j$01$us << 3) >> 3] * 2.0 * +Math_cos(+($56 * +($j$01$us >>> 0)));
   $j$01$us = $j$01$us + 1 | 0;
   if ($j$01$us >>> 0 >= $67 >>> 0) {
    $$lcssa = $64;
    break;
   } else $v$02$us = $64;
  }
  HEAPF32[$_h + ($i$13$us << 2) >> 2] = $$lcssa / $49;
  $71 = $i$13$us + 1 | 0;
  if ($71 >>> 0 >= $39 >>> 0) break;
  $67 = HEAP32[$0 >> 2] | 0;
  $i$13$us = $71;
 }
 STACKTOP = sp;
 return;
}

function ___stdio_write($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $15 = 0, $20 = 0, $25 = 0, $3 = 0, $34 = 0, $36 = 0, $38 = 0, $49 = 0, $5 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0, $iovcnt$0$lcssa12 = 0, $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $iovs = sp + 32 | 0;
 $0 = $f + 28 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[$iovs >> 2] = $1;
 $3 = $f + 20 | 0;
 $5 = (HEAP32[$3 >> 2] | 0) - $1 | 0;
 HEAP32[$iovs + 4 >> 2] = $5;
 HEAP32[$iovs + 8 >> 2] = $buf;
 HEAP32[$iovs + 12 >> 2] = $len;
 $9 = $f + 60 | 0;
 $10 = $f + 44 | 0;
 $iov$0 = $iovs;
 $iovcnt$0 = 2;
 $rem$0 = $5 + $len | 0;
 while (1) {
  if (!(HEAP32[gb + 45032 >> 2] | 0)) {
   HEAP32[$vararg_buffer3 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$vararg_buffer3 + 4 >> 2] = $iov$0;
   HEAP32[$vararg_buffer3 + 8 >> 2] = $iovcnt$0;
   $cnt$0 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0;
  } else {
   _pthread_cleanup_push(fb + 21 | 0, $f | 0);
   HEAP32[$vararg_buffer >> 2] = HEAP32[$9 >> 2];
   HEAP32[$vararg_buffer + 4 >> 2] = $iov$0;
   HEAP32[$vararg_buffer + 8 >> 2] = $iovcnt$0;
   $15 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0;
   _pthread_cleanup_pop(0);
   $cnt$0 = $15;
  }
  if (($rem$0 | 0) == ($cnt$0 | 0)) {
   label = 6;
   break;
  }
  if (($cnt$0 | 0) < 0) {
   $iov$0$lcssa11 = $iov$0;
   $iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $34 = $rem$0 - $cnt$0 | 0;
  $36 = HEAP32[$iov$0 + 4 >> 2] | 0;
  if ($cnt$0 >>> 0 > $36 >>> 0) {
   $38 = HEAP32[$10 >> 2] | 0;
   HEAP32[$0 >> 2] = $38;
   HEAP32[$3 >> 2] = $38;
   $49 = HEAP32[$iov$0 + 12 >> 2] | 0;
   $cnt$1 = $cnt$0 - $36 | 0;
   $iov$1 = $iov$0 + 8 | 0;
   $iovcnt$1 = $iovcnt$0 + -1 | 0;
  } else if (($iovcnt$0 | 0) == 2) {
   HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + $cnt$0;
   $49 = $36;
   $cnt$1 = $cnt$0;
   $iov$1 = $iov$0;
   $iovcnt$1 = 2;
  } else {
   $49 = $36;
   $cnt$1 = $cnt$0;
   $iov$1 = $iov$0;
   $iovcnt$1 = $iovcnt$0;
  }
  HEAP32[$iov$1 >> 2] = (HEAP32[$iov$1 >> 2] | 0) + $cnt$1;
  HEAP32[$iov$1 + 4 >> 2] = $49 - $cnt$1;
  $iov$0 = $iov$1;
  $iovcnt$0 = $iovcnt$1;
  $rem$0 = $34;
 }
 if ((label | 0) == 6) {
  $20 = HEAP32[$10 >> 2] | 0;
  HEAP32[$f + 16 >> 2] = $20 + (HEAP32[$f + 48 >> 2] | 0);
  $25 = $20;
  HEAP32[$0 >> 2] = $25;
  HEAP32[$3 >> 2] = $25;
  $$0 = $len;
 } else if ((label | 0) == 8) {
  HEAP32[$f + 16 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$f >> 2] = HEAP32[$f >> 2] | 32;
  if (($iovcnt$0$lcssa12 | 0) == 2) $$0 = 0; else $$0 = $len - (HEAP32[$iov$0$lcssa11 + 4 >> 2] | 0) | 0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _ellip_snf($agg$result, $_u, $_k, $_n) {
 $agg$result = $agg$result | 0;
 $_u = $_u | 0;
 $_k = +$_k;
 $_n = $_n | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $14 = 0.0, $16 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $23 = 0.0, $3 = 0, $30 = 0, $31 = 0, $34 = 0.0, $35 = 0.0, $38 = 0.0, $39 = 0.0, $44 = 0.0, $45 = 0.0, $51 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $57 = 0, $i$02$i = 0, $i$03 = 0, $k$01$i = 0.0, $wn$sroa$0$0$lcssa = 0.0, $wn$sroa$0$01 = 0.0, $wn$sroa$8$0$lcssa = 0.0, $wn$sroa$8$02 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp;
 $14 = +HEAPF32[$_u + 4 >> 2] * 3.141592653589793 * .5;
 HEAPF32[$1 >> 2] = +HEAPF32[$_u >> 2] * 3.141592653589793 * .5;
 HEAPF32[$1 + 4 >> 2] = $14;
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 _csinf($0, $$byval_copy);
 $16 = +HEAPF32[$0 >> 2];
 $18 = +HEAPF32[$0 + 4 >> 2];
 $19 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($_n << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 if (!$_n) {
  $wn$sroa$0$0$lcssa = $16;
  $wn$sroa$8$0$lcssa = $18;
  $57 = $agg$result + 4 | 0;
  HEAPF32[$agg$result >> 2] = $wn$sroa$0$0$lcssa;
  HEAPF32[$57 >> 2] = $wn$sroa$8$0$lcssa;
  STACKTOP = sp;
  return;
 } else {
  $i$02$i = 0;
  $k$01$i = $_k;
 }
 do {
  $23 = +Math_sqrt(+(1.0 - $k$01$i * $k$01$i));
  $k$01$i = (1.0 - $23) / ($23 + 1.0);
  HEAPF32[$19 + ($i$02$i << 2) >> 2] = $k$01$i;
  $i$02$i = $i$02$i + 1 | 0;
 } while (($i$02$i | 0) != ($_n | 0));
 if (!$_n) {
  $wn$sroa$0$0$lcssa = $16;
  $wn$sroa$8$0$lcssa = $18;
  $57 = $agg$result + 4 | 0;
  HEAPF32[$agg$result >> 2] = $wn$sroa$0$0$lcssa;
  HEAPF32[$57 >> 2] = $wn$sroa$8$0$lcssa;
  STACKTOP = sp;
  return;
 }
 $30 = $2 + 4 | 0;
 $31 = $3 + 4 | 0;
 $i$03 = $_n;
 $wn$sroa$0$01 = $16;
 $wn$sroa$8$02 = $18;
 while (1) {
  $i$03 = $i$03 + -1 | 0;
  $34 = +HEAPF32[$19 + ($i$03 << 2) >> 2];
  $35 = $34 + 1.0;
  $38 = $wn$sroa$0$01 * $34;
  $39 = $wn$sroa$8$02 * $34;
  $44 = $wn$sroa$0$01 * $38 - $wn$sroa$8$02 * $39;
  $45 = $wn$sroa$8$02 * $38 + $wn$sroa$0$01 * $39;
  if (($44 != $44 | 0.0 != 0.0) & ($45 != $45 | 0.0 != 0.0)) {
   ___mulsc3($2, $38, $39, $wn$sroa$0$01, $wn$sroa$8$02);
   $51 = +HEAPF32[$2 >> 2];
   $53 = +HEAPF32[$30 >> 2];
  } else {
   $51 = $44;
   $53 = $45;
  }
  ___divsc3($3, $wn$sroa$0$01 * $35, $wn$sroa$8$02 * $35, $51 + 1.0, $53 + 0.0);
  $54 = +HEAPF32[$3 >> 2];
  $55 = +HEAPF32[$31 >> 2];
  if (!$i$03) {
   $wn$sroa$0$0$lcssa = $54;
   $wn$sroa$8$0$lcssa = $55;
   break;
  } else {
   $wn$sroa$0$01 = $54;
   $wn$sroa$8$02 = $55;
  }
 }
 $57 = $agg$result + 4 | 0;
 HEAPF32[$agg$result >> 2] = $wn$sroa$0$0$lcssa;
 HEAPF32[$57 >> 2] = $wn$sroa$8$0$lcssa;
 STACKTOP = sp;
 return;
}

function _ellip_cdf($agg$result, $_u, $_k, $_n) {
 $agg$result = $agg$result | 0;
 $_u = $_u | 0;
 $_k = +$_k;
 $_n = $_n | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $14 = 0.0, $16 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $23 = 0.0, $3 = 0, $30 = 0, $31 = 0, $34 = 0.0, $35 = 0.0, $38 = 0.0, $39 = 0.0, $44 = 0.0, $45 = 0.0, $51 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $57 = 0, $i$02$i = 0, $i$03 = 0, $k$01$i = 0.0, $wn$sroa$0$0$lcssa = 0.0, $wn$sroa$0$01 = 0.0, $wn$sroa$8$0$lcssa = 0.0, $wn$sroa$8$02 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp;
 $14 = +HEAPF32[$_u + 4 >> 2] * 3.141592653589793 * .5;
 HEAPF32[$1 >> 2] = +HEAPF32[$_u >> 2] * 3.141592653589793 * .5;
 HEAPF32[$1 + 4 >> 2] = $14;
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 _ccosf($0, $$byval_copy);
 $16 = +HEAPF32[$0 >> 2];
 $18 = +HEAPF32[$0 + 4 >> 2];
 $19 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($_n << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 if (!$_n) {
  $wn$sroa$0$0$lcssa = $16;
  $wn$sroa$8$0$lcssa = $18;
  $57 = $agg$result + 4 | 0;
  HEAPF32[$agg$result >> 2] = $wn$sroa$0$0$lcssa;
  HEAPF32[$57 >> 2] = $wn$sroa$8$0$lcssa;
  STACKTOP = sp;
  return;
 } else {
  $i$02$i = 0;
  $k$01$i = $_k;
 }
 do {
  $23 = +Math_sqrt(+(1.0 - $k$01$i * $k$01$i));
  $k$01$i = (1.0 - $23) / ($23 + 1.0);
  HEAPF32[$19 + ($i$02$i << 2) >> 2] = $k$01$i;
  $i$02$i = $i$02$i + 1 | 0;
 } while (($i$02$i | 0) != ($_n | 0));
 if (!$_n) {
  $wn$sroa$0$0$lcssa = $16;
  $wn$sroa$8$0$lcssa = $18;
  $57 = $agg$result + 4 | 0;
  HEAPF32[$agg$result >> 2] = $wn$sroa$0$0$lcssa;
  HEAPF32[$57 >> 2] = $wn$sroa$8$0$lcssa;
  STACKTOP = sp;
  return;
 }
 $30 = $2 + 4 | 0;
 $31 = $3 + 4 | 0;
 $i$03 = $_n;
 $wn$sroa$0$01 = $16;
 $wn$sroa$8$02 = $18;
 while (1) {
  $i$03 = $i$03 + -1 | 0;
  $34 = +HEAPF32[$19 + ($i$03 << 2) >> 2];
  $35 = $34 + 1.0;
  $38 = $wn$sroa$0$01 * $34;
  $39 = $wn$sroa$8$02 * $34;
  $44 = $wn$sroa$0$01 * $38 - $wn$sroa$8$02 * $39;
  $45 = $wn$sroa$8$02 * $38 + $wn$sroa$0$01 * $39;
  if (($44 != $44 | 0.0 != 0.0) & ($45 != $45 | 0.0 != 0.0)) {
   ___mulsc3($2, $38, $39, $wn$sroa$0$01, $wn$sroa$8$02);
   $51 = +HEAPF32[$2 >> 2];
   $53 = +HEAPF32[$30 >> 2];
  } else {
   $51 = $44;
   $53 = $45;
  }
  ___divsc3($3, $wn$sroa$0$01 * $35, $wn$sroa$8$02 * $35, $51 + 1.0, $53 + 0.0);
  $54 = +HEAPF32[$3 >> 2];
  $55 = +HEAPF32[$31 >> 2];
  if (!$i$03) {
   $wn$sroa$0$0$lcssa = $54;
   $wn$sroa$8$0$lcssa = $55;
   break;
  } else {
   $wn$sroa$0$01 = $54;
   $wn$sroa$8$02 = $55;
  }
 }
 $57 = $agg$result + 4 | 0;
 HEAPF32[$agg$result >> 2] = $wn$sroa$0$0$lcssa;
 HEAPF32[$57 >> 2] = $wn$sroa$8$0$lcssa;
 STACKTOP = sp;
 return;
}

function _pop_arg($arg, $type, $ap) {
 $arg = $arg | 0;
 $type = $type | 0;
 $ap = $ap | 0;
 var $105 = 0, $106 = 0.0, $112 = 0, $113 = 0.0, $13 = 0, $14 = 0, $17 = 0, $26 = 0, $27 = 0, $28 = 0, $37 = 0, $38 = 0, $40 = 0, $43 = 0, $44 = 0, $53 = 0, $54 = 0, $56 = 0, $59 = 0, $6 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $79 = 0, $80 = 0, $82 = 0, $85 = 0, $94 = 0, $95 = 0, $96 = 0;
 L1 : do if ($type >>> 0 <= 20) do switch ($type | 0) {
 case 9:
  {
   $6 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $7 = HEAP32[$6 >> 2] | 0;
   HEAP32[$ap >> 2] = $6 + 4;
   HEAP32[$arg >> 2] = $7;
   break L1;
   break;
  }
 case 10:
  {
   $13 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $14 = HEAP32[$13 >> 2] | 0;
   HEAP32[$ap >> 2] = $13 + 4;
   $17 = $arg;
   HEAP32[$17 >> 2] = $14;
   HEAP32[$17 + 4 >> 2] = (($14 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 11:
  {
   $26 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $27 = HEAP32[$26 >> 2] | 0;
   HEAP32[$ap >> 2] = $26 + 4;
   $28 = $arg;
   HEAP32[$28 >> 2] = $27;
   HEAP32[$28 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 12:
  {
   $37 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $38 = $37;
   $40 = HEAP32[$38 >> 2] | 0;
   $43 = HEAP32[$38 + 4 >> 2] | 0;
   HEAP32[$ap >> 2] = $37 + 8;
   $44 = $arg;
   HEAP32[$44 >> 2] = $40;
   HEAP32[$44 + 4 >> 2] = $43;
   break L1;
   break;
  }
 case 13:
  {
   $53 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $54 = HEAP32[$53 >> 2] | 0;
   HEAP32[$ap >> 2] = $53 + 4;
   $56 = ($54 & 65535) << 16 >> 16;
   $59 = $arg;
   HEAP32[$59 >> 2] = $56;
   HEAP32[$59 + 4 >> 2] = (($56 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 14:
  {
   $68 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $69 = HEAP32[$68 >> 2] | 0;
   HEAP32[$ap >> 2] = $68 + 4;
   $70 = $arg;
   HEAP32[$70 >> 2] = $69 & 65535;
   HEAP32[$70 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 15:
  {
   $79 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $80 = HEAP32[$79 >> 2] | 0;
   HEAP32[$ap >> 2] = $79 + 4;
   $82 = ($80 & 255) << 24 >> 24;
   $85 = $arg;
   HEAP32[$85 >> 2] = $82;
   HEAP32[$85 + 4 >> 2] = (($82 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 16:
  {
   $94 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $95 = HEAP32[$94 >> 2] | 0;
   HEAP32[$ap >> 2] = $94 + 4;
   $96 = $arg;
   HEAP32[$96 >> 2] = $95 & 255;
   HEAP32[$96 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 17:
  {
   $105 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $106 = +HEAPF64[$105 >> 3];
   HEAP32[$ap >> 2] = $105 + 8;
   HEAPF64[$arg >> 3] = $106;
   break L1;
   break;
  }
 case 18:
  {
   $112 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $113 = +HEAPF64[$112 >> 3];
   HEAP32[$ap >> 2] = $112 + 8;
   HEAPF64[$arg >> 3] = $113;
   break L1;
   break;
  }
 default:
  break L1;
 } while (0); while (0);
 return;
}

function _parse_value($lex, $flags, $error) {
 $lex = $lex | 0;
 $flags = $flags | 0;
 $error = $error | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $35 = 0, $64 = 0, $json = 0, $len = 0, $value = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $0 = sp + 44 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 36 | 0;
 $3 = sp + 32 | 0;
 $json = sp + 28 | 0;
 $value = sp + 24 | 0;
 $len = sp + 20 | 0;
 HEAP32[$1 >> 2] = $lex;
 HEAP32[$2 >> 2] = $flags;
 HEAP32[$3 >> 2] = $error;
 do switch (HEAP32[(HEAP32[$1 >> 2] | 0) + 56 >> 2] | 0) {
 case 256:
  {
   HEAP32[$value >> 2] = HEAP32[(HEAP32[$1 >> 2] | 0) + 64 >> 2];
   HEAP32[$len >> 2] = HEAP32[(HEAP32[$1 >> 2] | 0) + 64 + 4 >> 2];
   if (!(HEAP32[$2 >> 2] & 16)) if (_memchr(HEAP32[$value >> 2] | 0, 0, HEAP32[$len >> 2] | 0) | 0) {
    _error_set(HEAP32[$3 >> 2] | 0, HEAP32[$1 >> 2] | 0, gb + 41871 | 0, $vararg_buffer);
    HEAP32[$0 >> 2] = 0;
    $64 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $64 | 0;
   }
   HEAP32[$json >> 2] = _jsonp_stringn_nocheck_own(HEAP32[$value >> 2] | 0, HEAP32[$len >> 2] | 0) | 0;
   if (HEAP32[$json >> 2] | 0) {
    HEAP32[(HEAP32[$1 >> 2] | 0) + 64 >> 2] = 0;
    HEAP32[(HEAP32[$1 >> 2] | 0) + 64 + 4 >> 2] = 0;
   }
   break;
  }
 case 257:
  {
   $35 = (HEAP32[$1 >> 2] | 0) + 64 | 0;
   HEAP32[$json >> 2] = _json_integer(HEAP32[$35 >> 2] | 0, HEAP32[$35 + 4 >> 2] | 0) | 0;
   break;
  }
 case 258:
  {
   HEAP32[$json >> 2] = _json_real(+HEAPF64[(HEAP32[$1 >> 2] | 0) + 64 >> 3]) | 0;
   break;
  }
 case 259:
  {
   HEAP32[$json >> 2] = _json_true() | 0;
   break;
  }
 case 260:
  {
   HEAP32[$json >> 2] = _json_false() | 0;
   break;
  }
 case 261:
  {
   HEAP32[$json >> 2] = _json_null() | 0;
   break;
  }
 case 123:
  {
   HEAP32[$json >> 2] = _parse_object(HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
   break;
  }
 case 91:
  {
   HEAP32[$json >> 2] = _parse_array(HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
   break;
  }
 case -1:
  {
   _error_set(HEAP32[$3 >> 2] | 0, HEAP32[$1 >> 2] | 0, gb + 42036 | 0, $vararg_buffer1);
   HEAP32[$0 >> 2] = 0;
   $64 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $64 | 0;
  }
 default:
  {
   _error_set(HEAP32[$3 >> 2] | 0, HEAP32[$1 >> 2] | 0, gb + 42050 | 0, $vararg_buffer3);
   HEAP32[$0 >> 2] = 0;
   $64 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $64 | 0;
  }
 } while (0);
 if (HEAP32[$json >> 2] | 0) {
  HEAP32[$0 >> 2] = HEAP32[$json >> 2];
  $64 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $64 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $64 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $64 | 0;
 }
 return 0;
}

function _liquid_firdes_rkaiser_quadratic($_k, $_m, $_beta, $_dt, $_h, $_rho) {
 $_k = $_k | 0;
 $_m = $_m | 0;
 $_beta = +$_beta;
 $_dt = +$_dt;
 $_h = $_h | 0;
 $_rho = $_rho | 0;
 var $$lcssa = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $17 = 0.0, $18 = 0.0, $21 = 0.0, $52 = 0, $55 = 0.0, $57 = 0.0, $59 = 0.0, $61 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $dx$010 = 0.0, $e2$06 = 0.0, $i$05 = 0, $i$14 = 0, $or$cond2 = 0, $p$08 = 0, $rho_opt$011 = 0.0, $rho_opt$1 = 0.0, $rho_opt$1$lcssa = 0.0, $x0$0 = 0.0, $x1$09 = 0.0, $x2$0 = 0.0, $y_opt$07 = 0.0, $x1$09$looptemp = 0.0;
 if (!$_k) {
  _fwrite(gb + 24689 | 0, 67, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if (!$_m) {
  _fwrite(gb + 24757 | 0, 67, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if ($_beta < 0.0 | $_beta > 1.0) {
  _fwrite(gb + 24825 | 0, 64, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 $7 = +_rkaiser_approximate_rho($_m, $_beta);
 $dx$010 = .20000000298023224;
 $p$08 = 0;
 $rho_opt$011 = $7;
 $x1$09 = $7;
 $y_opt$07 = 0.0;
 while (1) {
  $8 = $x1$09 - $dx$010;
  $9 = $x1$09 + $dx$010;
  $x0$0 = !($8 <= 0.0) ? $8 : .009999999776482582;
  $x2$0 = !($9 >= 1.0) ? $9 : .9900000095367432;
  $12 = +_liquid_firdes_rkaiser_internal_isi($_k, $_m, $_beta, $_dt, $x0$0, $_h);
  $13 = +_liquid_firdes_rkaiser_internal_isi($_k, $_m, $_beta, $_dt, $x1$09, $_h);
  $14 = +_liquid_firdes_rkaiser_internal_isi($_k, $_m, $_beta, $_dt, $x2$0, $_h);
  $or$cond2 = ($p$08 | 0) == 0 | $13 < $y_opt$07;
  $y_opt$07 = $or$cond2 ? $13 : $y_opt$07;
  $rho_opt$1 = $or$cond2 ? $x1$09 : $rho_opt$011;
  $17 = $x1$09 * $x1$09;
  $18 = $x2$0 * $x2$0;
  $21 = $x0$0 * $x0$0;
  $x1$09$looptemp = $x1$09;
  $x1$09 = (($17 - $18) * $12 + ($18 - $21) * $13 + ($21 - $17) * $14) * .5 / (($x1$09 - $x2$0) * $12 + ($x2$0 - $x0$0) * $13 + ($x0$0 - $x1$09) * $14);
  if ($x1$09 < $x0$0 | $x1$09 > $x2$0) {
   $rho_opt$1$lcssa = $rho_opt$1;
   break;
  }
  if ($p$08 >>> 0 > 3) if (+Math_abs(+($x1$09 - $x1$09$looptemp)) < 9.999999974752427e-07) {
   $rho_opt$1$lcssa = $rho_opt$1;
   break;
  }
  $p$08 = $p$08 + 1 | 0;
  if ($p$08 >>> 0 >= 14) {
   $rho_opt$1$lcssa = $rho_opt$1;
   break;
  } else {
   $dx$010 = $dx$010 * .5;
   $rho_opt$011 = $rho_opt$1;
  }
 }
 +_liquid_firdes_rkaiser_internal_isi($_k, $_m, $_beta, $_dt, $rho_opt$1$lcssa, $_h);
 $52 = (Math_imul($_m, $_k) | 0) << 1 | 1;
 $e2$06 = 0.0;
 $i$05 = 0;
 while (1) {
  $57 = +HEAPF32[$_h + ($i$05 << 2) >> 2];
  $59 = $e2$06 + $57 * $57;
  $i$05 = $i$05 + 1 | 0;
  if (($i$05 | 0) == ($52 | 0)) {
   $$lcssa = $59;
   break;
  } else $e2$06 = $59;
 }
 $55 = +Math_sqrt(+(+($_k >>> 0) / $$lcssa));
 $i$14 = 0;
 do {
  $61 = $_h + ($i$14 << 2) | 0;
  HEAPF32[$61 >> 2] = $55 * +HEAPF32[$61 >> 2];
  $i$14 = $i$14 + 1 | 0;
 } while (($i$14 | 0) != ($52 | 0));
 HEAPF32[$_rho >> 2] = $rho_opt$1$lcssa;
 return;
}

function _flexframesync_execute($_q, $_x, $_n) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 $_n = $_n | 0;
 var $$byval_copy4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $19 = 0, $2 = 0, $23 = 0, $28 = 0, $3 = 0, $32 = 0, $36 = 0, $4 = 0, $40 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy4 = sp + 40 | 0;
 $0 = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp;
 if (!$_n) {
  STACKTOP = sp;
  return;
 }
 $6 = $_q + 204 | 0;
 $7 = $_q + 200 | 0;
 $8 = $1 + 4 | 0;
 $9 = $2 + 4 | 0;
 $10 = $3 + 4 | 0;
 $11 = $4 + 4 | 0;
 $12 = $_q + 212 | 0;
 $13 = $_q + 216 | 0;
 $14 = $0 + 4 | 0;
 $i$01 = 0;
 L4 : while (1) {
  if (HEAP32[$6 >> 2] | 0) if (!(HEAP32[$12 >> 2] | 0)) {
   $19 = HEAP32[$13 >> 2] | 0;
   $23 = HEAP32[$_x + ($i$01 << 3) + 4 >> 2] | 0;
   HEAP32[$0 >> 2] = HEAP32[$_x + ($i$01 << 3) >> 2];
   HEAP32[$14 >> 2] = $23;
   HEAP32[$$byval_copy4 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
   _windowcf_push($19, $$byval_copy4);
  }
  switch (HEAP32[$7 >> 2] | 0) {
  case 0:
   {
    $28 = HEAP32[$_x + ($i$01 << 3) + 4 >> 2] | 0;
    HEAP32[$1 >> 2] = HEAP32[$_x + ($i$01 << 3) >> 2];
    HEAP32[$8 >> 2] = $28;
    HEAP32[$$byval_copy4 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
    _flexframesync_execute_seekpn($_q, $$byval_copy4);
    break;
   }
  case 1:
   {
    $32 = HEAP32[$_x + ($i$01 << 3) + 4 >> 2] | 0;
    HEAP32[$2 >> 2] = HEAP32[$_x + ($i$01 << 3) >> 2];
    HEAP32[$9 >> 2] = $32;
    HEAP32[$$byval_copy4 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
    _flexframesync_execute_rxpreamble($_q, $$byval_copy4);
    break;
   }
  case 2:
   {
    $36 = HEAP32[$_x + ($i$01 << 3) + 4 >> 2] | 0;
    HEAP32[$3 >> 2] = HEAP32[$_x + ($i$01 << 3) >> 2];
    HEAP32[$10 >> 2] = $36;
    HEAP32[$$byval_copy4 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
    _flexframesync_execute_rxheader($_q, $$byval_copy4);
    break;
   }
  case 3:
   {
    $40 = HEAP32[$_x + ($i$01 << 3) + 4 >> 2] | 0;
    HEAP32[$4 >> 2] = HEAP32[$_x + ($i$01 << 3) >> 2];
    HEAP32[$11 >> 2] = $40;
    HEAP32[$$byval_copy4 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
    _flexframesync_execute_rxpayload($_q, $$byval_copy4);
    break;
   }
  default:
   {
    label = 11;
    break L4;
   }
  }
  $i$01 = $i$01 + 1 | 0;
  if ($i$01 >>> 0 >= $_n >>> 0) {
   label = 13;
   break;
  }
 }
 if ((label | 0) == 11) {
  _fwrite(gb + 26447 | 0, 58, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 } else if ((label | 0) == 13) {
  STACKTOP = sp;
  return;
 }
}

function _lex_scan($lex, $error) {
 $lex = $lex | 0;
 $error = $error | 0;
 var $0 = 0, $1 = 0, $26 = 0, $41 = 0, $93 = 0, $95 = 0, $c = 0, $saved_text = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 12 | 0;
 $1 = sp + 8 | 0;
 $c = sp + 4 | 0;
 $saved_text = sp;
 HEAP32[$0 >> 2] = $lex;
 HEAP32[$1 >> 2] = $error;
 _strbuffer_clear((HEAP32[$0 >> 2] | 0) + 40 | 0);
 if ((HEAP32[(HEAP32[$0 >> 2] | 0) + 56 >> 2] | 0) == 256) _lex_free_string(HEAP32[$0 >> 2] | 0);
 do HEAP32[$c >> 2] = _lex_get(HEAP32[$0 >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0; while ((HEAP32[$c >> 2] | 0) == 32 | (HEAP32[$c >> 2] | 0) == 9 | (HEAP32[$c >> 2] | 0) == 10 | (HEAP32[$c >> 2] | 0) == 13);
 do if ((HEAP32[$c >> 2] | 0) == -1) HEAP32[(HEAP32[$0 >> 2] | 0) + 56 >> 2] = 0; else {
  $26 = HEAP32[$0 >> 2] | 0;
  if ((HEAP32[$c >> 2] | 0) == -2) {
   HEAP32[$26 + 56 >> 2] = -1;
   break;
  }
  _lex_save($26, HEAP32[$c >> 2] | 0);
  $41 = HEAP32[$c >> 2] | 0;
  if ((HEAP32[$c >> 2] | 0) == 123 | (HEAP32[$c >> 2] | 0) == 125 | (HEAP32[$c >> 2] | 0) == 91 | (HEAP32[$c >> 2] | 0) == 93 | (HEAP32[$c >> 2] | 0) == 58 | (HEAP32[$c >> 2] | 0) == 44) {
   HEAP32[(HEAP32[$0 >> 2] | 0) + 56 >> 2] = $41;
   break;
  }
  if (($41 | 0) == 34) {
   _lex_scan_string(HEAP32[$0 >> 2] | 0, HEAP32[$1 >> 2] | 0);
   break;
  }
  if (48 <= (HEAP32[$c >> 2] | 0) & (HEAP32[$c >> 2] | 0) <= 57 | (HEAP32[$c >> 2] | 0) == 45) {
   _lex_scan_number(HEAP32[$0 >> 2] | 0, HEAP32[$c >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0;
   break;
  }
  if (!(65 <= (HEAP32[$c >> 2] | 0) & (HEAP32[$c >> 2] | 0) <= 90)) if (!(97 <= (HEAP32[$c >> 2] | 0) & (HEAP32[$c >> 2] | 0) <= 122)) {
   _lex_save_cached(HEAP32[$0 >> 2] | 0);
   HEAP32[(HEAP32[$0 >> 2] | 0) + 56 >> 2] = -1;
   break;
  }
  while (1) {
   HEAP32[$c >> 2] = _lex_get_save(HEAP32[$0 >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0;
   if (65 <= (HEAP32[$c >> 2] | 0) & (HEAP32[$c >> 2] | 0) <= 90) continue;
   if (!(97 <= (HEAP32[$c >> 2] | 0) ? (HEAP32[$c >> 2] | 0) <= 122 : 0)) break;
  }
  _lex_unget_unsave(HEAP32[$0 >> 2] | 0, HEAP32[$c >> 2] | 0);
  HEAP32[$saved_text >> 2] = _strbuffer_value((HEAP32[$0 >> 2] | 0) + 40 | 0) | 0;
  if (!(_strcmp(HEAP32[$saved_text >> 2] | 0, gb + 41835 | 0) | 0)) {
   HEAP32[(HEAP32[$0 >> 2] | 0) + 56 >> 2] = 259;
   break;
  }
  if (!(_strcmp(HEAP32[$saved_text >> 2] | 0, gb + 41840 | 0) | 0)) {
   HEAP32[(HEAP32[$0 >> 2] | 0) + 56 >> 2] = 260;
   break;
  }
  $93 = (_strcmp(HEAP32[$saved_text >> 2] | 0, gb + 41846 | 0) | 0) == 0;
  $95 = (HEAP32[$0 >> 2] | 0) + 56 | 0;
  if ($93) {
   HEAP32[$95 >> 2] = 261;
   break;
  } else {
   HEAP32[$95 >> 2] = -1;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return HEAP32[(HEAP32[$0 >> 2] | 0) + 56 >> 2] | 0;
}

function _bilinear_zpkf($_za, $_nza, $_pa, $_npa, $_ka, $_m, $_zd, $_pd, $_kd) {
 $_za = $_za | 0;
 $_nza = $_nza | 0;
 $_pa = $_pa | 0;
 $_npa = $_npa | 0;
 $_ka = $_ka | 0;
 $_m = +$_m;
 $_zd = $_zd | 0;
 $_pd = $_pd | 0;
 $_kd = $_kd | 0;
 var $$sink = 0.0, $$sink6 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $28 = 0, $29 = 0, $3 = 0, $36 = 0.0, $37 = 0.0, $4 = 0.0, $43 = 0.0, $44 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $65 = 0.0, $66 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $76 = 0, $8 = 0, $9 = 0, $G$sroa$0$0$lcssa = 0.0, $G$sroa$0$01 = 0.0, $G$sroa$6$0$lcssa = 0.0, $G$sroa$6$02 = 0.0, $i$03 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 48 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 16 | 0;
 $3 = sp;
 $4 = +HEAPF32[$_ka >> 2];
 $6 = +HEAPF32[$_ka + 4 >> 2];
 if (!$_npa) {
  $G$sroa$0$0$lcssa = $4;
  $G$sroa$6$0$lcssa = $6;
  $76 = $_kd + 4 | 0;
  HEAPF32[$_kd >> 2] = $G$sroa$0$0$lcssa;
  HEAPF32[$76 >> 2] = $G$sroa$6$0$lcssa;
  STACKTOP = sp;
  return;
 }
 $8 = $0 + 8 | 0;
 $9 = $1 + 8 | 0;
 $10 = $2 + 8 | 0;
 $11 = $3 + 8 | 0;
 $G$sroa$0$01 = $4;
 $G$sroa$6$02 = $6;
 $i$03 = 0;
 while (1) {
  if ($i$03 >>> 0 < $_nza >>> 0) {
   $19 = +HEAPF32[$_za + ($i$03 << 3) >> 2] * $_m;
   $20 = +HEAPF32[$_za + ($i$03 << 3) + 4 >> 2] * $_m;
   ___divdc3($0, $19 + 1.0, $20, 1.0 - $19, -$20);
   $$sink = +HEAPF64[$8 >> 3];
   $$sink6 = +HEAPF64[$0 >> 3];
  } else {
   $$sink = 0.0;
   $$sink6 = -1.0;
  }
  $28 = $_zd + ($i$03 << 3) | 0;
  HEAPF32[$28 >> 2] = $$sink6;
  $29 = $_zd + ($i$03 << 3) + 4 | 0;
  HEAPF32[$29 >> 2] = $$sink;
  $36 = +HEAPF32[$_pa + ($i$03 << 3) >> 2] * $_m;
  $37 = +HEAPF32[$_pa + ($i$03 << 3) + 4 >> 2] * $_m;
  ___divdc3($1, $36 + 1.0, $37, 1.0 - $36, -$37);
  $43 = +HEAPF64[$1 >> 3];
  $44 = +HEAPF64[$9 >> 3];
  HEAPF32[$_pd + ($i$03 << 3) >> 2] = $43;
  HEAPF32[$_pd + ($i$03 << 3) + 4 >> 2] = $44;
  ___divdc3($2, 1.0 - $43, -$44, 1.0 - +HEAPF32[$28 >> 2], -+HEAPF32[$29 >> 2]);
  $57 = +HEAPF64[$2 >> 3];
  $58 = +HEAPF64[$10 >> 3];
  $59 = $G$sroa$0$01;
  $60 = $G$sroa$6$02;
  $65 = $59 * $57 - $60 * $58;
  $66 = $60 * $57 + $59 * $58;
  if (($65 != $65 | 0.0 != 0.0) & ($66 != $66 | 0.0 != 0.0)) {
   ___muldc3($3, $59, $60, $57, $58);
   $72 = +HEAPF64[$3 >> 3];
   $74 = +HEAPF64[$11 >> 3];
  } else {
   $72 = $65;
   $74 = $66;
  }
  $71 = $72;
  $73 = $74;
  $i$03 = $i$03 + 1 | 0;
  if (($i$03 | 0) == ($_npa | 0)) {
   $G$sroa$0$0$lcssa = $71;
   $G$sroa$6$0$lcssa = $73;
   break;
  } else {
   $G$sroa$0$01 = $71;
   $G$sroa$6$02 = $73;
  }
 }
 $76 = $_kd + 4 | 0;
 HEAPF32[$_kd >> 2] = $G$sroa$0$0$lcssa;
 HEAPF32[$76 >> 2] = $G$sroa$6$0$lcssa;
 STACKTOP = sp;
 return;
}

function _expm1f($x) {
 $x = +$x;
 var $$0 = 0.0, $$02 = 0.0, $$pn = 0.0, $0 = 0, $1 = 0, $17 = 0, $18 = 0.0, $2 = 0, $22 = 0.0, $26 = 0.0, $27 = 0.0, $31 = 0.0, $33 = 0.0, $38 = 0.0, $46 = 0.0, $59 = 0.0, $62 = 0.0, $69 = 0, $c$0 = 0.0, $fabs = 0.0, $hi$0 = 0.0, $k$0 = 0, $k$1 = 0, $lo$0 = 0.0, label = 0;
 $0 = (HEAPF32[tempDoublePtr >> 2] = $x, HEAP32[tempDoublePtr >> 2] | 0);
 $fabs = +Math_abs(+$x);
 $1 = (HEAPF32[tempDoublePtr >> 2] = $fabs, HEAP32[tempDoublePtr >> 2] | 0);
 $2 = $0 >>> 31;
 do if ($1 >>> 0 > 1100331075) if ($1 >>> 0 > 2139095040) $$0 = $x; else if (!$2) if ($x > 88.7216796875) $$0 = $x * 1701411834604692317316873.0e14; else label = 11; else $$0 = -1.0; else {
  if ($1 >>> 0 <= 1051816472) if ($1 >>> 0 < 855638016) {
   $$0 = $x;
   break;
  } else {
   $$02 = $x;
   $c$0 = 0.0;
   $k$1 = 0;
   label = 14;
   break;
  }
  if ($1 >>> 0 < 1065686418) if (!$2) {
   $hi$0 = $x + -.6931381225585938;
   $k$0 = 1;
   $lo$0 = 9.05800061445916e-06;
   label = 12;
   break;
  } else {
   $hi$0 = $x + .6931381225585938;
   $k$0 = -1;
   $lo$0 = -9.05800061445916e-06;
   label = 12;
   break;
  } else label = 11;
 } while (0);
 if ((label | 0) == 11) {
  $17 = ~~($x * 1.4426950216293335 + ($2 | 0 ? -.5 : .5));
  $18 = +($17 | 0);
  $hi$0 = $x - $18 * .6931381225585938;
  $k$0 = $17;
  $lo$0 = $18 * 9.05800061445916e-06;
  label = 12;
 }
 if ((label | 0) == 12) {
  $22 = $hi$0 - $lo$0;
  $$02 = $22;
  $c$0 = $hi$0 - $22 - $lo$0;
  $k$1 = $k$0;
  label = 14;
 }
 L18 : do if ((label | 0) == 14) {
  $26 = $$02 * .5;
  $27 = $$02 * $26;
  $31 = $27 * ($27 * 1.5807170420885086e-03 + -.03333321213722229) + 1.0;
  $33 = 3.0 - $26 * $31;
  $38 = $27 * (($31 - $33) / (6.0 - $$02 * $33));
  if (!$k$1) {
   $$0 = $$02 - ($$02 * $38 - $27);
   break;
  }
  $46 = $$02 * ($38 - $c$0) - $c$0 - $27;
  switch ($k$1 | 0) {
  case -1:
   {
    $$0 = ($$02 - $46) * .5 + -.5;
    break L18;
    break;
   }
  case 1:
   {
    if ($$02 < -.25) {
     $$0 = ($46 - ($$02 + .5)) * -2.0;
     break L18;
    } else {
     $$0 = ($$02 - $46) * 2.0 + 1.0;
     break L18;
    }
    break;
   }
  default:
   {
    $59 = (HEAP32[tempDoublePtr >> 2] = ($k$1 << 23) + 1065353216, +HEAPF32[tempDoublePtr >> 2]);
    if ($k$1 >>> 0 > 56) {
     $62 = $$02 - $46 + 1.0;
     $$0 = (($k$1 | 0) == 128 ? $62 * 2.0 * 1701411834604692317316873.0e14 : $59 * $62) + -1.0;
     break L18;
    }
    $69 = 127 - $k$1 << 23;
    if (($k$1 | 0) < 23) $$pn = 1.0 - (HEAP32[tempDoublePtr >> 2] = $69, +HEAPF32[tempDoublePtr >> 2]) + ($$02 - $46); else $$pn = $$02 - ((HEAP32[tempDoublePtr >> 2] = $69, +HEAPF32[tempDoublePtr >> 2]) + $46) + 1.0;
    $$0 = $59 * $$pn;
    break L18;
   }
  }
 } while (0);
 return +$$0;
}

function _demodulator_recv($d, $samples, $sample_len, $symbols) {
 $d = $d | 0;
 $samples = $samples | 0;
 $sample_len = $sample_len | 0;
 $symbols = $symbols | 0;
 var $$0 = 0, $$byval_copy = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $26 = 0, $3 = 0, $30 = 0, $32 = 0, $33 = 0, $35 = 0, $38 = 0, $4 = 0, $40 = 0, $43 = 0, $7 = 0, $8 = 0, $i$03 = 0, $j$01 = 0, $written$0$lcssa = 0, $written$02 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 24 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 8 | 0;
 if (!$d) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $3 = $d + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if (($sample_len >>> 0) % ($4 >>> 0) | 0 | 0) {
  _printf(gb + 10284 | 0, sp) | 0;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $7 = _llvm_stacksave() | 0;
 $8 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($4 << 3) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 if (!$sample_len) $written$0$lcssa = 0; else {
  $10 = $d + 24 | 0;
  $11 = $8 + 4 | 0;
  $12 = $1 + 4 | 0;
  $13 = $d + 20 | 0;
  $14 = $0 + 4 | 0;
  $16 = HEAP32[$3 >> 2] | 0;
  $i$03 = 0;
  $written$02 = 0;
  while (1) {
   if (!$16) $$lcssa = 0; else {
    $j$01 = 0;
    do {
     $19 = HEAP32[$13 >> 2] | 0;
     HEAP32[$0 >> 2] = HEAP32[$samples + ($j$01 + $i$03 << 2) >> 2];
     HEAPF32[$14 >> 2] = 0.0;
     HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
     HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$0 + 4 >> 2];
     _nco_crcf_mix_down($19, $$byval_copy, $8 + ($j$01 << 3) | 0);
     _nco_crcf_step(HEAP32[$13 >> 2] | 0);
     $j$01 = $j$01 + 1 | 0;
     $26 = HEAP32[$3 >> 2] | 0;
    } while ($j$01 >>> 0 < $26 >>> 0);
    $$lcssa = $26;
   }
   $17 = HEAP32[$10 >> 2] | 0;
   if (!$17) {
    $40 = HEAP32[$11 >> 2] | 0;
    HEAP32[$symbols + ($i$03 << 3) >> 2] = HEAP32[$8 >> 2];
    HEAP32[$symbols + ($i$03 << 3) + 4 >> 2] = $40;
   } else {
    _firdecim_crcf_execute($17, $8, $symbols + ((($i$03 >>> 0) / ($$lcssa >>> 0) | 0) << 3) | 0);
    $30 = HEAP32[$3 >> 2] | 0;
    $32 = ($i$03 >>> 0) / ($30 >>> 0) | 0;
    $33 = $symbols + ($32 << 3) | 0;
    $35 = $symbols + ($32 << 3) + 4 | 0;
    ___divsc3($1, +HEAPF32[$33 >> 2], +HEAPF32[$35 >> 2], +($30 >>> 0), 0.0);
    $38 = HEAP32[$12 >> 2] | 0;
    HEAP32[$33 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$35 >> 2] = $38;
   }
   $43 = $written$02 + 1 | 0;
   $16 = HEAP32[$3 >> 2] | 0;
   $i$03 = $16 + $i$03 | 0;
   if ($i$03 >>> 0 >= $sample_len >>> 0) {
    $written$0$lcssa = $43;
    break;
   } else $written$02 = $43;
  }
 }
 _llvm_stackrestore($7 | 0);
 $$0 = $written$0$lcssa;
 STACKTOP = sp;
 return $$0 | 0;
}

function _firdespm_execute($_q, $_h) {
 $_q = $_q | 0;
 $_h = $_h | 0;
 var $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $16 = 0, $28 = 0.0, $3 = 0, $34 = 0.0, $4 = 0, $5 = 0, $50 = 0, $52 = 0, $53 = 0, $58 = 0.0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $emax$0$lcssa$i = 0.0, $emax$04$i = 0.0, $emax$1$i = 0.0, $emin$0$lcssa$i = 0.0, $emin$03$i = 0.0, $emin$1$i = 0.0, $i$01$i = 0, $i$02$i = 0, $i$03 = 0, $p$02 = 0, label = 0;
 $0 = $_q + 12 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $$pre = $_q + 20 | 0;
 $$pre4 = $_q + 88 | 0;
 if (($1 | 0) != -1) {
  $3 = HEAP32[$$pre4 >> 2] | 0;
  $16 = $1;
  $i$03 = 0;
  do {
   HEAP32[$3 + ($i$03 << 2) >> 2] = ((Math_imul((HEAP32[$$pre >> 2] | 0) + -1 | 0, $i$03) | 0) >>> 0) / ($16 >>> 0) | 0;
   $i$03 = $i$03 + 1 | 0;
   $16 = HEAP32[$0 >> 2] | 0;
  } while ($i$03 >>> 0 < ($16 + 1 | 0) >>> 0);
 }
 $4 = $_q + 92 | 0;
 $5 = $_q + 60 | 0;
 $6 = $_q + 48 | 0;
 $7 = $_q + 64 | 0;
 $8 = $_q + 72 | 0;
 $9 = $_q + 68 | 0;
 $10 = $_q + 56 | 0;
 $11 = $_q + 52 | 0;
 $p$02 = 0;
 while (1) {
  _firdespm_compute_interp($_q);
  if (HEAP32[$$pre >> 2] | 0) {
   $i$01$i = 0;
   do {
    $28 = +Math_cos(+(+HEAPF64[(HEAP32[$6 >> 2] | 0) + ($i$01$i << 3) >> 3] * 6.283185307179586));
    $34 = +_poly_val_lagrange_barycentric(HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0, HEAP32[$9 >> 2] | 0, $28, (HEAP32[$0 >> 2] | 0) + 1 | 0);
    HEAPF64[(HEAP32[$5 >> 2] | 0) + ($i$01$i << 3) >> 3] = +HEAPF64[(HEAP32[$10 >> 2] | 0) + ($i$01$i << 3) >> 3] * (+HEAPF64[(HEAP32[$11 >> 2] | 0) + ($i$01$i << 3) >> 3] - $34);
    $i$01$i = $i$01$i + 1 | 0;
   } while ($i$01$i >>> 0 < (HEAP32[$$pre >> 2] | 0) >>> 0);
  }
  _firdespm_iext_search($_q);
  if (!(HEAP32[$4 >> 2] | 0)) {
   label = 12;
   break;
  }
  $50 = HEAP32[$0 >> 2] | 0;
  if (($50 | 0) == -1) {
   $emax$0$lcssa$i = 0.0;
   $emin$0$lcssa$i = 0.0;
  } else {
   $52 = HEAP32[$$pre4 >> 2] | 0;
   $53 = HEAP32[$5 >> 2] | 0;
   $emax$04$i = 0.0;
   $emin$03$i = 0.0;
   $i$02$i = 0;
   while (1) {
    $58 = +Math_abs(+(+HEAPF64[$53 + (HEAP32[$52 + ($i$02$i << 2) >> 2] << 3) >> 3]));
    $59 = ($i$02$i | 0) == 0;
    $emin$1$i = $59 | $58 < $emin$03$i ? $58 : $emin$03$i;
    $emax$1$i = $59 | $58 > $emax$04$i ? $58 : $emax$04$i;
    if (($i$02$i | 0) == ($50 | 0)) {
     $emax$0$lcssa$i = $emax$1$i;
     $emin$0$lcssa$i = $emin$1$i;
     break;
    } else {
     $emax$04$i = $emax$1$i;
     $emin$03$i = $emin$1$i;
     $i$02$i = $i$02$i + 1 | 0;
    }
   }
  }
  $p$02 = $p$02 + 1 | 0;
  if (!($p$02 >>> 0 < 40 ? !(($emax$0$lcssa$i - $emin$0$lcssa$i) / $emax$0$lcssa$i < 1.0000000474974513e-03) : 0)) {
   label = 12;
   break;
  }
 }
 if ((label | 0) == 12) {
  _firdespm_compute_taps($_q, $_h);
  return;
 }
}

function _liquid_primitive_root_prime($_n) {
 $_n = $_n | 0;
 var $$lcssa = 0, $0 = 0, $20 = 0, $23 = 0, $25 = 0, $28 = 0, $4 = 0, $c$01$i$us = 0, $g$0$lcssa = 0, $g$012$us = 0, $i$02$i$us = 0, $k$018 = 0, $k$018$lcssa = 0, $k$19$us = 0, $n$0 = 0, $n$1 = 0, $num_unique_factors$0 = 0, $num_unique_factors$1 = 0, $num_unique_factors$124 = 0, $unique_factors = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $unique_factors = sp;
 $0 = $_n + -1 | 0;
 $n$0 = $0;
 $num_unique_factors$0 = 0;
 while (1) {
  if ($n$0 >>> 0 < 2) {
   $num_unique_factors$124 = $num_unique_factors$0;
   break;
  } else $k$018 = 2;
  while (1) {
   if (!(($n$0 >>> 0) % ($k$018 >>> 0) | 0)) {
    $k$018$lcssa = $k$018;
    label = 4;
    break;
   }
   $k$018 = $k$018 + 1 | 0;
   if ($k$018 >>> 0 > $n$0 >>> 0) {
    $n$1 = $n$0;
    $num_unique_factors$1 = $num_unique_factors$0;
    break;
   }
  }
  if ((label | 0) == 4) {
   label = 0;
   $4 = ($n$0 >>> 0) / ($k$018$lcssa >>> 0) | 0;
   HEAP32[$unique_factors + ($num_unique_factors$0 << 2) >> 2] = $k$018$lcssa;
   if (!$num_unique_factors$0) {
    $n$1 = $4;
    $num_unique_factors$1 = 1;
   } else {
    $n$1 = $4;
    $num_unique_factors$1 = ((HEAP32[$unique_factors + ($num_unique_factors$0 + -1 << 2) >> 2] | 0) != ($k$018$lcssa | 0) & 1) + $num_unique_factors$0 | 0;
   }
  }
  if ($n$1 >>> 0 > 1 & $num_unique_factors$1 >>> 0 < 40) {
   $n$0 = $n$1;
   $num_unique_factors$0 = $num_unique_factors$1;
  } else {
   $num_unique_factors$124 = $num_unique_factors$1;
   break;
  }
 }
 if ($_n >>> 0 < 3 | ($num_unique_factors$124 | 0) == 0) {
  $g$0$lcssa = 2;
  STACKTOP = sp;
  return $g$0$lcssa | 0;
 } else $g$012$us = 2;
 while (1) {
  $k$19$us = 0;
  while (1) {
   $20 = ($0 >>> 0) / ((HEAP32[$unique_factors + ($k$19$us << 2) >> 2] | 0) >>> 0) | 0;
   if (!$20) break; else {
    $c$01$i$us = 1;
    $i$02$i$us = 0;
   }
   while (1) {
    $23 = ((Math_imul($c$01$i$us, $g$012$us) | 0) >>> 0) % ($_n >>> 0) | 0;
    $i$02$i$us = $i$02$i$us + 1 | 0;
    if (($i$02$i$us | 0) == ($20 | 0)) {
     $$lcssa = $23;
     break;
    } else $c$01$i$us = $23;
   }
   $25 = ($$lcssa | 0) == 1;
   $k$19$us = $k$19$us + 1 | 0;
   if (!($k$19$us >>> 0 < $num_unique_factors$124 >>> 0 & ($25 ^ 1))) {
    label = 12;
    break;
   }
  }
  if ((label | 0) == 12) {
   label = 0;
   if (!$25) {
    $g$0$lcssa = $g$012$us;
    label = 15;
    break;
   }
  }
  $28 = $g$012$us + 1 | 0;
  if ($28 >>> 0 < $_n >>> 0) $g$012$us = $28; else {
   $g$0$lcssa = $28;
   label = 15;
   break;
  }
 }
 if ((label | 0) == 15) {
  STACKTOP = sp;
  return $g$0$lcssa | 0;
 }
 return 0;
}

function _ofdmframesync_execute_rxsymbols($_q) {
 $_q = $_q | 0;
 var $$byval_copy = 0, $$sink = 0.0, $0 = 0, $1 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $33 = 0, $34 = 0, $38 = 0, $41 = 0, $43 = 0, $58 = 0, $59 = 0, $60 = 0, $64 = 0.0, $69 = 0.0, $74 = 0, $9 = 0, $i$01 = 0, $rc = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 16 | 0;
 $rc = sp + 8 | 0;
 $0 = sp;
 $1 = $_q + 124 | 0;
 $3 = (HEAP32[$1 >> 2] | 0) + -1 | 0;
 HEAP32[$1 >> 2] = $3;
 if ($3 | 0) {
  STACKTOP = sp;
  return;
 }
 _windowcf_read(HEAP32[$_q + 60 >> 2] | 0, $rc);
 $9 = $_q + 8 | 0;
 _memmove(HEAP32[$_q + 56 >> 2] | 0, (HEAP32[$rc >> 2] | 0) + ((HEAP32[$9 >> 2] | 0) - (HEAP32[$_q + 132 >> 2] | 0) << 3) | 0, HEAP32[$_q >> 2] << 3 | 0) | 0;
 _fft_execute(HEAP32[$_q + 48 >> 2] | 0);
 _ofdmframesync_rxsymbol($_q);
 if (HEAP32[$_q + 168 >> 2] | 0) {
  $23 = HEAP32[$_q >> 2] | 0;
  if ($23 | 0) {
   $25 = $_q + 12 | 0;
   $26 = $_q + 184 | 0;
   $27 = $_q + 52 | 0;
   $28 = $0 + 4 | 0;
   $74 = $23;
   $i$01 = 0;
   while (1) {
    if ((HEAP8[(HEAP32[$25 >> 2] | 0) + $i$01 >> 0] | 0) == 2) {
     $33 = HEAP32[$26 >> 2] | 0;
     $34 = HEAP32[$27 >> 2] | 0;
     $38 = HEAP32[$34 + ($i$01 << 3) + 4 >> 2] | 0;
     HEAP32[$0 >> 2] = HEAP32[$34 + ($i$01 << 3) >> 2];
     HEAP32[$28 >> 2] = $38;
     HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
     HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$0 + 4 >> 2];
     _windowcf_push($33, $$byval_copy);
     $41 = HEAP32[$_q >> 2] | 0;
    } else $41 = $74;
    $i$01 = $i$01 + 1 | 0;
    if ($i$01 >>> 0 >= $41 >>> 0) break; else $74 = $41;
   }
  }
 }
 $43 = HEAP32[$_q + 160 >> 2] | 0;
 if ($43 | 0) if (mftCall_iiiii($43 | 0, HEAP32[$_q + 52 >> 2] | 0, HEAP32[$_q + 12 >> 2] | 0, HEAP32[$_q >> 2] | 0, HEAP32[$_q + 164 >> 2] | 0) | 0) {
  _nco_crcf_reset(HEAP32[$_q + 108 >> 2] | 0);
  _msequence_reset(HEAP32[$_q + 112 >> 2] | 0);
  $58 = $_q + 136 | 0;
  $59 = $_q + 116 | 0;
  HEAP32[$59 >> 2] = 0;
  HEAP32[$59 + 4 >> 2] = 0;
  HEAP32[$59 + 8 >> 2] = 0;
  HEAP32[$59 + 12 >> 2] = 0;
  HEAP32[$58 >> 2] = 0;
  HEAP32[$58 + 4 >> 2] = 0;
  HEAP32[$58 + 8 >> 2] = 0;
  HEAP32[$58 + 12 >> 2] = 0;
  $60 = HEAP32[$_q >> 2] | 0;
  if ($60 >>> 0 > 44) {
   $$sink = .3499999940395355;
   $69 = .30000001192092896;
  } else {
   $64 = +((44 - $60 | 0) >>> 0) * .009999999776482582;
   $$sink = $64 + .3499999940395355;
   $69 = $64 + .30000001192092896;
  }
  HEAPF32[$_q + 152 >> 2] = $$sink;
  HEAPF32[$_q + 156 >> 2] = $69;
  HEAP32[$_q + 104 >> 2] = 0;
 }
 HEAP32[$1 >> 2] = (HEAP32[$9 >> 2] | 0) + (HEAP32[$_q >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _cheby1_azpkf($_n, $_ep, $_za, $_pa, $_ka) {
 $_n = $_n | 0;
 $_ep = +$_ep;
 $_za = $_za | 0;
 $_pa = $_pa | 0;
 $_ka = $_ka | 0;
 var $0 = 0, $1 = 0.0, $13 = 0.0, $14 = 0.0, $17 = 0.0, $19 = 0.0, $21 = 0.0, $22 = 0, $25 = 0, $28 = 0.0, $29 = 0.0, $30 = 0, $38 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $46 = 0, $54 = 0, $63 = 0, $64 = 0.0, $66 = 0, $68 = 0.0, $7 = 0.0, $70 = 0.0, $72 = 0.0, $74 = 0.0, $77 = 0.0, $78 = 0.0, $83 = 0.0, $84 = 0.0, $9 = 0.0, $i$03 = 0, $i$11 = 0, $k$0$lcssa = 0, $k$02 = 0, $k$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 $1 = $_ep * $_ep;
 $7 = +Math_sqrt(+(1.0 / $1 + 1.0));
 $9 = 1.0 / $_ep;
 $13 = 1.0 / +($_n >>> 0);
 $14 = +Math_pow(+($9 + $7), +$13);
 $17 = +Math_pow(+($7 - $9), +$13);
 $19 = ($14 + $17) * .5;
 $21 = ($14 - $17) * .5;
 $22 = $_n & 1;
 if (($_n - $22 | 0) >>> 0 < 2) $k$0$lcssa = 0; else {
  $25 = $_n + -1 | 0;
  $28 = +($_n << 1 >>> 0);
  $29 = $19 * 0.0;
  $30 = $_n >>> 1;
  $i$03 = 0;
  $k$02 = 0;
  while (1) {
   $i$03 = $i$03 + 1 | 0;
   $38 = +(($25 + ($i$03 << 1) | 0) >>> 0) * 3.141592653589793 / $28;
   $40 = $21 * +Math_cos(+$38);
   $41 = +Math_sin(+$38);
   $42 = $29 * $41;
   $43 = $19 * $41;
   $46 = $k$02 | 1;
   HEAPF32[$_pa + ($k$02 << 3) >> 2] = $40 - $42;
   HEAPF32[$_pa + ($k$02 << 3) + 4 >> 2] = -$43;
   HEAPF32[$_pa + ($46 << 3) >> 2] = $40 + $42;
   HEAPF32[$_pa + ($46 << 3) + 4 >> 2] = $43;
   if (($i$03 | 0) == ($30 | 0)) break; else $k$02 = $k$02 + 2 | 0;
  }
  $k$0$lcssa = $30 << 1;
 }
 $54 = ($22 | 0) != 0;
 if ($54) {
  HEAPF32[$_pa + ($k$0$lcssa << 3) >> 2] = -$21;
  HEAPF32[$_pa + ($k$0$lcssa << 3) + 4 >> 2] = 0.0;
  $k$1 = $k$0$lcssa | 1;
 } else $k$1 = $k$0$lcssa;
 if (($k$1 | 0) != ($_n | 0)) ___assert_fail(gb + 40901 | 0, gb + 40864 | 0, 85, gb + 40888 | 0);
 if ($54) $64 = 1.0; else $64 = 1.0 / +Math_sqrt(+($1 + 1.0));
 $63 = $_ka + 4 | 0;
 HEAPF32[$_ka >> 2] = $64;
 HEAPF32[$63 >> 2] = 0.0;
 if (!$_n) {
  STACKTOP = sp;
  return;
 }
 $66 = $0 + 4 | 0;
 $72 = $64;
 $74 = 0.0;
 $i$11 = 0;
 while (1) {
  $68 = +HEAPF32[$_pa + ($i$11 << 3) >> 2];
  $70 = +HEAPF32[$_pa + ($i$11 << 3) + 4 >> 2];
  $77 = $68 * $72 - $70 * $74;
  $78 = $70 * $72 + $68 * $74;
  if (($77 != $77 | 0.0 != 0.0) & ($78 != $78 | 0.0 != 0.0)) {
   ___mulsc3($0, $72, $74, $68, $70);
   $83 = +HEAPF32[$0 >> 2];
   $84 = +HEAPF32[$66 >> 2];
  } else {
   $83 = $77;
   $84 = $78;
  }
  HEAPF32[$_ka >> 2] = $83;
  HEAPF32[$63 >> 2] = $84;
  $i$11 = $i$11 + 1 | 0;
  if (($i$11 | 0) == ($_n | 0)) break; else {
   $72 = $83;
   $74 = $84;
  }
 }
 STACKTOP = sp;
 return;
}

function _hashtable_set($hashtable, $key, $serial, $value) {
 $hashtable = $hashtable | 0;
 $key = $key | 0;
 $serial = $serial | 0;
 $value = $value | 0;
 var $0 = 0, $1 = 0, $15 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $73 = 0, $76 = 0, $bucket = 0, $hash = 0, $index = 0, $len = 0, $pair = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 36 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 28 | 0;
 $3 = sp + 24 | 0;
 $4 = sp + 20 | 0;
 $pair = sp + 16 | 0;
 $bucket = sp + 12 | 0;
 $hash = sp + 8 | 0;
 $index = sp + 4 | 0;
 $len = sp;
 HEAP32[$1 >> 2] = $hashtable;
 HEAP32[$2 >> 2] = $key;
 HEAP32[$3 >> 2] = $serial;
 HEAP32[$4 >> 2] = $value;
 if ((HEAP32[HEAP32[$1 >> 2] >> 2] | 0) >>> 0 >= 1 << HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] >>> 0) if (_hashtable_do_rehash(HEAP32[$1 >> 2] | 0) | 0) {
  HEAP32[$0 >> 2] = -1;
  $76 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $76 | 0;
 }
 $15 = HEAP32[$2 >> 2] | 0;
 $17 = _strlen(HEAP32[$2 >> 2] | 0) | 0;
 HEAP32[$hash >> 2] = _hashlittle($15, $17, HEAP32[gb + 45028 >> 2] | 0) | 0;
 HEAP32[$index >> 2] = HEAP32[$hash >> 2] & (1 << HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2]) - 1;
 HEAP32[$bucket >> 2] = (HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[$index >> 2] << 3);
 HEAP32[$pair >> 2] = _hashtable_find_pair(HEAP32[$1 >> 2] | 0, HEAP32[$bucket >> 2] | 0, HEAP32[$2 >> 2] | 0, HEAP32[$hash >> 2] | 0) | 0;
 do if (HEAP32[$pair >> 2] | 0) {
  _json_decref_1974(HEAP32[(HEAP32[$pair >> 2] | 0) + 12 >> 2] | 0);
  HEAP32[(HEAP32[$pair >> 2] | 0) + 12 >> 2] = HEAP32[$4 >> 2];
 } else {
  HEAP32[$len >> 2] = _strlen(HEAP32[$2 >> 2] | 0) | 0;
  if ((HEAP32[$len >> 2] | 0) >>> 0 >= 4294967275) {
   HEAP32[$0 >> 2] = -1;
   $76 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $76 | 0;
  }
  HEAP32[$pair >> 2] = _jsonp_malloc(20 + (HEAP32[$len >> 2] | 0) + 1 | 0) | 0;
  if (HEAP32[$pair >> 2] | 0) {
   HEAP32[(HEAP32[$pair >> 2] | 0) + 8 >> 2] = HEAP32[$hash >> 2];
   HEAP32[(HEAP32[$pair >> 2] | 0) + 16 >> 2] = HEAP32[$3 >> 2];
   _strncpy((HEAP32[$pair >> 2] | 0) + 20 | 0, HEAP32[$2 >> 2] | 0, (HEAP32[$len >> 2] | 0) + 1 | 0) | 0;
   HEAP32[(HEAP32[$pair >> 2] | 0) + 12 >> 2] = HEAP32[$4 >> 2];
   _list_init(HEAP32[$pair >> 2] | 0);
   _insert_to_bucket(HEAP32[$1 >> 2] | 0, HEAP32[$bucket >> 2] | 0, HEAP32[$pair >> 2] | 0);
   $73 = HEAP32[$1 >> 2] | 0;
   HEAP32[$73 >> 2] = (HEAP32[$73 >> 2] | 0) + 1;
   break;
  }
  HEAP32[$0 >> 2] = -1;
  $76 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $76 | 0;
 } while (0);
 HEAP32[$0 >> 2] = 0;
 $76 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $76 | 0;
}

function _flexframesync_create($_callback, $_userdata) {
 $_callback = $_callback | 0;
 $_userdata = $_userdata | 0;
 var $0 = 0, $10 = 0, $13 = 0, $18 = 0, $2 = 0, $25 = 0, $3 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $43 = 0, $44 = 0, $45 = 0, $48 = 0, $5 = 0, $57 = 0, $8 = 0, $i$01 = 0;
 $0 = _malloc(220) | 0;
 HEAP32[$0 >> 2] = $_callback;
 HEAP32[$0 + 4 >> 2] = $_userdata;
 $2 = $0 + 64 | 0;
 HEAP32[$2 >> 2] = 7;
 $3 = $0 + 68 | 0;
 HEAPF32[$3 >> 2] = .30000001192092896;
 $5 = $0 + 116 | 0;
 HEAP32[$5 >> 2] = _malloc(512) | 0;
 HEAP32[$0 + 120 >> 2] = _malloc(512) | 0;
 $8 = _msequence_create(7, 137, 1) | 0;
 $i$01 = 0;
 do {
  $10 = (_msequence_advance($8) | 0) != 0;
  $13 = (_msequence_advance($8) | 0) != 0;
  $18 = HEAP32[$5 >> 2] | 0;
  HEAPF32[$18 + ($i$01 << 3) >> 2] = ($10 ? .7071067811865476 : -.7071067811865476) + ($13 ? 0.0 : -0.0);
  HEAPF32[$18 + ($i$01 << 3) + 4 >> 2] = $13 ? .7071067690849304 : -.7071067690849304;
  $i$01 = $i$01 + 1 | 0;
 } while (($i$01 | 0) != 64);
 _msequence_destroy($8);
 $25 = _qdetector_cccf_create_linear(HEAP32[$5 >> 2] | 0, 64, 7, 2, HEAP32[$2 >> 2] | 0, +HEAPF32[$3 >> 2]) | 0;
 HEAP32[$0 + 72 >> 2] = $25;
 _qdetector_cccf_set_threshold($25, .5);
 HEAP32[$0 + 104 >> 2] = 32;
 $31 = $0 + 100 | 0;
 HEAP32[$31 >> 2] = _firpfb_crcf_create_rnyquist(7, 32, 2, HEAP32[$2 >> 2] | 0, +HEAPF32[$3 >> 2]) | 0;
 $33 = $0 + 92 | 0;
 HEAP32[$33 >> 2] = _nco_crcf_create(0) | 0;
 $34 = _nco_crcf_create(0) | 0;
 $35 = $0 + 96 | 0;
 HEAP32[$35 >> 2] = $34;
 _nco_crcf_pll_set_bandwidth($34, 9.999999747378752e-05);
 HEAP32[$0 + 124 >> 2] = 0;
 HEAP32[$0 + 136 >> 2] = 0;
 HEAP32[$0 + 156 >> 2] = 0;
 HEAP32[$0 + 132 >> 2] = 0;
 HEAP32[$0 + 144 >> 2] = 0;
 _flexframesync_set_header_len($0, 14);
 HEAP32[$0 + 164 >> 2] = _modem_create(48) | 0;
 $43 = $0 + 184 | 0;
 HEAP32[$43 >> 2] = 64;
 $44 = _qpacketmodem_create() | 0;
 $45 = $0 + 176 | 0;
 HEAP32[$45 >> 2] = $44;
 _qpacketmodem_configure($44, HEAP32[$43 >> 2] | 0, 5, 1, 7, 48) | 0;
 $48 = _qpacketmodem_get_frame_len(HEAP32[$45 >> 2] | 0) | 0;
 HEAP32[$0 + 172 >> 2] = $48;
 HEAP32[$0 + 168 >> 2] = _malloc($48 << 3) | 0;
 HEAP32[$0 + 180 >> 2] = _malloc(HEAP32[$43 >> 2] | 0) | 0;
 _framedatastats_reset($0 + 48 | 0);
 $57 = $0 + 204 | 0;
 HEAP32[$57 >> 2] = 0;
 HEAP32[$57 + 4 >> 2] = 0;
 HEAP32[$57 + 8 >> 2] = 0;
 HEAP32[$57 + 12 >> 2] = 0;
 _nco_crcf_reset(HEAP32[$33 >> 2] | 0);
 _nco_crcf_reset(HEAP32[$35 >> 2] | 0);
 _firpfb_crcf_reset(HEAP32[$31 >> 2] | 0);
 HEAP32[$0 + 200 >> 2] = 0;
 HEAP32[$0 + 192 >> 2] = 0;
 HEAP32[$0 + 196 >> 2] = 0;
 HEAPF32[$0 + 8 >> 2] = 0.0;
 return $0 | 0;
}

function _ellipkf($_k, $_n, $_K, $_Kp) {
 $_k = +$_k;
 $_n = $_n | 0;
 $_K = $_K | 0;
 $_Kp = $_Kp | 0;
 var $11 = 0, $12 = 0, $13 = 0, $16 = 0.0, $2 = 0.0, $25 = 0.0, $29 = 0.0, $35 = 0, $36 = 0, $37 = 0, $40 = 0.0, $49 = 0.0, $5 = 0.0, $K$0$lcssa = 0.0, $K$09 = 0.0, $K$1 = 0.0, $Kp$0$lcssa = 0.0, $Kp$06 = 0.0, $Kp$1 = 0.0, $i$02$i = 0, $i$02$i1 = 0, $i$08 = 0, $i2$07 = 0, $k$01$i = 0.0, $k$01$i2 = 0.0, sp = 0;
 sp = STACKTOP;
 $2 = +Math_sqrt(+(1.0 - $_k * $_k));
 if ($_k > .9999998807907104) {
  $5 = +Math_log(+($2 * .25));
  $K$1 = $2 * ($2 * ((-1.0 - $5) * .25)) - $5;
 } else {
  $11 = _llvm_stacksave() | 0;
  $12 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($_n << 2) | 0) + 15 & -16) | 0;
  if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
  $13 = ($_n | 0) == 0;
  if ($13) $K$0$lcssa = 1.5707963705062866; else {
   $i$02$i = 0;
   $k$01$i = $_k;
   do {
    $16 = +Math_sqrt(+(1.0 - $k$01$i * $k$01$i));
    $k$01$i = (1.0 - $16) / ($16 + 1.0);
    HEAPF32[$12 + ($i$02$i << 2) >> 2] = $k$01$i;
    $i$02$i = $i$02$i + 1 | 0;
   } while (($i$02$i | 0) != ($_n | 0));
   if ($13) $K$0$lcssa = 1.5707963705062866; else {
    $K$09 = 1.5707963705062866;
    $i$08 = 0;
    while (1) {
     $25 = $K$09 * (+HEAPF32[$12 + ($i$08 << 2) >> 2] + 1.0);
     $i$08 = $i$08 + 1 | 0;
     if (($i$08 | 0) == ($_n | 0)) {
      $K$0$lcssa = $25;
      break;
     } else $K$09 = $25;
    }
   }
  }
  _llvm_stackrestore($11 | 0);
  $K$1 = $K$0$lcssa;
 }
 if ($_k < 3.9999998989515007e-04) {
  $29 = +Math_log(+($_k * .25));
  $Kp$1 = (-1.0 - $29) * .25 * $_k * $_k - $29;
  HEAPF32[$_K >> 2] = $K$1;
  HEAPF32[$_Kp >> 2] = $Kp$1;
  STACKTOP = sp;
  return;
 }
 $35 = _llvm_stacksave() | 0;
 $36 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($_n << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $37 = ($_n | 0) == 0;
 if ($37) $Kp$0$lcssa = 1.5707963705062866; else {
  $i$02$i1 = 0;
  $k$01$i2 = $2;
  do {
   $40 = +Math_sqrt(+(1.0 - $k$01$i2 * $k$01$i2));
   $k$01$i2 = (1.0 - $40) / ($40 + 1.0);
   HEAPF32[$36 + ($i$02$i1 << 2) >> 2] = $k$01$i2;
   $i$02$i1 = $i$02$i1 + 1 | 0;
  } while (($i$02$i1 | 0) != ($_n | 0));
  if ($37) $Kp$0$lcssa = 1.5707963705062866; else {
   $Kp$06 = 1.5707963705062866;
   $i2$07 = 0;
   while (1) {
    $49 = $Kp$06 * (+HEAPF32[$36 + ($i2$07 << 2) >> 2] + 1.0);
    $i2$07 = $i2$07 + 1 | 0;
    if (($i2$07 | 0) == ($_n | 0)) {
     $Kp$0$lcssa = $49;
     break;
    } else $Kp$06 = $49;
   }
  }
 }
 _llvm_stackrestore($35 | 0);
 $Kp$1 = $Kp$0$lcssa;
 HEAPF32[$_K >> 2] = $K$1;
 HEAPF32[$_Kp >> 2] = $Kp$1;
 STACKTOP = sp;
 return;
}

function _error_set($error, $lex, $msg, $varargs) {
 $error = $error | 0;
 $lex = $lex | 0;
 $msg = $msg | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $1 = 0, $2 = 0, $32 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $ap = 0, $col = 0, $line = 0, $msg_text = 0, $msg_with_context = 0, $pos = 0, $result = 0, $saved_text = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer5 = sp + 16 | 0;
 $vararg_buffer2 = sp + 8 | 0;
 $vararg_buffer = sp;
 $0 = sp + 64 | 0;
 $1 = sp + 60 | 0;
 $2 = sp + 56 | 0;
 $ap = sp + 40 | 0;
 $msg_text = sp + 232 | 0;
 $msg_with_context = sp + 72 | 0;
 $line = sp + 36 | 0;
 $col = sp + 32 | 0;
 $pos = sp + 28 | 0;
 $result = sp + 24 | 0;
 $saved_text = sp + 20 | 0;
 HEAP32[$0 >> 2] = $error;
 HEAP32[$1 >> 2] = $lex;
 HEAP32[$2 >> 2] = $msg;
 HEAP32[$line >> 2] = -1;
 HEAP32[$col >> 2] = -1;
 HEAP32[$pos >> 2] = 0;
 HEAP32[$result >> 2] = $msg_text;
 if (!(HEAP32[$0 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$ap >> 2] = $varargs;
 _vsnprintf($msg_text, 160, HEAP32[$2 >> 2] | 0, $ap) | 0;
 HEAP8[$msg_text + 159 >> 0] = 0;
 do if (HEAP32[$1 >> 2] | 0) {
  HEAP32[$saved_text >> 2] = _strbuffer_value((HEAP32[$1 >> 2] | 0) + 40 | 0) | 0;
  HEAP32[$line >> 2] = HEAP32[(HEAP32[$1 >> 2] | 0) + 24 >> 2];
  HEAP32[$col >> 2] = HEAP32[(HEAP32[$1 >> 2] | 0) + 28 >> 2];
  HEAP32[$pos >> 2] = HEAP32[(HEAP32[$1 >> 2] | 0) + 36 >> 2];
  if (HEAP32[$saved_text >> 2] | 0) if (HEAP8[HEAP32[$saved_text >> 2] >> 0] | 0) {
   if ((HEAP32[(HEAP32[$1 >> 2] | 0) + 40 + 4 >> 2] | 0) >>> 0 > 20) break;
   $32 = HEAP32[$saved_text >> 2] | 0;
   HEAP32[$vararg_buffer >> 2] = $msg_text;
   HEAP32[$vararg_buffer + 4 >> 2] = $32;
   _snprintf($msg_with_context, 160, gb + 41302 | 0, $vararg_buffer) | 0;
   HEAP8[$msg_with_context + 159 >> 0] = 0;
   HEAP32[$result >> 2] = $msg_with_context;
   break;
  }
  if ((HEAP32[(HEAP32[$1 >> 2] | 0) + 20 >> 2] | 0) == -2) {
   HEAP32[$result >> 2] = $msg_text;
   break;
  } else {
   HEAP32[$vararg_buffer2 >> 2] = $msg_text;
   _snprintf($msg_with_context, 160, gb + 41315 | 0, $vararg_buffer2) | 0;
   HEAP8[$msg_with_context + 159 >> 0] = 0;
   HEAP32[$result >> 2] = $msg_with_context;
   break;
  }
 } while (0);
 $39 = HEAP32[$0 >> 2] | 0;
 $40 = HEAP32[$line >> 2] | 0;
 $41 = HEAP32[$col >> 2] | 0;
 $42 = HEAP32[$pos >> 2] | 0;
 HEAP32[$vararg_buffer5 >> 2] = HEAP32[$result >> 2];
 _jsonp_error_set($39, $40, $41, $42, gb + 41335 | 0, $vararg_buffer5);
 STACKTOP = sp;
 return;
}

function ___fdopen($fd, $mode) {
 $fd = $fd | 0;
 $mode = $mode | 0;
 var $$0 = 0, $0 = 0, $13 = 0, $14 = 0, $19 = 0, $24 = 0, $26 = 0, $37 = 0, $4 = 0, $tio = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer12 = sp + 40 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $tio = sp + 52 | 0;
 $0 = HEAP8[$mode >> 0] | 0;
 if (!(_memchr(gb + 44873 | 0, $0 << 24 >> 24, 4) | 0)) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  $$0 = 0;
 } else {
  $4 = _malloc(1144) | 0;
  if (!$4) $$0 = 0; else {
   dest = $4;
   stop = dest + 112 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   if (!(_strchr($mode, 43) | 0)) HEAP32[$4 >> 2] = $0 << 24 >> 24 == 114 ? 8 : 4;
   if (!(_strchr($mode, 101) | 0)) $13 = $0; else {
    HEAP32[$vararg_buffer >> 2] = $fd;
    HEAP32[$vararg_buffer + 4 >> 2] = 2;
    HEAP32[$vararg_buffer + 8 >> 2] = 1;
    ___syscall221(221, $vararg_buffer | 0) | 0;
    $13 = HEAP8[$mode >> 0] | 0;
   }
   if ($13 << 24 >> 24 == 97) {
    HEAP32[$vararg_buffer3 >> 2] = $fd;
    HEAP32[$vararg_buffer3 + 4 >> 2] = 3;
    $14 = ___syscall221(221, $vararg_buffer3 | 0) | 0;
    if (!($14 & 1024)) {
     HEAP32[$vararg_buffer7 >> 2] = $fd;
     HEAP32[$vararg_buffer7 + 4 >> 2] = 4;
     HEAP32[$vararg_buffer7 + 8 >> 2] = $14 | 1024;
     ___syscall221(221, $vararg_buffer7 | 0) | 0;
    }
    $19 = HEAP32[$4 >> 2] | 128;
    HEAP32[$4 >> 2] = $19;
    $26 = $19;
   } else $26 = HEAP32[$4 >> 2] | 0;
   HEAP32[$4 + 60 >> 2] = $fd;
   HEAP32[$4 + 44 >> 2] = $4 + 120;
   HEAP32[$4 + 48 >> 2] = 1024;
   $24 = $4 + 75 | 0;
   HEAP8[$24 >> 0] = -1;
   if (!($26 & 8)) {
    HEAP32[$vararg_buffer12 >> 2] = $fd;
    HEAP32[$vararg_buffer12 + 4 >> 2] = 21505;
    HEAP32[$vararg_buffer12 + 8 >> 2] = $tio;
    if (!(___syscall54(54, $vararg_buffer12 | 0) | 0)) HEAP8[$24 >> 0] = 10;
   }
   HEAP32[$4 + 32 >> 2] = fb + 9;
   HEAP32[$4 + 36 >> 2] = fb + 1;
   HEAP32[$4 + 40 >> 2] = fb + 2;
   HEAP32[$4 + 12 >> 2] = fb + 2;
   if (!(HEAP32[gb + 45032 + 4 >> 2] | 0)) HEAP32[$4 + 76 >> 2] = -1;
   ___lock(gb + 45032 + 28 | 0);
   $37 = HEAP32[gb + 45032 + 24 >> 2] | 0;
   HEAP32[$4 + 56 >> 2] = $37;
   if ($37 | 0) HEAP32[$37 + 52 >> 2] = $4;
   HEAP32[gb + 45032 + 24 >> 2] = $4;
   ___unlock(gb + 45032 + 28 | 0);
   $$0 = $4;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _ofdmflexframesync_create($_M, $_cp_len, $_taper_len, $_p, $_callback, $_userdata) {
 $_M = $_M | 0;
 $_cp_len = $_cp_len | 0;
 $_taper_len = $_taper_len | 0;
 $_p = $_p | 0;
 $_callback = $_callback | 0;
 $_userdata = $_userdata | 0;
 var $0 = 0, $12 = 0, $13 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $35 = 0, $37 = 0, $41 = 0, $48 = 0;
 $0 = _malloc(208) | 0;
 if ($_M >>> 0 < 8) _fwrite(gb + 29007 | 0, 61, 1, HEAP32[gb + 9336 >> 2] | 0) | 0; else {
  if ($_M & 1 | 0) {
   _fwrite(gb + 29069 | 0, 70, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
   _exit(1);
  }
  if ($_cp_len >>> 0 > $_M >>> 0) {
   _fwrite(gb + 29140 | 0, 92, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
   _exit(1);
  }
 }
 HEAP32[$0 >> 2] = $_M;
 HEAP32[$0 + 4 >> 2] = $_cp_len;
 HEAP32[$0 + 8 >> 2] = $_taper_len;
 HEAP32[$0 + 132 >> 2] = $_callback;
 HEAP32[$0 + 136 >> 2] = $_userdata;
 $12 = _malloc($_M) | 0;
 $13 = $0 + 12 | 0;
 HEAP32[$13 >> 2] = $12;
 if (!$_p) {
  _ofdmframe_init_default_sctype($_M, $12);
  $18 = HEAP32[$13 >> 2] | 0;
  $19 = HEAP32[$0 >> 2] | 0;
 } else {
  _memcpy($12 | 0, $_p | 0, $_M | 0) | 0;
  $18 = $12;
  $19 = $_M;
 }
 _ofdmframe_validate_sctype($18, $19, $0 + 16 | 0, $0 + 20 | 0, $0 + 24 | 0);
 $21 = $0 + 184 | 0;
 HEAP32[$21 >> 2] = _ofdmframesync_create($_M, $_cp_len, $_taper_len, $_p, fb + 5 | 0, $0) | 0;
 $22 = $0 + 36 | 0;
 HEAP32[$22 >> 2] = 0;
 HEAP32[$22 + 4 >> 2] = 0;
 HEAP32[$22 + 8 >> 2] = 0;
 HEAP32[$22 + 12 >> 2] = 0;
 HEAP32[$22 + 16 >> 2] = 0;
 _ofdmflexframesync_set_header_len($0, 8);
 HEAP32[$0 + 76 >> 2] = 48;
 HEAP32[$0 + 80 >> 2] = 2;
 $25 = $0 + 84 | 0;
 HEAP32[$25 >> 2] = 1;
 $26 = $0 + 88 | 0;
 HEAP32[$26 >> 2] = 1;
 $27 = $0 + 92 | 0;
 HEAP32[$27 >> 2] = 1;
 $28 = $0 + 96 | 0;
 HEAP32[$28 >> 2] = 1;
 HEAP32[$0 + 104 >> 2] = _modem_create(48) | 0;
 $35 = _packetizer_create(HEAP32[$25 >> 2] | 0, HEAP32[$26 >> 2] | 0, HEAP32[$27 >> 2] | 0, HEAP32[$28 >> 2] | 0) | 0;
 HEAP32[$0 + 100 >> 2] = $35;
 $37 = _packetizer_get_enc_msg_len($35) | 0;
 HEAP32[$0 + 116 >> 2] = $37;
 HEAP32[$0 + 108 >> 2] = _malloc($37) | 0;
 $41 = HEAP32[$25 >> 2] | 0;
 HEAP32[$0 + 112 >> 2] = _malloc($41) | 0;
 HEAP32[$0 + 128 >> 2] = _malloc($41 << 3) | 0;
 HEAP32[$0 + 120 >> 2] = 0;
 $48 = $0 + 188 | 0;
 HEAP32[$48 >> 2] = 0;
 HEAP32[$48 + 4 >> 2] = 0;
 HEAP32[$48 + 8 >> 2] = 0;
 HEAP32[$48 + 12 >> 2] = 0;
 HEAP32[$48 + 16 >> 2] = 0;
 HEAPF32[$0 + 180 >> 2] = 9.999999960041972e-13;
 _framesyncstats_init_default($0 + 140 | 0);
 _ofdmframesync_reset(HEAP32[$21 >> 2] | 0);
 return $0 | 0;
}

function _memchr($src, $c, $n) {
 $src = $src | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $$0$lcssa = 0, $$0$lcssa30 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $13 = 0, $15 = 0, $17 = 0, $20 = 0, $26 = 0, $27 = 0, $32 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $s$0$lcssa = 0, $s$0$lcssa29 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0;
 $0 = $c & 255;
 $4 = ($n | 0) != 0;
 L1 : do if ($4 & ($src & 3 | 0) != 0) {
  $5 = $c & 255;
  $$019 = $n;
  $s$020 = $src;
  while (1) {
   if ((HEAP8[$s$020 >> 0] | 0) == $5 << 24 >> 24) {
    $$0$lcssa30 = $$019;
    $s$0$lcssa29 = $s$020;
    label = 6;
    break L1;
   }
   $8 = $s$020 + 1 | 0;
   $9 = $$019 + -1 | 0;
   $13 = ($9 | 0) != 0;
   if ($13 & ($8 & 3 | 0) != 0) {
    $$019 = $9;
    $s$020 = $8;
   } else {
    $$0$lcssa = $9;
    $$lcssa = $13;
    $s$0$lcssa = $8;
    label = 5;
    break;
   }
  }
 } else {
  $$0$lcssa = $n;
  $$lcssa = $4;
  $s$0$lcssa = $src;
  label = 5;
 } while (0);
 if ((label | 0) == 5) if ($$lcssa) {
  $$0$lcssa30 = $$0$lcssa;
  $s$0$lcssa29 = $s$0$lcssa;
  label = 6;
 } else {
  $$3 = 0;
  $s$2 = $s$0$lcssa;
 }
 L8 : do if ((label | 0) == 6) {
  $15 = $c & 255;
  if ((HEAP8[$s$0$lcssa29 >> 0] | 0) == $15 << 24 >> 24) {
   $$3 = $$0$lcssa30;
   $s$2 = $s$0$lcssa29;
  } else {
   $17 = Math_imul($0, 16843009) | 0;
   L11 : do if ($$0$lcssa30 >>> 0 > 3) {
    $$110 = $$0$lcssa30;
    $w$011 = $s$0$lcssa29;
    while (1) {
     $20 = HEAP32[$w$011 >> 2] ^ $17;
     if (($20 & -2139062144 ^ -2139062144) & $20 + -16843009 | 0) {
      $$110$lcssa = $$110;
      $w$011$lcssa = $w$011;
      break;
     }
     $26 = $w$011 + 4 | 0;
     $27 = $$110 + -4 | 0;
     if ($27 >>> 0 > 3) {
      $$110 = $27;
      $w$011 = $26;
     } else {
      $$1$lcssa = $27;
      $w$0$lcssa = $26;
      label = 11;
      break L11;
     }
    }
    $$24 = $$110$lcssa;
    $s$15 = $w$011$lcssa;
   } else {
    $$1$lcssa = $$0$lcssa30;
    $w$0$lcssa = $s$0$lcssa29;
    label = 11;
   } while (0);
   if ((label | 0) == 11) if (!$$1$lcssa) {
    $$3 = 0;
    $s$2 = $w$0$lcssa;
    break;
   } else {
    $$24 = $$1$lcssa;
    $s$15 = $w$0$lcssa;
   }
   while (1) {
    if ((HEAP8[$s$15 >> 0] | 0) == $15 << 24 >> 24) {
     $$3 = $$24;
     $s$2 = $s$15;
     break L8;
    }
    $32 = $s$15 + 1 | 0;
    $$24 = $$24 + -1 | 0;
    if (!$$24) {
     $$3 = 0;
     $s$2 = $32;
     break;
    } else $s$15 = $32;
   }
  }
 } while (0);
 return ($$3 | 0 ? $s$2 : 0) | 0;
}

function _gmskframesync_decode_header($_q) {
 $_q = $_q | 0;
 var $$pr = 0, $$pr2 = 0, $15 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $36 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $47 = 0, $55 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $64 = 0, $67 = 0, $8 = 0, $check$0 = 0, $fec0$0 = 0, $num_written = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $num_written = sp;
 $4 = $_q + 160 | 0;
 $6 = $_q + 148 | 0;
 _liquid_pack_bytes(HEAP32[$_q + 156 >> 2] | 0, HEAP32[$_q + 152 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$6 >> 2] | 0, $num_written);
 $8 = HEAP32[$num_written >> 2] | 0;
 if (($8 | 0) != (HEAP32[$6 >> 2] | 0)) ___assert_fail(gb + 29233 | 0, gb + 27524 | 0, 757, gb + 27642 | 0);
 _unscramble_data(HEAP32[$4 >> 2] | 0, $8);
 $15 = $_q + 164 | 0;
 $17 = _packetizer_decode(HEAP32[$_q + 168 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$15 >> 2] | 0) | 0;
 $18 = $_q + 172 | 0;
 HEAP32[$18 >> 2] = $17;
 if (!$17) {
  STACKTOP = sp;
  return;
 }
 $21 = HEAP32[$_q + 144 >> 2] | 0;
 $22 = HEAP32[$15 >> 2] | 0;
 if ((HEAP8[$22 + $21 >> 0] | 0) != 3) {
  _fwrite(gb + 27670 | 0, 64, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  HEAP32[$18 >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 $36 = HEAPU8[$22 + ($21 + 1) >> 0] << 8 | HEAPU8[$22 + ($21 + 2) >> 0];
 $40 = HEAPU8[$22 + ($21 + 3) >> 0] | 0;
 $41 = $40 >>> 5;
 $42 = $40 & 31;
 $47 = HEAPU8[$22 + ($21 + 4) >> 0] & 31;
 if (($41 | 0) == 7) {
  _fwrite(gb + 27735 | 0, 70, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  HEAP32[$18 >> 2] = 0;
  $$pr2 = 0;
  $check$0 = 0;
 } else {
  $$pr2 = $17;
  $check$0 = $41;
 }
 if ($42 >>> 0 > 27) {
  _fwrite(gb + 27806 | 0, 78, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  HEAP32[$18 >> 2] = 0;
  $$pr = 0;
  $fec0$0 = 0;
 } else {
  $$pr = $$pr2;
  $fec0$0 = $42;
 }
 if ($47 >>> 0 > 27) {
  _fwrite(gb + 27885 | 0, 78, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  HEAP32[$18 >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 if (!$$pr) {
  STACKTOP = sp;
  return;
 }
 $55 = $_q + 196 | 0;
 HEAP32[$55 >> 2] = $36;
 HEAP32[$_q + 180 >> 2] = $check$0;
 HEAP32[$_q + 184 >> 2] = $fec0$0;
 HEAP32[$_q + 188 >> 2] = $47;
 $59 = $_q + 208 | 0;
 $61 = _packetizer_recreate(HEAP32[$59 >> 2] | 0, $36, $check$0, $fec0$0, $47) | 0;
 HEAP32[$59 >> 2] = $61;
 $62 = _packetizer_get_enc_msg_len($61) | 0;
 HEAP32[$_q + 192 >> 2] = $62;
 $64 = $_q + 200 | 0;
 HEAP32[$64 >> 2] = _realloc(HEAP32[$64 >> 2] | 0, $62) | 0;
 $67 = $_q + 204 | 0;
 HEAP32[$67 >> 2] = _realloc(HEAP32[$67 >> 2] | 0, HEAP32[$55 >> 2] | 0) | 0;
 STACKTOP = sp;
 return;
}

function _gmskframegen_assemble($_q, $_header, $_payload, $_payload_len, $_check, $_fec0, $_fec1) {
 $_q = $_q | 0;
 $_header = $_header | 0;
 $_payload = $_payload | 0;
 $_payload_len = $_payload_len | 0;
 $_check = $_check | 0;
 $_fec0 = $_fec0 | 0;
 $_fec1 = $_fec1 | 0;
 var $$pre$phi1Z2D = 0, $$pre$phi2Z2D = 0, $$pre$phi4Z2D = 0, $$pre$phi6Z2D = 0, $0 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $21 = 0, $25 = 0, $27 = 0, $29 = 0, $3 = 0, $46 = 0, $52 = 0, $6 = 0, $66 = 0, $9 = 0, label = 0;
 $0 = $_q + 72 | 0;
 $3 = $_q + 60 | 0;
 if ((HEAP32[$0 >> 2] | 0) == ($_payload_len | 0)) if ((HEAP32[$3 >> 2] | 0) == ($_check | 0)) {
  $6 = $_q + 64 | 0;
  if ((HEAP32[$6 >> 2] | 0) == ($_fec0 | 0)) {
   $9 = $_q + 68 | 0;
   if ((HEAP32[$9 >> 2] | 0) == ($_fec1 | 0)) {
    $$pre$phi1Z2D = $6;
    $$pre$phi2Z2D = $9;
    $$pre$phi4Z2D = $_q + 56 | 0;
    $$pre$phi6Z2D = $_q + 80 | 0;
   } else label = 6;
  } else label = 6;
 } else label = 6; else label = 6;
 if ((label | 0) == 6) {
  HEAP32[$0 >> 2] = $_payload_len;
  HEAP32[$3 >> 2] = $_check;
  $12 = $_q + 64 | 0;
  HEAP32[$12 >> 2] = $_fec0;
  $13 = $_q + 68 | 0;
  HEAP32[$13 >> 2] = $_fec1;
  $14 = $_q + 56 | 0;
  $16 = _packetizer_recreate(HEAP32[$14 >> 2] | 0, $_payload_len, $_check, $_fec0, $_fec1) | 0;
  HEAP32[$14 >> 2] = $16;
  $17 = _packetizer_get_enc_msg_len($16) | 0;
  HEAP32[$_q + 76 >> 2] = $17;
  HEAP32[$_q + 24 >> 2] = $17 << 3;
  $21 = $_q + 80 | 0;
  HEAP32[$21 >> 2] = _realloc(HEAP32[$21 >> 2] | 0, $17) | 0;
  $$pre$phi1Z2D = $12;
  $$pre$phi2Z2D = $13;
  $$pre$phi4Z2D = $14;
  $$pre$phi6Z2D = $21;
 }
 HEAP32[$_q + 88 >> 2] = 1;
 $25 = $_q + 44 | 0;
 $27 = $_q + 36 | 0;
 _memmove(HEAP32[$25 >> 2] | 0, $_header | 0, HEAP32[$27 >> 2] | 0) | 0;
 $29 = HEAP32[$27 >> 2] | 0;
 HEAP8[(HEAP32[$25 >> 2] | 0) + $29 >> 0] = 3;
 HEAP8[(HEAP32[$25 >> 2] | 0) + ($29 + 1) >> 0] = (HEAP32[$0 >> 2] | 0) >>> 8;
 HEAP8[(HEAP32[$25 >> 2] | 0) + ($29 + 2) >> 0] = HEAP32[$0 >> 2];
 $46 = $29 + 3 | 0;
 HEAP8[(HEAP32[$25 >> 2] | 0) + $46 >> 0] = HEAP32[$3 >> 2] << 5;
 $52 = (HEAP32[$25 >> 2] | 0) + $46 | 0;
 HEAP8[$52 >> 0] = HEAPU8[$52 >> 0] | 0 | HEAP32[$$pre$phi1Z2D >> 2] & 31;
 HEAP8[(HEAP32[$25 >> 2] | 0) + ($29 + 4) >> 0] = HEAP32[$$pre$phi2Z2D >> 2] & 31;
 $66 = $_q + 48 | 0;
 _packetizer_encode(HEAP32[$_q + 52 >> 2] | 0, HEAP32[$25 >> 2] | 0, HEAP32[$66 >> 2] | 0);
 _scramble_data(HEAP32[$66 >> 2] | 0, HEAP32[$_q + 40 >> 2] | 0);
 _packetizer_encode(HEAP32[$$pre$phi4Z2D >> 2] | 0, $_payload, HEAP32[$$pre$phi6Z2D >> 2] | 0);
 return;
}

function _gmskframesync_execute_rxpreamble($_q, $_x) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 var $$byval_copy2 = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $15 = 0, $18 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $23 = 0, $24 = 0, $26 = 0.0, $28 = 0.0, $3 = 0, $33 = 0.0, $34 = 0.0, $4 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $47 = 0.0, $5 = 0, $55 = 0, $59 = 0, $7 = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy2 = sp + 48 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 32 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 8 | 0;
 $y = sp;
 $4 = sp + 16 | 0;
 $5 = $_q + 220 | 0;
 $7 = $_q + 132 | 0;
 if ((HEAP32[$5 >> 2] | 0) == (HEAP32[$7 >> 2] | 0)) {
  _fwrite(gb + 27577 | 0, 64, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  STACKTOP = sp;
  return;
 }
 $11 = $_q + 128 | 0;
 $12 = HEAP32[$11 >> 2] | 0;
 $15 = HEAP32[$_x + 4 >> 2] | 0;
 HEAP32[$4 >> 2] = HEAP32[$_x >> 2];
 HEAP32[$4 + 4 >> 2] = $15;
 HEAP32[$$byval_copy2 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$$byval_copy2 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
 _nco_crcf_mix_down($12, $$byval_copy2, $y);
 _nco_crcf_step(HEAP32[$11 >> 2] | 0);
 $18 = +HEAPF32[$y >> 2];
 $20 = +HEAPF32[$y + 4 >> 2];
 $21 = $_q + 64 | 0;
 $23 = $_q + 68 | 0;
 $24 = HEAP32[$23 >> 2] | 0;
 HEAP32[$1 >> 2] = HEAP32[$21 >> 2];
 HEAP32[$1 + 4 >> 2] = $24;
 HEAP32[$$byval_copy2 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$$byval_copy2 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 _conjf($0, $$byval_copy2);
 $26 = +HEAPF32[$0 >> 2];
 $28 = +HEAPF32[$0 + 4 >> 2];
 $33 = $18 * $26 - $20 * $28;
 $34 = $20 * $26 + $18 * $28;
 if (($33 != $33 | 0.0 != 0.0) & ($34 != $34 | 0.0 != 0.0)) {
  ___mulsc3($2, $26, $28, $18, $20);
  $41 = +HEAPF32[$2 >> 2];
  $42 = +HEAPF32[$2 + 4 >> 2];
 } else {
  $41 = $33;
  $42 = $34;
 }
 HEAPF32[$3 >> 2] = $41;
 HEAPF32[$3 + 4 >> 2] = $42;
 HEAP32[$$byval_copy2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy2 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 $43 = +_cargf($$byval_copy2);
 $44 = $_q + 4 | 0;
 $47 = $43 * +((HEAP32[$44 >> 2] | 0) >>> 0);
 HEAPF32[$_q + 72 >> 2] = $47;
 HEAPF32[$21 >> 2] = $18;
 HEAPF32[$23 >> 2] = $20;
 HEAPF32[$$byval_copy2 >> 2] = 0.0;
 if (_gmskframesync_update_symsync($_q, $47, $$byval_copy2) | 0) {
  $55 = HEAP32[$5 >> 2] | 0;
  HEAPF32[(HEAP32[$_q + 140 >> 2] | 0) + ($55 << 2) >> 2] = +HEAPF32[$$byval_copy2 >> 2] / +((HEAP32[$44 >> 2] | 0) >>> 0);
  $59 = $55 + 1 | 0;
  HEAP32[$5 >> 2] = $59;
  if (($59 | 0) == (HEAP32[$7 >> 2] | 0)) HEAP32[$_q + 216 >> 2] = 2;
 }
 STACKTOP = sp;
 return;
}

function _ofdmframesync_estimate_gain_S0($_q, $_x, $_G) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 $_G = $_G | 0;
 var $$byval_copy = 0, $$pre$phi5Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $12 = 0.0, $13 = 0, $15 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $29 = 0, $31 = 0.0, $33 = 0.0, $34 = 0, $38 = 0, $39 = 0.0, $40 = 0.0, $45 = 0.0, $46 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $58 = 0.0, $60 = 0.0, $i$03 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 24 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp;
 _memmove(HEAP32[$_q + 56 >> 2] | 0, $_x | 0, HEAP32[$_q >> 2] << 3 | 0) | 0;
 _fft_execute(HEAP32[$_q + 48 >> 2] | 0);
 $12 = +Math_sqrt(+(+((HEAP32[$_q + 28 >> 2] | 0) >>> 0)));
 $13 = HEAP32[$_q >> 2] | 0;
 $15 = $12 / +($13 >>> 0);
 if (!$13) {
  STACKTOP = sp;
  return;
 }
 $17 = $_q + 12 | 0;
 $18 = $_q + 52 | 0;
 $19 = $_q + 64 | 0;
 $20 = $1 + 4 | 0;
 $21 = $0 + 4 | 0;
 $22 = $2 + 4 | 0;
 $i$03 = 0;
 do {
  if (($i$03 & 1 | 0) == 0 ? (HEAP8[(HEAP32[$17 >> 2] | 0) + $i$03 >> 0] | 0) != 0 : 0) {
   $29 = HEAP32[$18 >> 2] | 0;
   $31 = +HEAPF32[$29 + ($i$03 << 3) >> 2];
   $33 = +HEAPF32[$29 + ($i$03 << 3) + 4 >> 2];
   $34 = HEAP32[$19 >> 2] | 0;
   $38 = HEAP32[$34 + ($i$03 << 3) + 4 >> 2] | 0;
   HEAP32[$1 >> 2] = HEAP32[$34 + ($i$03 << 3) >> 2];
   HEAP32[$20 >> 2] = $38;
   HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   _conjf($0, $$byval_copy);
   $39 = +HEAPF32[$0 >> 2];
   $40 = +HEAPF32[$21 >> 2];
   $45 = $31 * $39 - $33 * $40;
   $46 = $33 * $39 + $31 * $40;
   if (($45 != $45 | 0.0 != 0.0) & ($46 != $46 | 0.0 != 0.0)) {
    ___mulsc3($2, $31, $33, $39, $40);
    $53 = +HEAPF32[$2 >> 2];
    $54 = +HEAPF32[$22 >> 2];
   } else {
    $53 = $45;
    $54 = $46;
   }
   $51 = $_G + ($i$03 << 3) | 0;
   $52 = $_G + ($i$03 << 3) + 4 | 0;
   HEAPF32[$51 >> 2] = $53;
   HEAPF32[$52 >> 2] = $54;
   $$pre$phi5Z2D = $52;
   $$pre$phiZ2D = $51;
   $58 = $53;
   $60 = $54;
  } else {
   $55 = $_G + ($i$03 << 3) | 0;
   $56 = $_G + ($i$03 << 3) + 4 | 0;
   HEAPF32[$55 >> 2] = 0.0;
   HEAPF32[$56 >> 2] = 0.0;
   $$pre$phi5Z2D = $56;
   $$pre$phiZ2D = $55;
   $58 = 0.0;
   $60 = 0.0;
  }
  HEAPF32[$$pre$phiZ2D >> 2] = $15 * $58;
  HEAPF32[$$pre$phi5Z2D >> 2] = $15 * $60;
  $i$03 = $i$03 + 1 | 0;
 } while ($i$03 >>> 0 < (HEAP32[$_q >> 2] | 0) >>> 0);
 STACKTOP = sp;
 return;
}

function _ofdmframesync_estimate_gain_S1($_q, $_x, $_G) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 $_G = $_G | 0;
 var $$byval_copy = 0, $$pre$phi2Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $12 = 0.0, $13 = 0, $15 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $27 = 0, $29 = 0.0, $31 = 0.0, $32 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $43 = 0.0, $44 = 0.0, $49 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $56 = 0.0, $58 = 0.0, $i$01 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 24 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp;
 _memmove(HEAP32[$_q + 56 >> 2] | 0, $_x | 0, HEAP32[$_q >> 2] << 3 | 0) | 0;
 _fft_execute(HEAP32[$_q + 48 >> 2] | 0);
 $12 = +Math_sqrt(+(+((HEAP32[$_q + 32 >> 2] | 0) >>> 0)));
 $13 = HEAP32[$_q >> 2] | 0;
 $15 = $12 / +($13 >>> 0);
 if (!$13) {
  STACKTOP = sp;
  return;
 }
 $17 = $_q + 12 | 0;
 $18 = $_q + 52 | 0;
 $19 = $_q + 72 | 0;
 $20 = $1 + 4 | 0;
 $21 = $0 + 4 | 0;
 $22 = $2 + 4 | 0;
 $i$01 = 0;
 do {
  if (!(HEAP8[(HEAP32[$17 >> 2] | 0) + $i$01 >> 0] | 0)) {
   $53 = $_G + ($i$01 << 3) | 0;
   $54 = $_G + ($i$01 << 3) + 4 | 0;
   HEAPF32[$53 >> 2] = 0.0;
   HEAPF32[$54 >> 2] = 0.0;
   $$pre$phi2Z2D = $54;
   $$pre$phiZ2D = $53;
   $56 = 0.0;
   $58 = 0.0;
  } else {
   $27 = HEAP32[$18 >> 2] | 0;
   $29 = +HEAPF32[$27 + ($i$01 << 3) >> 2];
   $31 = +HEAPF32[$27 + ($i$01 << 3) + 4 >> 2];
   $32 = HEAP32[$19 >> 2] | 0;
   $36 = HEAP32[$32 + ($i$01 << 3) + 4 >> 2] | 0;
   HEAP32[$1 >> 2] = HEAP32[$32 + ($i$01 << 3) >> 2];
   HEAP32[$20 >> 2] = $36;
   HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   _conjf($0, $$byval_copy);
   $37 = +HEAPF32[$0 >> 2];
   $38 = +HEAPF32[$21 >> 2];
   $43 = $29 * $37 - $31 * $38;
   $44 = $31 * $37 + $29 * $38;
   if (($43 != $43 | 0.0 != 0.0) & ($44 != $44 | 0.0 != 0.0)) {
    ___mulsc3($2, $29, $31, $37, $38);
    $51 = +HEAPF32[$2 >> 2];
    $52 = +HEAPF32[$22 >> 2];
   } else {
    $51 = $43;
    $52 = $44;
   }
   $49 = $_G + ($i$01 << 3) | 0;
   $50 = $_G + ($i$01 << 3) + 4 | 0;
   HEAPF32[$49 >> 2] = $51;
   HEAPF32[$50 >> 2] = $52;
   $$pre$phi2Z2D = $50;
   $$pre$phiZ2D = $49;
   $56 = $51;
   $58 = $52;
  }
  HEAPF32[$$pre$phiZ2D >> 2] = $15 * $56;
  HEAPF32[$$pre$phi2Z2D >> 2] = $15 * $58;
  $i$01 = $i$01 + 1 | 0;
 } while ($i$01 >>> 0 < (HEAP32[$_q >> 2] | 0) >>> 0);
 STACKTOP = sp;
 return;
}

function _qpilotsync_create($_payload_len, $_pilot_spacing) {
 $_payload_len = $_payload_len | 0;
 $_pilot_spacing = $_pilot_spacing | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $14 = 0, $15 = 0, $19 = 0, $22 = 0, $24 = 0, $25 = 0, $32 = 0.0, $35 = 0, $41 = 0, $44 = 0, $46 = 0, $47 = 0, $49 = 0, $6 = 0, $d = 0, $i$01 = 0, $i$01$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 24 | 0;
 $d = sp + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp;
 if (!$_payload_len) {
  _fwrite(gb + 30436 | 0, 67, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if ($_pilot_spacing >>> 0 < 2) {
  _fwrite(gb + 30504 | 0, 69, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 $6 = _malloc(48) | 0;
 HEAP32[$6 >> 2] = $_payload_len;
 HEAP32[$6 + 4 >> 2] = $_pilot_spacing;
 _div($d, $_payload_len, $_pilot_spacing + -1 | 0);
 $14 = ((HEAP32[$d + 4 >> 2] | 0) != 0 & 1) + (HEAP32[$d >> 2] | 0) | 0;
 $15 = $6 + 8 | 0;
 HEAP32[$15 >> 2] = $14;
 HEAP32[$6 + 12 >> 2] = $14 + $_payload_len;
 $19 = _malloc($14 << 3) | 0;
 HEAP32[$6 + 16 >> 2] = $19;
 $22 = _msequence_create_default(_liquid_nextpow2($14) | 0) | 0;
 if (!$14) $41 = 0; else {
  $24 = $1 + 4 | 0;
  $25 = $0 + 4 | 0;
  $i$01 = 0;
  do {
   $32 = +((_msequence_generate_symbol($22, 2) | 0) >>> 0) * 6.283185307179586 * .25 + .7853981633974483;
   HEAPF32[$1 >> 2] = $32 * 0.0;
   HEAPF32[$24 >> 2] = $32;
   HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   _cexpf($0, $$byval_copy);
   $35 = HEAP32[$25 >> 2] | 0;
   HEAP32[$19 + ($i$01 << 3) >> 2] = HEAP32[$0 >> 2];
   HEAP32[$19 + ($i$01 << 3) + 4 >> 2] = $35;
   $i$01 = $i$01 + 1 | 0;
  } while ($i$01 >>> 0 < $14 >>> 0);
  $41 = HEAP32[$15 >> 2] | 0;
 }
 _msequence_destroy($22);
 $44 = 1 << (_liquid_nextpow2(($41 >>> 1) + $41 | 0) | 0);
 HEAP32[$6 + 20 >> 2] = $44;
 $46 = $44 << 3;
 $47 = _malloc($46) | 0;
 HEAP32[$6 + 24 >> 2] = $47;
 $49 = _malloc($46) | 0;
 HEAP32[$6 + 28 >> 2] = $49;
 HEAP32[$6 + 32 >> 2] = _fft_create_plan($44, $47, $49, 1, 0) | 0;
 $i$01$i = 0;
 do {
  HEAPF32[$47 + ($i$01$i << 3) >> 2] = 0.0;
  HEAPF32[$47 + ($i$01$i << 3) + 4 >> 2] = 0.0;
  $i$01$i = $i$01$i + 1 | 0;
 } while ($i$01$i >>> 0 < $44 >>> 0);
 HEAPF32[$6 + 36 >> 2] = 0.0;
 HEAPF32[$6 + 40 >> 2] = 0.0;
 HEAPF32[$6 + 44 >> 2] = 1.0;
 STACKTOP = sp;
 return $6 | 0;
}

function _utf8_check_full($buffer, $size, $codepoint) {
 $buffer = $buffer | 0;
 $size = $size | 0;
 $codepoint = $codepoint | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $64 = 0, $i = 0, $u = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 20 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $i = sp + 4 | 0;
 $value = sp;
 $u = sp + 24 | 0;
 HEAP32[$1 >> 2] = $buffer;
 HEAP32[$2 >> 2] = $size;
 HEAP32[$3 >> 2] = $codepoint;
 HEAP32[$value >> 2] = 0;
 HEAP8[$u >> 0] = HEAP8[HEAP32[$1 >> 2] >> 0] | 0;
 do if ((HEAP32[$2 >> 2] | 0) == 2) HEAP32[$value >> 2] = (HEAPU8[$u >> 0] | 0) & 31; else {
  if ((HEAP32[$2 >> 2] | 0) == 3) {
   HEAP32[$value >> 2] = (HEAPU8[$u >> 0] | 0) & 15;
   break;
  }
  if ((HEAP32[$2 >> 2] | 0) == 4) {
   HEAP32[$value >> 2] = (HEAPU8[$u >> 0] | 0) & 7;
   break;
  }
  HEAP32[$0 >> 2] = 0;
  $64 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $64 | 0;
 } while (0);
 HEAP32[$i >> 2] = 1;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[$2 >> 2] | 0) >>> 0) break;
  HEAP8[$u >> 0] = HEAP8[(HEAP32[$1 >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0;
  if ((HEAPU8[$u >> 0] | 0 | 0) < 128) {
   label = 12;
   break;
  }
  if ((HEAPU8[$u >> 0] | 0 | 0) > 191) {
   label = 12;
   break;
  }
  HEAP32[$value >> 2] = (HEAP32[$value >> 2] << 6) + ((HEAPU8[$u >> 0] | 0) & 63);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if ((label | 0) == 12) {
  HEAP32[$0 >> 2] = 0;
  $64 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $64 | 0;
 }
 if ((HEAP32[$value >> 2] | 0) > 1114111) {
  HEAP32[$0 >> 2] = 0;
  $64 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $64 | 0;
 }
 if (55296 <= (HEAP32[$value >> 2] | 0) & (HEAP32[$value >> 2] | 0) <= 57343) {
  HEAP32[$0 >> 2] = 0;
  $64 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $64 | 0;
 }
 if (!((HEAP32[$2 >> 2] | 0) == 2 & (HEAP32[$value >> 2] | 0) < 128)) if (!((HEAP32[$2 >> 2] | 0) == 3 & (HEAP32[$value >> 2] | 0) < 2048)) if (!((HEAP32[$2 >> 2] | 0) == 4 & (HEAP32[$value >> 2] | 0) < 65536)) {
  if (HEAP32[$3 >> 2] | 0) HEAP32[HEAP32[$3 >> 2] >> 2] = HEAP32[$value >> 2];
  HEAP32[$0 >> 2] = 1;
  $64 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $64 | 0;
 }
 HEAP32[$0 >> 2] = 0;
 $64 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $64 | 0;
}

function _ofdmframesync_execute_seekplcp($_q) {
 $_q = $_q | 0;
 var $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $16 = 0.0, $19 = 0.0, $2 = 0, $22 = 0.0, $26 = 0.0, $28 = 0, $32 = 0, $34 = 0.0, $35 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $42 = 0.0, $52 = 0, $53 = 0, $g$0$lcssa = 0.0, $g$04 = 0.0, $i$05 = 0, $rc = 0, $s_hat = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy1 = sp + 32 | 0;
 $rc = sp + 24 | 0;
 $s_hat = sp + 8 | 0;
 $0 = sp + 16 | 0;
 $1 = sp;
 $2 = $_q + 124 | 0;
 $4 = (HEAP32[$2 >> 2] | 0) + 1 | 0;
 HEAP32[$2 >> 2] = $4;
 if ($4 >>> 0 < (HEAP32[$_q >> 2] | 0) >>> 0) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$2 >> 2] = 0;
 _windowcf_read(HEAP32[$_q + 60 >> 2] | 0, $rc);
 $10 = HEAP32[$_q + 8 >> 2] | 0;
 $11 = HEAP32[$_q >> 2] | 0;
 $12 = $10 + $11 | 0;
 $14 = HEAP32[$rc >> 2] | 0;
 if ($10 >>> 0 < $12 >>> 0) {
  $g$04 = 0.0;
  $i$05 = $10;
  while (1) {
   $16 = +HEAPF32[$14 + ($i$05 << 3) >> 2];
   $19 = +HEAPF32[$14 + ($i$05 << 3) + 4 >> 2];
   $22 = $g$04 + ($16 * $16 + $19 * $19);
   $i$05 = $i$05 + 1 | 0;
   if ($i$05 >>> 0 >= $12 >>> 0) {
    $g$0$lcssa = $22;
    break;
   } else $g$04 = $22;
  }
 } else $g$0$lcssa = 0.0;
 $26 = +($11 >>> 0) / $g$0$lcssa;
 $28 = $_q + 84 | 0;
 _ofdmframesync_estimate_gain_S0($_q, $14 + ($10 << 3) | 0, HEAP32[$28 >> 2] | 0);
 _ofdmframesync_S0_metrics($_q, HEAP32[$28 >> 2] | 0, $s_hat);
 $32 = $s_hat + 4 | 0;
 $34 = $26 * +HEAPF32[$s_hat >> 2];
 $35 = $26 * +HEAPF32[$32 >> 2];
 HEAPF32[$s_hat >> 2] = $34;
 HEAPF32[$32 >> 2] = $35;
 HEAPF32[$0 >> 2] = $34;
 HEAPF32[$0 + 4 >> 2] = $35;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 $37 = +_cargf($$byval_copy1);
 $38 = $_q + 4 | 0;
 $39 = HEAP32[$38 >> 2] | 0;
 HEAPF32[$_q + 80 >> 2] = $26;
 HEAPF32[$1 >> 2] = $34;
 HEAPF32[$1 + 4 >> 2] = $35;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 $42 = +_cabsf($$byval_copy1);
 if ($42 > +HEAPF32[$_q + 152 >> 2]) {
  $52 = ~~+_roundf(+($37 * +($39 >>> 0) / 6.283185307179586));
  $53 = HEAP32[$_q >> 2] | 0;
  HEAP32[$2 >> 2] = ((($53 + $52 | 0) >>> 0) % ((HEAP32[$38 >> 2] | 0) >>> 0) | 0) + $53;
  HEAP32[$_q + 104 >> 2] = 1;
 }
 STACKTOP = sp;
 return;
}

function _decoder_on_decode($header, $header_valid, $payload, $payload_len, $payload_valid, $stats, $dvoid) {
 $header = $header | 0;
 $header_valid = $header_valid | 0;
 $payload = $payload | 0;
 $payload_len = $payload_len | 0;
 $payload_valid = $payload_valid | 0;
 $stats = $stats | 0;
 $dvoid = $dvoid | 0;
 var $$1 = 0, $$pre$phi6Z2D = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $37 = 0, $40 = 0, $41 = 0, $44 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $9 = 0;
 if (!$header_valid) {
  $$1 = 1;
  return $$1 | 0;
 }
 if (!$dvoid) {
  $$1 = 0;
  return $$1 | 0;
 }
 if (HEAP8[$dvoid + 344 >> 0] | 0) {
  $5 = $dvoid + 340 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  if ($6 >>> 0 < 8) {
   $9 = $dvoid + 276 + ($6 << 2) | 0;
   $11 = $dvoid + 308 + ($6 << 2) | 0;
   $14 = HEAP32[$stats + 16 >> 2] | 0;
   $16 = HEAP32[$9 >> 2] | 0;
   $17 = $14 << 3;
   if ((HEAP32[$11 >> 2] | 0) >>> 0 < $14 >>> 0) {
    $18 = _realloc($16, $17) | 0;
    HEAP32[$9 >> 2] = $18;
    HEAP32[$11 >> 2] = $14;
    $21 = $18;
   } else $21 = $16;
   _memcpy($21 | 0, HEAP32[$stats + 12 >> 2] | 0, $17 | 0) | 0;
   $22 = $dvoid + 116 | 0;
   HEAP32[$22 + ($6 * 20 | 0) >> 2] = HEAP32[$9 >> 2];
   HEAP32[$22 + ($6 * 20 | 0) + 4 >> 2] = $14;
   HEAP32[$22 + ($6 * 20 | 0) + 8 >> 2] = HEAP32[$stats >> 2];
   HEAP32[$22 + ($6 * 20 | 0) + 12 >> 2] = HEAP32[$stats + 4 >> 2];
   HEAP8[$22 + ($6 * 20 | 0) + 16 >> 0] = ($payload_valid | 0) != 0 & 1;
   HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1;
  }
 }
 if (!$payload_valid) {
  $37 = $dvoid + 100 | 0;
  HEAP32[$37 >> 2] = (HEAP32[$37 >> 2] | 0) + 1;
  $$1 = 1;
  return $$1 | 0;
 }
 $40 = $payload_len + 4 | 0;
 $41 = $dvoid + 112 | 0;
 $44 = $dvoid + 108 | 0;
 if ($40 >>> 0 > (HEAP32[$41 >> 2] | 0) >>> 0) {
  $46 = _realloc(HEAP32[$44 >> 2] | 0, $40) | 0;
  HEAP32[$44 >> 2] = $46;
  HEAP32[$41 >> 2] = $40;
  $$pre$phi6Z2D = $44;
  $47 = $46;
 } else {
  $$pre$phi6Z2D = $44;
  $47 = HEAP32[$44 >> 2] | 0;
 }
 HEAP8[$47 >> 0] = $payload_len;
 HEAP8[$47 + 1 >> 0] = $payload_len >> 8;
 HEAP8[$47 + 2 >> 0] = $payload_len >> 16;
 HEAP8[$47 + 3 >> 0] = $payload_len >> 24;
 _memcpy((HEAP32[$$pre$phi6Z2D >> 2] | 0) + 4 | 0, $payload | 0, $payload_len | 0) | 0;
 _ring_write(HEAP32[$dvoid + 104 >> 2] | 0, HEAP32[$$pre$phi6Z2D >> 2] | 0, $40) | 0;
 $$1 = 0;
 return $$1 | 0;
}

function _liquid_firdes_fnyquist($_type, $_root, $_k, $_m, $_beta, $_dt, $_h) {
 $_type = $_type | 0;
 $_root = $_root | 0;
 $_k = $_k | 0;
 $_m = $_m | 0;
 $_beta = +$_beta;
 $_dt = +$_dt;
 $_h = $_h | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $16 = 0, $29 = 0, $30 = 0.0, $31 = 0.0, $9 = 0, $i$03 = 0, $i$03$us = 0, $i$12 = 0, sp = 0;
 sp = STACKTOP;
 if (!$_k) {
  _fwrite(gb + 23050 | 0, 58, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if (!$_m) {
  _fwrite(gb + 23109 | 0, 58, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if ($_beta < 0.0 | $_beta > 1.0) {
  _fwrite(gb + 23168 | 0, 55, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 $9 = Math_imul($_k << 1, $_m) | 0 | 1;
 $10 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($9 << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $11 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($9 << 3) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $12 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($9 << 3) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 switch ($_type | 0) {
 case 4:
  {
   _liquid_firdes_fexp_freqresponse($_k, $_m, $_beta, $10);
   break;
  }
 case 5:
  {
   _liquid_firdes_fsech_freqresponse($_k, $_m, $_beta, $10);
   break;
  }
 case 6:
  {
   _liquid_firdes_farcsech_freqresponse($_k, $_m, $_beta, $10);
   break;
  }
 default:
  {
   _fwrite(gb + 23270 | 0, 65, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
   _exit(1);
  }
 }
 $14 = Math_imul($_m, $_k) | 0;
 $16 = $14 << 1 | 1;
 if (!$_root) {
  $i$03$us = 0;
  do {
   HEAP32[$11 + ($i$03$us << 3) >> 2] = HEAP32[$10 + ($i$03$us << 2) >> 2];
   HEAPF32[$11 + ($i$03$us << 3) + 4 >> 2] = 0.0;
   $i$03$us = $i$03$us + 1 | 0;
  } while (($i$03$us | 0) != ($16 | 0));
 } else {
  $i$03 = 0;
  do {
   HEAPF32[$11 + ($i$03 << 3) >> 2] = +Math_sqrt(+(+HEAPF32[$10 + ($i$03 << 2) >> 2]));
   HEAPF32[$11 + ($i$03 << 3) + 4 >> 2] = 0.0;
   $i$03 = $i$03 + 1 | 0;
  } while (($i$03 | 0) != ($16 | 0));
 }
 _fft_run($9, $11, $12, -1, 0);
 $29 = $14 + 1 | 0;
 $30 = +($_k >>> 0);
 $31 = +($9 >>> 0);
 $i$12 = 0;
 do {
  HEAPF32[$_h + ($i$12 << 2) >> 2] = $30 * +HEAPF32[$12 + (((($29 + $i$12 | 0) >>> 0) % ($9 >>> 0) | 0) << 3) >> 2] / $31;
  $i$12 = $i$12 + 1 | 0;
 } while (($i$12 | 0) != ($16 | 0));
 STACKTOP = sp;
 return;
}

function _firdespm_compute_interp($_q) {
 $_q = $_q | 0;
 var $$lcssa = 0.0, $$lcssa1 = 0, $$lcssa22 = 0.0, $0 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $27 = 0, $29 = 0, $31 = 0, $32 = 0, $34 = 0.0, $36 = 0, $40 = 0.0, $48 = 0.0, $5 = 0, $51 = 0.0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $60 = 0, $61 = 0, $63 = 0, $7 = 0, $72 = 0.0, $78 = 0, $9 = 0, $i$010 = 0, $i$13 = 0, $i$22 = 0, $t0$04 = 0.0, $t1$05 = 0.0;
 $0 = $_q + 12 | 0;
 $2 = (HEAP32[$0 >> 2] | 0) + 1 | 0;
 if (!$2) {
  $$lcssa1 = 0;
  $21 = HEAP32[$_q + 64 >> 2] | 0;
 } else {
  $5 = HEAP32[$_q + 88 >> 2] | 0;
  $7 = HEAP32[$_q + 48 >> 2] | 0;
  $9 = HEAP32[$_q + 64 >> 2] | 0;
  $i$010 = 0;
  do {
   HEAPF64[$9 + ($i$010 << 3) >> 3] = +Math_cos(+(+HEAPF64[$7 + (HEAP32[$5 + ($i$010 << 2) >> 2] << 3) >> 3] * 6.283185307179586));
   $i$010 = $i$010 + 1 | 0;
  } while ($i$010 >>> 0 < $2 >>> 0);
  $$lcssa1 = $2;
  $21 = $9;
 }
 $19 = $_q + 68 | 0;
 _poly_fit_lagrange_barycentric($21, $$lcssa1, HEAP32[$19 >> 2] | 0);
 $22 = HEAP32[$0 >> 2] | 0;
 $23 = ($22 | 0) == -1;
 if ($23) {
  HEAPF64[$_q + 80 >> 3] = nan;
  return;
 }
 $25 = HEAP32[$19 >> 2] | 0;
 $27 = HEAP32[$_q + 88 >> 2] | 0;
 $29 = HEAP32[$_q + 52 >> 2] | 0;
 $31 = HEAP32[$_q + 56 >> 2] | 0;
 $32 = $22 + 1 | 0;
 $i$13 = 0;
 $t0$04 = 0.0;
 $t1$05 = 0.0;
 while (1) {
  $34 = +HEAPF64[$25 + ($i$13 << 3) >> 3];
  $36 = HEAP32[$27 + ($i$13 << 2) >> 2] | 0;
  $40 = $t0$04 + $34 * +HEAPF64[$29 + ($36 << 3) >> 3];
  $48 = $t1$05 + ($i$13 & 1 | 0 ? -1.0 : 1.0) * ($34 / +HEAPF64[$31 + ($36 << 3) >> 3]);
  $i$13 = $i$13 + 1 | 0;
  if ($i$13 >>> 0 >= $32 >>> 0) {
   $$lcssa = $40;
   $$lcssa22 = $48;
   break;
  } else {
   $t0$04 = $40;
   $t1$05 = $48;
  }
 }
 $51 = $$lcssa / $$lcssa22;
 $52 = $_q + 80 | 0;
 HEAPF64[$52 >> 3] = $51;
 if ($23) return;
 $54 = HEAP32[$_q + 88 >> 2] | 0;
 $56 = HEAP32[$_q + 52 >> 2] | 0;
 $58 = HEAP32[$_q + 56 >> 2] | 0;
 $60 = HEAP32[$_q + 72 >> 2] | 0;
 $61 = $22 + 1 | 0;
 $72 = $51;
 $i$22 = 0;
 while (1) {
  $63 = HEAP32[$54 + ($i$22 << 2) >> 2] | 0;
  HEAPF64[$60 + ($i$22 << 3) >> 3] = +HEAPF64[$56 + ($63 << 3) >> 3] - +(($i$22 << 1 & 2 ^ 2) + -1 | 0) * $72 / +HEAPF64[$58 + ($63 << 3) >> 3];
  $78 = $i$22 + 1 | 0;
  if ($78 >>> 0 >= $61 >>> 0) break;
  $72 = +HEAPF64[$52 >> 3];
  $i$22 = $78;
 }
 return;
}

function ___divdc3($agg$result, $__a, $__b, $__c, $__d) {
 $agg$result = $agg$result | 0;
 $__a = +$__a;
 $__b = +$__b;
 $__c = +$__c;
 $__d = +$__d;
 var $$0 = 0.0, $$02 = 0.0, $10 = 0.0, $14 = 0.0, $19 = 0, $20 = 0.0, $25 = 0.0, $3 = 0.0, $31 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $47 = 0.0, $49 = 0.0, $5 = 0.0, $67 = 0, $69 = 0.0, $71 = 0, $73 = 0.0, $8 = 0, $9 = 0, $__ilogbw$0 = 0, $z$sroa$0$0 = 0.0, $z$sroa$8$0 = 0.0;
 $3 = +_logb(+_fmax(+Math_abs(+$__c), +Math_abs(+$__d)));
 $5 = +Math_abs(+$3);
 if ($3 == $3 & 0.0 == 0.0 & $5 != inf) {
  $8 = ~~$3;
  $9 = 0 - $8 | 0;
  $10 = +_scalbn($__c, $9);
  $$0 = +_scalbn($__d, $9);
  $$02 = $10;
  $__ilogbw$0 = $8;
 } else {
  $$0 = $__d;
  $$02 = $__c;
  $__ilogbw$0 = 0;
 }
 $14 = $$02 * $$02 + $$0 * $$0;
 $19 = 0 - $__ilogbw$0 | 0;
 $20 = +_scalbn(($$02 * $__a + $$0 * $__b) / $14, $19);
 $25 = +_scalbn(($$02 * $__b - $$0 * $__a) / $14, $19);
 do if (($20 != $20 | 0.0 != 0.0) & ($25 != $25 | 0.0 != 0.0)) {
  if ($14 == 0.0) if (!(($__a != $__a | 0.0 != 0.0) & ($__b != $__b | 0.0 != 0.0))) {
   $31 = +_copysign(inf, $$02);
   $z$sroa$0$0 = $31 * $__a;
   $z$sroa$8$0 = $31 * $__b;
   break;
  }
  $34 = +Math_abs(+$__a);
  $35 = $34 == inf;
  $36 = +Math_abs(+$__b);
  $37 = $36 == inf;
  if ($35 | $37) if ($$02 == $$02 & 0.0 == 0.0 & +Math_abs(+$$02) != inf) if ($$0 == $$0 & 0.0 == 0.0 & +Math_abs(+$$0) != inf) {
   $47 = +_copysign($35 ? 1.0 : 0.0, $__a);
   $49 = +_copysign($37 ? 1.0 : 0.0, $__b);
   $z$sroa$0$0 = ($$02 * $47 + $$0 * $49) * inf;
   $z$sroa$8$0 = ($$02 * $49 - $$0 * $47) * inf;
   break;
  }
  if ($3 > 0.0 & $5 == inf) if ($__a == $__a & 0.0 == 0.0 & $34 != inf) if ($__b == $__b & 0.0 == 0.0 & $36 != inf) {
   $67 = +Math_abs(+$$02) == inf;
   $69 = +_copysign($67 ? 1.0 : 0.0, $$02);
   $71 = +Math_abs(+$$0) == inf;
   $73 = +_copysign($71 ? 1.0 : 0.0, $$0);
   $z$sroa$0$0 = ($69 * $__a + $73 * $__b) * 0.0;
   $z$sroa$8$0 = ($69 * $__b - $73 * $__a) * 0.0;
  } else {
   $z$sroa$0$0 = $20;
   $z$sroa$8$0 = $25;
  } else {
   $z$sroa$0$0 = $20;
   $z$sroa$8$0 = $25;
  } else {
   $z$sroa$0$0 = $20;
   $z$sroa$8$0 = $25;
  }
 } else {
  $z$sroa$0$0 = $20;
  $z$sroa$8$0 = $25;
 } while (0);
 HEAPF64[$agg$result >> 3] = $z$sroa$0$0;
 HEAPF64[$agg$result + 8 >> 3] = $z$sroa$8$0;
 return;
}

function _modem_demodulate_dpsk($_q, $_x, $_sym_out) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 $_sym_out = $_sym_out | 0;
 var $$0$lcssa$i = 0.0, $$01$i = 0.0, $$1$i = 0.0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $12 = 0.0, $14 = 0.0, $15 = 0.0, $2 = 0, $23 = 0, $25 = 0, $26 = 0, $37 = 0, $39 = 0.0, $4 = 0, $41 = 0.0, $6 = 0.0, $8 = 0.0, $d_theta$0 = 0.0, $i$0$neg4$i = 0, $i$02$i = 0, $s$0$lcssa$i = 0, $s$03$i = 0, $s$1$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy1 = sp + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp;
 $2 = HEAP32[$_x >> 2] | 0;
 $4 = HEAP32[$_x + 4 >> 2] | 0;
 HEAP32[$0 >> 2] = $2;
 HEAP32[$0 + 4 >> 2] = $4;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 $6 = +_cargf($$byval_copy1);
 HEAP32[$1 >> 2] = $2;
 HEAP32[$1 + 4 >> 2] = $4;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 $8 = +_cargf($$byval_copy1);
 $10 = $_q + 104 | 0;
 $12 = $8 - +HEAPF32[$10 >> 2];
 HEAPF32[$10 >> 2] = $6;
 $14 = $12 - +HEAPF32[$_q + 100 >> 2];
 $15 = $14;
 if ($15 > 3.141592653589793) $d_theta$0 = $15 + -6.283185307179586; else if ($15 < -3.141592653589793) $d_theta$0 = $15 + 6.283185307179586; else $d_theta$0 = $14;
 $23 = HEAP32[$_q + 4 >> 2] | 0;
 if (!$23) {
  $$0$lcssa$i = $d_theta$0;
  $s$0$lcssa$i = 0;
 } else {
  $25 = $23 + -1 | 0;
  $$01$i = $d_theta$0;
  $i$0$neg4$i = 0;
  $i$02$i = 0;
  $s$03$i = 0;
  while (1) {
   $26 = $s$03$i << 1;
   if ($$01$i > 0.0) {
    $$1$i = $$01$i - +HEAPF32[$_q + 12 + ($i$0$neg4$i + $25 << 2) >> 2];
    $s$1$i = $26 | 1;
   } else {
    $$1$i = $$01$i + +HEAPF32[$_q + 12 + ($i$0$neg4$i + $25 << 2) >> 2];
    $s$1$i = $26;
   }
   $37 = $i$02$i + 1 | 0;
   if (($37 | 0) == ($23 | 0)) {
    $$0$lcssa$i = $$1$i;
    $s$0$lcssa$i = $s$1$i;
    break;
   } else {
    $$01$i = $$1$i;
    $i$0$neg4$i = ~$i$02$i;
    $i$02$i = $37;
    $s$03$i = $s$1$i;
   }
  }
 }
 HEAP32[$_sym_out >> 2] = _gray_encode($s$0$lcssa$i) | 0;
 $39 = $6 - $$0$lcssa$i;
 $41 = +Math_sin(+$39);
 HEAPF32[$_q + 92 >> 2] = +Math_cos(+$39) + $41 * 0.0;
 HEAPF32[$_q + 96 >> 2] = $41;
 HEAP32[$_q + 84 >> 2] = $2;
 HEAP32[$_q + 88 >> 2] = $4;
 STACKTOP = sp;
 return;
}

function _strbuffer_append_bytes($strbuff, $data, $size) {
 $strbuff = $strbuff | 0;
 $data = $data | 0;
 $size = $size | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $36 = 0, $45 = 0, $73 = 0, $82 = 0, $new_size = 0, $new_value = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 20 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $new_size = sp + 4 | 0;
 $new_value = sp;
 HEAP32[$1 >> 2] = $strbuff;
 HEAP32[$2 >> 2] = $data;
 HEAP32[$3 >> 2] = $size;
 do if ((HEAP32[$3 >> 2] | 0) >>> 0 >= ((HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] | 0) - (HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) | 0) >>> 0) {
  if (!((HEAP32[$3 >> 2] | 0) >>> 0 > 4294967294 ? 1 : (HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] | 0) >>> 0 > 2147483647)) if ((HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) >>> 0 <= (-2 - (HEAP32[$3 >> 2] | 0) | 0) >>> 0) {
   $36 = HEAP32[$1 >> 2] | 0;
   if (HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] << 1 >>> 0 > ((HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[$3 >> 2] | 0) + 1 | 0) >>> 0) $45 = HEAP32[$36 + 8 >> 2] << 1; else $45 = (HEAP32[$36 + 4 >> 2] | 0) + (HEAP32[$3 >> 2] | 0) + 1 | 0;
   HEAP32[$new_size >> 2] = $45;
   HEAP32[$new_value >> 2] = _jsonp_malloc(HEAP32[$new_size >> 2] | 0) | 0;
   if (HEAP32[$new_value >> 2] | 0) {
    _memcpy(HEAP32[$new_value >> 2] | 0, HEAP32[HEAP32[$1 >> 2] >> 2] | 0, HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) | 0;
    _jsonp_free(HEAP32[HEAP32[$1 >> 2] >> 2] | 0);
    HEAP32[HEAP32[$1 >> 2] >> 2] = HEAP32[$new_value >> 2];
    HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] = HEAP32[$new_size >> 2];
    break;
   }
   HEAP32[$0 >> 2] = -1;
   $82 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $82 | 0;
  }
  HEAP32[$0 >> 2] = -1;
  $82 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $82 | 0;
 } while (0);
 _memcpy((HEAP32[HEAP32[$1 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) | 0, HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
 $73 = (HEAP32[$1 >> 2] | 0) + 4 | 0;
 HEAP32[$73 >> 2] = (HEAP32[$73 >> 2] | 0) + (HEAP32[$3 >> 2] | 0);
 HEAP8[(HEAP32[HEAP32[$1 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) >> 0] = 0;
 HEAP32[$0 >> 2] = 0;
 $82 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $82 | 0;
}

function _modem_demodulate_qam($_q, $_x, $_sym_out) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 $_sym_out = $_sym_out | 0;
 var $$0$lcssa$i = 0.0, $$0$lcssa$i11 = 0.0, $$01$i = 0.0, $$01$i5 = 0.0, $$1$i = 0.0, $$1$i6 = 0.0, $0 = 0.0, $16 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $i$0$neg4$i = 0, $i$0$neg4$i2 = 0, $i$02$i = 0, $i$02$i4 = 0, $s$0$lcssa$i = 0, $s$0$lcssa$i10 = 0, $s$03$i = 0, $s$03$i3 = 0, $s$1$i = 0, $s$1$i7 = 0;
 $0 = +HEAPF32[$_x >> 2];
 $2 = HEAP32[$_q + 100 >> 2] | 0;
 if (!$2) {
  $$0$lcssa$i = $0;
  $s$0$lcssa$i = 0;
 } else {
  $4 = $2 + -1 | 0;
  $$01$i = $0;
  $i$0$neg4$i = 0;
  $i$02$i = 0;
  $s$03$i = 0;
  while (1) {
   $5 = $s$03$i << 1;
   if ($$01$i > 0.0) {
    $$1$i = $$01$i - +HEAPF32[$_q + 12 + ($i$0$neg4$i + $4 << 2) >> 2];
    $s$1$i = $5 | 1;
   } else {
    $$1$i = $$01$i + +HEAPF32[$_q + 12 + ($i$0$neg4$i + $4 << 2) >> 2];
    $s$1$i = $5;
   }
   $16 = $i$02$i + 1 | 0;
   if (($16 | 0) == ($2 | 0)) {
    $$0$lcssa$i = $$1$i;
    $s$0$lcssa$i = $s$1$i;
    break;
   } else {
    $$01$i = $$1$i;
    $i$0$neg4$i = ~$i$02$i;
    $i$02$i = $16;
    $s$03$i = $s$1$i;
   }
  }
 }
 $18 = +HEAPF32[$_x + 4 >> 2];
 $19 = $_q + 104 | 0;
 $20 = HEAP32[$19 >> 2] | 0;
 if (!$20) {
  $$0$lcssa$i11 = $18;
  $s$0$lcssa$i10 = 0;
 } else {
  $22 = $20 + -1 | 0;
  $$01$i5 = $18;
  $i$0$neg4$i2 = 0;
  $i$02$i4 = 0;
  $s$03$i3 = 0;
  while (1) {
   $23 = $s$03$i3 << 1;
   if ($$01$i5 > 0.0) {
    $$1$i6 = $$01$i5 - +HEAPF32[$_q + 12 + ($i$0$neg4$i2 + $22 << 2) >> 2];
    $s$1$i7 = $23 | 1;
   } else {
    $$1$i6 = $$01$i5 + +HEAPF32[$_q + 12 + ($i$0$neg4$i2 + $22 << 2) >> 2];
    $s$1$i7 = $23;
   }
   $34 = $i$02$i4 + 1 | 0;
   if (($34 | 0) == ($20 | 0)) {
    $$0$lcssa$i11 = $$1$i6;
    $s$0$lcssa$i10 = $s$1$i7;
    break;
   } else {
    $$01$i5 = $$1$i6;
    $i$0$neg4$i2 = ~$i$02$i4;
    $i$02$i4 = $34;
    $s$03$i3 = $s$1$i7;
   }
  }
 }
 $35 = _gray_encode($s$0$lcssa$i) | 0;
 $36 = _gray_encode($s$0$lcssa$i10) | 0;
 HEAP32[$_sym_out >> 2] = ($35 << HEAP32[$19 >> 2]) + $36;
 HEAPF32[$_q + 92 >> 2] = $0 - ($$0$lcssa$i + $$0$lcssa$i11 * 0.0);
 HEAPF32[$_q + 96 >> 2] = $18 - $$0$lcssa$i11;
 HEAPF32[$_q + 84 >> 2] = $0;
 HEAPF32[$_q + 88 >> 2] = $18;
 return;
}

function _ofdmframesync_S0_metrics($_q, $_G, $_s_hat) {
 $_q = $_q | 0;
 $_G = $_G | 0;
 $_s_hat = $_s_hat | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0.0, $15 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $26 = 0.0, $27 = 0.0, $3 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $4 = 0, $43 = 0, $6 = 0, $7 = 0, $8 = 0, $i$01 = 0, $s_hat$sroa$0$0$lcssa = 0.0, $s_hat$sroa$0$03 = 0.0, $s_hat$sroa$8$0$lcssa = 0.0, $s_hat$sroa$8$02 = 0.0, sp = 0, $i$01$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp;
 $4 = HEAP32[$_q >> 2] | 0;
 if (!$4) {
  $s_hat$sroa$0$0$lcssa = 0.0;
  $s_hat$sroa$8$0$lcssa = 0.0;
 } else {
  $6 = $1 + 4 | 0;
  $7 = $0 + 4 | 0;
  $8 = $2 + 4 | 0;
  $11 = $4;
  $i$01 = 0;
  $s_hat$sroa$0$03 = 0.0;
  $s_hat$sroa$8$02 = 0.0;
  while (1) {
   $i$01$looptemp = $i$01;
   $i$01 = $i$01 + 2 | 0;
   $10 = ($i$01 >>> 0) % ($11 >>> 0) | 0;
   $13 = +HEAPF32[$_G + ($10 << 3) >> 2];
   $15 = +HEAPF32[$_G + ($10 << 3) + 4 >> 2];
   $19 = HEAP32[$_G + ($i$01$looptemp << 3) + 4 >> 2] | 0;
   HEAP32[$1 >> 2] = HEAP32[$_G + ($i$01$looptemp << 3) >> 2];
   HEAP32[$6 >> 2] = $19;
   HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   _conjf($0, $$byval_copy);
   $20 = +HEAPF32[$0 >> 2];
   $21 = +HEAPF32[$7 >> 2];
   $26 = $13 * $20 - $15 * $21;
   $27 = $15 * $20 + $13 * $21;
   if (($26 != $26 | 0.0 != 0.0) & ($27 != $27 | 0.0 != 0.0)) {
    ___mulsc3($2, $13, $15, $20, $21);
    $33 = +HEAPF32[$2 >> 2];
    $35 = +HEAPF32[$8 >> 2];
   } else {
    $33 = $26;
    $35 = $27;
   }
   $32 = $s_hat$sroa$0$03 + $33;
   $34 = $s_hat$sroa$8$02 + $35;
   $11 = HEAP32[$_q >> 2] | 0;
   if ($i$01 >>> 0 >= $11 >>> 0) {
    $s_hat$sroa$0$0$lcssa = $32;
    $s_hat$sroa$8$0$lcssa = $34;
    break;
   } else {
    $s_hat$sroa$0$03 = $32;
    $s_hat$sroa$8$02 = $34;
   }
  }
 }
 ___divsc3($3, $s_hat$sroa$0$0$lcssa, $s_hat$sroa$8$0$lcssa, +((HEAP32[$_q + 28 >> 2] | 0) >>> 0), 0.0);
 $43 = HEAP32[$3 + 4 >> 2] | 0;
 HEAP32[$_s_hat >> 2] = HEAP32[$3 >> 2];
 HEAP32[$_s_hat + 4 >> 2] = $43;
 STACKTOP = sp;
 return;
}

function _fft_destroy_plan($_q) {
 $_q = $_q | 0;
 var $16 = 0, $21 = 0, $5 = 0, $7 = 0, $8 = 0;
 switch (HEAP32[$_q + 20 >> 2] | 0) {
 case -1:
 case 1:
  {
   switch (HEAP32[$_q + 24 >> 2] | 0) {
   case 5:
    {
     $5 = HEAP32[$_q + 40 >> 2] | 0;
     if ($5 | 0) _free($5);
     $7 = $_q + 44 | 0;
     $8 = HEAP32[$7 >> 2] | 0;
     if ($8 | 0) {
      if (!(HEAP32[$_q >> 2] | 0)) $21 = $8; else {
       _dotprod_cccf_destroy(HEAP32[$8 >> 2] | 0);
       if ((HEAP32[$_q >> 2] | 0) >>> 0 > 1) {
        $16 = 1;
        do {
         _dotprod_cccf_destroy(HEAP32[(HEAP32[$7 >> 2] | 0) + ($16 << 2) >> 2] | 0);
         $16 = $16 + 1 | 0;
        } while ($16 >>> 0 < (HEAP32[$_q >> 2] | 0) >>> 0);
       }
       $21 = HEAP32[$7 >> 2] | 0;
      }
      _free($21);
     }
     _free($_q);
     return;
    }
   case 1:
    {
     _free(HEAP32[$_q + 44 >> 2] | 0);
     _free(HEAP32[$_q + 48 >> 2] | 0);
     _free($_q);
     return;
    }
   case 2:
    {
     _fft_destroy_plan(HEAP32[$_q + 64 >> 2] | 0);
     _fft_destroy_plan(HEAP32[$_q + 68 >> 2] | 0);
     _free(HEAP32[$_q + 52 >> 2] | 0);
     _free(HEAP32[$_q + 56 >> 2] | 0);
     _free(HEAP32[$_q + 48 >> 2] | 0);
     _free(HEAP32[$_q + 60 >> 2] | 0);
     _free($_q);
     return;
    }
   case 3:
    {
     _free(HEAP32[$_q + 40 >> 2] | 0);
     _free(HEAP32[$_q + 44 >> 2] | 0);
     _free(HEAP32[$_q + 48 >> 2] | 0);
     _free(HEAP32[$_q + 52 >> 2] | 0);
     _fft_destroy_plan(HEAP32[$_q + 56 >> 2] | 0);
     _fft_destroy_plan(HEAP32[$_q + 60 >> 2] | 0);
     _free($_q);
     return;
    }
   case 4:
    {
     _free(HEAP32[$_q + 44 >> 2] | 0);
     _free(HEAP32[$_q + 48 >> 2] | 0);
     _free(HEAP32[$_q + 52 >> 2] | 0);
     _free(HEAP32[$_q + 56 >> 2] | 0);
     _fft_destroy_plan(HEAP32[$_q + 60 >> 2] | 0);
     _fft_destroy_plan(HEAP32[$_q + 64 >> 2] | 0);
     _free($_q);
     return;
    }
   default:
    {
     _fwrite(gb + 40606 | 0, 54, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
     _exit(1);
    }
   }
   break;
  }
 case 23:
 case 22:
 case 21:
 case 20:
 case 13:
 case 12:
 case 11:
 case 10:
  {
   _free($_q);
   return;
  }
 case 31:
 case 30:
  return;
 default:
  {
   _fwrite(gb + 40661 | 0, 52, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
   _exit(1);
  }
 }
}

function ___divsc3($agg$result, $__a, $__b, $__c, $__d) {
 $agg$result = $agg$result | 0;
 $__a = +$__a;
 $__b = +$__b;
 $__c = +$__c;
 $__d = +$__d;
 var $$0 = 0.0, $$02 = 0.0, $10 = 0.0, $14 = 0.0, $19 = 0, $20 = 0.0, $25 = 0.0, $3 = 0.0, $31 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $47 = 0.0, $49 = 0.0, $5 = 0.0, $69 = 0.0, $73 = 0.0, $8 = 0, $9 = 0, $__ilogbw$0 = 0, $z$sroa$0$0 = 0.0, $z$sroa$8$0 = 0.0;
 $3 = +_logbf(+_fmaxf(+Math_abs(+$__c), +Math_abs(+$__d)));
 $5 = +Math_abs(+$3);
 if ($3 == $3 & 0.0 == 0.0 & $5 != inf) {
  $8 = ~~$3;
  $9 = 0 - $8 | 0;
  $10 = +_scalbnf($__c, $9);
  $$0 = +_scalbnf($__d, $9);
  $$02 = $10;
  $__ilogbw$0 = $8;
 } else {
  $$0 = $__d;
  $$02 = $__c;
  $__ilogbw$0 = 0;
 }
 $14 = $$02 * $$02 + $$0 * $$0;
 $19 = 0 - $__ilogbw$0 | 0;
 $20 = +_scalbnf(($$02 * $__a + $$0 * $__b) / $14, $19);
 $25 = +_scalbnf(($$02 * $__b - $$0 * $__a) / $14, $19);
 do if (($20 != $20 | 0.0 != 0.0) & ($25 != $25 | 0.0 != 0.0)) {
  if ($14 == 0.0) if (!(($__a != $__a | 0.0 != 0.0) & ($__b != $__b | 0.0 != 0.0))) {
   $31 = +_copysignf(inf, $$02);
   $z$sroa$0$0 = $31 * $__a;
   $z$sroa$8$0 = $31 * $__b;
   break;
  }
  $34 = +Math_abs(+$__a);
  $35 = $34 == inf;
  $36 = +Math_abs(+$__b);
  $37 = $36 == inf;
  if ($35 | $37) if ($$02 == $$02 & 0.0 == 0.0 & +Math_abs(+$$02) != inf) if ($$0 == $$0 & 0.0 == 0.0 & +Math_abs(+$$0) != inf) {
   $47 = +_copysignf(+($35 & 1), $__a);
   $49 = +_copysignf(+($37 & 1), $__b);
   $z$sroa$0$0 = ($$02 * $47 + $$0 * $49) * inf;
   $z$sroa$8$0 = ($$02 * $49 - $$0 * $47) * inf;
   break;
  }
  if ($3 > 0.0 & $5 == inf) if ($__a == $__a & 0.0 == 0.0 & $34 != inf) if ($__b == $__b & 0.0 == 0.0 & $36 != inf) {
   $69 = +_copysignf(+(+Math_abs(+$$02) == inf & 1), $$02);
   $73 = +_copysignf(+(+Math_abs(+$$0) == inf & 1), $$0);
   $z$sroa$0$0 = ($69 * $__a + $73 * $__b) * 0.0;
   $z$sroa$8$0 = ($69 * $__b - $73 * $__a) * 0.0;
  } else {
   $z$sroa$0$0 = $20;
   $z$sroa$8$0 = $25;
  } else {
   $z$sroa$0$0 = $20;
   $z$sroa$8$0 = $25;
  } else {
   $z$sroa$0$0 = $20;
   $z$sroa$8$0 = $25;
  }
 } else {
  $z$sroa$0$0 = $20;
  $z$sroa$8$0 = $25;
 } while (0);
 HEAPF32[$agg$result >> 2] = $z$sroa$0$0;
 HEAPF32[$agg$result + 4 >> 2] = $z$sroa$8$0;
 return;
}

function _flexframegen_generate_symbol($agg$result, $_q) {
 $agg$result = $agg$result | 0;
 $_q = $_q | 0;
 var $0 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $23 = 0, $25 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $6 = 0, $7 = 0, $8 = 0;
 $0 = $_q + 112 | 0;
 if (!(HEAP32[$0 >> 2] | 0)) {
  HEAPF32[$agg$result >> 2] = 0.0;
  HEAPF32[$agg$result + 4 >> 2] = 0.0;
  return;
 }
 $4 = $_q + 120 | 0;
 switch (HEAP32[$4 >> 2] | 0) {
 case 0:
  {
   $6 = $_q + 104 | 0;
   $7 = HEAP32[$6 >> 2] | 0;
   $8 = $7 + 1 | 0;
   HEAP32[$6 >> 2] = $8;
   $10 = HEAP32[$_q + 48 >> 2] | 0;
   $12 = HEAP32[$10 + ($7 << 3) >> 2] | 0;
   $14 = HEAP32[$10 + ($7 << 3) + 4 >> 2] | 0;
   if (($8 | 0) == 64) {
    HEAP32[$6 >> 2] = 0;
    HEAP32[$4 >> 2] = 1;
   }
   HEAP32[$agg$result >> 2] = $12;
   HEAP32[$agg$result + 4 >> 2] = $14;
   return;
  }
 case 1:
  {
   $17 = $_q + 104 | 0;
   $18 = HEAP32[$17 >> 2] | 0;
   $19 = $18 + 1 | 0;
   HEAP32[$17 >> 2] = $19;
   $21 = HEAP32[$_q + 84 >> 2] | 0;
   $23 = HEAP32[$21 + ($18 << 3) >> 2] | 0;
   $25 = HEAP32[$21 + ($18 << 3) + 4 >> 2] | 0;
   if (($19 | 0) == (HEAP32[$_q + 80 >> 2] | 0)) {
    HEAP32[$17 >> 2] = 0;
    HEAP32[$4 >> 2] = 2;
   }
   HEAP32[$agg$result >> 2] = $23;
   HEAP32[$agg$result + 4 >> 2] = $25;
   return;
  }
 case 2:
  {
   $30 = $_q + 104 | 0;
   $31 = HEAP32[$30 >> 2] | 0;
   $32 = $31 + 1 | 0;
   HEAP32[$30 >> 2] = $32;
   $34 = HEAP32[$_q + 100 >> 2] | 0;
   $36 = HEAP32[$34 + ($31 << 3) >> 2] | 0;
   $38 = HEAP32[$34 + ($31 << 3) + 4 >> 2] | 0;
   if (($32 | 0) == (HEAP32[$_q + 96 >> 2] | 0)) {
    HEAP32[$30 >> 2] = 0;
    HEAP32[$4 >> 2] = 3;
   }
   HEAP32[$agg$result >> 2] = $36;
   HEAP32[$agg$result + 4 >> 2] = $38;
   return;
  }
 case 3:
  {
   $43 = $_q + 104 | 0;
   $45 = (HEAP32[$43 >> 2] | 0) + 1 | 0;
   HEAP32[$43 >> 2] = $45;
   if (($45 | 0) == (HEAP32[$_q + 4 >> 2] << 1 | 0)) {
    HEAP32[$43 >> 2] = 0;
    HEAP32[$_q + 116 >> 2] = 1;
    HEAP32[$0 >> 2] = 0;
   }
   HEAP32[$agg$result >> 2] = 0;
   HEAP32[$agg$result + 4 >> 2] = 0;
   return;
  }
 default:
  {
   _fwrite(gb + 25917 | 0, 74, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
   _exit(1);
  }
 }
}

function _firpfb_crcf_create($_M, $_h, $_h_len) {
 $_M = $_M | 0;
 $_h = $_h | 0;
 $_h_len = $_h_len | 0;
 var $1 = 0, $10 = 0, $11 = 0, $13 = 0, $15 = 0, $25 = 0, $3 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $8 = 0, $i$02 = 0, $i$02$us = 0, $n$01$us = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 if (!$_M) {
  $1 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = gb + 20371;
  _fprintf($1, gb + 20983 | 0, $vararg_buffer) | 0;
  _exit(1);
 }
 if (!$_h_len) {
  $3 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer1 >> 2] = gb + 20371;
  _fprintf($3, gb + 21055 | 0, $vararg_buffer1) | 0;
  _exit(1);
 }
 $4 = _malloc(28) | 0;
 $5 = $4 + 12 | 0;
 HEAP32[$5 >> 2] = $_M;
 HEAP32[$4 + 4 >> 2] = $_h_len;
 $8 = _malloc($_M << 2) | 0;
 HEAP32[$4 + 20 >> 2] = $8;
 $10 = ($_h_len >>> 0) / ($_M >>> 0) | 0;
 $11 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($10 << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $13 = $10 + -1 | 0;
 if (!$10) {
  $i$02 = 0;
  do {
   HEAP32[$8 + ($i$02 << 2) >> 2] = _dotprod_crcf_create($11, 0) | 0;
   $i$02 = $i$02 + 1 | 0;
  } while ($i$02 >>> 0 < $_M >>> 0);
  $31 = $4 + 8 | 0;
  HEAP32[$31 >> 2] = $10;
  $32 = _windowcf_create($10) | 0;
  $33 = $4 + 16 | 0;
  HEAP32[$33 >> 2] = $32;
  $34 = $4 + 24 | 0;
  HEAPF32[$34 >> 2] = 1.0;
  _windowcf_clear($32);
  STACKTOP = sp;
  return $4 | 0;
 } else {
  $15 = $_M;
  $i$02$us = 0;
 }
 while (1) {
  $n$01$us = 0;
  do {
   HEAP32[$11 + ($13 - $n$01$us << 2) >> 2] = HEAP32[$_h + ((Math_imul($15, $n$01$us) | 0) + $i$02$us << 2) >> 2];
   $n$01$us = $n$01$us + 1 | 0;
  } while ($10 >>> 0 > $n$01$us >>> 0);
  HEAP32[$8 + ($i$02$us << 2) >> 2] = _dotprod_crcf_create($11, $10) | 0;
  $25 = $i$02$us + 1 | 0;
  if ($25 >>> 0 >= $_M >>> 0) break;
  $15 = HEAP32[$5 >> 2] | 0;
  $i$02$us = $25;
 }
 $31 = $4 + 8 | 0;
 HEAP32[$31 >> 2] = $10;
 $32 = _windowcf_create($10) | 0;
 $33 = $4 + 16 | 0;
 HEAP32[$33 >> 2] = $32;
 $34 = $4 + 24 | 0;
 HEAPF32[$34 >> 2] = 1.0;
 _windowcf_clear($32);
 STACKTOP = sp;
 return $4 | 0;
}

function _firpfb_rrrf_create($_M, $_h, $_h_len) {
 $_M = $_M | 0;
 $_h = $_h | 0;
 $_h_len = $_h_len | 0;
 var $1 = 0, $10 = 0, $11 = 0, $13 = 0, $15 = 0, $25 = 0, $3 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $8 = 0, $i$02 = 0, $i$02$us = 0, $n$01$us = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 if (!$_M) {
  $1 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = gb + 19626;
  _fprintf($1, gb + 20983 | 0, $vararg_buffer) | 0;
  _exit(1);
 }
 if (!$_h_len) {
  $3 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer1 >> 2] = gb + 19626;
  _fprintf($3, gb + 21055 | 0, $vararg_buffer1) | 0;
  _exit(1);
 }
 $4 = _malloc(28) | 0;
 $5 = $4 + 12 | 0;
 HEAP32[$5 >> 2] = $_M;
 HEAP32[$4 + 4 >> 2] = $_h_len;
 $8 = _malloc($_M << 2) | 0;
 HEAP32[$4 + 20 >> 2] = $8;
 $10 = ($_h_len >>> 0) / ($_M >>> 0) | 0;
 $11 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($10 << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $13 = $10 + -1 | 0;
 if (!$10) {
  $i$02 = 0;
  do {
   HEAP32[$8 + ($i$02 << 2) >> 2] = _dotprod_rrrf_create($11, 0) | 0;
   $i$02 = $i$02 + 1 | 0;
  } while ($i$02 >>> 0 < $_M >>> 0);
  $31 = $4 + 8 | 0;
  HEAP32[$31 >> 2] = $10;
  $32 = _windowf_create($10) | 0;
  $33 = $4 + 16 | 0;
  HEAP32[$33 >> 2] = $32;
  $34 = $4 + 24 | 0;
  HEAPF32[$34 >> 2] = 1.0;
  _windowf_clear($32);
  STACKTOP = sp;
  return $4 | 0;
 } else {
  $15 = $_M;
  $i$02$us = 0;
 }
 while (1) {
  $n$01$us = 0;
  do {
   HEAP32[$11 + ($13 - $n$01$us << 2) >> 2] = HEAP32[$_h + ((Math_imul($15, $n$01$us) | 0) + $i$02$us << 2) >> 2];
   $n$01$us = $n$01$us + 1 | 0;
  } while ($10 >>> 0 > $n$01$us >>> 0);
  HEAP32[$8 + ($i$02$us << 2) >> 2] = _dotprod_rrrf_create($11, $10) | 0;
  $25 = $i$02$us + 1 | 0;
  if ($25 >>> 0 >= $_M >>> 0) break;
  $15 = HEAP32[$5 >> 2] | 0;
  $i$02$us = $25;
 }
 $31 = $4 + 8 | 0;
 HEAP32[$31 >> 2] = $10;
 $32 = _windowf_create($10) | 0;
 $33 = $4 + 16 | 0;
 HEAP32[$33 >> 2] = $32;
 $34 = $4 + 24 | 0;
 HEAPF32[$34 >> 2] = 1.0;
 _windowf_clear($32);
 STACKTOP = sp;
 return $4 | 0;
}

function _fec_secded7264_encode($_q, $_dec_msg_len, $_msg_dec, $_msg_enc) {
 $_q = $_q | 0;
 $_dec_msg_len = $_dec_msg_len | 0;
 $_msg_dec = $_msg_dec | 0;
 $_msg_enc = $_msg_enc | 0;
 var $0 = 0, $1 = 0, $29 = 0, $3 = 0, $30 = 0, $33 = 0, $4 = 0, $40 = 0, $41 = 0, $i$0$lcssa = 0, $i$07 = 0, $i$1 = 0, $j$0$lcssa = 0, $j$06 = 0, $j$1 = 0, $n$11 = 0, $v = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $v = sp;
 $0 = $_dec_msg_len & 7;
 $1 = $_dec_msg_len - $0 | 0;
 if (($0 | 0) == ($_dec_msg_len | 0)) {
  $i$0$lcssa = 0;
  $j$0$lcssa = 0;
 } else {
  $i$07 = 0;
  $j$06 = 0;
  while (1) {
   $3 = $_msg_dec + $i$07 | 0;
   $4 = $_msg_enc + $j$06 | 0;
   HEAP8[$4 >> 0] = _fec_secded7264_compute_parity($3) | 0;
   HEAP8[$4 + 1 >> 0] = HEAP8[$3 >> 0] | 0;
   HEAP8[$4 + 2 >> 0] = HEAP8[$3 + 1 >> 0] | 0;
   HEAP8[$4 + 3 >> 0] = HEAP8[$3 + 2 >> 0] | 0;
   HEAP8[$4 + 4 >> 0] = HEAP8[$3 + 3 >> 0] | 0;
   HEAP8[$4 + 5 >> 0] = HEAP8[$3 + 4 >> 0] | 0;
   HEAP8[$4 + 6 >> 0] = HEAP8[$3 + 5 >> 0] | 0;
   HEAP8[$4 + 7 >> 0] = HEAP8[$3 + 6 >> 0] | 0;
   HEAP8[$4 + 8 >> 0] = HEAP8[$3 + 7 >> 0] | 0;
   $29 = $j$06 + 9 | 0;
   $30 = $i$07 + 8 | 0;
   if ($30 >>> 0 < $1 >>> 0) {
    $i$07 = $30;
    $j$06 = $29;
   } else {
    $i$0$lcssa = $30;
    $j$0$lcssa = $29;
    break;
   }
  }
 }
 if (!$0) {
  $i$1 = $i$0$lcssa;
  $j$1 = $j$0$lcssa;
 } else {
  $33 = $v;
  HEAP32[$33 >> 2] = 0;
  HEAP32[$33 + 4 >> 2] = 0;
  _memcpy($v | 0, $_msg_dec + $i$0$lcssa | 0, $_dec_msg_len & 7 | 0) | 0;
  HEAP8[$_msg_enc + $j$0$lcssa >> 0] = _fec_secded7264_compute_parity($v) | 0;
  $40 = $j$0$lcssa + 1 | 0;
  $41 = $_dec_msg_len & 7;
  $n$11 = 0;
  do {
   HEAP8[$_msg_enc + ($40 + $n$11) >> 0] = HEAP8[$_msg_dec + ($n$11 + $i$0$lcssa) >> 0] | 0;
   $n$11 = $n$11 + 1 | 0;
  } while (($n$11 | 0) != ($41 | 0));
  $i$1 = $i$0$lcssa | $0;
  $j$1 = $0 + 1 + $j$0$lcssa | 0;
 }
 if (($j$1 | 0) != (_fec_get_enc_msg_length(10, $_dec_msg_len) | 0)) ___assert_fail(gb + 19471 | 0, gb + 19535 | 0, 286, gb + 19564 | 0);
 if (($i$1 | 0) == ($_dec_msg_len | 0)) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(gb + 19586 | 0, gb + 19535 | 0, 287, gb + 19564 | 0);
}

function _fec_conv_create($_fs) {
 $_fs = $_fs | 0;
 var $0 = 0, $40 = 0, $41 = 0, $42 = 0;
 $0 = _malloc(148) | 0;
 HEAP32[$0 >> 2] = $_fs;
 HEAPF32[$0 + 4 >> 2] = +_fec_get_rate($_fs);
 HEAP32[$0 + 136 >> 2] = fb + 1;
 HEAP32[$0 + 140 >> 2] = fb + 2;
 HEAP32[$0 + 144 >> 2] = fb + 3;
 switch (HEAP32[$0 >> 2] | 0) {
 case 11:
  {
   HEAP32[$0 + 28 >> 2] = 2;
   HEAP32[$0 + 32 >> 2] = 7;
   HEAP32[$0 + 24 >> 2] = gb + 280;
   HEAP32[$0 + 44 >> 2] = fb + 3;
   HEAP32[$0 + 48 >> 2] = fb + 1;
   HEAP32[$0 + 52 >> 2] = fb + 5;
   HEAP32[$0 + 56 >> 2] = fb + 1;
   HEAP32[$0 + 60 >> 2] = fb + 2;
   $40 = $0 + 8 | 0;
   HEAP32[$40 >> 2] = 0;
   $41 = $0 + 16 | 0;
   HEAP32[$41 >> 2] = 0;
   $42 = $0 + 20 | 0;
   HEAP32[$42 >> 2] = 0;
   return $0 | 0;
  }
 case 12:
  {
   HEAP32[$0 + 28 >> 2] = 2;
   HEAP32[$0 + 32 >> 2] = 9;
   HEAP32[$0 + 24 >> 2] = gb + 288;
   HEAP32[$0 + 44 >> 2] = fb + 4;
   HEAP32[$0 + 48 >> 2] = fb + 2;
   HEAP32[$0 + 52 >> 2] = fb + 6;
   HEAP32[$0 + 56 >> 2] = fb + 2;
   HEAP32[$0 + 60 >> 2] = fb + 3;
   $40 = $0 + 8 | 0;
   HEAP32[$40 >> 2] = 0;
   $41 = $0 + 16 | 0;
   HEAP32[$41 >> 2] = 0;
   $42 = $0 + 20 | 0;
   HEAP32[$42 >> 2] = 0;
   return $0 | 0;
  }
 case 13:
  {
   HEAP32[$0 + 28 >> 2] = 3;
   HEAP32[$0 + 32 >> 2] = 9;
   HEAP32[$0 + 24 >> 2] = gb + 296;
   HEAP32[$0 + 44 >> 2] = fb + 5;
   HEAP32[$0 + 48 >> 2] = fb + 3;
   HEAP32[$0 + 52 >> 2] = fb + 7;
   HEAP32[$0 + 56 >> 2] = fb + 3;
   HEAP32[$0 + 60 >> 2] = fb + 4;
   $40 = $0 + 8 | 0;
   HEAP32[$40 >> 2] = 0;
   $41 = $0 + 16 | 0;
   HEAP32[$41 >> 2] = 0;
   $42 = $0 + 20 | 0;
   HEAP32[$42 >> 2] = 0;
   return $0 | 0;
  }
 case 14:
  {
   HEAP32[$0 + 28 >> 2] = 6;
   HEAP32[$0 + 32 >> 2] = 15;
   HEAP32[$0 + 24 >> 2] = gb + 308;
   HEAP32[$0 + 44 >> 2] = fb + 6;
   HEAP32[$0 + 48 >> 2] = fb + 4;
   HEAP32[$0 + 52 >> 2] = fb + 8;
   HEAP32[$0 + 56 >> 2] = fb + 4;
   HEAP32[$0 + 60 >> 2] = fb + 5;
   $40 = $0 + 8 | 0;
   HEAP32[$40 >> 2] = 0;
   $41 = $0 + 16 | 0;
   HEAP32[$41 >> 2] = 0;
   $42 = $0 + 20 | 0;
   HEAP32[$42 >> 2] = 0;
   return $0 | 0;
  }
 default:
  {
   _fwrite(gb + 13152 | 0, 39, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
   _exit(1);
  }
 }
 return 0;
}

function _iirfilt_crcf_create_sos($_B, $_A, $_nsos) {
 $_B = $_B | 0;
 $_A = $_A | 0;
 $_nsos = $_nsos | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $6 = 0, $at = 0, $bt = 0, $i$02 = 0, $scevgep = 0, $scevgep4 = 0, $vararg_buffer = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $at = sp + 16 | 0;
 $bt = sp + 4 | 0;
 if (!$_nsos) {
  $1 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = gb + 20371;
  _fprintf($1, gb + 21971 | 0, $vararg_buffer) | 0;
  _exit(1);
 }
 $2 = _malloc(36) | 0;
 HEAP32[$2 + 24 >> 2] = 1;
 HEAP32[$2 + 32 >> 2] = $_nsos;
 $6 = _malloc($_nsos << 2) | 0;
 HEAP32[$2 + 28 >> 2] = $6;
 HEAP32[$2 + 12 >> 2] = $_nsos << 1;
 $10 = $_nsos * 12 | 0;
 $11 = _malloc($10) | 0;
 HEAP32[$2 >> 2] = $11;
 $12 = _malloc($10) | 0;
 HEAP32[$2 + 4 >> 2] = $12;
 _memcpy($11 | 0, $_B | 0, $10 | 0) | 0;
 _memcpy($12 | 0, $_A | 0, $10 | 0) | 0;
 $14 = $bt + 4 | 0;
 $15 = $bt + 8 | 0;
 $16 = $at + 4 | 0;
 $17 = $at + 8 | 0;
 $i$02 = 0;
 do {
  $18 = $i$02 * 3 | 0;
  $scevgep4 = $11 + ($18 << 2) | 0;
  $scevgep = $12 + ($18 << 2) | 0;
  HEAP32[$at >> 2] = HEAP32[$scevgep >> 2];
  HEAP32[$at + 4 >> 2] = HEAP32[$scevgep + 4 >> 2];
  HEAP32[$at + 8 >> 2] = HEAP32[$scevgep + 8 >> 2];
  HEAP32[$bt >> 2] = HEAP32[$scevgep4 >> 2];
  HEAP32[$bt + 4 >> 2] = HEAP32[$scevgep4 + 4 >> 2];
  HEAP32[$bt + 8 >> 2] = HEAP32[$scevgep4 + 8 >> 2];
  $19 = _malloc(96) | 0;
  $20 = +HEAPF32[$at >> 2];
  HEAPF32[$19 >> 2] = +HEAPF32[$bt >> 2] / $20;
  HEAPF32[$19 + 4 >> 2] = +HEAPF32[$14 >> 2] / $20;
  HEAPF32[$19 + 8 >> 2] = +HEAPF32[$15 >> 2] / $20;
  HEAPF32[$19 + 12 >> 2] = $20 / $20;
  HEAPF32[$19 + 16 >> 2] = +HEAPF32[$16 >> 2] / $20;
  HEAPF32[$19 + 20 >> 2] = +HEAPF32[$17 >> 2] / $20;
  dest = $19 + 24 | 0;
  stop = dest + 72 | 0;
  do {
   HEAP32[dest >> 2] = 0;
   dest = dest + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP32[$6 + ($i$02 << 2) >> 2] = $19;
  $i$02 = $i$02 + 1 | 0;
 } while ($i$02 >>> 0 < $_nsos >>> 0);
 STACKTOP = sp;
 return $2 | 0;
}

function _qdetector_cccf_create($_s, $_s_len) {
 $_s = $_s | 0;
 $_s_len = $_s_len | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $3 = 0, $30 = 0, $32 = 0, $4 = 0, $43 = 0, $5 = 0, $53 = 0, $60 = 0;
 if (!$_s_len) {
  _fwrite(gb + 29796 | 0, 63, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 } else {
  $2 = _malloc(96) | 0;
  HEAP32[$2 >> 2] = $_s_len;
  $3 = $_s_len << 3;
  $4 = _malloc($3) | 0;
  $5 = $2 + 4 | 0;
  HEAP32[$5 >> 2] = $4;
  _memcpy($4 | 0, $_s | 0, $3 | 0) | 0;
  HEAPF32[$2 + 12 >> 2] = +_liquid_sumsqcf($4, $_s_len);
  $11 = 1 << (_liquid_nextpow2(HEAP32[$2 >> 2] << 1) | 0);
  $12 = $2 + 32 | 0;
  HEAP32[$12 >> 2] = $11;
  $13 = $11 << 3;
  $14 = _malloc($13) | 0;
  $15 = $2 + 16 | 0;
  HEAP32[$15 >> 2] = $14;
  $16 = _malloc($13) | 0;
  $17 = $2 + 20 | 0;
  HEAP32[$17 >> 2] = $16;
  $19 = $2 + 24 | 0;
  HEAP32[$19 >> 2] = _malloc($13) | 0;
  $21 = $2 + 28 | 0;
  HEAP32[$21 >> 2] = _malloc($13) | 0;
  $23 = $2 + 36 | 0;
  HEAP32[$23 >> 2] = _fft_create_plan($11, $14, $16, 1, 0) | 0;
  HEAP32[$2 + 40 >> 2] = _fft_create_plan(HEAP32[$12 >> 2] | 0, HEAP32[$19 >> 2] | 0, HEAP32[$21 >> 2] | 0, -1, 0) | 0;
  $30 = HEAP32[$12 >> 2] << 3;
  $32 = $2 + 8 | 0;
  HEAP32[$32 >> 2] = _malloc($30) | 0;
  _memset(HEAP32[$15 >> 2] | 0, 0, $30 | 0) | 0;
  _memmove(HEAP32[$15 >> 2] | 0, HEAP32[$5 >> 2] | 0, HEAP32[$2 >> 2] << 3 | 0) | 0;
  _fft_execute(HEAP32[$23 >> 2] | 0);
  _memmove(HEAP32[$32 >> 2] | 0, HEAP32[$17 >> 2] | 0, HEAP32[$12 >> 2] << 3 | 0) | 0;
  $43 = HEAP32[$12 >> 2] | 0;
  HEAP32[$2 + 44 >> 2] = $43 >>> 1;
  HEAP32[$2 + 56 >> 2] = 0;
  HEAPF32[$2 + 60 >> 2] = 0.0;
  HEAPF32[$2 + 64 >> 2] = 0.0;
  HEAP32[$2 + 88 >> 2] = 0;
  HEAP32[$2 + 92 >> 2] = 0;
  _memset(HEAP32[$15 >> 2] | 0, 0, $43 << 3 | 0) | 0;
  $53 = $2 + 72 | 0;
  HEAP32[$53 >> 2] = 0;
  HEAP32[$53 + 4 >> 2] = 0;
  HEAP32[$53 + 8 >> 2] = 0;
  HEAP32[$53 + 12 >> 2] = 0;
  HEAPF32[$2 + 48 >> 2] = .5;
  $60 = ~~(+((HEAP32[$12 >> 2] | 0) >>> 0) * .30000001192092896 / 6.283185307179586);
  HEAP32[$2 + 52 >> 2] = ($60 | 0) < 0 ? 0 : $60;
  return $2 | 0;
 }
 return 0;
}

function _fpoly_bessel_roots_orchard_recursion($_n, $_x, $_y, $_x_hat, $_y_hat) {
 $_n = $_n | 0;
 $_x = +$_x;
 $_y = +$_y;
 $_x_hat = $_x_hat | 0;
 $_y_hat = $_y_hat | 0;
 var $$lcssa = 0.0, $$lcssa23 = 0.0, $$u1$0 = 0.0, $$u1$0$lcssa = 0.0, $$v1$0 = 0.0, $$v1$0$lcssa = 0.0, $12 = 0.0, $17 = 0.0, $22 = 0.0, $23 = 0, $29 = 0.0, $33 = 0.0, $36 = 0.0, $48 = 0.0, $49 = 0.0, $7 = 0.0, $9 = 0.0, $i$05 = 0, $k$014 = 0, $u0$07 = 0.0, $u1$06 = 0.0, $v0$03 = 0.0, $v1$04 = 0.0, $x$0$lcssa$ph18 = 0.0, $x$012 = 0.0, $y$0$lcssa$ph17 = 0.0, $y$013 = 0.0, label = 0;
 if ($_n >>> 0 < 2) {
  _fwrite(gb + 40773 | 0, 53, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 $k$014 = 0;
 $x$012 = $_x;
 $y$013 = $_y;
 while (1) {
  $7 = $x$012 * $x$012 - $y$013 * $y$013;
  $9 = $x$012 * 2.0 * $y$013;
  $i$05 = 2;
  $u0$07 = 1.0;
  $u1$06 = $x$012 + 1.0;
  $v0$03 = 0.0;
  $v1$04 = $y$013;
  while (1) {
   $12 = +((($i$05 << 1) + -1 | 0) >>> 0);
   $17 = $u1$06 * $12 + $7 * $u0$07 - $9 * $v0$03;
   $22 = $9 * $u0$07 + ($7 * $v0$03 + $v1$04 * $12);
   $23 = $i$05 >>> 0 < $_n >>> 0;
   $$v1$0 = $23 ? $22 : $v1$04;
   $$u1$0 = $23 ? $17 : $u1$06;
   $i$05 = $i$05 + 1 | 0;
   if ($i$05 >>> 0 > $_n >>> 0) {
    $$lcssa = $17;
    $$lcssa23 = $22;
    $$u1$0$lcssa = $$u1$0;
    $$v1$0$lcssa = $$v1$0;
    break;
   } else {
    $u0$07 = $23 ? $u1$06 : $u0$07;
    $u1$06 = $$u1$0;
    $v0$03 = $23 ? $v1$04 : $v0$03;
    $v1$04 = $$v1$0;
   }
  }
  $29 = $y$013 * $$v1$0$lcssa + ($$lcssa - $x$012 * $$u1$0$lcssa);
  $33 = $$lcssa23 - $x$012 * $$v1$0$lcssa - $y$013 * $$u1$0$lcssa;
  $36 = $33 * $33 + $29 * $29;
  if ($36 == 0.0) {
   $x$0$lcssa$ph18 = $x$012;
   $y$0$lcssa$ph17 = $y$013;
   label = 8;
   break;
  }
  $48 = $x$012 + -($$lcssa23 * $33 + $$lcssa * $29) / $36;
  $49 = $y$013 + -($$lcssa23 * $29 - $$lcssa * $33) / $36;
  $k$014 = $k$014 + 1 | 0;
  if ($k$014 >>> 0 >= 50) {
   $x$0$lcssa$ph18 = $48;
   $y$0$lcssa$ph17 = $49;
   label = 8;
   break;
  } else {
   $x$012 = $48;
   $y$013 = $49;
  }
 }
 if ((label | 0) == 8) {
  HEAPF32[$_x_hat >> 2] = $x$0$lcssa$ph18;
  HEAPF32[$_y_hat >> 2] = $y$0$lcssa$ph17;
  return;
 }
}

function _log10($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $15 = 0, $21 = 0, $26 = 0, $28 = 0.0, $3 = 0, $30 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $50 = 0, $51 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $66 = 0.0, $71 = 0, $fabs = 0.0, $hx$0 = 0, $k$0 = 0, label = 0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $3 = ($1 | 0) < 0;
 do if ($3 | $1 >>> 0 < 1048576) {
  $fabs = +Math_abs(+$x);
  HEAPF64[tempDoublePtr >> 3] = $fabs;
  if ((HEAP32[tempDoublePtr >> 2] | 0) == 0 & (HEAP32[tempDoublePtr + 4 >> 2] | 0) == 0) {
   $$0 = -1.0 / ($x * $x);
   break;
  }
  if ($3) {
   $$0 = ($x - $x) / 0.0;
   break;
  } else {
   HEAPF64[tempDoublePtr >> 3] = $x * 18014398509481984.0;
   $15 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
   $26 = HEAP32[tempDoublePtr >> 2] | 0;
   $71 = $15;
   $hx$0 = $15;
   $k$0 = -1077;
   label = 9;
   break;
  }
 } else if ($1 >>> 0 > 2146435071) $$0 = $x; else if (($0 | 0) == 0 & 0 == 0 & ($1 | 0) == 1072693248) $$0 = 0.0; else {
  $26 = $0;
  $71 = $1;
  $hx$0 = $1;
  $k$0 = -1023;
  label = 9;
 } while (0);
 if ((label | 0) == 9) {
  $21 = $hx$0 + 614242 | 0;
  HEAP32[tempDoublePtr >> 2] = $26;
  HEAP32[tempDoublePtr + 4 >> 2] = ($21 & 1048575) + 1072079006;
  $28 = +HEAPF64[tempDoublePtr >> 3] + -1.0;
  $30 = $28 * ($28 * .5);
  $32 = $28 / ($28 + 2.0);
  $33 = $32 * $32;
  $34 = $33 * $33;
  HEAPF64[tempDoublePtr >> 3] = $28 - $30;
  $50 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  HEAP32[tempDoublePtr >> 2] = 0;
  HEAP32[tempDoublePtr + 4 >> 2] = $50;
  $51 = +HEAPF64[tempDoublePtr >> 3];
  $56 = $28 - $51 - $30 + $32 * ($30 + ($34 * ($34 * ($34 * .15313837699209373 + .22222198432149784) + .3999999999940942) + $33 * ($34 * ($34 * ($34 * .14798198605116586 + .1818357216161805) + .2857142874366239) + .6666666666666735)));
  $57 = $51 * .4342944818781689;
  $58 = +($k$0 + ($21 >>> 20) | 0);
  $59 = $58 * .30102999566361177;
  $66 = $59 + $57;
  $$0 = $66 + ($57 + ($59 - $66) + ($56 * .4342944818781689 + ($58 * 3.694239077158931e-13 + ($51 + $56) * 2.5082946711645275e-11)));
 }
 return +$$0;
}

function _fec_secded7264_decode_symbol($_sym_enc, $_sym_dec) {
 $_sym_enc = $_sym_enc | 0;
 $_sym_dec = $_sym_dec | 0;
 var $0 = 0, $20 = 0, $24 = 0, $29 = 0, $34 = 0, $39 = 0, $44 = 0, $49 = 0, $54 = 0, $56 = 0, $d$i = 0, $e_hat = 0, $n$03$i = 0, $n$03$i$lcssa = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $d$i = sp;
 $e_hat = sp + 8 | 0;
 dest = $e_hat;
 stop = dest + 9 | 0;
 do {
  HEAP8[dest >> 0] = 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 $0 = _fec_secded7264_compute_syndrome($_sym_enc) | 0;
 L1 : do if (!(HEAP8[($0 & 255) + (gb + 39229) >> 0] | 0)) {
  $20 = 0;
  $24 = 0;
  $29 = 0;
  $34 = 0;
  $39 = 0;
  $44 = 0;
  $49 = 0;
  $54 = 0;
  $56 = 0;
 } else {
  $n$03$i = 0;
  while (1) {
   if ($0 << 24 >> 24 == (HEAP8[gb + 19399 + $n$03$i >> 0] | 0)) {
    $n$03$i$lcssa = $n$03$i;
    break;
   }
   $n$03$i = $n$03$i + 1 | 0;
   if ($n$03$i >>> 0 >= 72) {
    $20 = 0;
    $24 = 0;
    $29 = 0;
    $34 = 0;
    $39 = 0;
    $44 = 0;
    $49 = 0;
    $54 = 0;
    $56 = 2;
    break L1;
   }
  }
  _div($d$i, $n$03$i$lcssa, 8);
  HEAP8[$e_hat + (8 - (HEAP32[$d$i >> 2] | 0)) >> 0] = 1 << HEAP32[$d$i + 4 >> 2];
  $20 = HEAP8[$e_hat + 1 >> 0] | 0;
  $24 = HEAP8[$e_hat + 2 >> 0] | 0;
  $29 = HEAP8[$e_hat + 3 >> 0] | 0;
  $34 = HEAP8[$e_hat + 4 >> 0] | 0;
  $39 = HEAP8[$e_hat + 5 >> 0] | 0;
  $44 = HEAP8[$e_hat + 6 >> 0] | 0;
  $49 = HEAP8[$e_hat + 7 >> 0] | 0;
  $54 = HEAP8[$e_hat + 8 >> 0] | 0;
  $56 = 1;
 } while (0);
 HEAP8[$_sym_dec >> 0] = $20 ^ HEAP8[$_sym_enc + 1 >> 0];
 HEAP8[$_sym_dec + 1 >> 0] = $24 ^ HEAP8[$_sym_enc + 2 >> 0];
 HEAP8[$_sym_dec + 2 >> 0] = $29 ^ HEAP8[$_sym_enc + 3 >> 0];
 HEAP8[$_sym_dec + 3 >> 0] = $34 ^ HEAP8[$_sym_enc + 4 >> 0];
 HEAP8[$_sym_dec + 4 >> 0] = $39 ^ HEAP8[$_sym_enc + 5 >> 0];
 HEAP8[$_sym_dec + 5 >> 0] = $44 ^ HEAP8[$_sym_enc + 6 >> 0];
 HEAP8[$_sym_dec + 6 >> 0] = $49 ^ HEAP8[$_sym_enc + 7 >> 0];
 HEAP8[$_sym_dec + 7 >> 0] = $54 ^ HEAP8[$_sym_enc + 8 >> 0];
 STACKTOP = sp;
 return $56 | 0;
}

function _flexframesync_execute_rxpreamble($_q, $_x) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 var $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $12 = 0, $13 = 0, $18 = 0, $19 = 0, $22 = 0, $23 = 0, $28 = 0, $29 = 0, $30 = 0, $32 = 0, $34 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $mf_out$sroa$0$0 = 0, $mf_out$sroa$5$0 = 0, $v$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy1 = sp + 24 | 0;
 $v$i = sp + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp;
 $4 = HEAP32[$_x + 4 >> 2] | 0;
 $5 = $_q + 92 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 HEAP32[$0 >> 2] = HEAP32[$_x >> 2];
 HEAP32[$0 + 4 >> 2] = $4;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 _nco_crcf_mix_down($6, $$byval_copy1, $v$i);
 _nco_crcf_step(HEAP32[$5 >> 2] | 0);
 $9 = $_q + 100 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 $12 = $v$i + 4 | 0;
 $13 = HEAP32[$12 >> 2] | 0;
 HEAP32[$1 >> 2] = HEAP32[$v$i >> 2];
 HEAP32[$1 + 4 >> 2] = $13;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 _firpfb_crcf_push($10, $$byval_copy1);
 _firpfb_crcf_execute(HEAP32[$9 >> 2] | 0, HEAP32[$_q + 112 >> 2] | 0, $v$i);
 $18 = $_q + 108 | 0;
 $19 = HEAP32[$18 >> 2] | 0;
 HEAP32[$18 >> 2] = $19 + 1;
 if (($19 | 0) > -1) {
  $22 = HEAP32[$v$i >> 2] | 0;
  $23 = HEAP32[$12 >> 2] | 0;
  HEAP32[$18 >> 2] = $19 + -1;
  $mf_out$sroa$0$0 = $22;
  $mf_out$sroa$5$0 = $23;
 } else {
  $mf_out$sroa$0$0 = 0;
  $mf_out$sroa$5$0 = 0;
 }
 if (($19 | 0) < 0) {
  STACKTOP = sp;
  return;
 }
 $28 = HEAP32[$_q + 64 >> 2] << 1;
 $29 = $_q + 192 | 0;
 $30 = HEAP32[$29 >> 2] | 0;
 if ($30 >>> 0 < $28 >>> 0) $38 = $30; else {
  $32 = $30 - $28 | 0;
  $34 = HEAP32[$_q + 120 >> 2] | 0;
  HEAP32[$34 + ($32 << 3) >> 2] = $mf_out$sroa$0$0;
  HEAP32[$34 + ($32 << 3) + 4 >> 2] = $mf_out$sroa$5$0;
  $38 = HEAP32[$29 >> 2] | 0;
 }
 HEAP32[$29 >> 2] = $38 + 1;
 if (($38 | 0) != ($28 + 63 | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$_q + 200 >> 2] = 2;
 STACKTOP = sp;
 return;
}

function _fec_rs_decode($_q, $_dec_msg_len, $_msg_enc, $_msg_dec) {
 $_q = $_q | 0;
 $_dec_msg_len = $_dec_msg_len | 0;
 $_msg_enc = $_msg_enc | 0;
 $_msg_dec = $_msg_dec | 0;
 var $10 = 0, $11 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $9 = 0, $block_size$04 = 0, $block_size$1 = 0, $i$01 = 0, $n0$0$lcssa = 0, $n0$02 = 0, $n1$0$lcssa = 0, $n1$03 = 0;
 if (!$_dec_msg_len) {
  _fwrite(gb + 18727 | 0, 49, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 _fec_rs_setlength($_q, $_dec_msg_len);
 $4 = $_q + 88 | 0;
 _memset(HEAP32[$_q + 124 >> 2] | 0, 0, HEAP32[$4 >> 2] | 0) | 0;
 $6 = $_q + 128 | 0;
 _memset(HEAP32[$6 >> 2] | 0, 0, HEAP32[$4 >> 2] | 0) | 0;
 $9 = $_q + 132 | 0;
 HEAP32[$9 >> 2] = 0;
 $10 = $_q + 100 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 if (!$11) {
  $n0$0$lcssa = 0;
  $n1$0$lcssa = 0;
 } else {
  $15 = $_q + 112 | 0;
  $16 = $_q + 120 | 0;
  $17 = $_q + 108 | 0;
  $18 = $_q + 96 | 0;
  $20 = $11;
  $block_size$04 = HEAP32[$_q + 104 >> 2] | 0;
  $i$01 = 0;
  $n0$02 = 0;
  $n1$03 = 0;
  while (1) {
   if (($i$01 | 0) == ($20 + -1 | 0)) $block_size$1 = $block_size$04 - (HEAP32[$15 >> 2] | 0) | 0; else $block_size$1 = $block_size$04;
   _memmove(HEAP32[$16 >> 2] | 0, $_msg_enc + $n0$02 | 0, HEAP32[$17 >> 2] | 0) | 0;
   _decode_rs_char(HEAP32[$18 >> 2] | 0, HEAP32[$16 >> 2] | 0, HEAP32[$6 >> 2] | 0, HEAP32[$9 >> 2] | 0) | 0;
   _memmove($_msg_dec + $n1$03 | 0, HEAP32[$16 >> 2] | 0, $block_size$1 | 0) | 0;
   $34 = (HEAP32[$17 >> 2] | 0) + $n0$02 | 0;
   $35 = $block_size$1 + $n1$03 | 0;
   $i$01 = $i$01 + 1 | 0;
   $20 = HEAP32[$10 >> 2] | 0;
   if ($i$01 >>> 0 >= $20 >>> 0) {
    $n0$0$lcssa = $34;
    $n1$0$lcssa = $35;
    break;
   } else {
    $block_size$04 = $block_size$1;
    $n0$02 = $34;
    $n1$03 = $35;
   }
  }
 }
 if (($n0$0$lcssa | 0) != (HEAP32[$_q + 12 >> 2] | 0)) ___assert_fail(gb + 18860 | 0, gb + 18801 | 0, 185, gb + 18884 | 0);
 if (($n1$0$lcssa | 0) == (HEAP32[$_q + 8 >> 2] | 0)) return; else ___assert_fail(gb + 18898 | 0, gb + 18801 | 0, 186, gb + 18884 | 0);
}

function _fft_execute_dft_4($_q) {
 $_q = $_q | 0;
 var $$ = 0.0, $$1 = 0.0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $45 = 0.0, $49 = 0, $6 = 0, $7 = 0, $9 = 0;
 $1 = HEAP32[$_q + 4 >> 2] | 0;
 $3 = HEAP32[$_q + 8 >> 2] | 0;
 $4 = HEAP32[$1 >> 2] | 0;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $3 + 4 | 0;
 HEAP32[$3 >> 2] = $4;
 HEAP32[$7 >> 2] = $6;
 $9 = HEAP32[$1 + 16 >> 2] | 0;
 $11 = HEAP32[$1 + 20 >> 2] | 0;
 $12 = $3 + 8 | 0;
 $13 = $3 + 12 | 0;
 HEAP32[$12 >> 2] = $9;
 HEAP32[$13 >> 2] = $11;
 $15 = HEAP32[$1 + 8 >> 2] | 0;
 $17 = HEAP32[$1 + 12 >> 2] | 0;
 $18 = $3 + 16 | 0;
 $19 = $3 + 20 | 0;
 HEAP32[$18 >> 2] = $15;
 HEAP32[$19 >> 2] = $17;
 $21 = +HEAPF32[$1 + 24 >> 2];
 $23 = +HEAPF32[$1 + 28 >> 2];
 $24 = $3 + 24 | 0;
 $25 = $3 + 28 | 0;
 $26 = (HEAP32[tempDoublePtr >> 2] = $9, +HEAPF32[tempDoublePtr >> 2]);
 $27 = (HEAP32[tempDoublePtr >> 2] = $11, +HEAPF32[tempDoublePtr >> 2]);
 $28 = (HEAP32[tempDoublePtr >> 2] = $4, +HEAPF32[tempDoublePtr >> 2]);
 $29 = (HEAP32[tempDoublePtr >> 2] = $6, +HEAPF32[tempDoublePtr >> 2]);
 $30 = $28 - $26;
 $31 = $29 - $27;
 HEAPF32[$12 >> 2] = $30;
 HEAPF32[$13 >> 2] = $31;
 $32 = $26 + $28;
 $33 = $27 + $29;
 $34 = (HEAP32[tempDoublePtr >> 2] = $15, +HEAPF32[tempDoublePtr >> 2]);
 $35 = (HEAP32[tempDoublePtr >> 2] = $17, +HEAPF32[tempDoublePtr >> 2]);
 $36 = $34 - $21;
 $37 = $35 - $23;
 HEAPF32[$24 >> 2] = $36;
 HEAPF32[$25 >> 2] = $37;
 $38 = $21 + $34;
 $39 = $23 + $35;
 HEAPF32[$18 >> 2] = $32 - $38;
 HEAPF32[$19 >> 2] = $33 - $39;
 HEAPF32[$3 >> 2] = $38 + $32;
 HEAPF32[$7 >> 2] = $39 + $33;
 $45 = $37 - $36 * 0.0;
 $49 = (HEAP32[$_q + 12 >> 2] | 0) == -1;
 $$ = $49 ? -$45 : $45;
 $$1 = $49 ? $36 : -$36;
 HEAPF32[$24 >> 2] = $30 - $$;
 HEAPF32[$25 >> 2] = $31 - $$1;
 HEAPF32[$12 >> 2] = $30 + $$;
 HEAPF32[$13 >> 2] = $31 + $$1;
 return;
}

function _hypot($x, $y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$01 = 0.0, $$02 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $33 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $45 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $8 = 0, $9 = 0, $fabs = 0.0, $fabs3 = 0.0, $z$0 = 0.0;
 $fabs = +Math_abs(+$x);
 HEAPF64[tempDoublePtr >> 3] = $fabs;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $fabs3 = +Math_abs(+$y);
 HEAPF64[tempDoublePtr >> 3] = $fabs3;
 $2 = HEAP32[tempDoublePtr >> 2] | 0;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $8 = $1 >>> 0 < $3 >>> 0 | ($1 | 0) == ($3 | 0) & $0 >>> 0 < $2 >>> 0;
 $9 = $8 ? $2 : $0;
 $10 = $8 ? $3 : $1;
 $11 = $8 ? $0 : $2;
 $12 = $8 ? $1 : $3;
 $13 = _bitshift64Lshr($9 | 0, $10 | 0, 52) | 0;
 getTempRet0() | 0;
 $15 = _bitshift64Lshr($11 | 0, $12 | 0, 52) | 0;
 getTempRet0() | 0;
 HEAP32[tempDoublePtr >> 2] = $9;
 HEAP32[tempDoublePtr + 4 >> 2] = $10;
 $17 = +HEAPF64[tempDoublePtr >> 3];
 HEAP32[tempDoublePtr >> 2] = $11;
 HEAP32[tempDoublePtr + 4 >> 2] = $12;
 $18 = +HEAPF64[tempDoublePtr >> 3];
 do if (($15 | 0) == 2047) $$0 = $18; else if (($11 | 0) == 0 & ($12 | 0) == 0 | ($13 | 0) == 2047) $$0 = $17; else {
  if (($13 - $15 | 0) > 64) {
   $$0 = $17 + $18;
   break;
  }
  if ($13 >>> 0 > 1533) {
   $$01 = $17 * 1.90109156629516e-211;
   $$02 = $18 * 1.90109156629516e-211;
   $z$0 = 5260135901548373507240989.0e186;
  } else if ($15 >>> 0 < 573) {
   $$01 = $17 * 5260135901548373507240989.0e186;
   $$02 = $18 * 5260135901548373507240989.0e186;
   $z$0 = 1.90109156629516e-211;
  } else {
   $$01 = $17;
   $$02 = $18;
   $z$0 = 1.0;
  }
  $33 = $$01 * 134217729.0;
  $35 = $33 + ($$01 - $33);
  $36 = $$01 - $35;
  $37 = $$01 * $$01;
  $45 = $$02 * 134217729.0;
  $47 = $45 + ($$02 - $45);
  $48 = $$02 - $47;
  $49 = $$02 * $$02;
  $$0 = $z$0 * +Math_sqrt(+($37 + ($49 + ($48 * $48 + ($47 * $47 - $49 + $47 * 2.0 * $48) + ($36 * $36 + ($35 * $35 - $37 + $35 * 2.0 * $36))))));
 } while (0);
 return +$$0;
}

function _liquid_pack_bytes($_sym_in, $_sym_in_len, $_sym_out, $_sym_out_len, $_num_written) {
 $_sym_in = $_sym_in | 0;
 $_sym_in_len = $_sym_in_len | 0;
 $_sym_out = $_sym_out | 0;
 $_sym_out_len = $_sym_out_len | 0;
 $_num_written = $_num_written | 0;
 var $$lcssa = 0, $$lcssa42 = 0, $$lcssa43 = 0, $$lcssa44 = 0, $14 = 0, $15 = 0, $19 = 0, $26 = 0, $N$0$ph$lcssa = 0, $N$0$ph12 = 0, $N$0$ph12$lcssa = 0, $N$2 = 0, $byte$0$lcssa = 0, $byte$05 = 0, $d = 0, $i$0$ph11 = 0, $i$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $d = sp;
 _div($d, $_sym_in_len, 8);
 if ((((HEAP32[$d + 4 >> 2] | 0) > 0 & 1) + (HEAP32[$d >> 2] | 0) | 0) >>> 0 > $_sym_out_len >>> 0) {
  _fwrite(gb + 40119 | 0, 38, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(-1);
 }
 if (!$_sym_in_len) {
  $N$2 = 0;
  HEAP32[$_num_written >> 2] = $N$2;
  STACKTOP = sp;
  return;
 } else {
  $N$0$ph12 = 0;
  $i$0$ph11 = 0;
 }
 L6 : while (1) {
  $byte$05 = 0;
  $i$04 = $i$0$ph11;
  while (1) {
   $14 = (HEAPU8[$_sym_in + $i$04 >> 0] | 0) & 1 | $byte$05 & 254;
   $15 = $i$04 + 1 | 0;
   if (!($15 & 7)) {
    $$lcssa = $14;
    $$lcssa43 = $15;
    break;
   }
   if ($15 >>> 0 < $_sym_in_len >>> 0) {
    $byte$05 = $14 << 1;
    $i$04 = $15;
   } else {
    $$lcssa42 = $14;
    $$lcssa44 = $15;
    $N$0$ph12$lcssa = $N$0$ph12;
    label = 8;
    break L6;
   }
  }
  $19 = $N$0$ph12 + 1 | 0;
  HEAP8[$_sym_out + $N$0$ph12 >> 0] = $$lcssa;
  if ($$lcssa43 >>> 0 < $_sym_in_len >>> 0) {
   $N$0$ph12 = $19;
   $i$0$ph11 = $$lcssa43;
  } else {
   $26 = $$lcssa43;
   $N$0$ph$lcssa = $19;
   $byte$0$lcssa = 0;
   break;
  }
 }
 if ((label | 0) == 8) {
  $26 = $$lcssa44;
  $N$0$ph$lcssa = $N$0$ph12$lcssa;
  $byte$0$lcssa = $$lcssa42 & 127;
 }
 if (!($26 & 7)) {
  $N$2 = $N$0$ph$lcssa;
  HEAP32[$_num_written >> 2] = $N$2;
  STACKTOP = sp;
  return;
 }
 HEAP8[$_sym_out + $N$0$ph$lcssa >> 0] = $byte$0$lcssa;
 $N$2 = $N$0$ph$lcssa + 1 | 0;
 HEAP32[$_num_written >> 2] = $N$2;
 STACKTOP = sp;
 return;
}

function _hashtable_do_rehash($hashtable) {
 $hashtable = $hashtable | 0;
 var $0 = 0, $1 = 0, $15 = 0, $29 = 0, $6 = 0, $68 = 0, $i = 0, $index = 0, $list = 0, $new_size = 0, $next = 0, $pair = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 28 | 0;
 $1 = sp + 24 | 0;
 $list = sp + 20 | 0;
 $next = sp + 16 | 0;
 $pair = sp + 12 | 0;
 $i = sp + 8 | 0;
 $index = sp + 4 | 0;
 $new_size = sp;
 HEAP32[$1 >> 2] = $hashtable;
 _jsonp_free(HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0);
 $6 = (HEAP32[$1 >> 2] | 0) + 8 | 0;
 HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1;
 HEAP32[$new_size >> 2] = 1 << HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2];
 $15 = _jsonp_malloc(HEAP32[$new_size >> 2] << 3) | 0;
 HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] = $15;
 if (!(HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0)) {
  HEAP32[$0 >> 2] = -1;
  $68 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $68 | 0;
 }
 HEAP32[$i >> 2] = 0;
 while (1) {
  $29 = (HEAP32[$1 >> 2] | 0) + 12 | 0;
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= 1 << HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] >>> 0) break;
  HEAP32[(HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[$i >> 2] << 3) + 4 >> 2] = $29;
  HEAP32[(HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[$i >> 2] << 3) >> 2] = $29;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$list >> 2] = HEAP32[$29 + 4 >> 2];
 _list_init((HEAP32[$1 >> 2] | 0) + 12 | 0);
 while (1) {
  if ((HEAP32[$list >> 2] | 0) == ((HEAP32[$1 >> 2] | 0) + 12 | 0)) break;
  HEAP32[$next >> 2] = HEAP32[(HEAP32[$list >> 2] | 0) + 4 >> 2];
  HEAP32[$pair >> 2] = HEAP32[$list >> 2];
  HEAP32[$index >> 2] = ((HEAP32[(HEAP32[$pair >> 2] | 0) + 8 >> 2] | 0) >>> 0) % ((HEAP32[$new_size >> 2] | 0) >>> 0) | 0;
  _insert_to_bucket(HEAP32[$1 >> 2] | 0, (HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[$index >> 2] << 3) | 0, HEAP32[$pair >> 2] | 0);
  HEAP32[$list >> 2] = HEAP32[$next >> 2];
 }
 HEAP32[$0 >> 2] = 0;
 $68 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $68 | 0;
}

function _ofdmflexframegen_assemble($_q, $_header, $_payload, $_payload_len) {
 $_q = $_q | 0;
 $_header = $_header | 0;
 $_payload = $_payload | 0;
 $_payload_len = $_payload_len | 0;
 var $0 = 0, $22 = 0, $32 = 0, $39 = 0, $4 = 0, $54 = 0, $57 = 0, $6 = 0, $68 = 0, $70 = 0, $72 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $_q + 92 | 0;
 if ((HEAP32[$0 >> 2] | 0) != ($_payload_len | 0)) {
  HEAP32[$0 >> 2] = $_payload_len;
  _ofdmflexframegen_reconfigure($_q);
 }
 HEAP32[$_q + 124 >> 2] = 1;
 $4 = $_q + 60 | 0;
 $6 = $_q + 72 | 0;
 _memmove(HEAP32[$4 >> 2] | 0, $_header | 0, HEAP32[$6 >> 2] | 0) | 0;
 $8 = HEAP32[$6 >> 2] | 0;
 HEAP8[(HEAP32[$4 >> 2] | 0) + $8 >> 0] = 104;
 HEAP8[(HEAP32[$4 >> 2] | 0) + ($8 + 1) >> 0] = (HEAP32[$0 >> 2] | 0) >>> 8;
 HEAP8[(HEAP32[$4 >> 2] | 0) + ($8 + 2) >> 0] = HEAP32[$0 >> 2];
 $22 = $_q + 152 | 0;
 HEAP8[(HEAP32[$4 >> 2] | 0) + ($8 + 3) >> 0] = HEAP32[$22 >> 2];
 $32 = $8 + 4 | 0;
 HEAP8[(HEAP32[$4 >> 2] | 0) + $32 >> 0] = HEAP32[$_q + 140 >> 2] << 5;
 $39 = (HEAP32[$4 >> 2] | 0) + $32 | 0;
 HEAP8[$39 >> 0] = HEAPU8[$39 >> 0] | 0 | HEAP32[$_q + 144 >> 2] & 31;
 HEAP8[(HEAP32[$4 >> 2] | 0) + ($8 + 5) >> 0] = HEAP32[$_q + 148 >> 2] & 31;
 $54 = $_q + 64 | 0;
 _packetizer_encode(HEAP32[$_q + 56 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$54 >> 2] | 0);
 $57 = $_q + 80 | 0;
 _scramble_data(HEAP32[$54 >> 2] | 0, HEAP32[$57 >> 2] | 0);
 _liquid_repack_bytes(HEAP32[$54 >> 2] | 0, 8, HEAP32[$57 >> 2] | 0, HEAP32[$_q + 68 >> 2] | 0, HEAP32[gb + 580 + 764 >> 2] | 0, HEAP32[$_q + 84 >> 2] | 0, sp);
 $68 = $_q + 100 | 0;
 _packetizer_encode(HEAP32[$_q + 88 >> 2] | 0, $_payload, HEAP32[$68 >> 2] | 0);
 $70 = $_q + 104 | 0;
 $72 = $_q + 112 | 0;
 _memset(HEAP32[$70 >> 2] | 0, 0, HEAP32[$72 >> 2] << 2 | 0) | 0;
 _liquid_unpack_array_block(HEAP32[$68 >> 2] | 0, HEAP32[$_q + 108 >> 2] | 0, HEAP32[gb + 580 + (HEAP32[$22 >> 2] << 4) + 12 >> 2] | 0, HEAP32[$72 >> 2] | 0, HEAP32[$70 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _fec_secded2216_decode($_q, $_dec_msg_len, $_msg_enc, $_msg_dec) {
 $_q = $_q | 0;
 $_dec_msg_len = $_dec_msg_len | 0;
 $_msg_enc = $_msg_enc | 0;
 $_msg_dec = $_msg_dec | 0;
 var $0 = 0, $1 = 0, $16 = 0, $17 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $e_hat$i = 0, $i$0$lcssa = 0, $i$03 = 0, $i$1 = 0, $j$0$lcssa = 0, $j$02 = 0, $j$1 = 0, $v = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $e_hat$i = sp + 3 | 0;
 $v = sp;
 $0 = $_dec_msg_len & 1;
 $1 = $_dec_msg_len - $0 | 0;
 if (($0 | 0) == ($_dec_msg_len | 0)) {
  $i$0$lcssa = 0;
  $j$0$lcssa = 0;
 } else {
  $3 = $e_hat$i + 1 | 0;
  $4 = $e_hat$i + 2 | 0;
  $i$03 = 0;
  $j$02 = 0;
  while (1) {
   $5 = $_msg_enc + $j$02 | 0;
   $6 = $_msg_dec + $i$03 | 0;
   HEAP8[$e_hat$i >> 0] = 0;
   HEAP8[$e_hat$i + 1 >> 0] = 0;
   HEAP8[$e_hat$i + 2 >> 0] = 0;
   _fec_secded2216_estimate_ehat($5, $e_hat$i) | 0;
   HEAP8[$6 >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$5 + 1 >> 0];
   HEAP8[$6 + 1 >> 0] = HEAP8[$4 >> 0] ^ HEAP8[$5 + 2 >> 0];
   $16 = $j$02 + 3 | 0;
   $17 = $i$03 + 2 | 0;
   if ($17 >>> 0 < $1 >>> 0) {
    $i$03 = $17;
    $j$02 = $16;
   } else {
    $i$0$lcssa = $17;
    $j$0$lcssa = $16;
    break;
   }
  }
 }
 if (!$0) {
  $i$1 = $i$0$lcssa;
  $j$1 = $j$0$lcssa;
 } else {
  HEAP8[$v >> 0] = HEAP8[$_msg_enc + $j$0$lcssa >> 0] | 0;
  $25 = HEAP8[$_msg_enc + ($j$0$lcssa + 1) >> 0] | 0;
  HEAP8[$v + 1 >> 0] = $25;
  HEAP8[$v + 2 >> 0] = 0;
  HEAP8[$e_hat$i >> 0] = 0;
  HEAP8[$e_hat$i + 1 >> 0] = 0;
  HEAP8[$e_hat$i + 2 >> 0] = 0;
  _fec_secded2216_estimate_ehat($v, $e_hat$i) | 0;
  HEAP8[$_msg_dec + $i$0$lcssa >> 0] = HEAP8[$e_hat$i + 1 >> 0] ^ $25;
  $i$1 = $i$0$lcssa | $0;
  $j$1 = $0 + 1 + $j$0$lcssa | 0;
 }
 if (($j$1 | 0) != (_fec_get_enc_msg_length(8, $_dec_msg_len) | 0)) ___assert_fail(gb + 18994 | 0, gb + 19058 | 0, 323, gb + 19109 | 0);
 if (($i$1 | 0) == ($_dec_msg_len | 0)) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(gb + 19586 | 0, gb + 19058 | 0, 324, gb + 19109 | 0);
}

function _modem_create_psk($_bits_per_symbol) {
 $_bits_per_symbol = $_bits_per_symbol | 0;
 var $$pre3 = 0, $0 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $0 = _malloc(252) | 0;
 switch ($_bits_per_symbol | 0) {
 case 1:
  {
   HEAP32[$0 >> 2] = 1;
   break;
  }
 case 2:
  {
   HEAP32[$0 >> 2] = 2;
   break;
  }
 case 3:
  {
   HEAP32[$0 >> 2] = 3;
   break;
  }
 case 4:
  {
   HEAP32[$0 >> 2] = 4;
   break;
  }
 case 5:
  {
   HEAP32[$0 >> 2] = 5;
   break;
  }
 case 6:
  {
   HEAP32[$0 >> 2] = 6;
   break;
  }
 case 7:
  {
   HEAP32[$0 >> 2] = 7;
   break;
  }
 case 8:
  {
   HEAP32[$0 >> 2] = 8;
   break;
  }
 default:
  {
   _fwrite(gb + 31241 | 0, 57, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
   _exit(1);
  }
 }
 $2 = $0 + 76 | 0;
 HEAP32[$2 >> 2] = 0;
 $3 = $0 + 80 | 0;
 HEAP32[$3 >> 2] = 0;
 $4 = $0 + 4 | 0;
 HEAP32[$4 >> 2] = $_bits_per_symbol;
 $5 = 1 << $_bits_per_symbol;
 $6 = $0 + 8 | 0;
 HEAP32[$6 >> 2] = $5;
 $7 = $0 + 236 | 0;
 HEAP32[$7 >> 2] = 0;
 HEAP32[$7 + 4 >> 2] = 0;
 HEAP32[$7 + 8 >> 2] = 0;
 HEAP32[$7 + 12 >> 2] = 0;
 $11 = 3.141592653589793 / +($5 >>> 0);
 $12 = $0 + 100 | 0;
 $13 = $0 + 104 | 0;
 HEAPF32[$13 >> 2] = $11;
 $14 = $0 + 12 | 0;
 HEAPF32[$14 >> 2] = $11;
 if ((HEAP32[$4 >> 2] | 0) >>> 0 > 1) {
  $18 = 1;
  do {
   HEAPF32[$14 + ($18 << 2) >> 2] = +(1 << $18 | 0) * +HEAPF32[$13 >> 2];
   $18 = $18 + 1 | 0;
  } while ($18 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0);
 }
 $$pre3 = HEAP32[$6 >> 2] | 0;
 HEAPF32[$12 >> 2] = (1.0 - 1.0 / +($$pre3 >>> 0)) * 3.141592653589793;
 HEAP32[$7 >> 2] = fb + 17;
 HEAP32[$0 + 240 >> 2] = fb + 18;
 HEAP32[$2 >> 2] = _malloc($$pre3 << 3) | 0;
 _modem_init_map($0);
 HEAP32[$3 >> 2] = 1;
 if ((HEAP32[$4 >> 2] | 0) >>> 0 > 2) _modem_demodsoft_gentab($0, 2);
 HEAPF32[$0 + 84 >> 2] = 1.0;
 HEAPF32[$0 + 88 >> 2] = 0.0;
 HEAP32[$0 + 92 >> 2] = 1065353216;
 HEAPF32[$0 + 96 >> 2] = 0.0;
 if (!(_liquid_modem_is_dpsk(HEAP32[$0 >> 2] | 0) | 0)) return $0 | 0;
 HEAPF32[$13 >> 2] = 0.0;
 return $0 | 0;
}

function _butter_azpkf($_n, $_za, $_pa, $_ka) {
 $_n = $_n | 0;
 $_za = $_za | 0;
 $_pa = $_pa | 0;
 $_ka = $_ka | 0;
 var $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $23 = 0.0, $26 = 0, $27 = 0, $3 = 0, $33 = 0, $4 = 0, $7 = 0, $i$02 = 0, $k$0$lcssa = 0, $k$01 = 0, $k$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy1 = sp + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp;
 $4 = $_n & 1;
 if (($_n - $4 | 0) >>> 0 < 2) $k$0$lcssa = 0; else {
  $7 = $_n + -1 | 0;
  $10 = +($_n << 1 >>> 0);
  $11 = $1 + 4 | 0;
  $12 = $0 + 4 | 0;
  $13 = $3 + 4 | 0;
  $14 = $2 + 4 | 0;
  $15 = $_n >>> 1;
  $i$02 = 0;
  $k$01 = 0;
  while (1) {
   $i$02 = $i$02 + 1 | 0;
   $23 = +(($7 + ($i$02 << 1) | 0) >>> 0) * 3.141592653589793 / $10;
   HEAPF32[$1 >> 2] = $23 * 0.0;
   HEAPF32[$11 >> 2] = $23;
   HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   _cexpf($0, $$byval_copy1);
   $26 = HEAP32[$12 >> 2] | 0;
   $27 = $k$01 | 1;
   HEAP32[$_pa + ($k$01 << 3) >> 2] = HEAP32[$0 >> 2];
   HEAP32[$_pa + ($k$01 << 3) + 4 >> 2] = $26;
   HEAPF32[$3 >> 2] = $23 * -0.0;
   HEAPF32[$13 >> 2] = -$23;
   HEAP32[$$byval_copy1 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   _cexpf($2, $$byval_copy1);
   $33 = HEAP32[$14 >> 2] | 0;
   HEAP32[$_pa + ($27 << 3) >> 2] = HEAP32[$2 >> 2];
   HEAP32[$_pa + ($27 << 3) + 4 >> 2] = $33;
   if (($i$02 | 0) == ($15 | 0)) break; else $k$01 = $k$01 + 2 | 0;
  }
  $k$0$lcssa = $15 << 1;
 }
 if (!$4) $k$1 = $k$0$lcssa; else {
  HEAPF32[$_pa + ($k$0$lcssa << 3) >> 2] = -1.0;
  HEAPF32[$_pa + ($k$0$lcssa << 3) + 4 >> 2] = 0.0;
  $k$1 = $k$0$lcssa | 1;
 }
 if (($k$1 | 0) == ($_n | 0)) {
  HEAPF32[$_ka >> 2] = 1.0;
  HEAPF32[$_ka + 4 >> 2] = 0.0;
  STACKTOP = sp;
  return;
 } else ___assert_fail(gb + 40901 | 0, gb + 40827 | 0, 62, gb + 40851 | 0);
}

function _fec_golay2412_decode($_q, $_dec_msg_len, $_msg_enc, $_msg_dec) {
 $_q = $_q | 0;
 $_dec_msg_len = $_dec_msg_len | 0;
 $_msg_enc = $_msg_enc | 0;
 $_msg_dec = $_msg_dec | 0;
 var $0 = 0, $1 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $51 = 0, $i$05 = 0, $i$1$lcssa = 0, $i$12 = 0, $j$0$lcssa = 0, $j$04 = 0, $j$1$lcssa = 0, $j$11 = 0;
 $0 = ($_dec_msg_len >>> 0) % 3 | 0;
 $1 = $_dec_msg_len - $0 | 0;
 if (($0 | 0) == ($_dec_msg_len | 0)) $j$0$lcssa = 0; else {
  $i$05 = 0;
  $j$04 = 0;
  while (1) {
   $35 = (HEAPU8[$_msg_enc + ($j$04 + 4) >> 0] | 0) << 8 | (HEAPU8[$_msg_enc + ($j$04 + 3) >> 0] | 0) << 16 | (HEAPU8[$_msg_enc + ($j$04 + 5) >> 0] | 0);
   $36 = _fec_golay2412_decode_symbol((HEAPU8[$_msg_enc + ($j$04 | 1) >> 0] | 0) << 8 | (HEAPU8[$_msg_enc + $j$04 >> 0] | 0) << 16 | (HEAPU8[$_msg_enc + ($j$04 + 2) >> 0] | 0)) | 0;
   $37 = _fec_golay2412_decode_symbol($35) | 0;
   HEAP8[$_msg_dec + $i$05 >> 0] = $36 >>> 4;
   HEAP8[$_msg_dec + ($i$05 + 1) >> 0] = $37 >>> 8 & 15 | $36 << 4;
   HEAP8[$_msg_dec + ($i$05 + 2) >> 0] = $37;
   $51 = $j$04 + 6 | 0;
   $i$05 = $i$05 + 3 | 0;
   if ($i$05 >>> 0 >= $1 >>> 0) {
    $j$0$lcssa = $51;
    break;
   } else $j$04 = $51;
  }
 }
 if ($1 >>> 0 < $_dec_msg_len >>> 0) {
  $4 = $0 * 3 | 0;
  $i$12 = $1;
  $j$11 = $j$0$lcssa;
  while (1) {
   HEAP8[$_msg_dec + $i$12 >> 0] = _fec_golay2412_decode_symbol((HEAPU8[$_msg_enc + ($j$11 + 1) >> 0] | 0) << 8 | (HEAPU8[$_msg_enc + $j$11 >> 0] | 0) << 16 | (HEAPU8[$_msg_enc + ($j$11 + 2) >> 0] | 0)) | 0;
   $i$12 = $i$12 + 1 | 0;
   if (($i$12 | 0) == ($_dec_msg_len | 0)) break; else $j$11 = $j$11 + 3 | 0;
  }
  $i$1$lcssa = $_dec_msg_len;
  $j$1$lcssa = $j$0$lcssa + $4 | 0;
 } else {
  $i$1$lcssa = $1;
  $j$1$lcssa = $j$0$lcssa;
 }
 if (($j$1$lcssa | 0) != (_fec_get_enc_msg_length(7, $_dec_msg_len) | 0)) ___assert_fail(gb + 13530 | 0, gb + 13481 | 0, 396, gb + 13592 | 0);
 if (($i$1$lcssa | 0) == ($_dec_msg_len | 0)) return; else ___assert_fail(gb + 19586 | 0, gb + 13481 | 0, 397, gb + 13592 | 0);
}

function _fec_conv_decode_hard($_q, $_dec_msg_len, $_msg_enc, $_msg_dec) {
 $_q = $_q | 0;
 $_dec_msg_len = $_dec_msg_len | 0;
 $_msg_enc = $_msg_enc | 0;
 $_msg_dec = $_msg_dec | 0;
 var $$phi$trans$insert = 0, $$pre$phi3Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $16 = 0, $20 = 0, $21 = 0, $23 = 0, $27 = 0, $37 = 0, $5 = 0, $6 = 0, $7 = 0, $k$01 = 0, $num_written = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $num_written = sp;
 $0 = $_q + 8 | 0;
 if ((HEAP32[$0 >> 2] | 0) == ($_dec_msg_len | 0)) {
  $$phi$trans$insert = $_q + 16 | 0;
  $$pre$phi3Z2D = $$phi$trans$insert;
  $$pre$phiZ2D = $_q + 12 | 0;
  $23 = HEAP32[$$phi$trans$insert >> 2] | 0;
 } else {
  HEAP32[$0 >> 2] = $_dec_msg_len;
  $5 = $_q + 12 | 0;
  HEAP32[$5 >> 2] = _fec_get_enc_msg_length(HEAP32[$_q >> 2] | 0, $_dec_msg_len) | 0;
  $6 = $_q + 20 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  if ($7 | 0) mftCall_vi(HEAP32[$_q + 60 >> 2] | 0, $7 | 0);
  HEAP32[$6 >> 2] = mftCall_ii(HEAP32[$_q + 44 >> 2] | 0, HEAP32[$0 >> 2] << 3 | 0) | 0;
  $16 = $_q + 16 | 0;
  $20 = _realloc(HEAP32[$16 >> 2] | 0, HEAP32[$5 >> 2] << 3) | 0;
  HEAP32[$16 >> 2] = $20;
  $$pre$phi3Z2D = $16;
  $$pre$phiZ2D = $5;
  $23 = $20;
 }
 $21 = HEAP32[$$pre$phiZ2D >> 2] | 0;
 _liquid_unpack_bytes($_msg_enc, $21, $23, $21 << 3, $num_written);
 if (HEAP32[$$pre$phiZ2D >> 2] & 536870911 | 0) {
  $k$01 = 0;
  do {
   $27 = (HEAP32[$$pre$phi3Z2D >> 2] | 0) + $k$01 | 0;
   HEAP8[$27 >> 0] = ((HEAP8[$27 >> 0] | 0) != 0) << 31 >> 31;
   $k$01 = $k$01 + 1 | 0;
  } while ($k$01 >>> 0 < HEAP32[$$pre$phiZ2D >> 2] << 3 >>> 0);
 }
 $37 = $_q + 20 | 0;
 mftCall_iii(HEAP32[$_q + 48 >> 2] | 0, HEAP32[$37 >> 2] | 0, 0) | 0;
 mftCall_iiii(HEAP32[$_q + 52 >> 2] | 0, HEAP32[$37 >> 2] | 0, HEAP32[$$pre$phi3Z2D >> 2] | 0, (HEAP32[$_q + 32 >> 2] | 0) + -1 + (HEAP32[$0 >> 2] << 3) | 0) | 0;
 mftCall_iiiii(HEAP32[$_q + 56 >> 2] | 0, HEAP32[$37 >> 2] | 0, $_msg_dec | 0, HEAP32[$0 >> 2] << 3 | 0, 0) | 0;
 STACKTOP = sp;
 return;
}

function _ofdmflexframegen_create($_M, $_cp_len, $_taper_len, $_p, $_fgprops) {
 $_M = $_M | 0;
 $_cp_len = $_cp_len | 0;
 $_taper_len = $_taper_len | 0;
 $_p = $_p | 0;
 $_fgprops = $_fgprops | 0;
 var $11 = 0, $12 = 0, $17 = 0, $18 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $38 = 0, $5 = 0, $6 = 0, $7 = 0;
 if ($_M >>> 0 < 2) {
  _fwrite(gb + 28513 | 0, 75, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if ($_M & 1 | 0) {
  _fwrite(gb + 28589 | 0, 69, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 $5 = _malloc(156) | 0;
 HEAP32[$5 >> 2] = $_M;
 $6 = $5 + 4 | 0;
 HEAP32[$6 >> 2] = $_cp_len;
 $7 = $5 + 8 | 0;
 HEAP32[$7 >> 2] = $_taper_len;
 HEAP32[$5 + 36 >> 2] = _malloc($_M << 3) | 0;
 $11 = _malloc($_M) | 0;
 $12 = $5 + 12 | 0;
 HEAP32[$12 >> 2] = $11;
 if (!$_p) {
  _ofdmframe_init_default_sctype($_M, $11);
  $17 = HEAP32[$12 >> 2] | 0;
  $18 = HEAP32[$5 >> 2] | 0;
 } else {
  _memcpy($11 | 0, $_p | 0, $_M | 0) | 0;
  $17 = $11;
  $18 = $_M;
 }
 _ofdmframe_validate_sctype($17, $18, $5 + 16 | 0, $5 + 20 | 0, $5 + 24 | 0);
 $24 = $5 + 40 | 0;
 HEAP32[$24 >> 2] = _ofdmframegen_create(HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0, HEAP32[$12 >> 2] | 0) | 0;
 $25 = $5 + 52 | 0;
 HEAP32[$25 >> 2] = 0;
 HEAP32[$25 + 4 >> 2] = 0;
 HEAP32[$25 + 8 >> 2] = 0;
 HEAP32[$25 + 12 >> 2] = 0;
 HEAP32[$25 + 16 >> 2] = 0;
 _ofdmflexframegen_set_header_len($5, 8);
 HEAP32[$5 + 92 >> 2] = 1;
 $27 = _packetizer_create(1, 1, 1, 1) | 0;
 HEAP32[$5 + 88 >> 2] = $27;
 $29 = _packetizer_get_enc_msg_len($27) | 0;
 HEAP32[$5 + 108 >> 2] = $29;
 HEAP32[$5 + 100 >> 2] = _malloc($29) | 0;
 HEAP32[$5 + 112 >> 2] = 1;
 HEAP32[$5 + 104 >> 2] = _malloc(4) | 0;
 HEAP32[$5 + 96 >> 2] = _modem_create(48) | 0;
 _ofdmflexframegen_setprops($5, $_fgprops);
 $38 = $5 + 116 | 0;
 HEAP32[$38 >> 2] = 0;
 HEAP32[$38 + 4 >> 2] = 0;
 HEAP32[$38 + 8 >> 2] = 0;
 HEAP32[$38 + 12 >> 2] = 0;
 HEAP32[$38 + 16 >> 2] = 0;
 HEAP32[$38 + 20 >> 2] = 0;
 _ofdmframegen_reset(HEAP32[$24 >> 2] | 0);
 return $5 | 0;
}

function _liquid_filter_isi($_h, $_k, $_m, $_rms, $_max) {
 $_h = $_h | 0;
 $_k = $_k | 0;
 $_m = $_m | 0;
 $_rms = $_rms | 0;
 $_max = $_max | 0;
 var $$0$i = 0.0, $$lcssa22 = 0.0, $10 = 0, $11 = 0, $19 = 0.0, $2 = 0, $22 = 0.0, $24 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $4 = 0.0, $6 = 0.0, $8 = 0, $i$02$i = 0, $i$02$i1 = 0, $i$08 = 0, $isi_max$0$lcssa = 0.0, $isi_max$010 = 0.0, $isi_max$1 = 0.0, $isi_rms$0$lcssa = 0.0, $isi_rms$09 = 0.0, $rxx$01$i = 0.0, $rxx$01$i2 = 0.0;
 $2 = Math_imul($_k << 1, $_m) | 0 | 1;
 $i$02$i = 0;
 $rxx$01$i = 0.0;
 while (1) {
  $4 = +HEAPF32[$_h + ($i$02$i << 2) >> 2];
  $6 = $rxx$01$i + $4 * $4;
  $i$02$i = $i$02$i + 1 | 0;
  if (($i$02$i | 0) == ($2 | 0)) {
   $$lcssa22 = $6;
   break;
  } else $rxx$01$i = $6;
 }
 $8 = $_m << 1;
 if (!$8) {
  $isi_max$0$lcssa = 0.0;
  $isi_rms$0$lcssa = 0.0;
  $29 = +($8 >>> 0);
  $30 = $isi_rms$0$lcssa / $29;
  $31 = +Math_sqrt(+$30);
  HEAPF32[$_rms >> 2] = $31;
  HEAPF32[$_max >> 2] = $isi_max$0$lcssa;
  return;
 } else {
  $i$08 = 1;
  $isi_max$010 = 0.0;
  $isi_rms$09 = 0.0;
 }
 while (1) {
  $10 = Math_imul($i$08, $_k) | 0;
  $11 = ($10 | 0) > -1 ? $10 : 0 - $10 | 0;
  if ($11 >>> 0 < $2 >>> 0) {
   $i$02$i1 = $11;
   $rxx$01$i2 = 0.0;
   while (1) {
    $19 = $rxx$01$i2 + +HEAPF32[$_h + ($i$02$i1 << 2) >> 2] * +HEAPF32[$_h + ($i$02$i1 - $11 << 2) >> 2];
    $i$02$i1 = $i$02$i1 + 1 | 0;
    if (($i$02$i1 | 0) == ($2 | 0)) {
     $$0$i = $19;
     break;
    } else $rxx$01$i2 = $19;
   }
  } else $$0$i = 0.0;
  $22 = +Math_abs(+($$0$i / $$lcssa22));
  $24 = $isi_rms$09 + $22 * $22;
  $isi_max$1 = ($i$08 | 0) == 1 | $22 > $isi_max$010 ? $22 : $isi_max$010;
  $i$08 = $i$08 + 1 | 0;
  if ($i$08 >>> 0 > $8 >>> 0) {
   $isi_max$0$lcssa = $isi_max$1;
   $isi_rms$0$lcssa = $24;
   break;
  } else {
   $isi_max$010 = $isi_max$1;
   $isi_rms$09 = $24;
  }
 }
 $29 = +($8 >>> 0);
 $30 = $isi_rms$0$lcssa / $29;
 $31 = +Math_sqrt(+$30);
 HEAPF32[$_rms >> 2] = $31;
 HEAPF32[$_max >> 2] = $isi_max$0$lcssa;
 return;
}

function _parse_array($lex, $flags, $error) {
 $lex = $lex | 0;
 $flags = $flags | 0;
 $error = $error | 0;
 var $0 = 0, $1 = 0, $2 = 0, $27 = 0, $3 = 0, $45 = 0, $array = 0, $elem = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 24 | 0;
 $1 = sp + 20 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 12 | 0;
 $array = sp + 8 | 0;
 $elem = sp + 4 | 0;
 HEAP32[$1 >> 2] = $lex;
 HEAP32[$2 >> 2] = $flags;
 HEAP32[$3 >> 2] = $error;
 HEAP32[$array >> 2] = _json_array() | 0;
 if (!(HEAP32[$array >> 2] | 0)) {
  HEAP32[$0 >> 2] = 0;
  $45 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $45 | 0;
 }
 _lex_scan(HEAP32[$1 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
 if ((HEAP32[(HEAP32[$1 >> 2] | 0) + 56 >> 2] | 0) == 93) {
  HEAP32[$0 >> 2] = HEAP32[$array >> 2];
  $45 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $45 | 0;
 }
 while (1) {
  if (!(HEAP32[(HEAP32[$1 >> 2] | 0) + 56 >> 2] | 0)) {
   label = 10;
   break;
  }
  HEAP32[$elem >> 2] = _parse_value(HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
  if (!(HEAP32[$elem >> 2] | 0)) break;
  $27 = (_json_array_append(HEAP32[$array >> 2] | 0, HEAP32[$elem >> 2] | 0) | 0) != 0;
  _json_decref(HEAP32[$elem >> 2] | 0);
  if ($27) break;
  _lex_scan(HEAP32[$1 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
  if ((HEAP32[(HEAP32[$1 >> 2] | 0) + 56 >> 2] | 0) != 44) {
   label = 10;
   break;
  }
  _lex_scan(HEAP32[$1 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
 }
 do if ((label | 0) == 10) {
  if ((HEAP32[(HEAP32[$1 >> 2] | 0) + 56 >> 2] | 0) != 93) {
   _error_set(HEAP32[$3 >> 2] | 0, HEAP32[$1 >> 2] | 0, gb + 42023 | 0, $vararg_buffer);
   break;
  }
  HEAP32[$0 >> 2] = HEAP32[$array >> 2];
  $45 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $45 | 0;
 } while (0);
 _json_decref(HEAP32[$array >> 2] | 0);
 HEAP32[$0 >> 2] = 0;
 $45 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $45 | 0;
}

function _cexpf($agg$result, $z) {
 $agg$result = $agg$result | 0;
 $z = $z | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $13 = 0.0, $17 = 0.0, $2 = 0.0, $27 = 0, $29 = 0.0, $33 = 0.0, $4 = 0.0, $5 = 0, $9 = 0, $fabs = 0.0, $fabs13 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp;
 $2 = +HEAPF32[$z >> 2];
 $4 = +HEAPF32[$z + 4 >> 2];
 $fabs = +Math_abs(+$4);
 $5 = (HEAPF32[tempDoublePtr >> 2] = $fabs, HEAP32[tempDoublePtr >> 2] | 0);
 do if (!$5) {
  HEAPF32[$agg$result >> 2] = +Math_exp(+$2);
  HEAPF32[$agg$result + 4 >> 2] = $4;
 } else {
  $9 = (HEAPF32[tempDoublePtr >> 2] = $2, HEAP32[tempDoublePtr >> 2] | 0);
  $fabs13 = +Math_abs(+$2);
  $10 = (HEAPF32[tempDoublePtr >> 2] = $fabs13, HEAP32[tempDoublePtr >> 2] | 0);
  if (!$10) {
   $13 = +Math_sin(+$4);
   HEAPF32[$agg$result >> 2] = +Math_cos(+$4);
   HEAPF32[$agg$result + 4 >> 2] = $13;
   break;
  }
  if ($5 >>> 0 <= 2139095039) if (($9 + -1118925336 | 0) >>> 0 < 9342557) {
   HEAPF32[$1 >> 2] = $2;
   HEAPF32[$1 + 4 >> 2] = $4;
   HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   ___ldexp_cexpf($0, $$byval_copy, 0);
   $27 = HEAP32[$0 + 4 >> 2] | 0;
   HEAP32[$agg$result >> 2] = HEAP32[$0 >> 2];
   HEAP32[$agg$result + 4 >> 2] = $27;
   break;
  } else {
   $29 = +Math_exp(+$2);
   $33 = $29 * +Math_sin(+$4);
   HEAPF32[$agg$result >> 2] = $29 * +Math_cos(+$4);
   HEAPF32[$agg$result + 4 >> 2] = $33;
   break;
  }
  if (($10 | 0) != 2139095040) {
   $17 = $4 - $4;
   HEAPF32[$agg$result >> 2] = $17;
   HEAPF32[$agg$result + 4 >> 2] = $17;
   break;
  }
  if (($9 | 0) < 0) {
   HEAPF32[$agg$result >> 2] = 0.0;
   HEAPF32[$agg$result + 4 >> 2] = 0.0;
   break;
  } else {
   HEAPF32[$agg$result >> 2] = $2;
   HEAPF32[$agg$result + 4 >> 2] = $4 - $4;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function _fec_conv_punctured_create($_fs) {
 $_fs = $_fs | 0;
 var $0 = 0;
 $0 = _malloc(148) | 0;
 HEAP32[$0 >> 2] = $_fs;
 HEAPF32[$0 + 4 >> 2] = +_fec_get_rate($_fs);
 HEAP32[$0 + 136 >> 2] = fb + 4;
 HEAP32[$0 + 140 >> 2] = fb + 5;
 HEAP32[$0 + 144 >> 2] = fb + 6;
 do switch (HEAP32[$0 >> 2] | 0) {
 case 15:
  {
   _fec_conv_init_v27($0);
   HEAP32[$0 + 36 >> 2] = 2;
   HEAP32[$0 + 40 >> 2] = gb + 8872;
   break;
  }
 case 16:
  {
   _fec_conv_init_v27($0);
   HEAP32[$0 + 36 >> 2] = 3;
   HEAP32[$0 + 40 >> 2] = gb + 8888;
   break;
  }
 case 17:
  {
   _fec_conv_init_v27($0);
   HEAP32[$0 + 36 >> 2] = 4;
   HEAP32[$0 + 40 >> 2] = gb + 8912;
   break;
  }
 case 18:
  {
   _fec_conv_init_v27($0);
   HEAP32[$0 + 36 >> 2] = 5;
   HEAP32[$0 + 40 >> 2] = gb + 8944;
   break;
  }
 case 19:
  {
   _fec_conv_init_v27($0);
   HEAP32[$0 + 36 >> 2] = 6;
   HEAP32[$0 + 40 >> 2] = gb + 8984;
   break;
  }
 case 20:
  {
   _fec_conv_init_v27($0);
   HEAP32[$0 + 36 >> 2] = 7;
   HEAP32[$0 + 40 >> 2] = gb + 9032;
   break;
  }
 case 21:
  {
   _fec_conv_init_v29($0);
   HEAP32[$0 + 36 >> 2] = 2;
   HEAP32[$0 + 40 >> 2] = gb + 9088;
   break;
  }
 case 22:
  {
   _fec_conv_init_v29($0);
   HEAP32[$0 + 36 >> 2] = 3;
   HEAP32[$0 + 40 >> 2] = gb + 9104;
   break;
  }
 case 23:
  {
   _fec_conv_init_v29($0);
   HEAP32[$0 + 36 >> 2] = 4;
   HEAP32[$0 + 40 >> 2] = gb + 9128;
   break;
  }
 case 24:
  {
   _fec_conv_init_v29($0);
   HEAP32[$0 + 36 >> 2] = 5;
   HEAP32[$0 + 40 >> 2] = gb + 9160;
   break;
  }
 case 25:
  {
   _fec_conv_init_v29($0);
   HEAP32[$0 + 36 >> 2] = 6;
   HEAP32[$0 + 40 >> 2] = gb + 9200;
   break;
  }
 case 26:
  {
   _fec_conv_init_v29($0);
   HEAP32[$0 + 36 >> 2] = 7;
   HEAP32[$0 + 40 >> 2] = gb + 9248;
   break;
  }
 default:
  {
   _fwrite(gb + 13306 | 0, 49, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
   _exit(1);
  }
 } while (0);
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 return $0 | 0;
}

function _qdetector_cccf_create_linear($_sequence, $_sequence_len, $_ftype, $_k, $_m, $_beta) {
 $_sequence = $_sequence | 0;
 $_sequence_len = $_sequence_len | 0;
 $_ftype = $_ftype | 0;
 $_k = $_k | 0;
 $_m = $_m | 0;
 $_beta = +$_beta;
 var $$byval_copy = 0, $0 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $18 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $29 = 0, $i$06 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 8 | 0;
 $0 = sp;
 if (!$_sequence_len) {
  _fwrite(gb + 29912 | 0, 70, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if (($_k + -2 | 0) >>> 0 > 78) {
  _fwrite(gb + 29983 | 0, 76, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if (($_m + -1 | 0) >>> 0 > 99) {
  _fwrite(gb + 30060 | 0, 71, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if ($_beta < 0.0 | $_beta > 1.0) {
  _fwrite(gb + 30132 | 0, 80, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 $12 = ($_m << 1) + $_sequence_len | 0;
 $13 = Math_imul($12, $_k) | 0;
 $15 = _malloc($13 << 3) | 0;
 $16 = _firinterp_crcf_create_prototype($_ftype, $_k, $_m, $_beta, 0.0) | 0;
 if (!$12) {
  _firinterp_crcf_destroy($16);
  $29 = _qdetector_cccf_create($15, $13) | 0;
  _free($15);
  STACKTOP = sp;
  return $29 | 0;
 }
 $18 = $0 + 4 | 0;
 $i$06 = 0;
 do {
  if ($i$06 >>> 0 < $_sequence_len >>> 0) {
   $26 = +HEAPF32[$_sequence + ($i$06 << 3) >> 2];
   $27 = +HEAPF32[$_sequence + ($i$06 << 3) + 4 >> 2];
  } else {
   $26 = 0.0;
   $27 = 0.0;
  }
  $25 = $15 + ((Math_imul($i$06, $_k) | 0) << 3) | 0;
  HEAPF32[$0 >> 2] = $26;
  HEAPF32[$18 >> 2] = $27;
  HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$0 + 4 >> 2];
  _firinterp_crcf_execute($16, $$byval_copy, $25);
  $i$06 = $i$06 + 1 | 0;
 } while (($i$06 | 0) != ($12 | 0));
 _firinterp_crcf_destroy($16);
 $29 = _qdetector_cccf_create($15, $13) | 0;
 _free($15);
 STACKTOP = sp;
 return $29 | 0;
}

function _liquid_fft_estimate_method($_nfft) {
 $_nfft = $_nfft | 0;
 var $$0 = 0, $104 = 0;
 if (!$_nfft) {
  _fwrite(gb + 40714 | 0, 58, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  $$0 = 0;
  return $$0 | 0;
 }
 if (($_nfft | 1 | 0) == 17 | (($_nfft | 0) == 13 | ($_nfft >>> 0 < 9 | ($_nfft | 0) == 11))) {
  $$0 = 5;
  return $$0 | 0;
 }
 if ((($_nfft >>> 31) + (($_nfft >>> 30 & 1) + (($_nfft >>> 29 & 1) + (($_nfft >>> 28 & 1) + (($_nfft >>> 27 & 1) + (($_nfft >>> 26 & 1) + (($_nfft >>> 25 & 1) + (($_nfft >>> 24 & 1) + (($_nfft >>> 23 & 1) + (($_nfft >>> 22 & 1) + (($_nfft >>> 21 & 1) + (($_nfft >>> 20 & 1) + (($_nfft >>> 19 & 1) + (($_nfft >>> 18 & 1) + (($_nfft >>> 17 & 1) + (($_nfft >>> 16 & 1) + (($_nfft >>> 15 & 1) + (($_nfft >>> 14 & 1) + (($_nfft >>> 13 & 1) + (($_nfft >>> 12 & 1) + (($_nfft >>> 11 & 1) + (($_nfft >>> 10 & 1) + (($_nfft >>> 9 & 1) + (($_nfft >>> 8 & 1) + (($_nfft >>> 7 & 1) + (($_nfft >>> 6 & 1) + (($_nfft >>> 5 & 1) + (($_nfft >>> 4 & 1) + (($_nfft >>> 3 & 1) + (($_nfft >>> 2 & 1) + (($_nfft >>> 1 & 1) + ($_nfft & 1))))))))))))))))))))))))))))))) | 0) == 1) {
  $$0 = 2;
  return $$0 | 0;
 }
 if (!(_liquid_is_prime($_nfft) | 0)) {
  $$0 = 2;
  return $$0 | 0;
 }
 $104 = $_nfft + -1 | 0;
 $$0 = (($104 >>> 31) + (($104 >>> 30 & 1) + (($104 >>> 29 & 1) + (($104 >>> 28 & 1) + (($104 >>> 27 & 1) + (($104 >>> 26 & 1) + (($104 >>> 25 & 1) + (($104 >>> 24 & 1) + (($104 >>> 23 & 1) + (($104 >>> 22 & 1) + (($104 >>> 21 & 1) + (($104 >>> 20 & 1) + (($104 >>> 19 & 1) + (($104 >>> 18 & 1) + (($104 >>> 17 & 1) + (($104 >>> 16 & 1) + (($104 >>> 15 & 1) + (($104 >>> 14 & 1) + (($104 >>> 13 & 1) + (($104 >>> 12 & 1) + (($104 >>> 11 & 1) + (($104 >>> 10 & 1) + (($104 >>> 9 & 1) + (($104 >>> 8 & 1) + (($104 >>> 7 & 1) + (($104 >>> 6 & 1) + (($104 >>> 5 & 1) + (($104 >>> 4 & 1) + (($104 >>> 3 & 1) + (($104 >>> 2 & 1) + (($104 >>> 1 & 1) + ($104 & 1))))))))))))))))))))))))))))))) | 0) == 1 ? 3 : 4;
 return $$0 | 0;
}

function _json_array_grow($array, $amount, $copy) {
 $array = $array | 0;
 $amount = $amount | 0;
 $copy = $copy | 0;
 var $0 = 0, $1 = 0, $15 = 0, $2 = 0, $28 = 0, $3 = 0, $58 = 0, $new_size = 0, $new_table = 0, $old_table = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 24 | 0;
 $1 = sp + 20 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 12 | 0;
 $new_size = sp + 8 | 0;
 $old_table = sp + 4 | 0;
 $new_table = sp;
 HEAP32[$1 >> 2] = $array;
 HEAP32[$2 >> 2] = $amount;
 HEAP32[$3 >> 2] = $copy;
 $15 = HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] | 0;
 if (((HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] | 0) + (HEAP32[$2 >> 2] | 0) | 0) >>> 0 <= (HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] | 0) >>> 0) {
  HEAP32[$0 >> 2] = $15;
  $58 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $58 | 0;
 }
 HEAP32[$old_table >> 2] = $15;
 $28 = HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] | 0;
 HEAP32[$new_size >> 2] = ((HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[$2 >> 2] | 0) | 0) >>> 0 > HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] << 1 >>> 0 ? $28 + (HEAP32[$2 >> 2] | 0) | 0 : $28 << 1;
 HEAP32[$new_table >> 2] = _jsonp_malloc(HEAP32[$new_size >> 2] << 2) | 0;
 if (!(HEAP32[$new_table >> 2] | 0)) {
  HEAP32[$0 >> 2] = 0;
  $58 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $58 | 0;
 }
 HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] = HEAP32[$new_size >> 2];
 HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] = HEAP32[$new_table >> 2];
 if (HEAP32[$3 >> 2] | 0) {
  _array_copy(HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] | 0, 0, HEAP32[$old_table >> 2] | 0, 0, HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] | 0);
  _jsonp_free(HEAP32[$old_table >> 2] | 0);
  HEAP32[$0 >> 2] = HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2];
  $58 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $58 | 0;
 } else {
  HEAP32[$0 >> 2] = HEAP32[$old_table >> 2];
  $58 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $58 | 0;
 }
 return 0;
}

function _fec_secded3932_estimate_ehat($_sym_enc, $_e_hat) {
 $_sym_enc = $_sym_enc | 0;
 $_e_hat = $_e_hat | 0;
 var $$lcssa = 0, $1 = 0, $17 = 0, $3 = 0, $5 = 0, $54 = 0, $56 = 0, $7 = 0, $73 = 0, $9 = 0, $d = 0, $i$02$i = 0, $n$03 = 0, $n$03$lcssa = 0, $syndrome$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $d = sp;
 HEAP8[$_e_hat >> 0] = 0;
 HEAP8[$_e_hat + 1 >> 0] = 0;
 HEAP8[$_e_hat + 2 >> 0] = 0;
 HEAP8[$_e_hat + 3 >> 0] = 0;
 HEAP8[$_e_hat + 4 >> 0] = 0;
 $1 = HEAPU8[$_sym_enc >> 0] | 0;
 $3 = HEAP8[$_sym_enc + 1 >> 0] | 0;
 $5 = HEAP8[$_sym_enc + 2 >> 0] | 0;
 $7 = HEAP8[$_sym_enc + 3 >> 0] | 0;
 $9 = HEAP8[$_sym_enc + 4 >> 0] | 0;
 $i$02$i = 0;
 $syndrome$01$i = 0;
 while (1) {
  $17 = $i$02$i << 2;
  $54 = ((1 << 6 - $i$02$i & $1 | 0) != 0 & 1) + (HEAPU8[(HEAP8[gb + 19131 + $17 >> 0] & $3 & 255) + (gb + 39229) >> 0] | 0) + (HEAPU8[(HEAP8[($17 | 1) + (gb + 19131) >> 0] & $5 & 255) + (gb + 39229) >> 0] | 0) + (HEAPU8[(HEAP8[($17 | 2) + (gb + 19131) >> 0] & $7 & 255) + (gb + 39229) >> 0] | 0) + (HEAPU8[(HEAP8[($17 | 3) + (gb + 19131) >> 0] & $9 & 255) + (gb + 39229) >> 0] | 0) & 1 | $syndrome$01$i << 1 & 510;
  $i$02$i = $i$02$i + 1 | 0;
  if (($i$02$i | 0) == 7) {
   $$lcssa = $54;
   break;
  } else $syndrome$01$i = $54;
 }
 $56 = $$lcssa & 255;
 if (!(HEAP8[($$lcssa & 255) + (gb + 39229) >> 0] | 0)) {
  $73 = 0;
  STACKTOP = sp;
  return $73 | 0;
 } else $n$03 = 0;
 while (1) {
  if ($56 << 24 >> 24 == (HEAP8[gb + 19159 + $n$03 >> 0] | 0)) {
   $n$03$lcssa = $n$03;
   break;
  }
  $n$03 = $n$03 + 1 | 0;
  if ($n$03 >>> 0 >= 39) {
   $73 = 2;
   label = 7;
   break;
  }
 }
 if ((label | 0) == 7) {
  STACKTOP = sp;
  return $73 | 0;
 }
 _div($d, $n$03$lcssa, 8);
 HEAP8[$_e_hat + (4 - (HEAP32[$d >> 2] | 0)) >> 0] = 1 << HEAP32[$d + 4 >> 2];
 $73 = 1;
 STACKTOP = sp;
 return $73 | 0;
}

function _iirfilt_crcf_create($_b, $_nb, $_a, $_na) {
 $_b = $_b | 0;
 $_nb = $_nb | 0;
 $_a = $_a | 0;
 $_na = $_na | 0;
 var $1 = 0, $11 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $3 = 0, $31 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $_na$_nb = 0, $i$03 = 0, $i$12 = 0, $i$14$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 if (!$_nb) {
  $1 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = gb + 20371;
  _fprintf($1, gb + 21847 | 0, $vararg_buffer) | 0;
  _exit(1);
 }
 if (!$_na) {
  $3 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer1 >> 2] = gb + 20371;
  _fprintf($3, gb + 21908 | 0, $vararg_buffer1) | 0;
  _exit(1);
 }
 $4 = _malloc(36) | 0;
 HEAP32[$4 + 16 >> 2] = $_nb;
 $6 = $4 + 20 | 0;
 HEAP32[$6 >> 2] = $_na;
 $_na$_nb = $_na >>> 0 > $_nb >>> 0 ? $_na : $_nb;
 $8 = $4 + 12 | 0;
 HEAP32[$8 >> 2] = $_na$_nb;
 HEAP32[$4 + 24 >> 2] = 0;
 $11 = _malloc($_na << 2) | 0;
 HEAP32[$4 >> 2] = $11;
 $14 = $4 + 4 | 0;
 HEAP32[$14 >> 2] = _malloc($_nb << 2) | 0;
 $15 = +HEAPF32[$_a >> 2];
 $i$03 = 0;
 do {
  HEAPF32[$11 + ($i$03 << 2) >> 2] = +HEAPF32[$_b + ($i$03 << 2) >> 2] / $15;
  $i$03 = $i$03 + 1 | 0;
 } while ($i$03 >>> 0 < $_nb >>> 0);
 $16 = HEAP32[$14 >> 2] | 0;
 $17 = HEAP32[$6 >> 2] | 0;
 $i$12 = 0;
 do {
  HEAPF32[$16 + ($i$12 << 2) >> 2] = +HEAPF32[$_a + ($i$12 << 2) >> 2] / $15;
  $i$12 = $i$12 + 1 | 0;
 } while ($i$12 >>> 0 < $17 >>> 0);
 $31 = _malloc($_na$_nb << 3) | 0;
 HEAP32[$4 + 8 >> 2] = $31;
 if (!$_na$_nb) {
  STACKTOP = sp;
  return $4 | 0;
 }
 $34 = HEAP32[$8 >> 2] | 0;
 $i$14$i = 0;
 do {
  HEAPF32[$31 + ($i$14$i << 3) >> 2] = 0.0;
  HEAPF32[$31 + ($i$14$i << 3) + 4 >> 2] = 0.0;
  $i$14$i = $i$14$i + 1 | 0;
 } while ($i$14$i >>> 0 < $34 >>> 0);
 STACKTOP = sp;
 return $4 | 0;
}

function _vfprintf($f, $fmt, $ap) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$ = 0, $$0 = 0, $12 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $28 = 0, $33 = 0, $6 = 0, $7 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $ap2 = sp + 120 | 0;
 $nl_type = sp + 80 | 0;
 $nl_arg = sp;
 $internal_buf = sp + 136 | 0;
 dest = $nl_type;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$ap2 >> 2] = HEAP32[$ap >> 2];
 if ((_printf_core(0, $fmt, $ap2, $nl_arg, $nl_type) | 0) < 0) $$0 = -1; else {
  if ((HEAP32[$f + 76 >> 2] | 0) > -1) $33 = ___lockfile($f) | 0; else $33 = 0;
  $6 = HEAP32[$f >> 2] | 0;
  $7 = $6 & 32;
  if ((HEAP8[$f + 74 >> 0] | 0) < 1) HEAP32[$f >> 2] = $6 & -33;
  $12 = $f + 48 | 0;
  if (!(HEAP32[$12 >> 2] | 0)) {
   $16 = $f + 44 | 0;
   $17 = HEAP32[$16 >> 2] | 0;
   HEAP32[$16 >> 2] = $internal_buf;
   $18 = $f + 28 | 0;
   HEAP32[$18 >> 2] = $internal_buf;
   $19 = $f + 20 | 0;
   HEAP32[$19 >> 2] = $internal_buf;
   HEAP32[$12 >> 2] = 80;
   $21 = $f + 16 | 0;
   HEAP32[$21 >> 2] = $internal_buf + 80;
   $22 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type) | 0;
   if (!$17) $ret$1 = $22; else {
    mftCall_iiii(HEAP32[$f + 36 >> 2] | 0, $f | 0, 0, 0) | 0;
    $$ = (HEAP32[$19 >> 2] | 0) == 0 ? -1 : $22;
    HEAP32[$16 >> 2] = $17;
    HEAP32[$12 >> 2] = 0;
    HEAP32[$21 >> 2] = 0;
    HEAP32[$18 >> 2] = 0;
    HEAP32[$19 >> 2] = 0;
    $ret$1 = $$;
   }
  } else $ret$1 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type) | 0;
  $28 = HEAP32[$f >> 2] | 0;
  HEAP32[$f >> 2] = $28 | $7;
  if ($33 | 0) ___unlockfile($f);
  $$0 = ($28 & 32 | 0) == 0 ? $ret$1 : -1;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _utf8_encode($codepoint, $buffer, $size) {
 $codepoint = $codepoint | 0;
 $buffer = $buffer | 0;
 $size = $size | 0;
 var $0 = 0, $1 = 0, $13 = 0, $2 = 0, $27 = 0, $3 = 0, $75 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 12 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$1 >> 2] = $codepoint;
 HEAP32[$2 >> 2] = $buffer;
 HEAP32[$3 >> 2] = $size;
 if ((HEAP32[$1 >> 2] | 0) < 0) {
  HEAP32[$0 >> 2] = -1;
  $75 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $75 | 0;
 }
 $8 = HEAP32[$1 >> 2] | 0;
 do if ((HEAP32[$1 >> 2] | 0) < 128) {
  HEAP8[HEAP32[$2 >> 2] >> 0] = $8;
  HEAP32[HEAP32[$3 >> 2] >> 2] = 1;
 } else {
  $13 = HEAP32[$1 >> 2] | 0;
  if (($8 | 0) < 2048) {
   HEAP8[HEAP32[$2 >> 2] >> 0] = 192 + (($13 & 1984) >> 6);
   HEAP8[(HEAP32[$2 >> 2] | 0) + 1 >> 0] = 128 + (HEAP32[$1 >> 2] & 63);
   HEAP32[HEAP32[$3 >> 2] >> 2] = 2;
   break;
  }
  $27 = HEAP32[$1 >> 2] | 0;
  if (($13 | 0) < 65536) {
   HEAP8[HEAP32[$2 >> 2] >> 0] = 224 + (($27 & 61440) >> 12);
   HEAP8[(HEAP32[$2 >> 2] | 0) + 1 >> 0] = 128 + ((HEAP32[$1 >> 2] & 4032) >> 6);
   HEAP8[(HEAP32[$2 >> 2] | 0) + 2 >> 0] = 128 + (HEAP32[$1 >> 2] & 63);
   HEAP32[HEAP32[$3 >> 2] >> 2] = 3;
   break;
  }
  if (($27 | 0) <= 1114111) {
   HEAP8[HEAP32[$2 >> 2] >> 0] = 240 + ((HEAP32[$1 >> 2] & 1835008) >> 18);
   HEAP8[(HEAP32[$2 >> 2] | 0) + 1 >> 0] = 128 + ((HEAP32[$1 >> 2] & 258048) >> 12);
   HEAP8[(HEAP32[$2 >> 2] | 0) + 2 >> 0] = 128 + ((HEAP32[$1 >> 2] & 4032) >> 6);
   HEAP8[(HEAP32[$2 >> 2] | 0) + 3 >> 0] = 128 + (HEAP32[$1 >> 2] & 63);
   HEAP32[HEAP32[$3 >> 2] >> 2] = 4;
   break;
  }
  HEAP32[$0 >> 2] = -1;
  $75 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $75 | 0;
 } while (0);
 HEAP32[$0 >> 2] = 0;
 $75 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $75 | 0;
}

function _packetizer_decode($_p, $_pkt, $_msg) {
 $_p = $_p | 0;
 $_pkt = $_pkt | 0;
 $_msg = $_msg | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $10 = 0, $12 = 0, $13 = 0, $20 = 0, $33 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $7 = 0, $8 = 0, $i$03 = 0, $i$11 = 0, $key$0$lcssa = 0, $key$02 = 0;
 $0 = $_p + 28 | 0;
 _memmove(HEAP32[$0 >> 2] | 0, $_pkt | 0, HEAP32[$_p + 4 >> 2] | 0) | 0;
 $5 = HEAP32[$_p + 20 >> 2] | 0;
 if ($5 | 0) {
  $7 = $_p + 16 | 0;
  $8 = $_p + 32 | 0;
  $i$03 = $5;
  do {
   $i$03 = $i$03 + -1 | 0;
   _interleaver_decode(HEAP32[(HEAP32[$7 >> 2] | 0) + ($i$03 * 20 | 0) + 16 >> 2] | 0, HEAP32[$0 >> 2] | 0, HEAP32[$8 >> 2] | 0);
   $20 = HEAP32[$7 >> 2] | 0;
   _fec_decode(HEAP32[$20 + ($i$03 * 20 | 0) + 12 >> 2] | 0, HEAP32[$20 + ($i$03 * 20 | 0) >> 2] | 0, HEAP32[$8 >> 2] | 0, HEAP32[$0 >> 2] | 0);
  } while (($i$03 | 0) != 0);
 }
 $10 = HEAP32[$_p + 12 >> 2] | 0;
 if (!$10) {
  $$pre$phiZ2D = $_p;
  $36 = HEAP32[$0 >> 2] | 0;
  $37 = HEAP32[$_p >> 2] | 0;
  $key$0$lcssa = 0;
  _memmove($_msg | 0, $36 | 0, $37 | 0) | 0;
  $38 = $_p + 8 | 0;
  $39 = HEAP32[$38 >> 2] | 0;
  $40 = HEAP32[$0 >> 2] | 0;
  $41 = HEAP32[$$pre$phiZ2D >> 2] | 0;
  $42 = _crc_validate_message($39, $40, $41, $key$0$lcssa) | 0;
  return $42 | 0;
 }
 $12 = HEAP32[$_p >> 2] | 0;
 $13 = HEAP32[$0 >> 2] | 0;
 $i$11 = 0;
 $key$02 = 0;
 while (1) {
  $33 = HEAPU8[$13 + ($12 + $i$11) >> 0] | 0 | $key$02 << 8;
  $i$11 = $i$11 + 1 | 0;
  if ($i$11 >>> 0 >= $10 >>> 0) {
   $$pre$phiZ2D = $_p;
   $36 = $13;
   $37 = $12;
   $key$0$lcssa = $33;
   break;
  } else $key$02 = $33;
 }
 _memmove($_msg | 0, $36 | 0, $37 | 0) | 0;
 $38 = $_p + 8 | 0;
 $39 = HEAP32[$38 >> 2] | 0;
 $40 = HEAP32[$0 >> 2] | 0;
 $41 = HEAP32[$$pre$phiZ2D >> 2] | 0;
 $42 = _crc_validate_message($39, $40, $41, $key$0$lcssa) | 0;
 return $42 | 0;
}

function _ofdmframe_validate_sctype($_p, $_M, $_M_null, $_M_pilot, $_M_data) {
 $_p = $_p | 0;
 $_M = $_M | 0;
 $_M_null = $_M_null | 0;
 $_M_pilot = $_M_pilot | 0;
 $_M_data = $_M_data | 0;
 var $$lcssa = 0, $2 = 0, $7 = 0, $M_data$0$lcssa = 0, $M_data$06 = 0, $M_data$1 = 0, $M_null$0$lcssa = 0, $M_null$04 = 0, $M_null$1 = 0, $M_pilot$0$lcssa = 0, $M_pilot$05 = 0, $M_pilot$1 = 0, $i$07 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 L1 : do if (!$_M) {
  $M_data$0$lcssa = 0;
  $M_null$0$lcssa = 0;
  $M_pilot$0$lcssa = 0;
 } else {
  $M_data$06 = 0;
  $M_null$04 = 0;
  $M_pilot$05 = 0;
  $i$07 = 0;
  L2 : while (1) {
   $2 = HEAP8[$_p + $i$07 >> 0] | 0;
   switch ($2 << 24 >> 24) {
   case 0:
    {
     $M_data$1 = $M_data$06;
     $M_null$1 = $M_null$04 + 1 | 0;
     $M_pilot$1 = $M_pilot$05;
     break;
    }
   case 1:
    {
     $M_data$1 = $M_data$06;
     $M_null$1 = $M_null$04;
     $M_pilot$1 = $M_pilot$05 + 1 | 0;
     break;
    }
   case 2:
    {
     $M_data$1 = $M_data$06 + 1 | 0;
     $M_null$1 = $M_null$04;
     $M_pilot$1 = $M_pilot$05;
     break;
    }
   default:
    {
     $$lcssa = $2;
     break L2;
    }
   }
   $i$07 = $i$07 + 1 | 0;
   if ($i$07 >>> 0 >= $_M >>> 0) {
    $M_data$0$lcssa = $M_data$1;
    $M_null$0$lcssa = $M_null$1;
    $M_pilot$0$lcssa = $M_pilot$1;
    break L1;
   } else {
    $M_data$06 = $M_data$1;
    $M_null$04 = $M_null$1;
    $M_pilot$05 = $M_pilot$1;
   }
  }
  $7 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = $$lcssa & 255;
  _fprintf($7, gb + 35637 | 0, $vararg_buffer) | 0;
  _exit(1);
 } while (0);
 HEAP32[$_M_null >> 2] = $M_null$0$lcssa;
 HEAP32[$_M_pilot >> 2] = $M_pilot$0$lcssa;
 HEAP32[$_M_data >> 2] = $M_data$0$lcssa;
 STACKTOP = sp;
 return;
}

function _fec_rs_encode($_q, $_dec_msg_len, $_msg_dec, $_msg_enc) {
 $_q = $_q | 0;
 $_dec_msg_len = $_dec_msg_len | 0;
 $_msg_dec = $_msg_dec | 0;
 $_msg_enc = $_msg_enc | 0;
 var $10 = 0, $12 = 0, $19 = 0, $2 = 0, $25 = 0, $27 = 0, $3 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $block_size$04 = 0, $block_size$1 = 0, $i$01 = 0, $n0$0$lcssa = 0, $n0$02 = 0, $n1$0$lcssa = 0, $n1$03 = 0;
 if (!$_dec_msg_len) {
  _fwrite(gb + 18727 | 0, 49, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 _fec_rs_setlength($_q, $_dec_msg_len);
 $2 = $_q + 104 | 0;
 $3 = $_q + 100 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if (!$4) {
  $n0$0$lcssa = 0;
  $n1$0$lcssa = 0;
 } else {
  $7 = $_q + 112 | 0;
  $8 = $_q + 120 | 0;
  $9 = $_q + 96 | 0;
  $10 = $_q + 108 | 0;
  $12 = $4;
  $block_size$04 = HEAP32[$2 >> 2] | 0;
  $i$01 = 0;
  $n0$02 = 0;
  $n1$03 = 0;
  while (1) {
   if (($i$01 | 0) == ($12 + -1 | 0)) $block_size$1 = $block_size$04 - (HEAP32[$7 >> 2] | 0) | 0; else $block_size$1 = $block_size$04;
   _memmove(HEAP32[$8 >> 2] | 0, $_msg_dec + $n0$02 | 0, $block_size$1 | 0) | 0;
   $19 = HEAP32[$8 >> 2] | 0;
   _encode_rs_char(HEAP32[$9 >> 2] | 0, $19 | 0, $19 + (HEAP32[$2 >> 2] | 0) | 0);
   _memmove($_msg_enc + $n1$03 | 0, HEAP32[$8 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0;
   $25 = $block_size$1 + $n0$02 | 0;
   $27 = (HEAP32[$10 >> 2] | 0) + $n1$03 | 0;
   $i$01 = $i$01 + 1 | 0;
   $12 = HEAP32[$3 >> 2] | 0;
   if ($i$01 >>> 0 >= $12 >>> 0) {
    $n0$0$lcssa = $25;
    $n1$0$lcssa = $27;
    break;
   } else {
    $block_size$04 = $block_size$1;
    $n0$02 = $25;
    $n1$03 = $27;
   }
  }
 }
 if (($n0$0$lcssa | 0) != (HEAP32[$_q + 8 >> 2] | 0)) ___assert_fail(gb + 18777 | 0, gb + 18801 | 0, 131, gb + 18822 | 0);
 if (($n1$0$lcssa | 0) == (HEAP32[$_q + 12 >> 2] | 0)) return; else ___assert_fail(gb + 18836 | 0, gb + 18801 | 0, 132, gb + 18822 | 0);
}

function _ofdmframe_init_S0($_p, $_M, $_S0, $_s0, $_M_S0) {
 $_p = $_p | 0;
 $_M = $_M | 0;
 $_S0 = $_S0 | 0;
 $_s0 = $_s0 | 0;
 $_M_S0 = $_M_S0 | 0;
 var $0 = 0, $23 = 0, $26 = 0.0, $27 = 0, $29 = 0, $3 = 0, $32 = 0.0, $4 = 0, $6 = 0, $M_S0$02 = 0, $M_S0$1 = 0, $M_S0$1$lcssa = 0, $i$03 = 0, $i$11 = 0;
 $0 = _liquid_nextpow2($_M) | 0;
 $3 = _msequence_create_default($0 >>> 0 < 4 ? 4 : $0 >>> 0 > 8 ? 8 : $0) | 0;
 $4 = ($_M | 0) == 0;
 if ($4) {
  _msequence_destroy($3);
  $23 = HEAP32[gb + 9336 >> 2] | 0;
  _fwrite(gb + 35430 | 0, 69, 1, $23) | 0;
  _exit(1);
 } else {
  $M_S0$02 = 0;
  $i$03 = 0;
 }
 while (1) {
  $6 = (_msequence_generate_symbol($3, 3) | 0) & 1;
  do if (!(HEAP8[$_p + $i$03 >> 0] | 0)) {
   HEAPF32[$_S0 + ($i$03 << 3) >> 2] = 0.0;
   HEAPF32[$_S0 + ($i$03 << 3) + 4 >> 2] = 0.0;
   $M_S0$1 = $M_S0$02;
  } else if (!($i$03 & 1)) {
   HEAPF32[$_S0 + ($i$03 << 3) >> 2] = $6 | 0 ? 1.0 : -1.0;
   HEAPF32[$_S0 + ($i$03 << 3) + 4 >> 2] = 0.0;
   $M_S0$1 = $M_S0$02 + 1 | 0;
   break;
  } else {
   HEAPF32[$_S0 + ($i$03 << 3) >> 2] = 0.0;
   HEAPF32[$_S0 + ($i$03 << 3) + 4 >> 2] = 0.0;
   $M_S0$1 = $M_S0$02;
   break;
  } while (0);
  $i$03 = $i$03 + 1 | 0;
  if (($i$03 | 0) == ($_M | 0)) {
   $M_S0$1$lcssa = $M_S0$1;
   break;
  } else $M_S0$02 = $M_S0$1;
 }
 _msequence_destroy($3);
 if (!$M_S0$1$lcssa) {
  $23 = HEAP32[gb + 9336 >> 2] | 0;
  _fwrite(gb + 35430 | 0, 69, 1, $23) | 0;
  _exit(1);
 }
 HEAP32[$_M_S0 >> 2] = $M_S0$1$lcssa;
 _fft_run($_M, $_S0, $_s0, -1, 0);
 $26 = 1.0 / +Math_sqrt(+(+($M_S0$1$lcssa >>> 0)));
 if ($4) return; else $i$11 = 0;
 do {
  $27 = $_s0 + ($i$11 << 3) | 0;
  $29 = $_s0 + ($i$11 << 3) + 4 | 0;
  $32 = $26 * +HEAPF32[$29 >> 2];
  HEAPF32[$27 >> 2] = $26 * +HEAPF32[$27 >> 2];
  HEAPF32[$29 >> 2] = $32;
  $i$11 = $i$11 + 1 | 0;
 } while (($i$11 | 0) != ($_M | 0));
 return;
}

function _fec_get_rate($_scheme) {
 $_scheme = $_scheme | 0;
 var $$0 = 0.0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 do switch ($_scheme | 0) {
 case 0:
  {
   $$0 = 0.0;
   break;
  }
 case 1:
  {
   $$0 = 1.0;
   break;
  }
 case 2:
  {
   $$0 = .3333333432674408;
   break;
  }
 case 3:
  {
   $$0 = .20000000298023224;
   break;
  }
 case 4:
  {
   $$0 = .5714285969734192;
   break;
  }
 case 5:
  {
   $$0 = .5;
   break;
  }
 case 6:
  {
   $$0 = .6666666865348816;
   break;
  }
 case 7:
  {
   $$0 = .5;
   break;
  }
 case 8:
  {
   $$0 = .6666666865348816;
   break;
  }
 case 9:
  {
   $$0 = .800000011920929;
   break;
  }
 case 10:
  {
   $$0 = .8888888955116272;
   break;
  }
 case 11:
  {
   $$0 = .5;
   break;
  }
 case 12:
  {
   $$0 = .5;
   break;
  }
 case 13:
  {
   $$0 = .3333333432674408;
   break;
  }
 case 14:
  {
   $$0 = .1666666716337204;
   break;
  }
 case 15:
  {
   $$0 = .6666666865348816;
   break;
  }
 case 16:
  {
   $$0 = .75;
   break;
  }
 case 17:
  {
   $$0 = .800000011920929;
   break;
  }
 case 18:
  {
   $$0 = .8333333134651184;
   break;
  }
 case 19:
  {
   $$0 = .8571428656578064;
   break;
  }
 case 20:
  {
   $$0 = .875;
   break;
  }
 case 21:
  {
   $$0 = .6666666865348816;
   break;
  }
 case 22:
  {
   $$0 = .75;
   break;
  }
 case 23:
  {
   $$0 = .800000011920929;
   break;
  }
 case 24:
  {
   $$0 = .8333333134651184;
   break;
  }
 case 25:
  {
   $$0 = .8571428656578064;
   break;
  }
 case 26:
  {
   $$0 = .875;
   break;
  }
 case 27:
  {
   $$0 = .8745098114013672;
   break;
  }
 default:
  {
   HEAP32[$vararg_buffer >> 2] = $_scheme;
   _printf(gb + 12821 | 0, $vararg_buffer) | 0;
   _exit(-1);
  }
 } while (0);
 STACKTOP = sp;
 return +$$0;
}

function _liquid_unpack_array_block($_src, $_n, $_b, $_m, $_syms_out) {
 $_src = $_src | 0;
 $_n = $_n | 0;
 $_b = $_b | 0;
 $_m = $_m | 0;
 $_syms_out = $_syms_out | 0;
 var $$0$$i$us = 0, $$0$lcssa$i$us = 0, $$05$i$us = 0, $1 = 0, $10 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $4 = 0, $5 = 0, $6 = 0, $b0$02$i$us = 0, $i$04 = 0, $i$04$us = 0, $i0$04$i$us = 0, $k$05$us = 0, $out$0$lcssa$i$us = 0, $out$03$i$us = 0;
 $1 = $_n << 3;
 if (!(($_m | 0) != 0 & ($1 | 0) != 0)) return;
 if (!$_b) {
  $4 = ($1 | 0) != 0;
  $i$04 = 0;
  do {
   HEAP32[$_syms_out + ($i$04 << 2) >> 2] = 0;
   $i$04 = $i$04 + 1 | 0;
  } while ($i$04 >>> 0 < $_m >>> 0 & $4);
  return;
 } else {
  $i$04$us = 0;
  $k$05$us = 0;
 }
 do {
  $5 = $_syms_out + ($i$04$us << 2) | 0;
  $6 = $k$05$us >>> 3;
  if ($6 >>> 0 < $_n >>> 0) {
   $$05$i$us = $_b;
   $b0$02$i$us = $k$05$us - ($6 << 3) | 0;
   $i0$04$i$us = $6;
   $out$03$i$us = 0;
   while (1) {
    $10 = 8 - $b0$02$i$us | 0;
    $$0$$i$us = $$05$i$us >>> 0 < $10 >>> 0 ? $$05$i$us : $10;
    $22 = 255 >>> (8 - $$0$$i$us | 0) & 255 & (HEAPU8[$_src + $i0$04$i$us >> 0] | 0) >>> ($10 - $$0$$i$us | 0) | $out$03$i$us << $$0$$i$us;
    $23 = $$0$$i$us + $b0$02$i$us | 0;
    $24 = $23 >>> 0 > 7;
    $i0$04$i$us = ($24 & 1) + $i0$04$i$us | 0;
    $27 = $$05$i$us - $$0$$i$us | 0;
    if (!(($$05$i$us | 0) != ($$0$$i$us | 0) & $i0$04$i$us >>> 0 < $_n >>> 0)) {
     $$0$lcssa$i$us = $27;
     $out$0$lcssa$i$us = $22;
     break;
    } else {
     $$05$i$us = $27;
     $b0$02$i$us = $24 ? $23 & 7 : $23;
     $out$03$i$us = $22;
    }
   }
  } else {
   $$0$lcssa$i$us = $_b;
   $out$0$lcssa$i$us = 0;
  }
  HEAP32[$5 >> 2] = $out$0$lcssa$i$us << $$0$lcssa$i$us;
  $i$04$us = $i$04$us + 1 | 0;
  $k$05$us = $k$05$us + $_b | 0;
 } while ($i$04$us >>> 0 < $_m >>> 0 & $k$05$us >>> 0 < $1 >>> 0);
 return;
}

function _erfc2_142($ix, $x) {
 $ix = $ix | 0;
 $x = +$x;
 var $$0 = 0.0, $$pn = 0.0, $1 = 0.0, $2 = 0.0, $30 = 0.0, $86 = 0.0, $R$0 = 0.0;
 $1 = +Math_abs(+$x);
 if ($ix >>> 0 < 1067450368) {
  $2 = $1 + -1.0;
  $$0 = .15493708848953247 - ($2 * ($2 * ($2 * ($2 * ($2 * (.03547830507159233 - $2 * .002166375517845154) + -.11089469492435455) + .31834661960601807) + -.3722078800201416) + .41485610604286194) + -2.3621185682713985e-03) / ($2 * ($2 * ($2 * ($2 * ($2 * ($2 * .011984500102698803 + .01363708358258009) + .12617121636867523) + .07182865589857101) + .5403979420661926) + .10642088204622269) + 1.0);
 } else {
  $30 = 1.0 / ($1 * $1);
  if ($ix >>> 0 < 1077336941) {
   $$pn = $30 * ($30 * ($30 * ($30 * ($30 * ($30 * (6.570249557495117 - $30 * .06042441353201866) + 108.63500213623047) + 429.0081481933594) + 645.3872680664062) + 434.5658874511719) + 137.6577606201172) + 19.65127182006836;
   $R$0 = $30 * ($30 * ($30 * ($30 * ($30 * ($30 * (-81.28743743896484 - $30 * 9.814329147338867) + -184.60508728027344) + -162.39666748046875) + -62.37533187866211) + -10.558626174926758) + -.6938585638999939) + -.009864944033324718;
  } else {
   $$pn = $30 * ($30 * ($30 * ($30 * ($30 * (474.5285339355469 - $30 * 22.44095230102539) + 2553.05029296875) + 3199.858154296875) + 1536.7296142578125) + 325.7925109863281) + 30.33806037902832;
   $R$0 = $30 * ($30 * ($30 * ($30 * ($30 * (-1025.0950927734375 - $30 * 483.5191955566406) + -637.5664672851562) + -160.63638305664062) + -17.75795555114746) + -.7992832660675049) + -.009864943102002144;
  }
  $86 = (HEAP32[tempDoublePtr >> 2] = (HEAPF32[tempDoublePtr >> 2] = $1, HEAP32[tempDoublePtr >> 2] | 0) & -8192, +HEAPF32[tempDoublePtr >> 2]);
  $$0 = +Math_exp(+(-.5625 - $86 * $86)) * +Math_exp(+(($86 - $1) * ($1 + $86) + $R$0 / ($30 * $$pn + 1.0))) / $1;
 }
 return +$$0;
}

function _firinterp_crcf_execute($_q, $_x, $_y) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 $_y = $_y | 0;
 var $$byval_copy = 0, $$lcssa = 0, $0 = 0, $1 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $26 = 0.0, $28 = 0, $31 = 0.0, $5 = 0, $7 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 16 | 0;
 $vararg_buffer = sp;
 $0 = sp + 8 | 0;
 $1 = $_q + 16 | 0;
 $5 = HEAP32[$_x + 4 >> 2] | 0;
 $7 = HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] | 0;
 HEAP32[$0 >> 2] = HEAP32[$_x >> 2];
 HEAP32[$0 + 4 >> 2] = $5;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 _windowcf_push($7, $$byval_copy);
 $9 = $_q + 12 | 0;
 if (!(HEAP32[$9 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 $i$03 = 0;
 while (1) {
  $12 = HEAP32[$1 >> 2] | 0;
  $13 = $_y + ($i$03 << 3) | 0;
  $15 = HEAP32[$12 + 12 >> 2] | 0;
  if ($15 >>> 0 <= $i$03 >>> 0) {
   $$lcssa = $15;
   $i$03$lcssa = $i$03;
   label = 4;
   break;
  }
  _windowcf_read(HEAP32[$12 + 16 >> 2] | 0, $$byval_copy);
  _dotprod_crcf_execute(HEAP32[(HEAP32[$12 + 20 >> 2] | 0) + ($i$03 << 2) >> 2] | 0, HEAP32[$$byval_copy >> 2] | 0, $13);
  $26 = +HEAPF32[$12 + 24 >> 2];
  $28 = $_y + ($i$03 << 3) + 4 | 0;
  $31 = $26 * +HEAPF32[$28 >> 2];
  HEAPF32[$13 >> 2] = $26 * +HEAPF32[$13 >> 2];
  HEAPF32[$28 >> 2] = $31;
  $i$03 = $i$03 + 1 | 0;
  if ($i$03 >>> 0 >= (HEAP32[$9 >> 2] | 0) >>> 0) {
   label = 6;
   break;
  }
 }
 if ((label | 0) == 4) {
  $17 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = $i$03$lcssa;
  HEAP32[$vararg_buffer + 4 >> 2] = $$lcssa;
  _fprintf($17, gb + 21457 | 0, $vararg_buffer) | 0;
  _exit(1);
 } else if ((label | 0) == 6) {
  STACKTOP = sp;
  return;
 }
}

function _modem_demodulate_psk($_q, $_x, $_sym_out) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 $_sym_out = $_sym_out | 0;
 var $$01$i = 0.0, $$1$i = 0.0, $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $16 = 0, $17 = 0, $28 = 0, $29 = 0, $3 = 0, $32 = 0.0, $35 = 0.0, $37 = 0.0, $5 = 0.0, $8 = 0.0, $9 = 0.0, $i$0$neg4$i = 0, $i$02$i = 0, $s$0$lcssa$i = 0, $s$03$i = 0, $s$1$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 8 | 0;
 $0 = sp;
 $1 = HEAP32[$_x >> 2] | 0;
 $3 = HEAP32[$_x + 4 >> 2] | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $3;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 $5 = +_cargf($$byval_copy);
 $8 = $5 - +HEAPF32[$_q + 100 >> 2];
 $9 = $8;
 $11 = HEAP32[$_q + 4 >> 2] | 0;
 if (!$11) $s$0$lcssa$i = 0; else {
  $16 = $11 + -1 | 0;
  $$01$i = $9 < -3.141592653589793 ? $9 + 6.283185307179586 : $8;
  $i$0$neg4$i = 0;
  $i$02$i = 0;
  $s$03$i = 0;
  while (1) {
   $17 = $s$03$i << 1;
   if ($$01$i > 0.0) {
    $$1$i = $$01$i - +HEAPF32[$_q + 12 + ($i$0$neg4$i + $16 << 2) >> 2];
    $s$1$i = $17 | 1;
   } else {
    $$1$i = $$01$i + +HEAPF32[$_q + 12 + ($i$0$neg4$i + $16 << 2) >> 2];
    $s$1$i = $17;
   }
   $28 = $i$02$i + 1 | 0;
   if (($28 | 0) == ($11 | 0)) {
    $s$0$lcssa$i = $s$1$i;
    break;
   } else {
    $$01$i = $$1$i;
    $i$0$neg4$i = ~$i$02$i;
    $i$02$i = $28;
    $s$03$i = $s$1$i;
   }
  }
 }
 $29 = _gray_encode($s$0$lcssa$i) | 0;
 HEAP32[$_sym_out >> 2] = $29;
 $32 = +((_gray_decode($29) | 0) << 1 >>> 0);
 $35 = +HEAPF32[$_q + 104 >> 2] * $32;
 $37 = +Math_sin(+$35);
 HEAPF32[$_q + 92 >> 2] = +Math_cos(+$35) + $37 * 0.0;
 HEAPF32[$_q + 96 >> 2] = $37;
 HEAP32[$_q + 84 >> 2] = $1;
 HEAP32[$_q + 88 >> 2] = $3;
 STACKTOP = sp;
 return;
}

function _firinterp_rrrf_create($_M, $_h, $_h_len) {
 $_M = $_M | 0;
 $_h = $_h | 0;
 $_h_len = $_h_len | 0;
 var $$lcssa = 0, $$lcssa7 = 0, $1 = 0, $12 = 0, $18 = 0.0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $i$02 = 0, $storemerge = 0, $storemerge$lcssa = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 if ($_M >>> 0 < 2) {
  $1 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = gb + 19626;
  _fprintf($1, gb + 20836 | 0, $vararg_buffer) | 0;
  _exit(1);
 }
 if ($_h_len >>> 0 < $_M >>> 0) {
  $3 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer1 >> 2] = gb + 19626;
  _fprintf($3, gb + 20904 | 0, $vararg_buffer1) | 0;
  _exit(1);
 }
 $4 = _malloc(20) | 0;
 HEAP32[$4 + 12 >> 2] = $_M;
 $6 = $4 + 4 | 0;
 HEAP32[$6 >> 2] = $_h_len;
 $7 = $4 + 8 | 0;
 $storemerge = 0;
 while (1) {
  $8 = Math_imul($storemerge, $_M) | 0;
  if ($8 >>> 0 < $_h_len >>> 0) $storemerge = $storemerge + 1 | 0; else {
   $$lcssa7 = $8;
   $storemerge$lcssa = $storemerge;
   break;
  }
 }
 HEAP32[$7 >> 2] = $storemerge$lcssa;
 HEAP32[$6 >> 2] = $$lcssa7;
 $12 = _malloc($$lcssa7 << 2) | 0;
 HEAP32[$4 >> 2] = $12;
 if (!$$lcssa7) {
  $$lcssa = 0;
  $21 = _firpfb_rrrf_create($_M, $12, $$lcssa) | 0;
  $22 = $4 + 16 | 0;
  HEAP32[$22 >> 2] = $21;
  STACKTOP = sp;
  return $4 | 0;
 } else $i$02 = 0;
 do {
  if ($i$02 >>> 0 < $_h_len >>> 0) $18 = +HEAPF32[$_h + ($i$02 << 2) >> 2]; else $18 = 0.0;
  HEAPF32[$12 + ($i$02 << 2) >> 2] = $18;
  $i$02 = $i$02 + 1 | 0;
 } while ($i$02 >>> 0 < $$lcssa7 >>> 0);
 $$lcssa = $$lcssa7;
 $21 = _firpfb_rrrf_create($_M, $12, $$lcssa) | 0;
 $22 = $4 + 16 | 0;
 HEAP32[$22 >> 2] = $21;
 STACKTOP = sp;
 return $4 | 0;
}

function _firinterp_crcf_create($_M, $_h, $_h_len) {
 $_M = $_M | 0;
 $_h = $_h | 0;
 $_h_len = $_h_len | 0;
 var $$lcssa = 0, $$lcssa7 = 0, $1 = 0, $12 = 0, $18 = 0.0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $i$02 = 0, $storemerge = 0, $storemerge$lcssa = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 if ($_M >>> 0 < 2) {
  $1 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = gb + 20371;
  _fprintf($1, gb + 20836 | 0, $vararg_buffer) | 0;
  _exit(1);
 }
 if ($_h_len >>> 0 < $_M >>> 0) {
  $3 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer1 >> 2] = gb + 20371;
  _fprintf($3, gb + 20904 | 0, $vararg_buffer1) | 0;
  _exit(1);
 }
 $4 = _malloc(20) | 0;
 HEAP32[$4 + 12 >> 2] = $_M;
 $6 = $4 + 4 | 0;
 HEAP32[$6 >> 2] = $_h_len;
 $7 = $4 + 8 | 0;
 $storemerge = 0;
 while (1) {
  $8 = Math_imul($storemerge, $_M) | 0;
  if ($8 >>> 0 < $_h_len >>> 0) $storemerge = $storemerge + 1 | 0; else {
   $$lcssa7 = $8;
   $storemerge$lcssa = $storemerge;
   break;
  }
 }
 HEAP32[$7 >> 2] = $storemerge$lcssa;
 HEAP32[$6 >> 2] = $$lcssa7;
 $12 = _malloc($$lcssa7 << 2) | 0;
 HEAP32[$4 >> 2] = $12;
 if (!$$lcssa7) {
  $$lcssa = 0;
  $21 = _firpfb_crcf_create($_M, $12, $$lcssa) | 0;
  $22 = $4 + 16 | 0;
  HEAP32[$22 >> 2] = $21;
  STACKTOP = sp;
  return $4 | 0;
 } else $i$02 = 0;
 do {
  if ($i$02 >>> 0 < $_h_len >>> 0) $18 = +HEAPF32[$_h + ($i$02 << 2) >> 2]; else $18 = 0.0;
  HEAPF32[$12 + ($i$02 << 2) >> 2] = $18;
  $i$02 = $i$02 + 1 | 0;
 } while ($i$02 >>> 0 < $$lcssa7 >>> 0);
 $$lcssa = $$lcssa7;
 $21 = _firpfb_crcf_create($_M, $12, $$lcssa) | 0;
 $22 = $4 + 16 | 0;
 HEAP32[$22 >> 2] = $21;
 STACKTOP = sp;
 return $4 | 0;
}

function _flexframesync_execute_seekpn($_q, $_x) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 var $$byval_copy = 0, $$pn$in = 0.0, $$sink = 0, $0 = 0, $1 = 0, $11 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0.0, $24 = 0, $36 = 0, $42 = 0, $5 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 8 | 0;
 $0 = sp;
 $1 = $_q + 72 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $5 = HEAP32[$_x + 4 >> 2] | 0;
 HEAP32[$0 >> 2] = HEAP32[$_x >> 2];
 HEAP32[$0 + 4 >> 2] = $5;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 $7 = _qdetector_cccf_execute($2, $$byval_copy) | 0;
 if (!$7) {
  STACKTOP = sp;
  return;
 }
 $11 = $_q + 76 | 0;
 HEAPF32[$11 >> 2] = +_qdetector_cccf_get_tau(HEAP32[$1 >> 2] | 0);
 $14 = $_q + 88 | 0;
 HEAPF32[$14 >> 2] = +_qdetector_cccf_get_gamma(HEAP32[$1 >> 2] | 0);
 $17 = $_q + 80 | 0;
 HEAPF32[$17 >> 2] = +_qdetector_cccf_get_dphi(HEAP32[$1 >> 2] | 0);
 $20 = $_q + 84 | 0;
 HEAPF32[$20 >> 2] = +_qdetector_cccf_get_phi(HEAP32[$1 >> 2] | 0);
 $21 = +HEAPF32[$11 >> 2];
 $24 = HEAP32[$_q + 104 >> 2] | 0;
 if ($21 > 0.0) {
  $$pn$in = $21 * +($24 >>> 0);
  $$sink = 0;
 } else {
  $$pn$in = ($21 + 1.0) * +($24 >>> 0);
  $$sink = 1;
 }
 HEAP32[$_q + 112 >> 2] = (~~$$pn$in >>> 0 >>> 0) % ($24 >>> 0) | 0;
 HEAP32[$_q + 108 >> 2] = $$sink;
 _firpfb_crcf_set_scale(HEAP32[$_q + 100 >> 2] | 0, .5 / +HEAPF32[$14 >> 2]);
 $36 = $_q + 92 | 0;
 _nco_crcf_set_frequency(HEAP32[$36 >> 2] | 0, +HEAPF32[$17 >> 2]);
 _nco_crcf_set_phase(HEAP32[$36 >> 2] | 0, +HEAPF32[$20 >> 2]);
 HEAP32[$_q + 200 >> 2] = 1;
 $42 = $_q + 212 | 0;
 HEAP32[$42 >> 2] = 1;
 _flexframesync_execute($_q, $7, _qdetector_cccf_get_buf_len(HEAP32[$1 >> 2] | 0) | 0);
 HEAP32[$42 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function _firpfb_rrrf_create_rnyquist($_type, $_M, $_k, $_m, $_beta) {
 $_type = $_type | 0;
 $_M = $_M | 0;
 $_k = $_k | 0;
 $_m = $_m | 0;
 $_beta = +$_beta;
 var $1 = 0, $12 = 0, $13 = 0, $15 = 0, $20 = 0, $3 = 0, $5 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 if (!$_M) {
  $1 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = gb + 19626;
  _fprintf($1, gb + 21526 | 0, $vararg_buffer) | 0;
  _exit(1);
 }
 if ($_k >>> 0 < 2) {
  $3 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer1 >> 2] = gb + 19626;
  _fprintf($3, gb + 21607 | 0, $vararg_buffer1) | 0;
  _exit(1);
 }
 if (!$_m) {
  $5 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer4 >> 2] = gb + 19626;
  _fprintf($5, gb + 21689 | 0, $vararg_buffer4) | 0;
  _exit(1);
 }
 if ($_beta < 0.0 | $_beta > 1.0) {
  $8 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer7 >> 2] = gb + 19626;
  _fprintf($8, gb + 21762 | 0, $vararg_buffer7) | 0;
  _exit(1);
 } else {
  $12 = Math_imul(Math_imul($_M << 1, $_k) | 0, $_m) | 0 | 1;
  $13 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($12 << 2) | 0) + 15 & -16) | 0;
  if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
  _liquid_firdes_prototype($_type, Math_imul($_k, $_M) | 0, $_m, $_beta, 0.0, $13);
  $15 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($12 << 2) | 0) + 15 & -16) | 0;
  if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
  _memcpy($15 | 0, $13 | 0, (Math_imul(Math_imul($_m, $_k) | 0, $_M) | 0) << 3 | 4 | 0) | 0;
  $20 = _firpfb_rrrf_create($_M, $15, $12) | 0;
  STACKTOP = sp;
  return $20 | 0;
 }
 return 0;
}

function _firpfb_crcf_create_rnyquist($_type, $_M, $_k, $_m, $_beta) {
 $_type = $_type | 0;
 $_M = $_M | 0;
 $_k = $_k | 0;
 $_m = $_m | 0;
 $_beta = +$_beta;
 var $1 = 0, $12 = 0, $13 = 0, $15 = 0, $20 = 0, $3 = 0, $5 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 if (!$_M) {
  $1 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = gb + 20371;
  _fprintf($1, gb + 21526 | 0, $vararg_buffer) | 0;
  _exit(1);
 }
 if ($_k >>> 0 < 2) {
  $3 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer1 >> 2] = gb + 20371;
  _fprintf($3, gb + 21607 | 0, $vararg_buffer1) | 0;
  _exit(1);
 }
 if (!$_m) {
  $5 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer4 >> 2] = gb + 20371;
  _fprintf($5, gb + 21689 | 0, $vararg_buffer4) | 0;
  _exit(1);
 }
 if ($_beta < 0.0 | $_beta > 1.0) {
  $8 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer7 >> 2] = gb + 20371;
  _fprintf($8, gb + 21762 | 0, $vararg_buffer7) | 0;
  _exit(1);
 } else {
  $12 = Math_imul(Math_imul($_M << 1, $_k) | 0, $_m) | 0 | 1;
  $13 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($12 << 2) | 0) + 15 & -16) | 0;
  if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
  _liquid_firdes_prototype($_type, Math_imul($_k, $_M) | 0, $_m, $_beta, 0.0, $13);
  $15 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($12 << 2) | 0) + 15 & -16) | 0;
  if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
  _memcpy($15 | 0, $13 | 0, (Math_imul(Math_imul($_m, $_k) | 0, $_M) | 0) << 3 | 4 | 0) | 0;
  $20 = _firpfb_crcf_create($_M, $15, $12) | 0;
  STACKTOP = sp;
  return $20 | 0;
 }
 return 0;
}

function ___stdio_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $$0 = 0, $$cast = 0, $0 = 0, $1 = 0, $15 = 0, $2 = 0, $27 = 0, $30 = 0, $31 = 0, $7 = 0, $cnt$0 = 0, $iov = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $iov = sp + 32 | 0;
 HEAP32[$iov >> 2] = $buf;
 $0 = $iov + 4 | 0;
 $1 = $f + 48 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 HEAP32[$0 >> 2] = $len - (($2 | 0) != 0 & 1);
 $7 = $f + 44 | 0;
 HEAP32[$iov + 8 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$iov + 12 >> 2] = $2;
 if (!(HEAP32[gb + 45032 >> 2] | 0)) {
  HEAP32[$vararg_buffer3 >> 2] = HEAP32[$f + 60 >> 2];
  HEAP32[$vararg_buffer3 + 4 >> 2] = $iov;
  HEAP32[$vararg_buffer3 + 8 >> 2] = 2;
  $cnt$0 = ___syscall_ret(___syscall145(145, $vararg_buffer3 | 0) | 0) | 0;
 } else {
  _pthread_cleanup_push(fb + 22 | 0, $f | 0);
  HEAP32[$vararg_buffer >> 2] = HEAP32[$f + 60 >> 2];
  HEAP32[$vararg_buffer + 4 >> 2] = $iov;
  HEAP32[$vararg_buffer + 8 >> 2] = 2;
  $15 = ___syscall_ret(___syscall145(145, $vararg_buffer | 0) | 0) | 0;
  _pthread_cleanup_pop(0);
  $cnt$0 = $15;
 }
 if (($cnt$0 | 0) < 1) {
  HEAP32[$f >> 2] = HEAP32[$f >> 2] | $cnt$0 & 48 ^ 16;
  HEAP32[$f + 8 >> 2] = 0;
  HEAP32[$f + 4 >> 2] = 0;
  $$0 = $cnt$0;
 } else {
  $27 = HEAP32[$0 >> 2] | 0;
  if ($cnt$0 >>> 0 > $27 >>> 0) {
   $30 = HEAP32[$7 >> 2] | 0;
   $31 = $f + 4 | 0;
   HEAP32[$31 >> 2] = $30;
   $$cast = $30;
   HEAP32[$f + 8 >> 2] = $$cast + ($cnt$0 - $27);
   if (!(HEAP32[$1 >> 2] | 0)) $$0 = $len; else {
    HEAP32[$31 >> 2] = $$cast + 1;
    HEAP8[$buf + ($len + -1) >> 0] = HEAP8[$$cast >> 0] | 0;
    $$0 = $len;
   }
  } else $$0 = $cnt$0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _csqrtf($agg$result, $z) {
 $agg$result = $agg$result | 0;
 $z = $z | 0;
 var $0 = 0.0, $10 = 0, $11 = 0, $13 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $22 = 0.0, $25 = 0.0, $26 = 0.0, $30 = 0.0, $43 = 0.0, $48 = 0.0, $50 = 0.0, $fabs = 0.0, $fabs14 = 0.0;
 $0 = +HEAPF32[$z >> 2];
 $2 = +HEAPF32[$z + 4 >> 2];
 do if ($0 == 0.0 & $2 == 0.0) {
  HEAPF32[$agg$result >> 2] = 0.0;
  HEAPF32[$agg$result + 4 >> 2] = $2;
 } else {
  $fabs = +Math_abs(+$2);
  if (((HEAPF32[tempDoublePtr >> 2] = $fabs, HEAP32[tempDoublePtr >> 2] | 0) | 0) == 2139095040) {
   HEAPF32[$agg$result >> 2] = inf;
   HEAPF32[$agg$result + 4 >> 2] = $2;
   break;
  }
  $10 = (HEAPF32[tempDoublePtr >> 2] = $0, HEAP32[tempDoublePtr >> 2] | 0);
  $fabs14 = +Math_abs(+$0);
  $11 = (HEAPF32[tempDoublePtr >> 2] = $fabs14, HEAP32[tempDoublePtr >> 2] | 0);
  if ($11 >>> 0 > 2139095040) {
   $13 = $2 - $2;
   HEAPF32[$agg$result >> 2] = $0;
   HEAPF32[$agg$result + 4 >> 2] = $13 / $13;
   break;
  }
  if (($11 | 0) == 2139095040) {
   $18 = $2 - $2;
   if (($10 | 0) < 0) {
    $19 = +Math_abs(+$18);
    $20 = +_copysignf($0, $2);
    HEAPF32[$agg$result >> 2] = $19;
    HEAPF32[$agg$result + 4 >> 2] = $20;
    break;
   } else {
    $22 = +_copysignf($18, $2);
    HEAPF32[$agg$result >> 2] = $0;
    HEAPF32[$agg$result + 4 >> 2] = $22;
    break;
   }
  } else if (!($0 >= 0.0)) {
   $43 = +Math_sqrt(+((-$0 + +_hypot($0, $2)) * .5));
   $48 = +Math_abs(+$2) / ($43 * 2.0);
   $50 = +_copysignf($43, $2);
   HEAPF32[$agg$result >> 2] = $48;
   HEAPF32[$agg$result + 4 >> 2] = $50;
   break;
  } else {
   $25 = $0;
   $26 = $2;
   $30 = +Math_sqrt(+(($25 + +_hypot($25, $26)) * .5));
   HEAPF32[$agg$result >> 2] = $30;
   HEAPF32[$agg$result + 4 >> 2] = $26 / ($30 * 2.0);
   break;
  }
 } while (0);
 return;
}

function _modem_demodulate_arb($_q, $_x, $_sym_out) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 $_sym_out = $_sym_out | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $15 = 0.0, $16 = 0.0, $27 = 0, $31 = 0, $35 = 0, $4 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $d_min$03 = 0.0, $i$02 = 0, $or$cond = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 8 | 0;
 $0 = sp;
 $1 = $_q + 8 | 0;
 if (!(HEAP32[$1 >> 2] | 0)) $s$0$lcssa = 0; else {
  $4 = +HEAPF32[$_x >> 2];
  $6 = +HEAPF32[$_x + 4 >> 2];
  $7 = $_q + 76 | 0;
  $8 = $0 + 4 | 0;
  $d_min$03 = 0.0;
  $i$02 = 0;
  $s$01 = 0;
  while (1) {
   $9 = HEAP32[$7 >> 2] | 0;
   $15 = $6 - +HEAPF32[$9 + ($i$02 << 3) + 4 >> 2];
   HEAPF32[$0 >> 2] = $4 - +HEAPF32[$9 + ($i$02 << 3) >> 2];
   HEAPF32[$8 >> 2] = $15;
   HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$0 + 4 >> 2];
   $16 = +_cabsf($$byval_copy);
   $or$cond = ($i$02 | 0) == 0 | $16 < $d_min$03;
   $s$1 = $or$cond ? $i$02 : $s$01;
   $i$02 = $i$02 + 1 | 0;
   if ($i$02 >>> 0 >= (HEAP32[$1 >> 2] | 0) >>> 0) {
    $s$0$lcssa = $s$1;
    break;
   } else {
    $d_min$03 = $or$cond ? $16 : $d_min$03;
    $s$01 = $s$1;
   }
  }
 }
 HEAP32[$_sym_out >> 2] = $s$0$lcssa;
 if ((HEAP32[$1 >> 2] | 0) >>> 0 > $s$0$lcssa >>> 0) {
  $27 = HEAP32[$_q + 76 >> 2] | 0;
  $31 = HEAP32[$27 + ($s$0$lcssa << 3) + 4 >> 2] | 0;
  HEAP32[$_q + 92 >> 2] = HEAP32[$27 + ($s$0$lcssa << 3) >> 2];
  HEAP32[$_q + 96 >> 2] = $31;
  $35 = HEAP32[$_x + 4 >> 2] | 0;
  HEAP32[$_q + 84 >> 2] = HEAP32[$_x >> 2];
  HEAP32[$_q + 88 >> 2] = $35;
  STACKTOP = sp;
  return;
 } else {
  _fwrite(gb + 32224 | 0, 52, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
}

function _firinterp_rrrf_create_prototype($_type, $_k, $_m, $_beta, $_dt) {
 $_type = $_type | 0;
 $_k = $_k | 0;
 $_m = $_m | 0;
 $_beta = +$_beta;
 $_dt = +$_dt;
 var $1 = 0, $12 = 0, $13 = 0, $14 = 0, $18 = 0, $3 = 0, $6 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 if ($_k >>> 0 < 2) {
  $1 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = gb + 19626;
  _fprintf($1, gb + 21123 | 0, $vararg_buffer) | 0;
  _exit(1);
 }
 if (!$_m) {
  $3 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer1 >> 2] = gb + 19626;
  _fprintf($3, gb + 21201 | 0, $vararg_buffer1) | 0;
  _exit(1);
 }
 if ($_beta < 0.0 | $_beta > 1.0) {
  $6 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer4 >> 2] = gb + 19626;
  _fprintf($6, gb + 21278 | 0, $vararg_buffer4) | 0;
  _exit(1);
 }
 if ($_dt < -1.0 | $_dt > 1.0) {
  $9 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer7 >> 2] = gb + 19626;
  _fprintf($9, gb + 21367 | 0, $vararg_buffer7) | 0;
  _exit(1);
 } else {
  $12 = Math_imul($_k << 1, $_m) | 0 | 1;
  $13 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($12 << 2) | 0) + 15 & -16) | 0;
  if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
  _liquid_firdes_prototype($_type, $_k, $_m, $_beta, $_dt, $13);
  $14 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($12 << 2) | 0) + 15 & -16) | 0;
  if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
  _memcpy($14 | 0, $13 | 0, (Math_imul($_m, $_k) | 0) << 3 | 4 | 0) | 0;
  $18 = _firinterp_rrrf_create($_k, $14, $12) | 0;
  STACKTOP = sp;
  return $18 | 0;
 }
 return 0;
}

function _firinterp_crcf_create_prototype($_type, $_k, $_m, $_beta, $_dt) {
 $_type = $_type | 0;
 $_k = $_k | 0;
 $_m = $_m | 0;
 $_beta = +$_beta;
 $_dt = +$_dt;
 var $1 = 0, $12 = 0, $13 = 0, $14 = 0, $18 = 0, $3 = 0, $6 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 if ($_k >>> 0 < 2) {
  $1 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = gb + 20371;
  _fprintf($1, gb + 21123 | 0, $vararg_buffer) | 0;
  _exit(1);
 }
 if (!$_m) {
  $3 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer1 >> 2] = gb + 20371;
  _fprintf($3, gb + 21201 | 0, $vararg_buffer1) | 0;
  _exit(1);
 }
 if ($_beta < 0.0 | $_beta > 1.0) {
  $6 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer4 >> 2] = gb + 20371;
  _fprintf($6, gb + 21278 | 0, $vararg_buffer4) | 0;
  _exit(1);
 }
 if ($_dt < -1.0 | $_dt > 1.0) {
  $9 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer7 >> 2] = gb + 20371;
  _fprintf($9, gb + 21367 | 0, $vararg_buffer7) | 0;
  _exit(1);
 } else {
  $12 = Math_imul($_k << 1, $_m) | 0 | 1;
  $13 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($12 << 2) | 0) + 15 & -16) | 0;
  if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
  _liquid_firdes_prototype($_type, $_k, $_m, $_beta, $_dt, $13);
  $14 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($12 << 2) | 0) + 15 & -16) | 0;
  if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
  _memcpy($14 | 0, $13 | 0, (Math_imul($_m, $_k) | 0) << 3 | 4 | 0) | 0;
  $18 = _firinterp_crcf_create($_k, $14, $12) | 0;
  STACKTOP = sp;
  return $18 | 0;
 }
 return 0;
}

function _firdecim_crcf_create_prototype($_type, $_M, $_m, $_beta, $_dt) {
 $_type = $_type | 0;
 $_M = $_M | 0;
 $_m = $_m | 0;
 $_beta = +$_beta;
 $_dt = +$_dt;
 var $1 = 0, $12 = 0, $13 = 0, $14 = 0, $18 = 0, $3 = 0, $6 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 if ($_M >>> 0 < 2) {
  $1 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = gb + 20371;
  _fprintf($1, gb + 20514 | 0, $vararg_buffer) | 0;
  _exit(1);
 }
 if (!$_m) {
  $3 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer1 >> 2] = gb + 20371;
  _fprintf($3, gb + 20592 | 0, $vararg_buffer1) | 0;
  _exit(1);
 }
 if ($_beta < 0.0 | $_beta > 1.0) {
  $6 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer4 >> 2] = gb + 20371;
  _fprintf($6, gb + 20665 | 0, $vararg_buffer4) | 0;
  _exit(1);
 }
 if ($_dt < -1.0 | $_dt > 1.0) {
  $9 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer7 >> 2] = gb + 20371;
  _fprintf($9, gb + 20750 | 0, $vararg_buffer7) | 0;
  _exit(1);
 } else {
  $12 = Math_imul($_M << 1, $_m) | 0 | 1;
  $13 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($12 << 2) | 0) + 15 & -16) | 0;
  if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
  _liquid_firdes_prototype($_type, $_M, $_m, $_beta, $_dt, $13);
  $14 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * ($12 << 2) | 0) + 15 & -16) | 0;
  if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
  _memcpy($14 | 0, $13 | 0, (Math_imul($_m, $_M) | 0) << 3 | 4 | 0) | 0;
  $18 = _firdecim_crcf_create($_M, $14, $12) | 0;
  STACKTOP = sp;
  return $18 | 0;
 }
 return 0;
}

function _ofdmframegen_write_S1($_q, $_y) {
 $_q = $_q | 0;
 $_y = $_y | 0;
 var $$lcssa = 0, $$lcssa$i = 0, $$pre$phi$iZ2D = 0, $0 = 0, $18 = 0, $21 = 0, $22 = 0, $25 = 0.0, $26 = 0, $28 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $42 = 0.0, $46 = 0.0, $48 = 0, $50 = 0, $51 = 0, $7 = 0, $8 = 0, $i$01$i = 0;
 $0 = $_q + 56 | 0;
 _memmove(HEAP32[$0 >> 2] | 0, HEAP32[$_q + 72 >> 2] | 0, HEAP32[$_q >> 2] << 3 | 0) | 0;
 $7 = $_q + 4 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 _memmove($_y | 0, (HEAP32[$0 >> 2] | 0) + ((HEAP32[$_q >> 2] | 0) - $8 << 3) | 0, $8 << 3 | 0) | 0;
 _memmove($_y + (HEAP32[$7 >> 2] << 3) | 0, HEAP32[$0 >> 2] | 0, HEAP32[$_q >> 2] << 3 | 0) | 0;
 $18 = $_q + 12 | 0;
 if (!(HEAP32[$18 >> 2] | 0)) {
  $$lcssa$i = 0;
  $$pre$phi$iZ2D = $_q + 20 | 0;
  $50 = HEAP32[$$pre$phi$iZ2D >> 2] | 0;
  $51 = HEAP32[$0 >> 2] | 0;
  _memmove($50 | 0, $51 | 0, $$lcssa$i | 0) | 0;
  return;
 }
 $21 = $_q + 16 | 0;
 $22 = $_q + 20 | 0;
 $i$01$i = 0;
 do {
  $25 = +HEAPF32[(HEAP32[$21 >> 2] | 0) + ($i$01$i << 2) >> 2];
  $26 = $_y + ($i$01$i << 3) | 0;
  $28 = $_y + ($i$01$i << 3) + 4 | 0;
  $30 = $25 * +HEAPF32[$26 >> 2];
  $31 = $25 * +HEAPF32[$28 >> 2];
  HEAPF32[$26 >> 2] = $30;
  HEAPF32[$28 >> 2] = $31;
  $32 = HEAP32[$22 >> 2] | 0;
  $42 = +HEAPF32[(HEAP32[$21 >> 2] | 0) + ((HEAP32[$18 >> 2] | 0) + ~$i$01$i << 2) >> 2];
  $46 = $31 + +HEAPF32[$32 + ($i$01$i << 3) + 4 >> 2] * $42;
  HEAPF32[$26 >> 2] = $30 + +HEAPF32[$32 + ($i$01$i << 3) >> 2] * $42;
  HEAPF32[$28 >> 2] = $46;
  $i$01$i = $i$01$i + 1 | 0;
  $48 = HEAP32[$18 >> 2] | 0;
 } while ($i$01$i >>> 0 < $48 >>> 0);
 $$lcssa = $48;
 $$lcssa$i = $$lcssa << 3;
 $$pre$phi$iZ2D = $22;
 $50 = HEAP32[$$pre$phi$iZ2D >> 2] | 0;
 $51 = HEAP32[$0 >> 2] | 0;
 _memmove($50 | 0, $51 | 0, $$lcssa$i | 0) | 0;
 return;
}

function _polyf_fit($_x, $_y, $_n, $_p, $_k) {
 $_x = $_x | 0;
 $_y = $_y | 0;
 $_n = $_n | 0;
 $_p = $_p | 0;
 $_k = $_k | 0;
 var $0 = 0, $1 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $8 = 0.0, $c$01$us = 0, $r$03$us = 0, $v$02$us = 0.0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($_k, $_n) | 0;
 $1 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($0 << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 if (!(($_n | 0) == 0 | ($_k | 0) == 0)) {
  $r$03$us = 0;
  do {
   $5 = Math_imul($r$03$us, $_k) | 0;
   $8 = +HEAPF32[$_x + ($r$03$us << 2) >> 2];
   $c$01$us = 0;
   $v$02$us = 1.0;
   while (1) {
    HEAPF32[$1 + ($c$01$us + $5 << 2) >> 2] = $v$02$us;
    $c$01$us = $c$01$us + 1 | 0;
    if (($c$01$us | 0) == ($_k | 0)) break; else $v$02$us = $v$02$us * $8;
   }
   $r$03$us = $r$03$us + 1 | 0;
  } while (($r$03$us | 0) != ($_n | 0));
 }
 $12 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($0 << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 _memcpy($12 | 0, $1 | 0, $0 << 2 | 0) | 0;
 _matrixf_trans($12, $_n, $_k);
 $14 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($_k << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 _matrixf_mul($12, $_k, $_n, $_y, $_n, 1, $14, $_k, 1);
 $15 = Math_imul($_k, $_k) | 0;
 $16 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($15 << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 _matrixf_mul($12, $_k, $_n, $1, $_n, $_k, $16, $_k, $_k);
 $17 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($15 << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 _memcpy($17 | 0, $16 | 0, $15 << 2 | 0) | 0;
 _matrixf_inv($17, $_k, $_k);
 _matrixf_mul($17, $_k, $_k, $14, $_k, 1, $_p, $_k, 1);
 STACKTOP = sp;
 return;
}

function _liquid_firdes_farcsech_freqresponse($_k, $_m, $_beta, $_H) {
 $_k = $_k | 0;
 $_m = $_m | 0;
 $_beta = +$_beta;
 $_H = $_H | 0;
 var $$0$i = 0.0, $$0$i2 = 0.0, $10 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $23 = 0, $25 = 0.0, $28 = 0.0, $3 = 0.0, $35 = 0.0, $38 = 0.0, $5 = 0.0, $50 = 0.0, $53 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $i$04 = 0;
 $3 = 1.0 - $_beta;
 $5 = +($_k >>> 0);
 $6 = $3 * .5 / $5;
 $7 = .5 / $5;
 $8 = $_beta + 1.0;
 $10 = $8 * .5 / $5;
 $15 = 1.0 / ($7 * ($_beta * 2.0));
 $16 = +((Math_imul($_k << 1, $_m) | 0 | 1) >>> 0);
 $17 = $15 / (1.316957950592041 / ($7 * $_beta));
 $18 = $7 * $8;
 $19 = HEAP32[gb + 9336 >> 2] | 0;
 $20 = $7 * $3;
 $23 = (Math_imul($_m, $_k) | 0) << 1 | 1;
 $i$04 = 0;
 do {
  $25 = +($i$04 >>> 0) / $16;
  $28 = +Math_abs(+($25 > .5 ? $25 + -1.0 : $25));
  do if ($28 < $6) HEAPF32[$_H + ($i$04 << 2) >> 2] = 1.0; else {
   if (!($28 > $6 & $28 < $10)) {
    HEAPF32[$_H + ($i$04 << 2) >> 2] = 0.0;
    break;
   }
   if ($28 < $7) {
    $35 = $15 * ($18 - $28);
    if ($35 <= 0.0 | $35 > 1.0) {
     _fwrite(gb + 23224 | 0, 45, 1, $19) | 0;
     $$0$i = 0.0;
    } else {
     $38 = 1.0 / $35;
     $$0$i = +Math_log(+($38 + +Math_sqrt(+($38 + -1.0)) * +Math_sqrt(+($38 + 1.0))));
    }
    HEAPF32[$_H + ($i$04 << 2) >> 2] = 1.0 - $17 * $$0$i;
    break;
   } else {
    $50 = $15 * ($28 - $20);
    if ($50 <= 0.0 | $50 > 1.0) {
     _fwrite(gb + 23224 | 0, 45, 1, $19) | 0;
     $$0$i2 = 0.0;
    } else {
     $53 = 1.0 / $50;
     $$0$i2 = +Math_log(+($53 + +Math_sqrt(+($53 + -1.0)) * +Math_sqrt(+($53 + 1.0))));
    }
    HEAPF32[$_H + ($i$04 << 2) >> 2] = $17 * $$0$i2;
    break;
   }
  } while (0);
  $i$04 = $i$04 + 1 | 0;
 } while (($i$04 | 0) != ($23 | 0));
 return;
}

function _gmskframegen_write_samples($_q, $_y) {
 $_q = $_q | 0;
 $_y = $_y | 0;
 var $$0 = 0, $0 = 0, $17 = 0, $2 = 0, $21 = 0, $36 = 0, $41 = 0, $d$i1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $d$i1 = sp;
 $0 = $_q + 84 | 0;
 switch (HEAP32[$0 >> 2] | 0) {
 case 0:
  {
   _gmskframegen_write_preamble($_q, $_y);
   break;
  }
 case 1:
  {
   $2 = $_q + 96 | 0;
   _div($d$i1, HEAP32[$2 >> 2] | 0, 8);
   _gmskmod_modulate(HEAP32[$_q >> 2] | 0, (HEAPU8[(HEAP32[$_q + 48 >> 2] | 0) + (HEAP32[$d$i1 >> 2] | 0) >> 0] | 0) >>> (7 - (HEAP32[$d$i1 + 4 >> 2] | 0) | 0) & 1, $_y);
   $17 = (HEAP32[$2 >> 2] | 0) + 1 | 0;
   HEAP32[$2 >> 2] = $17;
   if (($17 | 0) == (HEAP32[$_q + 20 >> 2] | 0)) {
    HEAP32[$2 >> 2] = 0;
    HEAP32[$0 >> 2] = 2;
   }
   break;
  }
 case 2:
  {
   $21 = $_q + 96 | 0;
   _div($d$i1, HEAP32[$21 >> 2] | 0, 8);
   _gmskmod_modulate(HEAP32[$_q >> 2] | 0, (HEAPU8[(HEAP32[$_q + 80 >> 2] | 0) + (HEAP32[$d$i1 >> 2] | 0) >> 0] | 0) >>> (7 - (HEAP32[$d$i1 + 4 >> 2] | 0) | 0) & 1, $_y);
   $36 = (HEAP32[$21 >> 2] | 0) + 1 | 0;
   HEAP32[$21 >> 2] = $36;
   if (($36 | 0) == (HEAP32[$_q + 24 >> 2] | 0)) {
    HEAP32[$21 >> 2] = 0;
    HEAP32[$0 >> 2] = 3;
   }
   break;
  }
 case 3:
  {
   _gmskframegen_write_tail($_q, $_y);
   break;
  }
 default:
  {
   _fwrite(gb + 27411 | 0, 70, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
   _exit(1);
  }
 }
 $41 = $_q + 92 | 0;
 if (!(HEAP32[$41 >> 2] | 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _gmskmod_reset(HEAP32[$_q >> 2] | 0);
 HEAP32[$0 >> 2] = 0;
 _msequence_reset(HEAP32[$_q + 32 >> 2] | 0);
 HEAP32[$_q + 88 >> 2] = 0;
 HEAP32[$41 >> 2] = 0;
 HEAP32[$_q + 96 >> 2] = 0;
 $$0 = 1;
 STACKTOP = sp;
 return $$0 | 0;
}

function _qpilotgen_create($_payload_len, $_pilot_spacing) {
 $_payload_len = $_payload_len | 0;
 $_pilot_spacing = $_pilot_spacing | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $14 = 0, $19 = 0, $22 = 0, $24 = 0, $25 = 0, $32 = 0.0, $35 = 0, $6 = 0, $d = 0, $i$01 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 24 | 0;
 $d = sp + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp;
 if (!$_payload_len) {
  _fwrite(gb + 30213 | 0, 66, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if ($_pilot_spacing >>> 0 < 2) {
  _fwrite(gb + 30280 | 0, 68, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 $6 = _malloc(20) | 0;
 HEAP32[$6 >> 2] = $_payload_len;
 HEAP32[$6 + 4 >> 2] = $_pilot_spacing;
 _div($d, $_payload_len, $_pilot_spacing + -1 | 0);
 $14 = ((HEAP32[$d + 4 >> 2] | 0) != 0 & 1) + (HEAP32[$d >> 2] | 0) | 0;
 HEAP32[$6 + 8 >> 2] = $14;
 HEAP32[$6 + 12 >> 2] = $14 + $_payload_len;
 $19 = _malloc($14 << 3) | 0;
 HEAP32[$6 + 16 >> 2] = $19;
 $22 = _msequence_create_default(_liquid_nextpow2($14) | 0) | 0;
 if (!$14) {
  _msequence_destroy($22);
  STACKTOP = sp;
  return $6 | 0;
 }
 $24 = $1 + 4 | 0;
 $25 = $0 + 4 | 0;
 $i$01 = 0;
 do {
  $32 = +((_msequence_generate_symbol($22, 2) | 0) >>> 0) * 6.283185307179586 * .25 + .7853981633974483;
  HEAPF32[$1 >> 2] = $32 * 0.0;
  HEAPF32[$24 >> 2] = $32;
  HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  _cexpf($0, $$byval_copy);
  $35 = HEAP32[$25 >> 2] | 0;
  HEAP32[$19 + ($i$01 << 3) >> 2] = HEAP32[$0 >> 2];
  HEAP32[$19 + ($i$01 << 3) + 4 >> 2] = $35;
  $i$01 = $i$01 + 1 | 0;
 } while ($i$01 >>> 0 < $14 >>> 0);
 _msequence_destroy($22);
 STACKTOP = sp;
 return $6 | 0;
}

function _parse_json($lex, $flags, $error) {
 $lex = $lex | 0;
 $flags = $flags | 0;
 $error = $error | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $45 = 0, $result = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $0 = sp + 28 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 16 | 0;
 $result = sp + 12 | 0;
 HEAP32[$1 >> 2] = $lex;
 HEAP32[$2 >> 2] = $flags;
 HEAP32[$3 >> 2] = $error;
 _lex_scan(HEAP32[$1 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
 if (!(HEAP32[$2 >> 2] & 4)) if ((HEAP32[(HEAP32[$1 >> 2] | 0) + 56 >> 2] | 0) != 91) if ((HEAP32[(HEAP32[$1 >> 2] | 0) + 56 >> 2] | 0) != 123) {
  _error_set(HEAP32[$3 >> 2] | 0, HEAP32[$1 >> 2] | 0, gb + 41851 | 0, $vararg_buffer);
  HEAP32[$0 >> 2] = 0;
  $45 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $45 | 0;
 }
 HEAP32[$result >> 2] = _parse_value(HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
 if (!(HEAP32[$result >> 2] | 0)) {
  HEAP32[$0 >> 2] = 0;
  $45 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $45 | 0;
 }
 if (!(HEAP32[$2 >> 2] & 2)) {
  _lex_scan(HEAP32[$1 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
  if (HEAP32[(HEAP32[$1 >> 2] | 0) + 56 >> 2] | 0) {
   _error_set(HEAP32[$3 >> 2] | 0, HEAP32[$1 >> 2] | 0, gb + 42067 | 0, $vararg_buffer1);
   _json_decref(HEAP32[$result >> 2] | 0);
   HEAP32[$0 >> 2] = 0;
   $45 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $45 | 0;
  }
 }
 if (HEAP32[$3 >> 2] | 0) HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] = HEAP32[(HEAP32[$1 >> 2] | 0) + 36 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$result >> 2];
 $45 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $45 | 0;
}

function _liquid_firdes_arkaiser($_k, $_m, $_beta, $_dt, $_h) {
 $_k = $_k | 0;
 $_m = $_m | 0;
 $_beta = +$_beta;
 $_dt = +$_dt;
 $_h = $_h | 0;
 var $$lcssa = 0.0, $10 = 0.0, $22 = 0.0, $27 = 0.0, $33 = 0, $34 = 0.0, $45 = 0, $47 = 0.0, $49 = 0.0, $51 = 0.0, $53 = 0, $e2$07 = 0.0, $i$08 = 0, $i$16 = 0, $rho_hat$0 = 0.0;
 if ($_k >>> 0 < 2) {
  _fwrite(gb + 25119 | 0, 54, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if (!$_m) {
  _fwrite(gb + 25174 | 0, 54, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if ($_beta <= 0.0 | $_beta >= 1.0) {
  _fwrite(gb + 25229 | 0, 55, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if ($_dt < -1.0 | $_dt > 1.0) {
  _fwrite(gb + 25285 | 0, 54, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 $10 = +($_m >>> 0);
 $22 = +Math_log(+$_beta);
 $27 = +Math_log(+$10) * .067663 + .762886 + $22 * .06551499664783478 + $22 * (+Math_log(+(1.0 - +Math_pow(+$10, -1.600000023841858) * .088)) * $22);
 if ($27 <= 0.0 | $27 >= 1.0) $rho_hat$0 = +_rkaiser_approximate_rho($_m, $_beta); else $rho_hat$0 = $27;
 $33 = Math_imul($_k << 1, $_m) | 0 | 1;
 $34 = +($_k >>> 0);
 _liquid_firdes_kaiser($33, ((1.0 - $rho_hat$0) * $_beta + 1.0) * .5 / $34, +_estimate_req_filter_As($rho_hat$0 * $_beta / $34, $33), $_dt, $_h);
 $45 = (Math_imul($_m, $_k) | 0) << 1 | 1;
 $e2$07 = 0.0;
 $i$08 = 0;
 while (1) {
  $49 = +HEAPF32[$_h + ($i$08 << 2) >> 2];
  $51 = $e2$07 + $49 * $49;
  $i$08 = $i$08 + 1 | 0;
  if (($i$08 | 0) == ($45 | 0)) {
   $$lcssa = $51;
   break;
  } else $e2$07 = $51;
 }
 $47 = +Math_sqrt(+($34 / $$lcssa));
 $i$16 = 0;
 do {
  $53 = $_h + ($i$16 << 2) | 0;
  HEAPF32[$53 >> 2] = $47 * +HEAPF32[$53 >> 2];
  $i$16 = $i$16 + 1 | 0;
 } while (($i$16 | 0) != ($45 | 0));
 return;
}

function _fec_secded2216_encode($_q, $_dec_msg_len, $_msg_dec, $_msg_enc) {
 $_q = $_q | 0;
 $_dec_msg_len = $_dec_msg_len | 0;
 $_msg_dec = $_msg_dec | 0;
 $_msg_enc = $_msg_enc | 0;
 var $0 = 0, $1 = 0, $14 = 0, $15 = 0, $19 = 0, $3 = 0, $i$0$lcssa = 0, $i$02 = 0, $i$1 = 0, $j$0$lcssa = 0, $j$01 = 0, $j$1 = 0, $m = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $m = sp;
 $0 = $_dec_msg_len & 1;
 $1 = $_dec_msg_len - $0 | 0;
 if (($0 | 0) == ($_dec_msg_len | 0)) {
  $i$0$lcssa = 0;
  $j$0$lcssa = 0;
 } else {
  $i$02 = 0;
  $j$01 = 0;
  while (1) {
   $3 = $_msg_dec + $i$02 | 0;
   HEAP8[$_msg_enc + $j$01 >> 0] = _fec_secded2216_compute_parity($3) | 0;
   HEAP8[$_msg_enc + ($j$01 + 1) >> 0] = HEAP8[$3 >> 0] | 0;
   HEAP8[$_msg_enc + ($j$01 + 2) >> 0] = HEAP8[$_msg_dec + ($i$02 | 1) >> 0] | 0;
   $14 = $j$01 + 3 | 0;
   $15 = $i$02 + 2 | 0;
   if ($15 >>> 0 < $1 >>> 0) {
    $i$02 = $15;
    $j$01 = $14;
   } else {
    $i$0$lcssa = $15;
    $j$0$lcssa = $14;
    break;
   }
  }
 }
 if (!$0) {
  $i$1 = $i$0$lcssa;
  $j$1 = $j$0$lcssa;
 } else {
  $19 = HEAP8[$_msg_dec + $i$0$lcssa >> 0] | 0;
  HEAP8[$m >> 0] = $19;
  HEAP8[$m + 1 >> 0] = 0;
  HEAP8[$_msg_enc + $j$0$lcssa >> 0] = _fec_secded2216_compute_parity($m) | 0;
  HEAP8[$_msg_enc + ($j$0$lcssa + 1) >> 0] = $19;
  $i$1 = $i$0$lcssa | $0;
  $j$1 = $0 + 1 + $j$0$lcssa | 0;
 }
 if (($j$1 | 0) != (_fec_get_enc_msg_length(8, $_dec_msg_len) | 0)) ___assert_fail(gb + 18994 | 0, gb + 19058 | 0, 274, gb + 19087 | 0);
 if (($i$1 | 0) == ($_dec_msg_len | 0)) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(gb + 19586 | 0, gb + 19058 | 0, 275, gb + 19087 | 0);
}

function _fec_secded7264_decode($_q, $_dec_msg_len, $_msg_enc, $_msg_dec) {
 $_q = $_q | 0;
 $_dec_msg_len = $_dec_msg_len | 0;
 $_msg_enc = $_msg_enc | 0;
 $_msg_dec = $_msg_dec | 0;
 var $0 = 0, $1 = 0, $13 = 0, $14 = 0, $5 = 0, $6 = 0, $9 = 0, $c = 0, $i$0$lcssa = 0, $i$04 = 0, $i$1 = 0, $j$0$lcssa = 0, $j$03 = 0, $j$1 = 0, $v = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $v = sp + 8 | 0;
 $c = sp;
 $0 = $_dec_msg_len & 7;
 $1 = $_dec_msg_len - $0 | 0;
 if (($0 | 0) == ($_dec_msg_len | 0)) {
  $i$0$lcssa = 0;
  $j$0$lcssa = 0;
 } else {
  $i$04 = 0;
  $j$03 = 0;
  while (1) {
   _fec_secded7264_decode_symbol($_msg_enc + $j$03 | 0, $_msg_dec + $i$04 | 0) | 0;
   $5 = $j$03 + 9 | 0;
   $6 = $i$04 + 8 | 0;
   if ($6 >>> 0 < $1 >>> 0) {
    $i$04 = $6;
    $j$03 = $5;
   } else {
    $i$0$lcssa = $6;
    $j$0$lcssa = $5;
    break;
   }
  }
 }
 if (!$0) {
  $i$1 = $i$0$lcssa;
  $j$1 = $j$0$lcssa;
 } else {
  $9 = $c;
  HEAP32[$9 >> 2] = 0;
  HEAP32[$9 + 4 >> 2] = 0;
  $13 = $_dec_msg_len & 7;
  $14 = $13 + 1 | 0;
  _memset($v + $14 | 0, 0, ($14 >>> 0 > 8 ? 0 : 8 - $13 | 0) | 0) | 0;
  _memcpy($v | 0, $_msg_enc + $j$0$lcssa | 0, $14 | 0) | 0;
  _fec_secded7264_decode_symbol($v, $c) | 0;
  _memcpy($_msg_dec + $i$0$lcssa | 0, $c | 0, $13 | 0) | 0;
  $i$1 = $i$0$lcssa | $0;
  $j$1 = $j$0$lcssa + ($0 + 1) | 0;
 }
 if (($j$1 | 0) != (_fec_get_enc_msg_length(10, $_dec_msg_len) | 0)) ___assert_fail(gb + 19471 | 0, gb + 19535 | 0, 338, gb + 19604 | 0);
 if (($i$1 | 0) == ($_dec_msg_len | 0)) {
  STACKTOP = sp;
  return;
 } else ___assert_fail(gb + 19586 | 0, gb + 19535 | 0, 339, gb + 19604 | 0);
}

function _decode_unicode_escape($str) {
 $str = $str | 0;
 var $0 = 0, $1 = 0, $52 = 0, $c = 0, $i = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 12 | 0;
 $1 = sp + 8 | 0;
 $i = sp + 4 | 0;
 $value = sp;
 $c = sp + 16 | 0;
 HEAP32[$1 >> 2] = $str;
 HEAP32[$value >> 2] = 0;
 if ((HEAP8[HEAP32[$1 >> 2] >> 0] | 0) != 117) ___assert_fail(gb + 41574 | 0, gb + 41349 | 0, 299, gb + 41588 | 0);
 HEAP32[$i >> 2] = 1;
 L4 : while (1) {
  if ((HEAP32[$i >> 2] | 0) > 4) {
   label = 16;
   break;
  }
  HEAP8[$c >> 0] = HEAP8[(HEAP32[$1 >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0;
  HEAP32[$value >> 2] = HEAP32[$value >> 2] << 4;
  if (48 <= (HEAP8[$c >> 0] | 0)) if ((HEAP8[$c >> 0] | 0) <= 57) HEAP32[$value >> 2] = (HEAP32[$value >> 2] | 0) + ((HEAP8[$c >> 0] | 0) - 48); else label = 8; else label = 8;
  do if ((label | 0) == 8) {
   label = 0;
   if (97 <= (HEAP8[$c >> 0] | 0)) if ((HEAP8[$c >> 0] | 0) <= 122) {
    HEAP32[$value >> 2] = (HEAP32[$value >> 2] | 0) + ((HEAP8[$c >> 0] | 0) - 97 + 10);
    break;
   }
   if (65 > (HEAP8[$c >> 0] | 0)) {
    label = 14;
    break L4;
   }
   if ((HEAP8[$c >> 0] | 0) > 90) {
    label = 14;
    break L4;
   }
   HEAP32[$value >> 2] = (HEAP32[$value >> 2] | 0) + ((HEAP8[$c >> 0] | 0) - 65 + 10);
  } while (0);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if ((label | 0) == 14) {
  HEAP32[$0 >> 2] = -1;
  $52 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $52 | 0;
 } else if ((label | 0) == 16) {
  HEAP32[$0 >> 2] = HEAP32[$value >> 2];
  $52 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $52 | 0;
 }
 return 0;
}

function _dotprod_cccf_execute($_q, $_x, $_y) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 $_y = $_y | 0;
 var $0 = 0, $1 = 0, $11 = 0.0, $13 = 0.0, $18 = 0.0, $19 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $29 = 0, $3 = 0, $5 = 0, $7 = 0.0, $9 = 0.0, $i$03$i = 0, $r$sroa$0$0$lcssa$i = 0.0, $r$sroa$0$02$i = 0.0, $r$sroa$6$0$lcssa$i = 0.0, $r$sroa$6$01$i = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 $1 = HEAP32[$_q >> 2] | 0;
 $3 = HEAP32[$_q + 4 >> 2] | 0;
 if (!$3) {
  $r$sroa$0$0$lcssa$i = 0.0;
  $r$sroa$6$0$lcssa$i = 0.0;
  $29 = $_y + 4 | 0;
  HEAPF32[$_y >> 2] = $r$sroa$0$0$lcssa$i;
  HEAPF32[$29 >> 2] = $r$sroa$6$0$lcssa$i;
  STACKTOP = sp;
  return;
 }
 $5 = $0 + 4 | 0;
 $i$03$i = 0;
 $r$sroa$0$02$i = 0.0;
 $r$sroa$6$01$i = 0.0;
 while (1) {
  $7 = +HEAPF32[$1 + ($i$03$i << 3) >> 2];
  $9 = +HEAPF32[$1 + ($i$03$i << 3) + 4 >> 2];
  $11 = +HEAPF32[$_x + ($i$03$i << 3) >> 2];
  $13 = +HEAPF32[$_x + ($i$03$i << 3) + 4 >> 2];
  $18 = $7 * $11 - $9 * $13;
  $19 = $9 * $11 + $7 * $13;
  if (($18 != $18 | 0.0 != 0.0) & ($19 != $19 | 0.0 != 0.0)) {
   ___mulsc3($0, $7, $9, $11, $13);
   $25 = +HEAPF32[$0 >> 2];
   $27 = +HEAPF32[$5 >> 2];
  } else {
   $25 = $18;
   $27 = $19;
  }
  $24 = $r$sroa$0$02$i + $25;
  $26 = $r$sroa$6$01$i + $27;
  $i$03$i = $i$03$i + 1 | 0;
  if (($i$03$i | 0) == ($3 | 0)) {
   $r$sroa$0$0$lcssa$i = $24;
   $r$sroa$6$0$lcssa$i = $26;
   break;
  } else {
   $r$sroa$0$02$i = $24;
   $r$sroa$6$01$i = $26;
  }
 }
 $29 = $_y + 4 | 0;
 HEAPF32[$_y >> 2] = $r$sroa$0$0$lcssa$i;
 HEAPF32[$29 >> 2] = $r$sroa$6$0$lcssa$i;
 STACKTOP = sp;
 return;
}

function _bessel_azpkf($_n, $_za, $_pa, $_ka) {
 $_n = $_n | 0;
 $_za = $_za | 0;
 $_pa = $_pa | 0;
 $_ka = $_ka | 0;
 var $0 = 0, $11 = 0, $14 = 0.0, $16 = 0, $17 = 0, $19 = 0.0, $21 = 0.0, $23 = 0.0, $25 = 0.0, $28 = 0.0, $29 = 0.0, $34 = 0.0, $35 = 0.0, $6 = 0.0, $7 = 0, $9 = 0, $i$02 = 0, $i$11 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 _fpoly_bessel_roots_orchard($_n + 1 | 0, $_pa);
 $6 = +Math_sqrt(+(+((($_n << 1) + -1 | 0) >>> 0) * .6931471824645996));
 $7 = ($_n | 0) == 0;
 if ($7) {
  HEAPF32[$_ka >> 2] = 1.0;
  HEAPF32[$_ka + 4 >> 2] = 0.0;
  STACKTOP = sp;
  return;
 } else $i$02 = 0;
 do {
  $9 = $_pa + ($i$02 << 3) | 0;
  $11 = $_pa + ($i$02 << 3) + 4 | 0;
  $14 = +HEAPF32[$11 >> 2] / $6;
  HEAPF32[$9 >> 2] = +HEAPF32[$9 >> 2] / $6;
  HEAPF32[$11 >> 2] = $14;
  $i$02 = $i$02 + 1 | 0;
 } while (($i$02 | 0) != ($_n | 0));
 $16 = $_ka + 4 | 0;
 HEAPF32[$_ka >> 2] = 1.0;
 HEAPF32[$16 >> 2] = 0.0;
 if ($7) {
  STACKTOP = sp;
  return;
 }
 $17 = $0 + 4 | 0;
 $23 = 1.0;
 $25 = 0.0;
 $i$11 = 0;
 while (1) {
  $19 = +HEAPF32[$_pa + ($i$11 << 3) >> 2];
  $21 = +HEAPF32[$_pa + ($i$11 << 3) + 4 >> 2];
  $28 = $19 * $23 - $21 * $25;
  $29 = $21 * $23 + $19 * $25;
  if (($28 != $28 | 0.0 != 0.0) & ($29 != $29 | 0.0 != 0.0)) {
   ___mulsc3($0, $23, $25, $19, $21);
   $34 = +HEAPF32[$0 >> 2];
   $35 = +HEAPF32[$17 >> 2];
  } else {
   $34 = $28;
   $35 = $29;
  }
  HEAPF32[$_ka >> 2] = $34;
  HEAPF32[$16 >> 2] = $35;
  $i$11 = $i$11 + 1 | 0;
  if (($i$11 | 0) == ($_n | 0)) break; else {
   $23 = $34;
   $25 = $35;
  }
 }
 STACKTOP = sp;
 return;
}

function _liquid_firdes_rrcos($_k, $_m, $_beta, $_dt, $_h) {
 $_k = $_k | 0;
 $_m = $_m | 0;
 $_beta = +$_beta;
 $_dt = +$_dt;
 $_h = $_h | 0;
 var $11 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $19 = 0.0, $21 = 0.0, $24 = 0.0, $25 = 0.0, $28 = 0, $32 = 0.0, $33 = 0.0, $36 = 0.0, $39 = 0.0, $46 = 0.0, $7 = 0.0, $8 = 0.0, $n$02 = 0;
 if (!$_k) {
  _fwrite(gb + 25340 | 0, 55, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if (!$_m) {
  _fwrite(gb + 25396 | 0, 55, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if ($_beta < 0.0 | $_beta > 1.0) {
  _fwrite(gb + 25452 | 0, 52, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 $7 = +($_k >>> 0);
 $8 = +($_m >>> 0);
 $11 = ($_beta + 1.0) * 3.141592653589793;
 $13 = 1.0 - $_beta;
 $14 = $13 * 3.141592653589793;
 $15 = $_beta * 4.0;
 $16 = $15;
 $19 = $13 + $16 / 3.141592653589793;
 $21 = $_beta * 16.0 * $_beta;
 $24 = .7853981633974483 / $_beta;
 $25 = $_beta / 1.4142135381698608;
 $28 = (Math_imul($_m, $_k) | 0) << 1 | 1;
 $n$02 = 0;
 do {
  $32 = (+($n$02 >>> 0) + $_dt) / $7 - $8;
  $33 = $32;
  $36 = +Math_cos(+($11 * $33));
  $39 = +Math_sin(+($14 * $33));
  do if (+Math_abs(+$32) < 1.0e-05) HEAPF32[$_h + ($n$02 << 2) >> 2] = $19; else {
   $46 = 1.0 - $32 * ($21 * $32);
   if ($46 * $46 < 1.0e-05) {
    HEAPF32[$_h + ($n$02 << 2) >> 2] = $25 * (+Math_sin(+$24) * 1.6366198062896729 + +Math_cos(+$24) * .36338022351264954);
    break;
   } else {
    HEAPF32[$_h + ($n$02 << 2) >> 2] = $16 / ($46 * 3.141592653589793) * ($36 + 1.0 / ($15 * $32) * $39);
    break;
   }
  } while (0);
  $n$02 = $n$02 + 1 | 0;
 } while (($n$02 | 0) != ($28 | 0));
 return;
}

function _ofdmframe_init_S1($_p, $_M, $_S1, $_s1, $_M_S1) {
 $_p = $_p | 0;
 $_M = $_M | 0;
 $_S1 = $_S1 | 0;
 $_s1 = $_s1 | 0;
 $_M_S1 = $_M_S1 | 0;
 var $$sink = 0.0, $0 = 0, $18 = 0, $21 = 0.0, $22 = 0, $24 = 0, $27 = 0.0, $4 = 0, $5 = 0, $6 = 0, $M_S1$02 = 0, $M_S1$1 = 0, $M_S1$1$lcssa = 0, $i$03 = 0, $i$11 = 0;
 $0 = _liquid_nextpow2($_M) | 0;
 $4 = _msequence_create_default($0 >>> 0 < 4 ? 5 : ($0 >>> 0 > 8 ? 8 : $0) + 1 | 0) | 0;
 $5 = ($_M | 0) == 0;
 if ($5) {
  _msequence_destroy($4);
  $18 = HEAP32[gb + 9336 >> 2] | 0;
  _fwrite(gb + 35500 | 0, 69, 1, $18) | 0;
  _exit(1);
 } else {
  $M_S1$02 = 0;
  $i$03 = 0;
 }
 while (1) {
  $6 = _msequence_generate_symbol($4, 3) | 0;
  if (!(HEAP8[$_p + $i$03 >> 0] | 0)) {
   $$sink = 0.0;
   $M_S1$1 = $M_S1$02;
  } else {
   $$sink = $6 & 1 | 0 ? 1.0 : -1.0;
   $M_S1$1 = $M_S1$02 + 1 | 0;
  }
  HEAPF32[$_S1 + ($i$03 << 3) >> 2] = $$sink;
  HEAPF32[$_S1 + ($i$03 << 3) + 4 >> 2] = 0.0;
  $i$03 = $i$03 + 1 | 0;
  if (($i$03 | 0) == ($_M | 0)) {
   $M_S1$1$lcssa = $M_S1$1;
   break;
  } else $M_S1$02 = $M_S1$1;
 }
 _msequence_destroy($4);
 if (!$M_S1$1$lcssa) {
  $18 = HEAP32[gb + 9336 >> 2] | 0;
  _fwrite(gb + 35500 | 0, 69, 1, $18) | 0;
  _exit(1);
 }
 HEAP32[$_M_S1 >> 2] = $M_S1$1$lcssa;
 _fft_run($_M, $_S1, $_s1, -1, 0);
 $21 = 1.0 / +Math_sqrt(+(+($M_S1$1$lcssa >>> 0)));
 if ($5) return; else $i$11 = 0;
 do {
  $22 = $_s1 + ($i$11 << 3) | 0;
  $24 = $_s1 + ($i$11 << 3) + 4 | 0;
  $27 = $21 * +HEAPF32[$24 >> 2];
  HEAPF32[$22 >> 2] = $21 * +HEAPF32[$22 >> 2];
  HEAPF32[$24 >> 2] = $27;
  $i$11 = $i$11 + 1 | 0;
 } while (($i$11 | 0) != ($_M | 0));
 return;
}

function _fec_rs_setlength($_q, $_dec_msg_len) {
 $_q = $_q | 0;
 $_dec_msg_len = $_dec_msg_len | 0;
 var $0 = 0, $1 = 0, $11 = 0, $12 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $29 = 0, $30 = 0, $33 = 0, $34 = 0, $44 = 0, $45 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 8 | 0;
 $1 = sp;
 $2 = $_q + 8 | 0;
 if ((HEAP32[$2 >> 2] | 0) == ($_dec_msg_len | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$2 >> 2] = $_dec_msg_len;
 $5 = $_q + 92 | 0;
 _div($0, $_dec_msg_len, HEAP32[$5 >> 2] | 0);
 $11 = ((HEAP32[$0 + 4 >> 2] | 0) != 0 & 1) + (HEAP32[$0 >> 2] | 0) | 0;
 $12 = $_q + 100 | 0;
 HEAP32[$12 >> 2] = $11;
 _div($1, $_dec_msg_len, $11);
 $17 = ((HEAP32[$1 + 4 >> 2] | 0) != 0 & 1) + (HEAP32[$1 >> 2] | 0) | 0;
 HEAP32[$_q + 104 >> 2] = $17;
 $19 = $_q + 80 | 0;
 $20 = HEAP32[$19 >> 2] | 0;
 $21 = $17 + $20 | 0;
 HEAP32[$_q + 108 >> 2] = $21;
 $23 = HEAP32[$12 >> 2] | 0;
 $24 = Math_imul($17, $23) | 0;
 HEAP32[$_q + 112 >> 2] = ($24 >>> 0) % ((HEAP32[$2 >> 2] | 0) >>> 0) | 0;
 $29 = (HEAP32[$5 >> 2] | 0) - $17 | 0;
 $30 = $_q + 116 | 0;
 HEAP32[$30 >> 2] = $29;
 HEAP32[$_q + 12 >> 2] = Math_imul($23, $21) | 0;
 $33 = $_q + 96 | 0;
 $34 = HEAP32[$33 >> 2] | 0;
 if (!$34) {
  $44 = $20;
  $45 = $29;
 } else {
  _free_rs_char($34 | 0);
  $44 = HEAP32[$19 >> 2] | 0;
  $45 = HEAP32[$30 >> 2] | 0;
 }
 HEAP32[$33 >> 2] = _init_rs_char(HEAP32[$_q + 64 >> 2] | 0, HEAP32[$_q + 68 >> 2] | 0, HEAP32[$_q + 72 >> 2] | 0, HEAP32[$_q + 76 >> 2] | 0, $44 | 0, $45 | 0) | 0;
 STACKTOP = sp;
 return;
}

function _liquid_firdes_gmsktx($_k, $_m, $_beta, $_dt, $_h) {
 $_k = $_k | 0;
 $_m = $_m | 0;
 $_beta = +$_beta;
 $_dt = +$_dt;
 $_h = $_h | 0;
 var $$lcssa = 0.0, $10 = 0.0, $13 = 0, $17 = 0.0, $23 = 0.0, $35 = 0.0, $38 = 0.0, $40 = 0, $46 = 0, $7 = 0.0, $8 = 0.0, $e$07 = 0.0, $i$08 = 0, $i$16 = 0, $i$25 = 0, $i$34 = 0;
 if (!$_k) {
  _fwrite(gb + 23336 | 0, 56, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if (!$_m) {
  _fwrite(gb + 23393 | 0, 56, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if ($_beta < 0.0 | $_beta > 1.0) {
  _fwrite(gb + 23450 | 0, 53, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 $7 = +($_k >>> 0);
 $8 = +($_m >>> 0);
 $10 = $_beta * 6.283185307179586;
 $13 = (Math_imul($_m, $_k) | 0) << 1 | 1;
 $i$08 = 0;
 do {
  $17 = +($i$08 >>> 0) / $7 - $8 + $_dt;
  $23 = +_liquid_Qf($10 * ($17 + -.5) * 1.2011224031448364);
  HEAPF32[$_h + ($i$08 << 2) >> 2] = $23 - +_liquid_Qf($10 * ($17 + .5) * 1.2011224031448364);
  $i$08 = $i$08 + 1 | 0;
 } while (($i$08 | 0) != ($13 | 0));
 $e$07 = 0.0;
 $i$16 = 0;
 while (1) {
  $38 = $e$07 + +HEAPF32[$_h + ($i$16 << 2) >> 2];
  $i$16 = $i$16 + 1 | 0;
  if (($i$16 | 0) == ($13 | 0)) {
   $$lcssa = $38;
   break;
  } else $e$07 = $38;
 }
 $35 = 3.141592653589793 / ($$lcssa * 2.0);
 $i$25 = 0;
 do {
  $40 = $_h + ($i$25 << 2) | 0;
  HEAPF32[$40 >> 2] = $35 * +HEAPF32[$40 >> 2];
  $i$25 = $i$25 + 1 | 0;
 } while (($i$25 | 0) != ($13 | 0));
 $i$34 = 0;
 do {
  $46 = $_h + ($i$34 << 2) | 0;
  HEAPF32[$46 >> 2] = $7 * +HEAPF32[$46 >> 2];
  $i$34 = $i$34 + 1 | 0;
 } while (($i$34 | 0) != ($13 | 0));
 return;
}

function _log10f($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $12 = 0, $18 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $31 = 0.0, $35 = 0.0, $40 = 0.0, $41 = 0.0, $fabs = 0.0, $ix$0 = 0, $k$0 = 0, label = 0;
 $0 = (HEAPF32[tempDoublePtr >> 2] = $x, HEAP32[tempDoublePtr >> 2] | 0);
 $2 = ($0 | 0) < 0;
 do if ($0 >>> 0 < 8388608 | $2) {
  $fabs = +Math_abs(+$x);
  if (!((HEAPF32[tempDoublePtr >> 2] = $fabs, HEAP32[tempDoublePtr >> 2] | 0) | 0)) {
   $$0 = -1.0 / ($x * $x);
   break;
  }
  if ($2) {
   $$0 = ($x - $x) / 0.0;
   break;
  } else {
   $ix$0 = (HEAPF32[tempDoublePtr >> 2] = $x * 33554432.0, HEAP32[tempDoublePtr >> 2] | 0);
   $k$0 = -152;
   label = 9;
   break;
  }
 } else if ($0 >>> 0 > 2139095039) $$0 = $x; else if (($0 | 0) == 1065353216) $$0 = 0.0; else {
  $ix$0 = $0;
  $k$0 = -127;
  label = 9;
 } while (0);
 if ((label | 0) == 9) {
  $12 = $ix$0 + 4913933 | 0;
  $18 = (HEAP32[tempDoublePtr >> 2] = ($12 & 8388607) + 1060439283, +HEAPF32[tempDoublePtr >> 2]) + -1.0;
  $20 = $18 / ($18 + 2.0);
  $21 = $20 * $20;
  $22 = $21 * $21;
  $31 = $18 * ($18 * .5);
  $35 = (HEAP32[tempDoublePtr >> 2] = (HEAPF32[tempDoublePtr >> 2] = $18 - $31, HEAP32[tempDoublePtr >> 2] | 0) & -4096, +HEAPF32[tempDoublePtr >> 2]);
  $40 = $18 - $35 - $31 + $20 * ($31 + ($21 * ($22 * .2849878668785095 + .6666666269302368) + $22 * ($22 * .24279078841209412 + .40000972151756287)));
  $41 = +($k$0 + ($12 >>> 23) | 0);
  $$0 = $41 * .3010292053222656 + ($35 * .434326171875 + ($40 * .434326171875 + ($41 * 7.903415166765626e-07 - ($35 + $40) * 3.168997136526741e-05)));
 }
 return +$$0;
}
function _packetizer_create($_n, $_crc, $_fec0, $_fec1) {
 $_n = $_n | 0;
 $_crc = $_crc | 0;
 $_fec0 = $_fec0 | 0;
 $_fec1 = $_fec1 | 0;
 var $0 = 0, $10 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $26 = 0, $30 = 0, $31 = 0, $34 = 0, $39 = 0, $4 = 0, $7 = 0;
 $0 = _malloc(36) | 0;
 HEAP32[$0 >> 2] = $_n;
 $4 = _fec_get_enc_msg_length($_fec1, _fec_get_enc_msg_length($_fec0, (_crc_get_length($_crc) | 0) + $_n | 0) | 0) | 0;
 HEAP32[$0 + 4 >> 2] = $4;
 HEAP32[$0 + 8 >> 2] = $_crc;
 $7 = _crc_get_length($_crc) | 0;
 HEAP32[$0 + 12 >> 2] = $7;
 HEAP32[$0 + 24 >> 2] = $4;
 $10 = $4 << 3;
 HEAP32[$0 + 28 >> 2] = _malloc($10) | 0;
 HEAP32[$0 + 32 >> 2] = _malloc($10) | 0;
 HEAP32[$0 + 20 >> 2] = 2;
 $16 = _malloc(40) | 0;
 HEAP32[$0 + 16 >> 2] = $16;
 $18 = $7 + $_n | 0;
 $19 = $16 + 8 | 0;
 HEAP32[$19 >> 2] = $_fec0;
 HEAP32[$16 >> 2] = $18;
 $21 = $16 + 4 | 0;
 HEAP32[$21 >> 2] = _fec_get_enc_msg_length($_fec0, $18) | 0;
 HEAP32[$16 + 12 >> 2] = _fec_create(HEAP32[$19 >> 2] | 0, 0) | 0;
 $26 = _interleaver_create(HEAP32[$21 >> 2] | 0) | 0;
 HEAP32[$16 + 16 >> 2] = $26;
 if ((HEAP32[$19 >> 2] | 0) == 1) _interleaver_set_depth($26, 0);
 $30 = HEAP32[$21 >> 2] | 0;
 $31 = $16 + 28 | 0;
 HEAP32[$31 >> 2] = $_fec1;
 HEAP32[$16 + 20 >> 2] = $30;
 $34 = $16 + 24 | 0;
 HEAP32[$34 >> 2] = _fec_get_enc_msg_length($_fec1, $30) | 0;
 HEAP32[$16 + 32 >> 2] = _fec_create(HEAP32[$31 >> 2] | 0, 0) | 0;
 $39 = _interleaver_create(HEAP32[$34 >> 2] | 0) | 0;
 HEAP32[$16 + 36 >> 2] = $39;
 if ((HEAP32[$31 >> 2] | 0) != 1) return $0 | 0;
 _interleaver_set_depth($39, 0);
 return $0 | 0;
}

function _qpacketmodem_decode($_q, $_frame, $_payload) {
 $_q = $_q | 0;
 $_frame = $_frame | 0;
 $_payload = $_payload | 0;
 var $$byval_copy = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $12 = 0, $15 = 0, $16 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i$01 = 0, $sym = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 16 | 0;
 $sym = sp + 8 | 0;
 $0 = sp;
 $1 = $_q + 32 | 0;
 if (!(HEAP32[$1 >> 2] | 0)) {
  $$pre$phiZ2D = $_q + 16 | 0;
  $21 = $_q + 4 | 0;
  $22 = HEAP32[$21 >> 2] | 0;
  $23 = HEAP32[$$pre$phiZ2D >> 2] | 0;
  $24 = _packetizer_decode($22, $23, $_payload) | 0;
  STACKTOP = sp;
  return $24 | 0;
 }
 $4 = $0 + 4 | 0;
 $5 = $_q + 16 | 0;
 $6 = $_q + 24 | 0;
 $7 = $_q + 8 | 0;
 $i$01 = 0;
 do {
  $8 = HEAP32[$_q >> 2] | 0;
  $12 = HEAP32[$_frame + ($i$01 << 3) + 4 >> 2] | 0;
  HEAP32[$0 >> 2] = HEAP32[$_frame + ($i$01 << 3) >> 2];
  HEAP32[$4 >> 2] = $12;
  HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$0 + 4 >> 2];
  _modem_demodulate($8, $$byval_copy, $sym);
  $15 = HEAP32[$7 >> 2] | 0;
  $16 = Math_imul($15, $i$01) | 0;
  _liquid_pack_array(HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0, $16, $15, HEAP32[$sym >> 2] | 0);
  $i$01 = $i$01 + 1 | 0;
 } while ($i$01 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0);
 $$pre$phiZ2D = $5;
 $21 = $_q + 4 | 0;
 $22 = HEAP32[$21 >> 2] | 0;
 $23 = HEAP32[$$pre$phiZ2D >> 2] | 0;
 $24 = _packetizer_decode($22, $23, $_payload) | 0;
 STACKTOP = sp;
 return $24 | 0;
}

function _fec_create($_scheme, $_opts) {
 $_scheme = $_scheme | 0;
 $_opts = $_opts | 0;
 var $$0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 do switch ($_scheme | 0) {
 case 0:
  {
   _puts(gb + 12876 | 0) | 0;
   _exit(-1);
   break;
  }
 case 1:
  {
   $$0 = _fec_pass_create(0) | 0;
   break;
  }
 case 2:
  {
   $$0 = _fec_rep3_create($_opts) | 0;
   break;
  }
 case 3:
  {
   $$0 = _fec_rep5_create($_opts) | 0;
   break;
  }
 case 4:
  {
   $$0 = _fec_hamming74_create($_opts) | 0;
   break;
  }
 case 5:
  {
   $$0 = _fec_hamming84_create($_opts) | 0;
   break;
  }
 case 6:
  {
   $$0 = _fec_hamming128_create($_opts) | 0;
   break;
  }
 case 7:
  {
   $$0 = _fec_golay2412_create($_opts) | 0;
   break;
  }
 case 8:
  {
   $$0 = _fec_secded2216_create($_opts) | 0;
   break;
  }
 case 9:
  {
   $$0 = _fec_secded3932_create($_opts) | 0;
   break;
  }
 case 10:
  {
   $$0 = _fec_secded7264_create($_opts) | 0;
   break;
  }
 case 14:
 case 13:
 case 12:
 case 11:
  {
   $$0 = _fec_conv_create($_scheme) | 0;
   break;
  }
 case 26:
 case 25:
 case 24:
 case 23:
 case 22:
 case 21:
 case 20:
 case 19:
 case 18:
 case 17:
 case 16:
 case 15:
  {
   $$0 = _fec_conv_punctured_create($_scheme) | 0;
   break;
  }
 case 27:
  {
   $$0 = _fec_rs_create(27) | 0;
   break;
  }
 default:
  {
   HEAP32[$vararg_buffer >> 2] = $_scheme;
   _printf(gb + 12940 | 0, $vararg_buffer) | 0;
   _exit(-1);
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _packetizer_encode($_p, $_msg, $_pkt) {
 $_p = $_p | 0;
 $_msg = $_msg | 0;
 $_pkt = $_pkt | 0;
 var $0 = 0, $11 = 0, $14 = 0, $15 = 0, $20 = 0, $28 = 0, $43 = 0, $44 = 0, $45 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $i$11 = 0, $key$03 = 0;
 $0 = $_p + 28 | 0;
 _memmove(HEAP32[$0 >> 2] | 0, $_msg | 0, HEAP32[$_p >> 2] | 0) | 0;
 $7 = _crc_generate_key(HEAP32[$_p + 8 >> 2] | 0, HEAP32[$0 >> 2] | 0, HEAP32[$_p >> 2] | 0) | 0;
 $8 = $_p + 12 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 if ($9 | 0) {
  $20 = $9;
  $i$02 = 0;
  $key$03 = $7;
  while (1) {
   HEAP8[(HEAP32[$0 >> 2] | 0) + ($20 + ~$i$02 + (HEAP32[$_p >> 2] | 0)) >> 0] = $key$03;
   $i$02 = $i$02 + 1 | 0;
   $20 = HEAP32[$8 >> 2] | 0;
   if ($i$02 >>> 0 >= $20 >>> 0) break; else $key$03 = $key$03 >>> 8;
  }
 }
 $11 = $_p + 20 | 0;
 if (!(HEAP32[$11 >> 2] | 0)) {
  $43 = HEAP32[$0 >> 2] | 0;
  $44 = $_p + 4 | 0;
  $45 = HEAP32[$44 >> 2] | 0;
  _memmove($_pkt | 0, $43 | 0, $45 | 0) | 0;
  return;
 }
 $14 = $_p + 16 | 0;
 $15 = $_p + 32 | 0;
 $i$11 = 0;
 do {
  $28 = HEAP32[$14 >> 2] | 0;
  _fec_encode(HEAP32[$28 + ($i$11 * 20 | 0) + 12 >> 2] | 0, HEAP32[$28 + ($i$11 * 20 | 0) >> 2] | 0, HEAP32[$0 >> 2] | 0, HEAP32[$15 >> 2] | 0);
  _interleaver_encode(HEAP32[(HEAP32[$14 >> 2] | 0) + ($i$11 * 20 | 0) + 16 >> 2] | 0, HEAP32[$15 >> 2] | 0, HEAP32[$0 >> 2] | 0);
  $i$11 = $i$11 + 1 | 0;
 } while ($i$11 >>> 0 < (HEAP32[$11 >> 2] | 0) >>> 0);
 $43 = HEAP32[$0 >> 2] | 0;
 $44 = $_p + 4 | 0;
 $45 = HEAP32[$44 >> 2] | 0;
 _memmove($_pkt | 0, $43 | 0, $45 | 0) | 0;
 return;
}

function _quiet_encoder_clamp_frame_len($e, $sample_len) {
 $e = $e | 0;
 $sample_len = $sample_len | 0;
 var $$0 = 0, $12 = 0, $19 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $3 = 0.0, $30 = 0, $8 = 0, $baserate_sample_len$0 = 0, $frame_len$0$lcssa = 0, $frame_len$03 = 0, $max_frame_len$01 = 0, $min_frame_len$02 = 0;
 HEAP8[$e + 133 >> 0] = 1;
 $3 = +HEAPF32[$e + 136 >> 2];
 $8 = ~~(+Math_ceil(+(+($sample_len >>> 0) / $3)) + +Math_ceil(+$3)) >>> 0;
 $12 = $8 - (_modulator_flush_sample_len(HEAP32[$e + 96 >> 2] | 0) | 0) | 0;
 if (!(HEAP32[$e + 140 >> 2] | 0)) $baserate_sample_len$0 = $12; else $baserate_sample_len$0 = $12 - (HEAP32[$e + 48 >> 2] | 0) | 0;
 $19 = $e + 84 | 0;
 $22 = (_quiet_encoder_sample_len($e, HEAP32[$19 >> 2] | 0) | 0) >>> 0 > $baserate_sample_len$0 >>> 0;
 $23 = HEAP32[$19 >> 2] | 0;
 if (!$22) {
  $$0 = $23;
  return $$0 | 0;
 }
 $24 = $23 >>> 1;
 if ($23 >>> 0 > 1) {
  $frame_len$03 = $24;
  $max_frame_len$01 = $23;
  $min_frame_len$02 = 0;
  while (1) {
   $27 = (_quiet_encoder_sample_len($e, $frame_len$03) | 0) >>> 0 > $baserate_sample_len$0 >>> 0;
   $max_frame_len$01 = $27 ? $frame_len$03 : $max_frame_len$01;
   $min_frame_len$02 = $27 ? $min_frame_len$02 : $frame_len$03;
   $28 = $max_frame_len$01 - $min_frame_len$02 | 0;
   $30 = ($28 >>> 1) + $min_frame_len$02 | 0;
   if ($28 >>> 0 <= 1) {
    $frame_len$0$lcssa = $30;
    break;
   } else $frame_len$03 = $30;
  }
 } else $frame_len$0$lcssa = $24;
 HEAP32[$19 >> 2] = $frame_len$0$lcssa;
 $$0 = $frame_len$0$lcssa;
 return $$0 | 0;
}

function _liquid_factor($_n, $_factors, $_num_factors) {
 $_n = $_n | 0;
 $_factors = $_factors | 0;
 $_num_factors = $_num_factors | 0;
 var $12 = 0, $13 = 0, $8 = 0, $k$03 = 0, $k$03$lcssa = 0, $n$0 = 0, $n$1 = 0, $num_factors$0 = 0, $num_factors$1 = 0, $num_factors$15 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $n$0 = $_n;
 $num_factors$0 = 0;
 while (1) {
  if ($n$0 >>> 0 < 2) {
   $12 = 0;
   $num_factors$15 = $num_factors$0;
   break;
  } else $k$03 = 2;
  while (1) {
   if (!(($n$0 >>> 0) % ($k$03 >>> 0) | 0)) {
    $k$03$lcssa = $k$03;
    label = 4;
    break;
   }
   $k$03 = $k$03 + 1 | 0;
   if ($k$03 >>> 0 > $n$0 >>> 0) {
    $n$1 = $n$0;
    $num_factors$1 = $num_factors$0;
    break;
   }
  }
  if ((label | 0) == 4) {
   label = 0;
   HEAP32[$_factors + ($num_factors$0 << 2) >> 2] = $k$03$lcssa;
   $n$1 = ($n$0 >>> 0) / ($k$03$lcssa >>> 0) | 0;
   $num_factors$1 = $num_factors$0 + 1 | 0;
  }
  $8 = $n$1 >>> 0 > 1;
  if ($8 & $num_factors$1 >>> 0 < 40) {
   $n$0 = $n$1;
   $num_factors$0 = $num_factors$1;
  } else {
   $12 = $8;
   $num_factors$15 = $num_factors$1;
   break;
  }
 }
 if ($12 & ($num_factors$15 | 0) == 40) {
  $13 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = $_n;
  HEAP32[$vararg_buffer + 4 >> 2] = 40;
  _fprintf($13, gb + 41218 | 0, $vararg_buffer) | 0;
  _exit(1);
 } else {
  HEAP32[$_num_factors >> 2] = $num_factors$15;
  STACKTOP = sp;
  return;
 }
}

function _flexframegen_write_samples($_q, $_buffer, $_buffer_len) {
 $_q = $_q | 0;
 $_buffer = $_buffer | 0;
 $_buffer_len = $_buffer_len | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $14 = 0, $17 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $i$01 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp;
 if (!$_buffer_len) {
  $25 = $_q + 116 | 0;
  $26 = HEAP32[$25 >> 2] | 0;
  STACKTOP = sp;
  return $26 | 0;
 }
 $3 = $_q + 108 | 0;
 $4 = $0 + 4 | 0;
 $5 = $_q + 12 | 0;
 $6 = $_q + 16 | 0;
 $7 = $1 + 4 | 0;
 $9 = HEAP32[$3 >> 2] | 0;
 $i$01 = 0;
 do {
  if (!$9) {
   _flexframegen_generate_symbol($0, $_q);
   $11 = HEAP32[$4 >> 2] | 0;
   $12 = HEAP32[$5 >> 2] | 0;
   HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$7 >> 2] = $11;
   HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   _firinterp_crcf_execute($12, $$byval_copy, $6);
   $14 = HEAP32[$3 >> 2] | 0;
  } else $14 = $9;
  $17 = HEAP32[$_q + 16 + ($14 << 3) + 4 >> 2] | 0;
  HEAP32[$_buffer + ($i$01 << 3) >> 2] = HEAP32[$_q + 16 + ($14 << 3) >> 2];
  HEAP32[$_buffer + ($i$01 << 3) + 4 >> 2] = $17;
  $9 = (((HEAP32[$3 >> 2] | 0) + 1 | 0) >>> 0) % ((HEAP32[$_q >> 2] | 0) >>> 0) | 0;
  HEAP32[$3 >> 2] = $9;
  $i$01 = $i$01 + 1 | 0;
 } while (($i$01 | 0) != ($_buffer_len | 0));
 $25 = $_q + 116 | 0;
 $26 = HEAP32[$25 >> 2] | 0;
 STACKTOP = sp;
 return $26 | 0;
}

function _modem_modulate_sqam128($_q, $_sym_in, $_y) {
 $_q = $_q | 0;
 $_sym_in = $_sym_in | 0;
 $_y = $_y | 0;
 var $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0.0, $12 = 0.0, $17 = 0, $2 = 0, $24 = 0.0, $3 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy1 = sp + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp;
 $6 = $_sym_in & 31;
 $8 = HEAP32[$_q + 100 >> 2] | 0;
 $10 = +HEAPF32[$8 + ($6 << 3) >> 2];
 $12 = +HEAPF32[$8 + ($6 << 3) + 4 >> 2];
 switch ($_sym_in >>> 5 & 3 | 0) {
 case 0:
  {
   HEAPF32[$_y >> 2] = $10;
   HEAPF32[$_y + 4 >> 2] = $12;
   STACKTOP = sp;
   return;
  }
 case 1:
  {
   HEAPF32[$1 >> 2] = $10;
   HEAPF32[$1 + 4 >> 2] = $12;
   HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   _conjf($0, $$byval_copy1);
   $17 = HEAP32[$0 + 4 >> 2] | 0;
   HEAP32[$_y >> 2] = HEAP32[$0 >> 2];
   HEAP32[$_y + 4 >> 2] = $17;
   STACKTOP = sp;
   return;
  }
 case 2:
  {
   HEAPF32[$3 >> 2] = $10;
   HEAPF32[$3 + 4 >> 2] = $12;
   HEAP32[$$byval_copy1 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   _conjf($2, $$byval_copy1);
   $24 = -+HEAPF32[$2 + 4 >> 2];
   HEAPF32[$_y >> 2] = -+HEAPF32[$2 >> 2];
   HEAPF32[$_y + 4 >> 2] = $24;
   STACKTOP = sp;
   return;
  }
 case 3:
  {
   HEAPF32[$_y >> 2] = -$10;
   HEAPF32[$_y + 4 >> 2] = -$12;
   STACKTOP = sp;
   return;
  }
 default:
  {}
 }
}

function _modem_modulate_sqam32($_q, $_sym_in, $_y) {
 $_q = $_q | 0;
 $_sym_in = $_sym_in | 0;
 $_y = $_y | 0;
 var $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0.0, $12 = 0.0, $17 = 0, $2 = 0, $24 = 0.0, $3 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy1 = sp + 32 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp;
 $6 = $_sym_in & 7;
 $8 = HEAP32[$_q + 100 >> 2] | 0;
 $10 = +HEAPF32[$8 + ($6 << 3) >> 2];
 $12 = +HEAPF32[$8 + ($6 << 3) + 4 >> 2];
 switch ($_sym_in >>> 3 & 3 | 0) {
 case 0:
  {
   HEAPF32[$_y >> 2] = $10;
   HEAPF32[$_y + 4 >> 2] = $12;
   STACKTOP = sp;
   return;
  }
 case 1:
  {
   HEAPF32[$1 >> 2] = $10;
   HEAPF32[$1 + 4 >> 2] = $12;
   HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   _conjf($0, $$byval_copy1);
   $17 = HEAP32[$0 + 4 >> 2] | 0;
   HEAP32[$_y >> 2] = HEAP32[$0 >> 2];
   HEAP32[$_y + 4 >> 2] = $17;
   STACKTOP = sp;
   return;
  }
 case 2:
  {
   HEAPF32[$3 >> 2] = $10;
   HEAPF32[$3 + 4 >> 2] = $12;
   HEAP32[$$byval_copy1 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   _conjf($2, $$byval_copy1);
   $24 = -+HEAPF32[$2 + 4 >> 2];
   HEAPF32[$_y >> 2] = -+HEAPF32[$2 >> 2];
   HEAPF32[$_y + 4 >> 2] = $24;
   STACKTOP = sp;
   return;
  }
 case 3:
  {
   HEAPF32[$_y >> 2] = -$10;
   HEAPF32[$_y + 4 >> 2] = -$12;
   STACKTOP = sp;
   return;
  }
 default:
  {}
 }
}

function _flexframegen_assemble($_q, $_header, $_payload, $_payload_dec_len) {
 $_q = $_q | 0;
 $_header = $_header | 0;
 $_payload = $_payload | 0;
 $_payload_dec_len = $_payload_dec_len | 0;
 var $0 = 0, $1 = 0, $2 = 0, $30 = 0, $37 = 0, $4 = 0, $52 = 0, $6 = 0;
 $0 = $_q + 104 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 $1 = $_q + 88 | 0;
 HEAP32[$1 >> 2] = $_payload_dec_len;
 $2 = $_q + 52 | 0;
 $4 = $_q + 56 | 0;
 _memmove(HEAP32[$2 >> 2] | 0, $_header | 0, HEAP32[$4 >> 2] | 0) | 0;
 $6 = HEAP32[$4 >> 2] | 0;
 HEAP8[(HEAP32[$2 >> 2] | 0) + $6 >> 0] = 101;
 HEAP8[(HEAP32[$2 >> 2] | 0) + ($6 + 1) >> 0] = (HEAP32[$1 >> 2] | 0) >>> 8;
 HEAP8[(HEAP32[$2 >> 2] | 0) + ($6 + 2) >> 0] = HEAP32[$1 >> 2];
 HEAP8[(HEAP32[$2 >> 2] | 0) + ($6 + 3) >> 0] = HEAP32[$_q + 44 >> 2];
 $30 = $6 + 4 | 0;
 HEAP8[(HEAP32[$2 >> 2] | 0) + $30 >> 0] = HEAP32[$_q + 32 >> 2] << 5;
 $37 = (HEAP32[$2 >> 2] | 0) + $30 | 0;
 HEAP8[$37 >> 0] = HEAPU8[$37 >> 0] | 0 | HEAP32[$_q + 36 >> 2] & 31;
 HEAP8[(HEAP32[$2 >> 2] | 0) + ($6 + 5) >> 0] = HEAP32[$_q + 40 >> 2] & 31;
 $52 = $_q + 72 | 0;
 _qpacketmodem_encode(HEAP32[$_q + 64 >> 2] | 0, HEAP32[$2 >> 2] | 0, HEAP32[$52 >> 2] | 0);
 _qpilotgen_execute(HEAP32[$_q + 76 >> 2] | 0, HEAP32[$52 >> 2] | 0, HEAP32[$_q + 84 >> 2] | 0);
 _flexframegen_reconfigure($_q);
 _qpacketmodem_encode(HEAP32[$_q + 92 >> 2] | 0, $_payload, HEAP32[$_q + 100 >> 2] | 0);
 HEAP32[$_q + 112 >> 2] = 1;
 return;
}

function _iirfilt_crcf_create_prototype($_ftype, $_btype, $_format, $_order, $_fc, $_f0, $_Ap, $_As) {
 $_ftype = $_ftype | 0;
 $_btype = $_btype | 0;
 $_format = $_format | 0;
 $_order = $_order | 0;
 $_fc = +$_fc;
 $_f0 = +$_f0;
 $_Ap = +$_Ap;
 $_As = +$_As;
 var $$_order = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $3 = 0, $6 = 0, $7 = 0, $q$0 = 0, sp = 0;
 sp = STACKTOP;
 $$_order = $_order << (($_btype | 1 | 0) == 3 & 1);
 $3 = $$_order & 1;
 $6 = ($_format | 0) == 0;
 $7 = (($$_order - $3 | 0) >>> 1) + $3 | 0;
 $10 = $6 ? $7 * 3 | 0 : $$_order + 1 | 0;
 $11 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($10 << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $12 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($10 << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 _liquid_iirdes($_ftype, $_btype, $_format, $_order, $_fc, $_f0, $_Ap, $_As, $11, $12);
 $13 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($10 << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $14 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($10 << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 if ($10 | 0) {
  $16 = $10 << 2;
  _memcpy($13 | 0, $11 | 0, $16 | 0) | 0;
  _memcpy($14 | 0, $12 | 0, $16 | 0) | 0;
 }
 if ($6) {
  $q$0 = _iirfilt_crcf_create_sos($13, $14, $7) | 0;
  STACKTOP = sp;
  return $q$0 | 0;
 } else {
  $q$0 = _iirfilt_crcf_create($13, $10, $14, $10) | 0;
  STACKTOP = sp;
  return $q$0 | 0;
 }
 return 0;
}

function _fec_conv_decode_soft($_q, $_dec_msg_len, $_msg_enc, $_msg_dec) {
 $_q = $_q | 0;
 $_dec_msg_len = $_dec_msg_len | 0;
 $_msg_enc = $_msg_enc | 0;
 $_msg_dec = $_msg_dec | 0;
 var $$pre$phiZ2D = 0, $$pre2 = 0, $0 = 0, $16 = 0, $33 = 0, $5 = 0, $6 = 0, $7 = 0, $k$01 = 0;
 $0 = $_q + 8 | 0;
 if ((HEAP32[$0 >> 2] | 0) == ($_dec_msg_len | 0)) $$pre$phiZ2D = $_q + 12 | 0; else {
  HEAP32[$0 >> 2] = $_dec_msg_len;
  $5 = $_q + 12 | 0;
  HEAP32[$5 >> 2] = _fec_get_enc_msg_length(HEAP32[$_q >> 2] | 0, $_dec_msg_len) | 0;
  $6 = $_q + 20 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  if ($7 | 0) mftCall_vi(HEAP32[$_q + 60 >> 2] | 0, $7 | 0);
  HEAP32[$6 >> 2] = mftCall_ii(HEAP32[$_q + 44 >> 2] | 0, HEAP32[$0 >> 2] << 3 | 0) | 0;
  $16 = $_q + 16 | 0;
  HEAP32[$16 >> 2] = _realloc(HEAP32[$16 >> 2] | 0, HEAP32[$5 >> 2] << 3) | 0;
  $$pre$phiZ2D = $5;
 }
 $$pre2 = $_q + 16 | 0;
 if (HEAP32[$$pre$phiZ2D >> 2] & 536870911 | 0) {
  $k$01 = 0;
  do {
   HEAP8[(HEAP32[$$pre2 >> 2] | 0) + $k$01 >> 0] = HEAP8[$_msg_enc + $k$01 >> 0] | 0;
   $k$01 = $k$01 + 1 | 0;
  } while ($k$01 >>> 0 < HEAP32[$$pre$phiZ2D >> 2] << 3 >>> 0);
 }
 $33 = $_q + 20 | 0;
 mftCall_iii(HEAP32[$_q + 48 >> 2] | 0, HEAP32[$33 >> 2] | 0, 0) | 0;
 mftCall_iiii(HEAP32[$_q + 52 >> 2] | 0, HEAP32[$33 >> 2] | 0, HEAP32[$$pre2 >> 2] | 0, (HEAP32[$_q + 32 >> 2] | 0) + -1 + (HEAP32[$0 >> 2] << 3) | 0) | 0;
 mftCall_iiiii(HEAP32[$_q + 56 >> 2] | 0, HEAP32[$33 >> 2] | 0, $_msg_dec | 0, HEAP32[$0 >> 2] << 3 | 0, 0) | 0;
 return;
}

function _fecsoft_hamming84_decode($_soft_bits) {
 $_soft_bits = $_soft_bits | 0;
 var $1 = 0, $10 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $29 = 0, $30 = 0, $33 = 0, $5 = 0, $6 = 0, $64 = 0, $9 = 0, $dmin$01 = 0, $indvars$iv = 0, $or$cond = 0, $s_hat$02 = 0, $s_hat$1 = 0, $s_hat$1$lcssa = 0;
 $1 = HEAPU8[$_soft_bits >> 0] | 0;
 $2 = $1 ^ 255;
 $5 = HEAPU8[$_soft_bits + 1 >> 0] | 0;
 $6 = $5 ^ 255;
 $9 = HEAPU8[$_soft_bits + 2 >> 0] | 0;
 $10 = $9 ^ 255;
 $13 = HEAPU8[$_soft_bits + 3 >> 0] | 0;
 $14 = $13 ^ 255;
 $17 = HEAPU8[$_soft_bits + 4 >> 0] | 0;
 $18 = $17 ^ 255;
 $21 = HEAPU8[$_soft_bits + 5 >> 0] | 0;
 $22 = $21 ^ 255;
 $25 = HEAPU8[$_soft_bits + 6 >> 0] | 0;
 $26 = $25 ^ 255;
 $29 = HEAPU8[$_soft_bits + 7 >> 0] | 0;
 $30 = $29 ^ 255;
 $dmin$01 = 0;
 $indvars$iv = 0;
 $s_hat$02 = 0;
 while (1) {
  $33 = HEAPU8[gb + 13811 + $indvars$iv >> 0] | 0;
  $64 = ($33 & 64 | 0 ? $6 : $5) + ($33 & 128 | 0 ? $2 : $1) + ($33 & 32 | 0 ? $10 : $9) + ($33 & 16 | 0 ? $14 : $13) + ($33 & 8 | 0 ? $18 : $17) + ($33 & 4 | 0 ? $22 : $21) + ($33 & 2 | 0 ? $26 : $25) + ($33 & 1 | 0 ? $30 : $29) | 0;
  $or$cond = ($indvars$iv | 0) == 0 | $64 >>> 0 < $dmin$01 >>> 0;
  $s_hat$1 = $or$cond ? $indvars$iv & 255 : $s_hat$02;
  $indvars$iv = $indvars$iv + 1 | 0;
  if (($indvars$iv | 0) == 16) {
   $s_hat$1$lcssa = $s_hat$1;
   break;
  } else {
   $dmin$01 = $or$cond ? $64 : $dmin$01;
   $s_hat$02 = $s_hat$1;
  }
 }
 return $s_hat$1$lcssa | 0;
}

function _hashtable_find_pair($hashtable, $bucket, $key, $hash) {
 $hashtable = $hashtable | 0;
 $bucket = $bucket | 0;
 $key = $key | 0;
 $hash = $hash | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $31 = 0, $4 = 0, $list = 0, $pair = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 24 | 0;
 $1 = sp + 20 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 8 | 0;
 $list = sp + 4 | 0;
 $pair = sp;
 HEAP32[$1 >> 2] = $hashtable;
 HEAP32[$2 >> 2] = $bucket;
 HEAP32[$3 >> 2] = $key;
 HEAP32[$4 >> 2] = $hash;
 if (_bucket_is_empty(HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0) | 0) {
  HEAP32[$0 >> 2] = 0;
  $31 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $31 | 0;
 }
 HEAP32[$list >> 2] = HEAP32[HEAP32[$2 >> 2] >> 2];
 while (1) {
  HEAP32[$pair >> 2] = HEAP32[$list >> 2];
  if ((HEAP32[(HEAP32[$pair >> 2] | 0) + 8 >> 2] | 0) == (HEAP32[$4 >> 2] | 0)) if (!(_strcmp((HEAP32[$pair >> 2] | 0) + 20 | 0, HEAP32[$3 >> 2] | 0) | 0)) {
   label = 6;
   break;
  }
  if ((HEAP32[$list >> 2] | 0) == (HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0)) {
   label = 9;
   break;
  }
  HEAP32[$list >> 2] = HEAP32[(HEAP32[$list >> 2] | 0) + 4 >> 2];
 }
 if ((label | 0) == 6) {
  HEAP32[$0 >> 2] = HEAP32[$pair >> 2];
  $31 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $31 | 0;
 } else if ((label | 0) == 9) {
  HEAP32[$0 >> 2] = 0;
  $31 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $31 | 0;
 }
 return 0;
}

function _ofdmflexframegen_set_header_len($_q, $_len) {
 $_q = $_q | 0;
 $_len = $_len | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $24 = 0, $25 = 0, $26 = 0, $29 = 0, $3 = 0, $30 = 0, $6 = 0, $7 = 0, $bps_d = 0, $d = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $bps_d = sp + 8 | 0;
 $d = sp;
 HEAP32[$_q + 72 >> 2] = $_len;
 $1 = $_len + 6 | 0;
 $2 = $_q + 76 | 0;
 HEAP32[$2 >> 2] = $1;
 $3 = $_q + 60 | 0;
 HEAP32[$3 >> 2] = _realloc(HEAP32[$3 >> 2] | 0, $1) | 0;
 $6 = $_q + 56 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 if ($7 | 0) _packetizer_destroy($7);
 $10 = _packetizer_create(HEAP32[$2 >> 2] | 0, 6, 7, 1) | 0;
 HEAP32[$6 >> 2] = $10;
 $11 = _packetizer_get_enc_msg_len($10) | 0;
 $12 = $_q + 80 | 0;
 HEAP32[$12 >> 2] = $11;
 $13 = $_q + 64 | 0;
 HEAP32[$13 >> 2] = _realloc(HEAP32[$13 >> 2] | 0, $11) | 0;
 _div($bps_d, HEAP32[$12 >> 2] << 3, HEAP32[gb + 580 + 764 >> 2] | 0);
 $24 = ((HEAP32[$bps_d + 4 >> 2] | 0) != 0 & 1) + (HEAP32[$bps_d >> 2] | 0) | 0;
 $25 = $_q + 84 | 0;
 HEAP32[$25 >> 2] = $24;
 $26 = $_q + 68 | 0;
 HEAP32[$26 >> 2] = _realloc(HEAP32[$26 >> 2] | 0, $24) | 0;
 $29 = $_q + 52 | 0;
 $30 = HEAP32[$29 >> 2] | 0;
 if ($30 | 0) _modem_destroy($30);
 HEAP32[$29 >> 2] = _modem_create(47) | 0;
 _div($d, HEAP32[$25 >> 2] | 0, HEAP32[$_q + 24 >> 2] | 0);
 HEAP32[$_q + 44 >> 2] = ((HEAP32[$d + 4 >> 2] | 0) != 0 & 1) + (HEAP32[$d >> 2] | 0);
 STACKTOP = sp;
 return;
}

function ___strchrnul($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $11 = 0, $15 = 0, $16 = 0, $22 = 0, $23 = 0, $29 = 0, $36 = 0, $37 = 0, $5 = 0, $8 = 0, $w$0$lcssa = 0, $w$08 = 0;
 $0 = $c & 255;
 L1 : do if (!$0) $$0 = $s + (_strlen($s) | 0) | 0; else {
  if (!($s & 3)) $$02$lcssa = $s; else {
   $5 = $c & 255;
   $$0211 = $s;
   while (1) {
    $8 = HEAP8[$$0211 >> 0] | 0;
    if ($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 == $5 << 24 >> 24) {
     $$0 = $$0211;
     break L1;
    }
    $11 = $$0211 + 1 | 0;
    if (!($11 & 3)) {
     $$02$lcssa = $11;
     break;
    } else $$0211 = $11;
   }
  }
  $15 = Math_imul($0, 16843009) | 0;
  $16 = HEAP32[$$02$lcssa >> 2] | 0;
  L10 : do if (!(($16 & -2139062144 ^ -2139062144) & $16 + -16843009)) {
   $23 = $16;
   $w$08 = $$02$lcssa;
   while (1) {
    $22 = $23 ^ $15;
    if (($22 & -2139062144 ^ -2139062144) & $22 + -16843009 | 0) {
     $w$0$lcssa = $w$08;
     break L10;
    }
    $29 = $w$08 + 4 | 0;
    $23 = HEAP32[$29 >> 2] | 0;
    if (($23 & -2139062144 ^ -2139062144) & $23 + -16843009 | 0) {
     $w$0$lcssa = $29;
     break;
    } else $w$08 = $29;
   }
  } else $w$0$lcssa = $$02$lcssa; while (0);
  $36 = $c & 255;
  $$1 = $w$0$lcssa;
  while (1) {
   $37 = HEAP8[$$1 >> 0] | 0;
   if ($37 << 24 >> 24 == 0 ? 1 : $37 << 24 >> 24 == $36 << 24 >> 24) {
    $$0 = $$1;
    break;
   } else $$1 = $$1 + 1 | 0;
  }
 } while (0);
 return $$0 | 0;
}

function _qpilotgen_execute($_q, $_payload, $_frame) {
 $_q = $_q | 0;
 $_payload = $_payload | 0;
 $_frame = $_frame | 0;
 var $0 = 0, $13 = 0, $20 = 0, $3 = 0, $4 = 0, $9 = 0, $i$01 = 0, $n$0$lcssa = 0, $n$02 = 0, $n$1 = 0, $p$0$lcssa = 0, $p$03 = 0, $p$1 = 0;
 $0 = $_q + 12 | 0;
 if (!(HEAP32[$0 >> 2] | 0)) {
  $n$0$lcssa = 0;
  $p$0$lcssa = 0;
 } else {
  $3 = $_q + 4 | 0;
  $4 = $_q + 16 | 0;
  $i$01 = 0;
  $n$02 = 0;
  $p$03 = 0;
  while (1) {
   if (!(($i$01 >>> 0) % ((HEAP32[$3 >> 2] | 0) >>> 0) | 0)) {
    $9 = HEAP32[$4 >> 2] | 0;
    $13 = HEAP32[$9 + ($p$03 << 3) + 4 >> 2] | 0;
    HEAP32[$_frame + ($i$01 << 3) >> 2] = HEAP32[$9 + ($p$03 << 3) >> 2];
    HEAP32[$_frame + ($i$01 << 3) + 4 >> 2] = $13;
    $n$1 = $n$02;
    $p$1 = $p$03 + 1 | 0;
   } else {
    $20 = HEAP32[$_payload + ($n$02 << 3) + 4 >> 2] | 0;
    HEAP32[$_frame + ($i$01 << 3) >> 2] = HEAP32[$_payload + ($n$02 << 3) >> 2];
    HEAP32[$_frame + ($i$01 << 3) + 4 >> 2] = $20;
    $n$1 = $n$02 + 1 | 0;
    $p$1 = $p$03;
   }
   $i$01 = $i$01 + 1 | 0;
   if ($i$01 >>> 0 >= (HEAP32[$0 >> 2] | 0) >>> 0) {
    $n$0$lcssa = $n$1;
    $p$0$lcssa = $p$1;
    break;
   } else {
    $n$02 = $n$1;
    $p$03 = $p$1;
   }
  }
 }
 if (($n$0$lcssa | 0) != (HEAP32[$_q >> 2] | 0)) ___assert_fail(gb + 30349 | 0, gb + 30370 | 0, 157, gb + 30398 | 0);
 if (($p$0$lcssa | 0) == (HEAP32[$_q + 8 >> 2] | 0)) return; else ___assert_fail(gb + 30416 | 0, gb + 30370 | 0, 158, gb + 30398 | 0);
}

function _quiet_encoder_sample_len($e, $data_len) {
 $e = $e | 0;
 $data_len = $data_len | 0;
 var $0 = 0, $11 = 0, $14 = 0, $16 = 0, $25 = 0, $29 = 0, $3 = 0, $6 = 0, $9 = 0, $header = 0, $num_symbols$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $header = sp;
 $0 = _calloc($data_len, 1) | 0;
 switch (HEAP32[$e + 64 >> 2] | 0) {
 case 0:
  {
   $3 = $e + 88 | 0;
   _ofdmflexframegen_assemble(HEAP32[$3 >> 2] | 0, $header, $0, $data_len);
   $6 = _ofdmflexframegen_getframelen(HEAP32[$3 >> 2] | 0) | 0;
   $9 = Math_imul(HEAP32[$e + 104 >> 2] | 0, $6) | 0;
   _ofdmflexframegen_reset(HEAP32[$3 >> 2] | 0);
   $num_symbols$1 = $9;
   break;
  }
 case 1:
  {
   $11 = $e + 88 | 0;
   _flexframegen_assemble(HEAP32[$11 >> 2] | 0, $header, $0, $data_len);
   $14 = _flexframegen_getframelen(HEAP32[$11 >> 2] | 0) | 0;
   _flexframegen_reset(HEAP32[$11 >> 2] | 0);
   $num_symbols$1 = $14;
   break;
  }
 case 2:
  {
   $16 = $e + 88 | 0;
   _gmskframegen_assemble(HEAP32[$16 >> 2] | 0, $header, $0, $data_len, HEAP32[$e + 68 >> 2] | 0, HEAP32[$e + 72 >> 2] | 0, HEAP32[$e + 76 >> 2] | 0);
   $25 = _gmskframegen_getframelen(HEAP32[$16 >> 2] | 0) | 0;
   _gmskframegen_reset(HEAP32[$16 >> 2] | 0);
   $num_symbols$1 = $25;
   break;
  }
 default:
  $num_symbols$1 = 0;
 }
 _free($0);
 $29 = _modulator_sample_len(HEAP32[$e + 96 >> 2] | 0, $num_symbols$1) | 0;
 STACKTOP = sp;
 return $29 | 0;
}

function ___fwritex($s, $l, $f) {
 $s = $s | 0;
 $l = $l | 0;
 $f = $f | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $11 = 0, $19 = 0, $29 = 0, $6 = 0, $7 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa12 = 0, $i$1 = 0, label = 0;
 $0 = $f + 16 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) if (!(___towrite($f) | 0)) {
  $9 = HEAP32[$0 >> 2] | 0;
  label = 5;
 } else $$0 = 0; else {
  $9 = $1;
  label = 5;
 }
 L5 : do if ((label | 0) == 5) {
  $6 = $f + 20 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  $11 = $7;
  if (($9 - $7 | 0) >>> 0 < $l >>> 0) {
   $$0 = mftCall_iiii(HEAP32[$f + 36 >> 2] | 0, $f | 0, $s | 0, $l | 0) | 0;
   break;
  }
  L10 : do if ((HEAP8[$f + 75 >> 0] | 0) > -1) {
   $i$0 = $l;
   while (1) {
    if (!$i$0) {
     $$01 = $l;
     $$02 = $s;
     $29 = $11;
     $i$1 = 0;
     break L10;
    }
    $19 = $i$0 + -1 | 0;
    if ((HEAP8[$s + $19 >> 0] | 0) == 10) {
     $i$0$lcssa12 = $i$0;
     break;
    } else $i$0 = $19;
   }
   if ((mftCall_iiii(HEAP32[$f + 36 >> 2] | 0, $f | 0, $s | 0, $i$0$lcssa12 | 0) | 0) >>> 0 < $i$0$lcssa12 >>> 0) {
    $$0 = $i$0$lcssa12;
    break L5;
   }
   $$01 = $l - $i$0$lcssa12 | 0;
   $$02 = $s + $i$0$lcssa12 | 0;
   $29 = HEAP32[$6 >> 2] | 0;
   $i$1 = $i$0$lcssa12;
  } else {
   $$01 = $l;
   $$02 = $s;
   $29 = $11;
   $i$1 = 0;
  } while (0);
  _memcpy($29 | 0, $$02 | 0, $$01 | 0) | 0;
  HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + $$01;
  $$0 = $i$1 + $$01 | 0;
 } while (0);
 return $$0 | 0;
}

function _fec_secded7264_compute_syndrome($_v) {
 $_v = $_v | 0;
 var $$lcssa = 0, $1 = 0, $11 = 0, $13 = 0, $15 = 0, $17 = 0, $25 = 0, $3 = 0, $5 = 0, $7 = 0, $9 = 0, $98 = 0, $i$02 = 0, $syndrome$01 = 0;
 $1 = HEAPU8[$_v >> 0] | 0;
 $3 = HEAP8[$_v + 1 >> 0] | 0;
 $5 = HEAP8[$_v + 2 >> 0] | 0;
 $7 = HEAP8[$_v + 3 >> 0] | 0;
 $9 = HEAP8[$_v + 4 >> 0] | 0;
 $11 = HEAP8[$_v + 5 >> 0] | 0;
 $13 = HEAP8[$_v + 6 >> 0] | 0;
 $15 = HEAP8[$_v + 7 >> 0] | 0;
 $17 = HEAP8[$_v + 8 >> 0] | 0;
 $i$02 = 0;
 $syndrome$01 = 0;
 while (1) {
  $25 = $i$02 << 3;
  $98 = (($1 & 1 << 7 - $i$02 | 0) != 0 & 1) + (HEAPU8[($3 & HEAP8[gb + 19335 + $25 >> 0] & 255) + (gb + 39229) >> 0] | 0) + (HEAPU8[($5 & HEAP8[($25 | 1) + (gb + 19335) >> 0] & 255) + (gb + 39229) >> 0] | 0) + (HEAPU8[($7 & HEAP8[($25 | 2) + (gb + 19335) >> 0] & 255) + (gb + 39229) >> 0] | 0) + (HEAPU8[($9 & HEAP8[($25 | 3) + (gb + 19335) >> 0] & 255) + (gb + 39229) >> 0] | 0) + (HEAPU8[($11 & HEAP8[($25 | 4) + (gb + 19335) >> 0] & 255) + (gb + 39229) >> 0] | 0) + (HEAPU8[($13 & HEAP8[($25 | 5) + (gb + 19335) >> 0] & 255) + (gb + 39229) >> 0] | 0) + (HEAPU8[($15 & HEAP8[($25 | 6) + (gb + 19335) >> 0] & 255) + (gb + 39229) >> 0] | 0) + (HEAPU8[($17 & HEAP8[($25 | 7) + (gb + 19335) >> 0] & 255) + (gb + 39229) >> 0] | 0) & 1 | $syndrome$01 << 1 & 510;
  $i$02 = $i$02 + 1 | 0;
  if (($i$02 | 0) == 8) {
   $$lcssa = $98;
   break;
  } else $syndrome$01 = $98;
 }
 return $$lcssa & 255 | 0;
}

function _ofdmflexframegen_write_header($_q, $_buffer) {
 $_q = $_q | 0;
 $_buffer = $_buffer | 0;
 var $$pre$phiZ2D = 0, $12 = 0, $15 = 0, $2 = 0, $23 = 0, $27 = 0, $3 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $i$01 = 0;
 if (!(HEAP32[$_q >> 2] | 0)) $$pre$phiZ2D = $_q + 36 | 0; else {
  $2 = $_q + 12 | 0;
  $3 = $_q + 132 | 0;
  $4 = $_q + 84 | 0;
  $5 = $_q + 52 | 0;
  $6 = $_q + 68 | 0;
  $7 = $_q + 36 | 0;
  $i$01 = 0;
  do {
   do if ((HEAP8[(HEAP32[$2 >> 2] | 0) + $i$01 >> 0] | 0) == 2) {
    $12 = HEAP32[$3 >> 2] | 0;
    $15 = HEAP32[$5 >> 2] | 0;
    if ($12 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $12 + 1;
     _modem_modulate($15, HEAPU8[(HEAP32[$6 >> 2] | 0) + $12 >> 0] | 0, (HEAP32[$7 >> 2] | 0) + ($i$01 << 3) | 0);
     break;
    } else {
     $23 = _modem_gen_rand_sym($15) | 0;
     _modem_modulate(HEAP32[$5 >> 2] | 0, $23, (HEAP32[$7 >> 2] | 0) + ($i$01 << 3) | 0);
     break;
    }
   } else {
    $27 = HEAP32[$7 >> 2] | 0;
    HEAPF32[$27 + ($i$01 << 3) >> 2] = 0.0;
    HEAPF32[$27 + ($i$01 << 3) + 4 >> 2] = 0.0;
   } while (0);
   $i$01 = $i$01 + 1 | 0;
  } while ($i$01 >>> 0 < (HEAP32[$_q >> 2] | 0) >>> 0);
  $$pre$phiZ2D = $7;
 }
 _ofdmframegen_writesymbol(HEAP32[$_q + 40 >> 2] | 0, HEAP32[$$pre$phiZ2D >> 2] | 0, $_buffer);
 $36 = $_q + 116 | 0;
 if ((HEAP32[$36 >> 2] | 0) != (HEAP32[$_q + 44 >> 2] | 0)) return;
 HEAP32[$36 >> 2] = 0;
 HEAP32[$_q + 120 >> 2] = 4;
 return;
}

function _matrixf_inv($_X, $_XR, $_XC) {
 $_X = $_X | 0;
 $_XR = $_XR | 0;
 $_XC = $_XC | 0;
 var $$alloca_mul = 0, $11 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $c$19$us = 0, $r$012$us = 0, $r$14$us = 0, sp = 0;
 sp = STACKTOP;
 if (($_XR | 0) != ($_XC | 0)) {
  _fwrite(gb + 30909 | 0, 40, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 $2 = $_XR << 1;
 $$alloca_mul = (Math_imul($2, $_XR) | 0) << 2;
 $4 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $$alloca_mul | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $5 = ($_XR | 0) == 0;
 if ($5) {
  _matrixf_gjelim($4, $_XR, $2);
  STACKTOP = sp;
  return;
 }
 $6 = $_XR << 2;
 $r$012$us = 0;
 do {
  $14 = Math_imul($2, $r$012$us) | 0;
  _memcpy($4 + ($14 << 2) | 0, $_X + ((Math_imul($r$012$us, $_XR) | 0) << 2) | 0, $6 | 0) | 0;
  $11 = $14 + $_XR | 0;
  $c$19$us = 0;
  do {
   HEAPF32[$4 + ($11 + $c$19$us << 2) >> 2] = +(($r$012$us | 0) == ($c$19$us | 0) & 1);
   $c$19$us = $c$19$us + 1 | 0;
  } while (($c$19$us | 0) != ($_XR | 0));
  $r$012$us = $r$012$us + 1 | 0;
 } while (($r$012$us | 0) != ($_XR | 0));
 _matrixf_gjelim($4, $_XR, $2);
 if ($5) {
  STACKTOP = sp;
  return;
 }
 $16 = $_XR << 2;
 $r$14$us = 0;
 do {
  _memcpy($_X + ((Math_imul($r$14$us, $_XR) | 0) << 2) | 0, $4 + ((Math_imul($2, $r$14$us) | 0) + $_XR << 2) | 0, $16 | 0) | 0;
  $r$14$us = $r$14$us + 1 | 0;
 } while (($r$14$us | 0) != ($_XR | 0));
 STACKTOP = sp;
 return;
}

function _gmskframegen_write_preamble($_q, $_y) {
 $_q = $_q | 0;
 $_y = $_y | 0;
 var $$pre = 0, $0 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $23 = 0, $26 = 0.0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i$01 = 0;
 $0 = $_q + 32 | 0;
 $2 = _msequence_advance(HEAP32[$0 >> 2] | 0) | 0;
 _gmskmod_modulate(HEAP32[$_q >> 2] | 0, $2 & 255, $_y);
 $5 = $_q + 96 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = $_q + 8 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 L1 : do if ($6 >>> 0 < $8 >>> 0) {
  $10 = $_q + 4 | 0;
  $11 = HEAP32[$10 >> 2] | 0;
  if (!$11) $31 = $6; else {
   $14 = $6;
   $15 = $11;
   $19 = $8;
   $i$01 = 0;
   while (1) {
    $20 = +_hamming((Math_imul($14, $15) | 0) + $i$01 | 0, Math_imul($15 << 1, $19) | 0);
    $21 = $_y + ($i$01 << 3) | 0;
    $23 = $_y + ($i$01 << 3) + 4 | 0;
    $26 = $20 * +HEAPF32[$23 >> 2];
    HEAPF32[$21 >> 2] = $20 * +HEAPF32[$21 >> 2];
    HEAPF32[$23 >> 2] = $26;
    $27 = $i$01 + 1 | 0;
    $28 = HEAP32[$10 >> 2] | 0;
    $$pre = HEAP32[$5 >> 2] | 0;
    if ($27 >>> 0 >= $28 >>> 0) {
     $31 = $$pre;
     break L1;
    }
    $14 = $$pre;
    $15 = $28;
    $19 = HEAP32[$7 >> 2] | 0;
    $i$01 = $27;
   }
  }
 } else $31 = $6; while (0);
 $30 = $31 + 1 | 0;
 HEAP32[$5 >> 2] = $30;
 if (($30 | 0) != (HEAP32[$_q + 16 >> 2] | 0)) return;
 _msequence_reset(HEAP32[$0 >> 2] | 0);
 HEAP32[$5 >> 2] = 0;
 HEAP32[$_q + 84 >> 2] = 1;
 return;
}

function _liquid_firdes_kaiser($_n, $_fc, $_As, $_mu, $_h) {
 $_n = $_n | 0;
 $_fc = +$_fc;
 $_As = +$_As;
 $_mu = +$_mu;
 $_h = $_h | 0;
 var $10 = 0.0, $15 = 0.0, $2 = 0, $25 = 0.0, $26 = 0.0, $31 = 0.0, $6 = 0, $beta$0$i = 0.0, $i$04 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 if ($_mu < -.5 | $_mu > .5) {
  $2 = HEAP32[gb + 9336 >> 2] | 0;
  HEAPF64[$vararg_buffer >> 3] = $_mu;
  _fprintf($2, gb + 22180 | 0, $vararg_buffer) | 0;
  _exit(1);
 }
 if ($_fc < 0.0 | $_fc > .5) {
  $6 = HEAP32[gb + 9336 >> 2] | 0;
  HEAPF64[$vararg_buffer1 >> 3] = $_fc;
  _fprintf($6, gb + 22249 | 0, $vararg_buffer1) | 0;
  _exit(1);
 }
 if (!$_n) {
  _fwrite(gb + 22329 | 0, 71, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 $10 = +Math_abs(+$_As);
 if ($10 > 50.0) $beta$0$i = ($10 + -8.699999809265137) * .11020000278949738; else if ($10 > 21.0) {
  $15 = $10 + -21.0;
  $beta$0$i = $15 * .07885999977588654 + +Math_pow(+$15, .4000000059604645) * .5842;
 } else $beta$0$i = 0.0;
 $25 = +(($_n + -1 | 0) >>> 0) * .5;
 $26 = $_fc * 2.0;
 $i$04 = 0;
 do {
  $31 = +_sincf($26 * (+($i$04 >>> 0) - $25 + $_mu));
  HEAPF32[$_h + ($i$04 << 2) >> 2] = $31 * +_kaiser($i$04, $_n, $beta$0$i, $_mu);
  $i$04 = $i$04 + 1 | 0;
 } while (($i$04 | 0) != ($_n | 0));
 STACKTOP = sp;
 return;
}

function _json_object_set_new_nocheck($json, $key, $value) {
 $json = $json | 0;
 $key = $key | 0;
 $value = $value | 0;
 var $0 = 0, $1 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $29 = 0, $3 = 0, $object = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 16 | 0;
 $1 = sp + 12 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $object = sp;
 HEAP32[$1 >> 2] = $json;
 HEAP32[$2 >> 2] = $key;
 HEAP32[$3 >> 2] = $value;
 if (!(HEAP32[$3 >> 2] | 0)) {
  HEAP32[$0 >> 2] = -1;
  $29 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $29 | 0;
 }
 if ((HEAP32[$2 >> 2] | 0) != 0 & (HEAP32[$1 >> 2] | 0) != 0) if (!(HEAP32[HEAP32[$1 >> 2] >> 2] | 0)) if ((HEAP32[$1 >> 2] | 0) != (HEAP32[$3 >> 2] | 0)) {
  HEAP32[$object >> 2] = HEAP32[$1 >> 2];
  $19 = (HEAP32[$object >> 2] | 0) + 8 | 0;
  $20 = HEAP32[$2 >> 2] | 0;
  $22 = (HEAP32[$object >> 2] | 0) + 28 | 0;
  $23 = HEAP32[$22 >> 2] | 0;
  HEAP32[$22 >> 2] = $23 + 1;
  if (_hashtable_set($19, $20, $23, HEAP32[$3 >> 2] | 0) | 0) {
   _json_decref_1931(HEAP32[$3 >> 2] | 0);
   HEAP32[$0 >> 2] = -1;
   $29 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $29 | 0;
  } else {
   HEAP32[$0 >> 2] = 0;
   $29 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $29 | 0;
  }
 }
 _json_decref_1931(HEAP32[$3 >> 2] | 0);
 HEAP32[$0 >> 2] = -1;
 $29 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $29 | 0;
}

function _modem_demodulate_ask($_q, $_x, $_sym_out) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 $_sym_out = $_sym_out | 0;
 var $$01$i = 0.0, $$1$i = 0.0, $1 = 0, $17 = 0, $18 = 0, $20 = 0, $3 = 0.0, $32 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $i$0$neg4$i = 0, $i$02$i = 0, $s$0$lcssa$i = 0, $s$03$i = 0, $s$1$i = 0;
 $1 = HEAP32[$_q + 4 >> 2] | 0;
 if (!$1) {
  $35 = HEAP32[$_x >> 2] | 0;
  $s$0$lcssa$i = 0;
 } else {
  $3 = +HEAPF32[$_x >> 2];
  $4 = $1 + -1 | 0;
  $5 = (HEAPF32[tempDoublePtr >> 2] = $3, HEAP32[tempDoublePtr >> 2] | 0);
  $$01$i = $3;
  $i$0$neg4$i = 0;
  $i$02$i = 0;
  $s$03$i = 0;
  while (1) {
   $6 = $s$03$i << 1;
   if ($$01$i > 0.0) {
    $$1$i = $$01$i - +HEAPF32[$_q + 12 + ($i$0$neg4$i + $4 << 2) >> 2];
    $s$1$i = $6 | 1;
   } else {
    $$1$i = $$01$i + +HEAPF32[$_q + 12 + ($i$0$neg4$i + $4 << 2) >> 2];
    $s$1$i = $6;
   }
   $17 = $i$02$i + 1 | 0;
   if (($17 | 0) == ($1 | 0)) {
    $35 = $5;
    $s$0$lcssa$i = $s$1$i;
    break;
   } else {
    $$01$i = $$1$i;
    $i$0$neg4$i = ~$i$02$i;
    $i$02$i = $17;
    $s$03$i = $s$1$i;
   }
  }
 }
 $18 = _gray_encode($s$0$lcssa$i) | 0;
 HEAP32[$_sym_out >> 2] = $18;
 $20 = (_gray_decode($18) | 0) << 1;
 HEAPF32[$_q + 92 >> 2] = +HEAPF32[$_q + 100 >> 2] * +(1 - (HEAP32[$_q + 8 >> 2] | 0) + $20 | 0);
 HEAPF32[$_q + 96 >> 2] = 0.0;
 $32 = HEAP32[$_x + 4 >> 2] | 0;
 HEAP32[$_q + 84 >> 2] = $35;
 HEAP32[$_q + 88 >> 2] = $32;
 return;
}

function _quiet_decoder_disable_stats($d) {
 $d = $d | 0;
 var $1 = 0, $10 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $29 = 0, $30 = 0, $33 = 0, $5 = 0, $6 = 0, $9 = 0;
 HEAP8[$d + 344 >> 0] = 0;
 $1 = $d + 276 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if ($2 | 0) {
  _free($2);
  HEAP32[$1 >> 2] = 0;
  HEAP32[$d + 308 >> 2] = 0;
 }
 $5 = $d + 280 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 if ($6 | 0) {
  _free($6);
  HEAP32[$5 >> 2] = 0;
  HEAP32[$d + 312 >> 2] = 0;
 }
 $9 = $d + 284 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 if ($10 | 0) {
  _free($10);
  HEAP32[$9 >> 2] = 0;
  HEAP32[$d + 316 >> 2] = 0;
 }
 $13 = $d + 288 | 0;
 $14 = HEAP32[$13 >> 2] | 0;
 if ($14 | 0) {
  _free($14);
  HEAP32[$13 >> 2] = 0;
  HEAP32[$d + 320 >> 2] = 0;
 }
 $17 = $d + 292 | 0;
 $18 = HEAP32[$17 >> 2] | 0;
 if ($18 | 0) {
  _free($18);
  HEAP32[$17 >> 2] = 0;
  HEAP32[$d + 324 >> 2] = 0;
 }
 $21 = $d + 296 | 0;
 $22 = HEAP32[$21 >> 2] | 0;
 if ($22 | 0) {
  _free($22);
  HEAP32[$21 >> 2] = 0;
  HEAP32[$d + 328 >> 2] = 0;
 }
 $25 = $d + 300 | 0;
 $26 = HEAP32[$25 >> 2] | 0;
 if ($26 | 0) {
  _free($26);
  HEAP32[$25 >> 2] = 0;
  HEAP32[$d + 332 >> 2] = 0;
 }
 $29 = $d + 304 | 0;
 $30 = HEAP32[$29 >> 2] | 0;
 if (!$30) {
  $33 = $d + 340 | 0;
  HEAP32[$33 >> 2] = 0;
  return;
 }
 _free($30);
 HEAP32[$29 >> 2] = 0;
 HEAP32[$d + 336 >> 2] = 0;
 $33 = $d + 340 | 0;
 HEAP32[$33 >> 2] = 0;
 return;
}

function _ofdmflexframegen_write_payload($_q, $_buffer) {
 $_q = $_q | 0;
 $_buffer = $_buffer | 0;
 var $$pre$phiZ2D = 0, $12 = 0, $15 = 0, $2 = 0, $22 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $i$01 = 0;
 if (!(HEAP32[$_q >> 2] | 0)) $$pre$phiZ2D = $_q + 36 | 0; else {
  $2 = $_q + 12 | 0;
  $3 = $_q + 136 | 0;
  $4 = $_q + 112 | 0;
  $5 = $_q + 96 | 0;
  $6 = $_q + 104 | 0;
  $7 = $_q + 36 | 0;
  $i$01 = 0;
  do {
   do if ((HEAP8[(HEAP32[$2 >> 2] | 0) + $i$01 >> 0] | 0) == 2) {
    $12 = HEAP32[$3 >> 2] | 0;
    $15 = HEAP32[$5 >> 2] | 0;
    if ($12 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $12 + 1;
     _modem_modulate($15, HEAP32[(HEAP32[$6 >> 2] | 0) + ($12 << 2) >> 2] | 0, (HEAP32[$7 >> 2] | 0) + ($i$01 << 3) | 0);
     break;
    } else {
     $22 = _modem_gen_rand_sym($15) | 0;
     _modem_modulate(HEAP32[$5 >> 2] | 0, $22, (HEAP32[$7 >> 2] | 0) + ($i$01 << 3) | 0);
     break;
    }
   } else {
    $26 = HEAP32[$7 >> 2] | 0;
    HEAPF32[$26 + ($i$01 << 3) >> 2] = 0.0;
    HEAPF32[$26 + ($i$01 << 3) + 4 >> 2] = 0.0;
   } while (0);
   $i$01 = $i$01 + 1 | 0;
  } while ($i$01 >>> 0 < (HEAP32[$_q >> 2] | 0) >>> 0);
  $$pre$phiZ2D = $7;
 }
 _ofdmframegen_writesymbol(HEAP32[$_q + 40 >> 2] | 0, HEAP32[$$pre$phiZ2D >> 2] | 0, $_buffer);
 if ((HEAP32[$_q + 116 >> 2] | 0) != (HEAP32[$_q + 48 >> 2] | 0)) return;
 HEAP32[$_q + 128 >> 2] = 1;
 return;
}

function _flexframegen_create($_fgprops) {
 $_fgprops = $_fgprops | 0;
 var $0 = 0, $12 = 0, $20 = 0, $26 = 0, $29 = 0, $5 = 0, $7 = 0, $9 = 0, $i$01 = 0;
 $0 = _malloc(124) | 0;
 HEAP32[$0 >> 2] = 2;
 HEAP32[$0 + 4 >> 2] = 7;
 HEAPF32[$0 + 8 >> 2] = .25;
 HEAP32[$0 + 12 >> 2] = _firinterp_crcf_create_prototype(7, 2, 7, .25, 0.0) | 0;
 $5 = _malloc(512) | 0;
 HEAP32[$0 + 48 >> 2] = $5;
 $7 = _msequence_create(7, 137, 1) | 0;
 $i$01 = 0;
 do {
  $9 = (_msequence_advance($7) | 0) != 0;
  $12 = (_msequence_advance($7) | 0) != 0;
  HEAPF32[$5 + ($i$01 << 3) >> 2] = ($9 ? .7071067811865476 : -.7071067811865476) + ($12 ? 0.0 : -0.0);
  HEAPF32[$5 + ($i$01 << 3) + 4 >> 2] = $12 ? .7071067690849304 : -.7071067690849304;
  $i$01 = $i$01 + 1 | 0;
 } while (($i$01 | 0) != 64);
 _msequence_destroy($7);
 $20 = $0 + 104 | 0;
 HEAP32[$20 >> 2] = 0;
 HEAP32[$20 + 4 >> 2] = 0;
 HEAP32[$20 + 8 >> 2] = 0;
 HEAP32[$20 + 12 >> 2] = 0;
 HEAP32[$20 + 16 >> 2] = 0;
 HEAP32[$0 + 52 >> 2] = 0;
 HEAP32[$0 + 72 >> 2] = 0;
 HEAP32[$0 + 84 >> 2] = 0;
 HEAP32[$0 + 64 >> 2] = 0;
 HEAP32[$0 + 76 >> 2] = 0;
 _flexframegen_set_header_len($0, 14);
 $26 = _qpacketmodem_create() | 0;
 HEAP32[$0 + 92 >> 2] = $26;
 HEAP32[$0 + 88 >> 2] = 64;
 $29 = _qpacketmodem_get_frame_len($26) | 0;
 HEAP32[$0 + 96 >> 2] = $29;
 HEAP32[$0 + 100 >> 2] = _malloc($29 << 3) | 0;
 _flexframegen_setprops($0, $_fgprops) | 0;
 return $0 | 0;
}

function _matrixf_mul($_X, $_XR, $_XC, $_Y, $_YR, $_YC, $_Z, $_ZR, $_ZC) {
 $_X = $_X | 0;
 $_XR = $_XR | 0;
 $_XC = $_XC | 0;
 $_Y = $_Y | 0;
 $_YR = $_YR | 0;
 $_YC = $_YC | 0;
 $_Z = $_Z | 0;
 $_ZR = $_ZR | 0;
 $_ZC = $_ZC | 0;
 var $$lcssa = 0.0, $21 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $c$06$us$us = 0, $i$04$us$us = 0, $r$08$us = 0, $sum$05$us$us = 0.0;
 if (!(($_XC | 0) == ($_YR | 0) & (($_ZR | 0) == ($_XR | 0) & ($_ZC | 0) == ($_YC | 0)))) {
  _fwrite(gb + 30868 | 0, 40, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if (!$_ZR) return;
 $5 = ($_XC | 0) == 0;
 if (!$_ZC) return;
 $6 = $_ZC << 2;
 $r$08$us = 0;
 do {
  $7 = Math_imul($r$08$us, $_ZC) | 0;
  $8 = Math_imul($r$08$us, $_XC) | 0;
  if ($5) _memset($_Z + ($7 << 2) | 0, 0, $6 | 0) | 0; else {
   $c$06$us$us = 0;
   do {
    $i$04$us$us = 0;
    $sum$05$us$us = 0.0;
    while (1) {
     $21 = $sum$05$us$us + +HEAPF32[$_X + ($i$04$us$us + $8 << 2) >> 2] * +HEAPF32[$_Y + ((Math_imul($i$04$us$us, $_ZC) | 0) + $c$06$us$us << 2) >> 2];
     $i$04$us$us = $i$04$us$us + 1 | 0;
     if (($i$04$us$us | 0) == ($_XC | 0)) {
      $$lcssa = $21;
      break;
     } else $sum$05$us$us = $21;
    }
    HEAPF32[$_Z + ($c$06$us$us + $7 << 2) >> 2] = $$lcssa;
    $c$06$us$us = $c$06$us$us + 1 | 0;
   } while (($c$06$us$us | 0) != ($_ZC | 0));
  }
  $r$08$us = $r$08$us + 1 | 0;
 } while (($r$08$us | 0) != ($_ZR | 0));
 return;
}

function _fec_hamming128_decode($_q, $_dec_msg_len, $_msg_enc, $_msg_dec) {
 $_q = $_q | 0;
 $_dec_msg_len = $_dec_msg_len | 0;
 $_msg_enc = $_msg_enc | 0;
 $_msg_dec = $_msg_dec | 0;
 var $0 = 0, $1 = 0, $13 = 0, $19 = 0, $27 = 0, $28 = 0, $i$0$lcssa = 0, $i$02 = 0, $j$0$lcssa = 0, $j$01 = 0, $j$1 = 0;
 $0 = $_dec_msg_len & 1;
 $1 = $_dec_msg_len - $0 | 0;
 if (($0 | 0) == ($_dec_msg_len | 0)) {
  $i$0$lcssa = 0;
  $j$0$lcssa = 0;
 } else {
  $i$02 = 0;
  $j$01 = 0;
  while (1) {
   $13 = HEAPU8[$_msg_enc + ($j$01 + 1) >> 0] | 0;
   $19 = $13 << 8 & 3840 | (HEAPU8[$_msg_enc + ($j$01 + 2) >> 0] | 0);
   HEAP8[$_msg_dec + $i$02 >> 0] = _fec_hamming128_decode_symbol($13 >>> 4 | (HEAPU8[$_msg_enc + $j$01 >> 0] | 0) << 4) | 0;
   HEAP8[$_msg_dec + ($i$02 | 1) >> 0] = _fec_hamming128_decode_symbol($19) | 0;
   $27 = $j$01 + 3 | 0;
   $28 = $i$02 + 2 | 0;
   if ($28 >>> 0 < $1 >>> 0) {
    $i$02 = $28;
    $j$01 = $27;
   } else {
    $i$0$lcssa = $28;
    $j$0$lcssa = $27;
    break;
   }
  }
 }
 if (!$0) $j$1 = $j$0$lcssa; else {
  HEAP8[$_msg_dec + $i$0$lcssa >> 0] = _fec_hamming128_decode_symbol((HEAPU8[$_msg_enc + ($j$0$lcssa + 1) >> 0] | 0) >>> 4 | (HEAPU8[$_msg_enc + $j$0$lcssa >> 0] | 0) << 4) | 0;
  $j$1 = $j$0$lcssa + 2 | 0;
 }
 if (($j$1 | 0) == (_fec_get_enc_msg_length(6, $_dec_msg_len) | 0)) return; else ___assert_fail(gb + 14193 | 0, gb + 14256 | 0, 280, gb + 14307 | 0);
}

function _ofdmflexframegen_reconfigure($_q) {
 $_q = $_q | 0;
 var $0 = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $17 = 0, $19 = 0, $32 = 0, $33 = 0, $34 = 0, $41 = 0, $43 = 0, $46 = 0, $d = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $d = sp + 8 | 0;
 $0 = sp;
 $1 = $_q + 88 | 0;
 $11 = _packetizer_recreate(HEAP32[$1 >> 2] | 0, HEAP32[$_q + 92 >> 2] | 0, HEAP32[$_q + 140 >> 2] | 0, HEAP32[$_q + 144 >> 2] | 0, HEAP32[$_q + 148 >> 2] | 0) | 0;
 HEAP32[$1 >> 2] = $11;
 $12 = _packetizer_get_enc_msg_len($11) | 0;
 $13 = $_q + 108 | 0;
 HEAP32[$13 >> 2] = $12;
 $14 = $_q + 100 | 0;
 HEAP32[$14 >> 2] = _realloc(HEAP32[$14 >> 2] | 0, $12) | 0;
 $17 = $_q + 96 | 0;
 $19 = $_q + 152 | 0;
 HEAP32[$17 >> 2] = _modem_recreate(HEAP32[$17 >> 2] | 0, HEAP32[$19 >> 2] | 0) | 0;
 _div($d, HEAP32[$13 >> 2] << 3, HEAP32[gb + 580 + (HEAP32[$19 >> 2] << 4) + 12 >> 2] | 0);
 $32 = ((HEAP32[$d + 4 >> 2] | 0) != 0 & 1) + (HEAP32[$d >> 2] | 0) | 0;
 $33 = $_q + 112 | 0;
 HEAP32[$33 >> 2] = $32;
 $34 = $_q + 104 | 0;
 HEAP32[$34 >> 2] = _realloc(HEAP32[$34 >> 2] | 0, $32 << 2) | 0;
 _div($0, HEAP32[$33 >> 2] | 0, HEAP32[$_q + 24 >> 2] | 0);
 $41 = $0;
 $43 = HEAP32[$41 >> 2] | 0;
 $46 = HEAP32[$41 + 4 >> 2] | 0;
 HEAP32[$_q + 48 >> 2] = (($46 >>> 0 > 0 | ($46 | 0) == 0 & $43 >>> 0 > 4294967295) & 1) + $43;
 STACKTOP = sp;
 return;
}

function _fec_hamming128_encode($_q, $_dec_msg_len, $_msg_dec, $_msg_enc) {
 $_q = $_q | 0;
 $_dec_msg_len = $_dec_msg_len | 0;
 $_msg_dec = $_msg_dec | 0;
 $_msg_enc = $_msg_enc | 0;
 var $0 = 0, $1 = 0, $10 = 0, $14 = 0, $29 = 0, $38 = 0, $i$02 = 0, $j$0$lcssa = 0, $j$01 = 0, $j$1 = 0;
 $0 = $_dec_msg_len & 1;
 $1 = $_dec_msg_len - $0 | 0;
 if (($0 | 0) == ($_dec_msg_len | 0)) $j$0$lcssa = 0; else {
  $i$02 = 0;
  $j$01 = 0;
  while (1) {
   $10 = HEAP16[gb + 9772 + ((HEAPU8[$_msg_dec + $i$02 >> 0] | 0) << 1) >> 1] | 0;
   $14 = HEAP16[gb + 9772 + ((HEAPU8[$_msg_dec + ($i$02 | 1) >> 0] | 0) << 1) >> 1] | 0;
   HEAP8[$_msg_enc + $j$01 >> 0] = ($10 & 65535) >>> 4;
   HEAP8[$_msg_enc + ($j$01 + 1) >> 0] = ($14 & 65535) >>> 8 & 15 | ($10 & 65535) << 4;
   HEAP8[$_msg_enc + ($j$01 + 2) >> 0] = $14;
   $29 = $j$01 + 3 | 0;
   $i$02 = $i$02 + 2 | 0;
   if ($i$02 >>> 0 >= $1 >>> 0) {
    $j$0$lcssa = $29;
    break;
   } else $j$01 = $29;
  }
 }
 if (!$0) $j$1 = $j$0$lcssa; else {
  $38 = HEAP16[gb + 9772 + ((HEAPU8[$_msg_dec + ($_dec_msg_len + -1) >> 0] | 0) << 1) >> 1] | 0;
  HEAP8[$_msg_enc + $j$0$lcssa >> 0] = ($38 & 65535) >>> 4;
  HEAP8[$_msg_enc + ($j$0$lcssa + 1) >> 0] = ($38 & 65535) << 4;
  $j$1 = $j$0$lcssa + 2 | 0;
 }
 if (($j$1 | 0) == (_fec_get_enc_msg_length(6, $_dec_msg_len) | 0)) return; else ___assert_fail(gb + 14193 | 0, gb + 14256 | 0, 226, gb + 14285 | 0);
}

function ___shgetc($f) {
 $f = $f | 0;
 var $$0 = 0, $$phi$trans$insert3 = 0, $$pre = 0, $0 = 0, $1 = 0, $13 = 0, $18 = 0, $20 = 0, $26 = 0, $27 = 0, $29 = 0, $35 = 0, $36 = 0, $41 = 0, $6 = 0, $9 = 0, label = 0;
 $0 = $f + 104 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) label = 3; else if ((HEAP32[$f + 108 >> 2] | 0) < ($1 | 0)) label = 3; else label = 4;
 if ((label | 0) == 3) {
  $6 = ___uflow($f) | 0;
  if (($6 | 0) < 0) label = 4; else {
   $9 = HEAP32[$0 >> 2] | 0;
   $$pre = HEAP32[$f + 8 >> 2] | 0;
   if (!$9) {
    $41 = $$pre;
    label = 9;
   } else {
    $13 = HEAP32[$f + 4 >> 2] | 0;
    $18 = $9 - (HEAP32[$f + 108 >> 2] | 0) | 0;
    $20 = $$pre;
    if (($$pre - $13 | 0) < ($18 | 0)) {
     $41 = $20;
     label = 9;
    } else {
     HEAP32[$f + 100 >> 2] = $13 + ($18 + -1);
     $26 = $20;
    }
   }
   if ((label | 0) == 9) {
    HEAP32[$f + 100 >> 2] = $$pre;
    $26 = $41;
   }
   $$phi$trans$insert3 = $f + 4 | 0;
   if (!$26) $36 = HEAP32[$$phi$trans$insert3 >> 2] | 0; else {
    $27 = HEAP32[$$phi$trans$insert3 >> 2] | 0;
    $29 = $f + 108 | 0;
    HEAP32[$29 >> 2] = $26 + 1 - $27 + (HEAP32[$29 >> 2] | 0);
    $36 = $27;
   }
   $35 = $36 + -1 | 0;
   if ((HEAPU8[$35 >> 0] | 0 | 0) == ($6 | 0)) $$0 = $6; else {
    HEAP8[$35 >> 0] = $6;
    $$0 = $6;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$f + 100 >> 2] = 0;
  $$0 = -1;
 }
 return $$0 | 0;
}

function _ofdmflexframesync_set_header_len($_q, $_len) {
 $_q = $_q | 0;
 $_len = $_len | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $24 = 0, $26 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $6 = 0, $7 = 0, $bps_d = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $bps_d = sp;
 HEAP32[$_q + 56 >> 2] = $_len;
 $1 = $_len + 6 | 0;
 $2 = $_q + 60 | 0;
 HEAP32[$2 >> 2] = $1;
 $3 = $_q + 44 | 0;
 HEAP32[$3 >> 2] = _realloc(HEAP32[$3 >> 2] | 0, $1) | 0;
 $6 = $_q + 40 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 if ($7 | 0) _packetizer_destroy($7);
 $10 = _packetizer_create(HEAP32[$2 >> 2] | 0, 6, 7, 1) | 0;
 HEAP32[$6 >> 2] = $10;
 $11 = _packetizer_get_enc_msg_len($10) | 0;
 $12 = $_q + 64 | 0;
 HEAP32[$12 >> 2] = $11;
 $13 = $_q + 48 | 0;
 HEAP32[$13 >> 2] = _realloc(HEAP32[$13 >> 2] | 0, $11) | 0;
 _div($bps_d, HEAP32[$12 >> 2] << 3, HEAP32[gb + 580 + 764 >> 2] | 0);
 $24 = ((HEAP32[$bps_d + 4 >> 2] | 0) != 0 & 1) + (HEAP32[$bps_d >> 2] | 0) | 0;
 HEAP32[$_q + 68 >> 2] = $24;
 $26 = $_q + 52 | 0;
 HEAP32[$26 >> 2] = _realloc(HEAP32[$26 >> 2] | 0, $24) | 0;
 $29 = $_q + 36 | 0;
 $30 = HEAP32[$29 >> 2] | 0;
 if (!$30) {
  $32 = _modem_create(47) | 0;
  HEAP32[$29 >> 2] = $32;
  STACKTOP = sp;
  return;
 }
 _modem_destroy($30);
 $32 = _modem_create(47) | 0;
 HEAP32[$29 >> 2] = $32;
 STACKTOP = sp;
 return;
}

function _fecsoft_hamming74_decode($_soft_bits) {
 $_soft_bits = $_soft_bits | 0;
 var $1 = 0, $10 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $29 = 0, $5 = 0, $56 = 0, $6 = 0, $9 = 0, $dmin$01 = 0, $indvars$iv = 0, $or$cond = 0, $s_hat$02 = 0, $s_hat$1 = 0, $s_hat$1$lcssa = 0;
 $1 = HEAPU8[$_soft_bits >> 0] | 0;
 $2 = $1 ^ 255;
 $5 = HEAPU8[$_soft_bits + 1 >> 0] | 0;
 $6 = $5 ^ 255;
 $9 = HEAPU8[$_soft_bits + 2 >> 0] | 0;
 $10 = $9 ^ 255;
 $13 = HEAPU8[$_soft_bits + 3 >> 0] | 0;
 $14 = $13 ^ 255;
 $17 = HEAPU8[$_soft_bits + 4 >> 0] | 0;
 $18 = $17 ^ 255;
 $21 = HEAPU8[$_soft_bits + 5 >> 0] | 0;
 $22 = $21 ^ 255;
 $25 = HEAPU8[$_soft_bits + 6 >> 0] | 0;
 $26 = $25 ^ 255;
 $dmin$01 = 0;
 $indvars$iv = 0;
 $s_hat$02 = 0;
 while (1) {
  $29 = HEAPU8[gb + 13613 + $indvars$iv >> 0] | 0;
  $56 = ($29 & 32 | 0 ? $6 : $5) + ($29 & 64 | 0 ? $2 : $1) + ($29 & 16 | 0 ? $10 : $9) + ($29 & 8 | 0 ? $14 : $13) + ($29 & 4 | 0 ? $18 : $17) + ($29 & 2 | 0 ? $22 : $21) + ($29 & 1 | 0 ? $26 : $25) | 0;
  $or$cond = ($indvars$iv | 0) == 0 | $56 >>> 0 < $dmin$01 >>> 0;
  $s_hat$1 = $or$cond ? $indvars$iv & 255 : $s_hat$02;
  $indvars$iv = $indvars$iv + 1 | 0;
  if (($indvars$iv | 0) == 16) {
   $s_hat$1$lcssa = $s_hat$1;
   break;
  } else {
   $dmin$01 = $or$cond ? $56 : $dmin$01;
   $s_hat$02 = $s_hat$1;
  }
 }
 return $s_hat$1$lcssa | 0;
}

function _firinterp_rrrf_execute($_q, $_x, $_y) {
 $_q = $_q | 0;
 $_x = +$_x;
 $_y = $_y | 0;
 var $$lcssa = 0, $0 = 0, $10 = 0, $12 = 0, $4 = 0, $7 = 0, $8 = 0, $i$02 = 0, $i$02$lcssa = 0, $r$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $r$i = sp + 8 | 0;
 $0 = $_q + 16 | 0;
 _windowf_push(HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0, $_x);
 $4 = $_q + 12 | 0;
 if (!(HEAP32[$4 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 $i$02 = 0;
 while (1) {
  $7 = HEAP32[$0 >> 2] | 0;
  $8 = $_y + ($i$02 << 2) | 0;
  $10 = HEAP32[$7 + 12 >> 2] | 0;
  if ($10 >>> 0 <= $i$02 >>> 0) {
   $$lcssa = $10;
   $i$02$lcssa = $i$02;
   label = 4;
   break;
  }
  _windowf_read(HEAP32[$7 + 16 >> 2] | 0, $r$i);
  _dotprod_rrrf_execute(HEAP32[(HEAP32[$7 + 20 >> 2] | 0) + ($i$02 << 2) >> 2] | 0, HEAP32[$r$i >> 2] | 0, $8);
  HEAPF32[$8 >> 2] = +HEAPF32[$7 + 24 >> 2] * +HEAPF32[$8 >> 2];
  $i$02 = $i$02 + 1 | 0;
  if ($i$02 >>> 0 >= (HEAP32[$4 >> 2] | 0) >>> 0) {
   label = 6;
   break;
  }
 }
 if ((label | 0) == 4) {
  $12 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = $i$02$lcssa;
  HEAP32[$vararg_buffer + 4 >> 2] = $$lcssa;
  _fprintf($12, gb + 21457 | 0, $vararg_buffer) | 0;
  _exit(1);
 } else if ((label | 0) == 6) {
  STACKTOP = sp;
  return;
 }
}

function _string_create($value, $len, $own) {
 $value = $value | 0;
 $len = $len | 0;
 $own = $own | 0;
 var $0 = 0, $1 = 0, $2 = 0, $27 = 0, $3 = 0, $8 = 0, $string = 0, $v = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 20 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $v = sp + 4 | 0;
 $string = sp;
 HEAP32[$1 >> 2] = $value;
 HEAP32[$2 >> 2] = $len;
 HEAP32[$3 >> 2] = $own;
 if (!(HEAP32[$1 >> 2] | 0)) {
  HEAP32[$0 >> 2] = 0;
  $27 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $27 | 0;
 }
 $8 = HEAP32[$1 >> 2] | 0;
 if (HEAP32[$3 >> 2] | 0) HEAP32[$v >> 2] = $8; else {
  HEAP32[$v >> 2] = _jsonp_strndup($8, HEAP32[$2 >> 2] | 0) | 0;
  if (!(HEAP32[$v >> 2] | 0)) {
   HEAP32[$0 >> 2] = 0;
   $27 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $27 | 0;
  }
 }
 HEAP32[$string >> 2] = _jsonp_malloc(16) | 0;
 if (HEAP32[$string >> 2] | 0) {
  _json_init(HEAP32[$string >> 2] | 0, 2);
  HEAP32[(HEAP32[$string >> 2] | 0) + 8 >> 2] = HEAP32[$v >> 2];
  HEAP32[(HEAP32[$string >> 2] | 0) + 12 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$string >> 2];
  $27 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $27 | 0;
 }
 if (!(HEAP32[$3 >> 2] | 0)) _jsonp_free(HEAP32[$v >> 2] | 0);
 HEAP32[$0 >> 2] = 0;
 $27 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $27 | 0;
}

function _fec_destroy($_q) {
 $_q = $_q | 0;
 var $0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$_q >> 2] | 0;
 do switch ($0 | 0) {
 case 0:
  {
   _puts(gb + 12993 | 0) | 0;
   _exit(-1);
   break;
  }
 case 1:
  {
   _fec_pass_destroy($_q);
   break;
  }
 case 2:
  {
   _fec_rep3_destroy($_q);
   break;
  }
 case 3:
  {
   _fec_rep5_destroy($_q);
   break;
  }
 case 4:
  {
   _fec_hamming74_destroy($_q);
   break;
  }
 case 5:
  {
   _fec_hamming84_destroy($_q);
   break;
  }
 case 6:
  {
   _fec_hamming128_destroy($_q);
   break;
  }
 case 7:
  {
   _fec_golay2412_destroy($_q);
   break;
  }
 case 8:
  {
   _fec_secded2216_destroy($_q);
   break;
  }
 case 9:
  {
   _fec_secded3932_destroy($_q);
   break;
  }
 case 10:
  {
   _fec_secded7264_destroy($_q);
   break;
  }
 case 14:
 case 13:
 case 12:
 case 11:
  {
   _fec_conv_destroy($_q);
   break;
  }
 case 26:
 case 25:
 case 24:
 case 23:
 case 22:
 case 21:
 case 20:
 case 19:
 case 18:
 case 17:
 case 16:
 case 15:
  {
   _fec_conv_punctured_destroy($_q);
   break;
  }
 case 27:
  {
   _fec_rs_destroy($_q);
   break;
  }
 default:
  {
   HEAP32[$vararg_buffer >> 2] = $0;
   _printf(gb + 13059 | 0, $vararg_buffer) | 0;
   _exit(-1);
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function _json_array_append_new($json, $value) {
 $json = $json | 0;
 $value = $value | 0;
 var $0 = 0, $1 = 0, $17 = 0, $18 = 0, $2 = 0, $27 = 0, $30 = 0, $array = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 12 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $array = sp;
 HEAP32[$1 >> 2] = $json;
 HEAP32[$2 >> 2] = $value;
 if (!(HEAP32[$2 >> 2] | 0)) {
  HEAP32[$0 >> 2] = -1;
  $30 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $30 | 0;
 }
 if (HEAP32[$1 >> 2] | 0) if ((HEAP32[HEAP32[$1 >> 2] >> 2] | 0) == 1) if ((HEAP32[$1 >> 2] | 0) != (HEAP32[$2 >> 2] | 0)) {
  HEAP32[$array >> 2] = HEAP32[$1 >> 2];
  $17 = (_json_array_grow(HEAP32[$array >> 2] | 0, 1, 1) | 0) != 0;
  $18 = HEAP32[$2 >> 2] | 0;
  if ($17) {
   HEAP32[(HEAP32[(HEAP32[$array >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[(HEAP32[$array >> 2] | 0) + 12 >> 2] << 2) >> 2] = $18;
   $27 = (HEAP32[$array >> 2] | 0) + 12 | 0;
   HEAP32[$27 >> 2] = (HEAP32[$27 >> 2] | 0) + 1;
   HEAP32[$0 >> 2] = 0;
   $30 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $30 | 0;
  } else {
   _json_decref_1931($18);
   HEAP32[$0 >> 2] = -1;
   $30 = HEAP32[$0 >> 2] | 0;
   STACKTOP = sp;
   return $30 | 0;
  }
 }
 _json_decref_1931(HEAP32[$2 >> 2] | 0);
 HEAP32[$0 >> 2] = -1;
 $30 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $30 | 0;
}

function _fec_secded7264_compute_parity($_v) {
 $_v = $_v | 0;
 var $$lcssa = 0, $0 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $89 = 0, $i$02 = 0, $parity$01 = 0;
 $0 = HEAP8[$_v >> 0] | 0;
 $2 = HEAP8[$_v + 1 >> 0] | 0;
 $4 = HEAP8[$_v + 2 >> 0] | 0;
 $6 = HEAP8[$_v + 3 >> 0] | 0;
 $8 = HEAP8[$_v + 4 >> 0] | 0;
 $10 = HEAP8[$_v + 5 >> 0] | 0;
 $12 = HEAP8[$_v + 6 >> 0] | 0;
 $14 = HEAP8[$_v + 7 >> 0] | 0;
 $i$02 = 0;
 $parity$01 = 0;
 while (1) {
  $17 = $i$02 << 3;
  $89 = (HEAPU8[($2 & HEAP8[($17 | 1) + (gb + 19335) >> 0] & 255) + (gb + 39229) >> 0] | 0) + (HEAPU8[($0 & HEAP8[gb + 19335 + $17 >> 0] & 255) + (gb + 39229) >> 0] | 0) + (HEAPU8[($4 & HEAP8[($17 | 2) + (gb + 19335) >> 0] & 255) + (gb + 39229) >> 0] | 0) + (HEAPU8[($6 & HEAP8[($17 | 3) + (gb + 19335) >> 0] & 255) + (gb + 39229) >> 0] | 0) + (HEAPU8[($8 & HEAP8[($17 | 4) + (gb + 19335) >> 0] & 255) + (gb + 39229) >> 0] | 0) + (HEAPU8[($10 & HEAP8[($17 | 5) + (gb + 19335) >> 0] & 255) + (gb + 39229) >> 0] | 0) + (HEAPU8[($12 & HEAP8[($17 | 6) + (gb + 19335) >> 0] & 255) + (gb + 39229) >> 0] | 0) + (HEAPU8[($14 & HEAP8[($17 | 7) + (gb + 19335) >> 0] & 255) + (gb + 39229) >> 0] | 0) & 1 | $parity$01 << 1 & 510;
  $i$02 = $i$02 + 1 | 0;
  if (($i$02 | 0) == 8) {
   $$lcssa = $89;
   break;
  } else $parity$01 = $89;
 }
 return $$lcssa & 255 | 0;
}

function _vsnprintf($s, $n, $fmt, $ap) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $10 = 0, $11 = 0, $13 = 0, $15 = 0, $5 = 0, $8 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $b = sp + 112 | 0;
 $f = sp;
 dest = $f;
 src = gb + 9572 | 0;
 stop = dest + 112 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 if (($n + -1 | 0) >>> 0 > 2147483646) if (!$n) {
  $$01 = $b;
  $$02 = 1;
  label = 4;
 } else {
  HEAP32[(___errno_location() | 0) >> 2] = 75;
  $$0 = -1;
 } else {
  $$01 = $s;
  $$02 = $n;
  label = 4;
 }
 if ((label | 0) == 4) {
  $5 = -2 - $$01 | 0;
  $$$02 = $$02 >>> 0 > $5 >>> 0 ? $5 : $$02;
  HEAP32[$f + 48 >> 2] = $$$02;
  $8 = $f + 20 | 0;
  HEAP32[$8 >> 2] = $$01;
  HEAP32[$f + 44 >> 2] = $$01;
  $10 = $$01 + $$$02 | 0;
  $11 = $f + 16 | 0;
  HEAP32[$11 >> 2] = $10;
  HEAP32[$f + 28 >> 2] = $10;
  $13 = _vfprintf($f, $fmt, $ap) | 0;
  if (!$$$02) $$0 = $13; else {
   $15 = HEAP32[$8 >> 2] | 0;
   HEAP8[$15 + ((($15 | 0) == (HEAP32[$11 >> 2] | 0)) << 31 >> 31) >> 0] = 0;
   $$0 = $13;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _ofdmflexframegen_writesymbol($_q, $_buffer) {
 $_q = $_q | 0;
 $_buffer = $_buffer | 0;
 var $$0 = 0, $4 = 0, $7 = 0;
 if (!(HEAP32[$_q + 124 >> 2] | 0)) {
  _fwrite(gb + 28870 | 0, 61, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  $$0 = 1;
  return $$0 | 0;
 }
 $4 = $_q + 116 | 0;
 HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1;
 $7 = $_q + 120 | 0;
 switch (HEAP32[$7 >> 2] | 0) {
 case 0:
  {
   _ofdmframegen_write_S0a(HEAP32[$_q + 40 >> 2] | 0, $_buffer);
   HEAP32[$7 >> 2] = 1;
   break;
  }
 case 1:
  {
   _ofdmframegen_write_S0b(HEAP32[$_q + 40 >> 2] | 0, $_buffer);
   HEAP32[$7 >> 2] = 2;
   break;
  }
 case 2:
  {
   _ofdmframegen_write_S1(HEAP32[$_q + 40 >> 2] | 0, $_buffer);
   HEAP32[$4 >> 2] = 0;
   HEAP32[$7 >> 2] = 3;
   break;
  }
 case 3:
  {
   _ofdmflexframegen_write_header($_q, $_buffer);
   break;
  }
 case 4:
  {
   _ofdmflexframegen_write_payload($_q, $_buffer);
   break;
  }
 default:
  {
   _fwrite(gb + 28932 | 0, 74, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
   _exit(1);
  }
 }
 if (!(HEAP32[$_q + 128 >> 2] | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 HEAP32[$4 + 8 >> 2] = 0;
 HEAP32[$4 + 12 >> 2] = 0;
 HEAP32[$4 + 16 >> 2] = 0;
 HEAP32[$4 + 20 >> 2] = 0;
 _ofdmframegen_reset(HEAP32[$_q + 40 >> 2] | 0);
 $$0 = 1;
 return $$0 | 0;
}

function _estimate_req_filter_As($_df, $_N) {
 $_df = +$_df;
 $_N = $_N | 0;
 var $$lcssa = 0.0, $$lcssa12 = 0.0, $13 = 0, $2 = 0.0, $3 = 0.0, $5 = 0.0, $7 = 0, $9 = 0, $As0$05 = 0.0, $As1$04 = 0.0, $i$06 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $2 = $_df * 14.260000228881836;
 $3 = +($_N >>> 0);
 if ($_df > .5 | $_df <= 0.0) {
  $7 = HEAP32[gb + 9336 >> 2] | 0;
  HEAPF64[$vararg_buffer >> 3] = $_df;
  _fprintf($7, gb + 22115 | 0, $vararg_buffer) | 0;
  _exit(1);
 } else {
  $As0$05 = .009999999776482582;
  $As1$04 = 200.0;
  $i$06 = 0;
 }
 while (1) {
  $5 = ($As1$04 + $As0$05) * .5;
  if ($5 <= 0.0) {
   $$lcssa = $5;
   label = 4;
   break;
  }
  $13 = ($5 + -7.949999809265137) / $2 < $3;
  $i$06 = $i$06 + 1 | 0;
  if ($i$06 >>> 0 >= 20) {
   $$lcssa12 = $5;
   label = 6;
   break;
  } else {
   $As0$05 = $13 ? $5 : $As0$05;
   $As1$04 = $13 ? $As1$04 : $5;
  }
 }
 if ((label | 0) == 4) {
  $9 = HEAP32[gb + 9336 >> 2] | 0;
  HEAPF64[$vararg_buffer1 >> 3] = $$lcssa;
  _fprintf($9, gb + 22052 | 0, $vararg_buffer1) | 0;
  _exit(1);
 } else if ((label | 0) == 6) {
  STACKTOP = sp;
  return +$$lcssa12;
 }
 return +(0.0);
}

function _qpacketmodem_configure($_q, $_payload_len, $_check, $_fec0, $_fec1, $_ms) {
 $_q = $_q | 0;
 $_payload_len = $_payload_len | 0;
 $_check = $_check | 0;
 $_fec0 = $_fec0 | 0;
 $_fec1 = $_fec1 | 0;
 $_ms = $_ms | 0;
 var $0 = 0, $11 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $26 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $d = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $d = sp;
 $0 = $_q + 12 | 0;
 HEAP32[$0 >> 2] = $_payload_len;
 $2 = _modem_recreate(HEAP32[$_q >> 2] | 0, $_ms) | 0;
 HEAP32[$_q >> 2] = $2;
 $4 = $_q + 8 | 0;
 HEAP32[$4 >> 2] = _modem_get_bps($2) | 0;
 $5 = $_q + 4 | 0;
 $8 = _packetizer_recreate(HEAP32[$5 >> 2] | 0, HEAP32[$0 >> 2] | 0, $_check, $_fec0, $_fec1) | 0;
 HEAP32[$5 >> 2] = $8;
 $9 = _packetizer_get_enc_msg_len($8) | 0;
 HEAP32[$_q + 24 >> 2] = $9;
 $11 = $9 << 3;
 HEAP32[$_q + 28 >> 2] = $11;
 _div($d, $11, HEAP32[$4 >> 2] | 0);
 $19 = ((HEAP32[$d + 4 >> 2] | 0) != 0 & 1) + (HEAP32[$d >> 2] | 0) | 0;
 $20 = $_q + 32 | 0;
 HEAP32[$20 >> 2] = $19;
 $21 = $_q + 16 | 0;
 HEAP32[$21 >> 2] = _realloc(HEAP32[$21 >> 2] | 0, Math_imul(HEAP32[$4 >> 2] | 0, $19) | 0) | 0;
 $26 = $_q + 20 | 0;
 HEAP32[$26 >> 2] = _realloc(HEAP32[$26 >> 2] | 0, HEAP32[$20 >> 2] << 2) | 0;
 STACKTOP = sp;
 return 0;
}

function _ofdmframesync_destroy($_q) {
 $_q = $_q | 0;
 var $1 = 0, $10 = 0, $13 = 0, $16 = 0, $19 = 0, $22 = 0, $4 = 0, $7 = 0;
 $1 = HEAP32[$_q + 176 >> 2] | 0;
 if ($1 | 0) _windowcf_destroy($1);
 $4 = HEAP32[$_q + 180 >> 2] | 0;
 if ($4 | 0) _windowf_destroy($4);
 $7 = HEAP32[$_q + 184 >> 2] | 0;
 if ($7 | 0) _windowcf_destroy($7);
 $10 = HEAP32[$_q + 188 >> 2] | 0;
 if ($10 | 0) _free($10);
 $13 = HEAP32[$_q + 192 >> 2] | 0;
 if ($13 | 0) _free($13);
 $16 = HEAP32[$_q + 196 >> 2] | 0;
 if ($16 | 0) _free($16);
 $19 = HEAP32[$_q + 208 >> 2] | 0;
 if ($19 | 0) _windowf_destroy($19);
 $22 = HEAP32[$_q + 212 >> 2] | 0;
 if ($22 | 0) _windowf_destroy($22);
 _free(HEAP32[$_q + 12 >> 2] | 0);
 _windowcf_destroy(HEAP32[$_q + 60 >> 2] | 0);
 _free(HEAP32[$_q + 52 >> 2] | 0);
 _free(HEAP32[$_q + 56 >> 2] | 0);
 _fft_destroy_plan(HEAP32[$_q + 48 >> 2] | 0);
 _free(HEAP32[$_q + 64 >> 2] | 0);
 _free(HEAP32[$_q + 68 >> 2] | 0);
 _free(HEAP32[$_q + 72 >> 2] | 0);
 _free(HEAP32[$_q + 76 >> 2] | 0);
 _free(HEAP32[$_q + 84 >> 2] | 0);
 _free(HEAP32[$_q + 88 >> 2] | 0);
 _free(HEAP32[$_q + 92 >> 2] | 0);
 _free(HEAP32[$_q + 96 >> 2] | 0);
 _free(HEAP32[$_q + 100 >> 2] | 0);
 _nco_crcf_destroy(HEAP32[$_q + 108 >> 2] | 0);
 _msequence_destroy(HEAP32[$_q + 112 >> 2] | 0);
 _free($_q);
 return;
}

function _stream_unget($stream, $c) {
 $stream = $stream | 0;
 $c = $c | 0;
 var $0 = 0, $1 = 0, $13 = 0, $26 = 0, $34 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = $stream;
 HEAP32[$1 >> 2] = $c;
 if ((HEAP32[$1 >> 2] | 0) == -1 | (HEAP32[$1 >> 2] | 0) == -2) {
  STACKTOP = sp;
  return;
 }
 $7 = (HEAP32[$0 >> 2] | 0) + 36 | 0;
 HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1;
 if ((HEAP32[$1 >> 2] | 0) == 10) {
  $13 = (HEAP32[$0 >> 2] | 0) + 24 | 0;
  HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + -1;
  HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2];
 } else if (_utf8_check_first(HEAP32[$1 >> 2] & 255) | 0) {
  $26 = (HEAP32[$0 >> 2] | 0) + 28 | 0;
  HEAP32[$26 >> 2] = (HEAP32[$26 >> 2] | 0) + -1;
 }
 if ((HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0) >>> 0 <= 0) ___assert_fail(gb + 41417 | 0, gb + 41349 | 0, 228, gb + 41440 | 0);
 $34 = (HEAP32[$0 >> 2] | 0) + 16 | 0;
 HEAP32[$34 >> 2] = (HEAP32[$34 >> 2] | 0) + -1;
 if ((HEAP8[(HEAP32[$0 >> 2] | 0) + 8 + (HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0) >> 0] | 0) != (HEAP32[$1 >> 2] | 0)) ___assert_fail(gb + 41453 | 0, gb + 41349 | 0, 230, gb + 41440 | 0);
 STACKTOP = sp;
 return;
}

function _gmskframegen_write_tail($_q, $_y) {
 $_q = $_q | 0;
 $_y = $_y | 0;
 var $1 = 0, $10 = 0, $13 = 0, $14 = 0, $18 = 0, $19 = 0.0, $20 = 0, $22 = 0, $25 = 0.0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $i$01 = 0;
 $1 = (_rand() | 0) % 2 | 0;
 _gmskmod_modulate(HEAP32[$_q >> 2] | 0, $1 & 255, $_y);
 $4 = $_q + 96 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $_q + 8 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 if ($5 >>> 0 < $7 >>> 0) $30 = $5; else {
  $9 = $_q + 4 | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  if (!$10) $30 = $5; else {
   $13 = $5;
   $14 = $10;
   $18 = $7;
   $i$01 = 0;
   while (1) {
    $19 = +_hamming((Math_imul($13, $14) | 0) + $i$01 | 0, Math_imul($14 << 1, $18) | 0);
    $20 = $_y + ($i$01 << 3) | 0;
    $22 = $_y + ($i$01 << 3) + 4 | 0;
    $25 = $19 * +HEAPF32[$22 >> 2];
    HEAPF32[$20 >> 2] = $19 * +HEAPF32[$20 >> 2];
    HEAPF32[$22 >> 2] = $25;
    $26 = $i$01 + 1 | 0;
    $27 = HEAP32[$9 >> 2] | 0;
    if ($26 >>> 0 >= $27 >>> 0) break;
    $13 = HEAP32[$4 >> 2] | 0;
    $14 = $27;
    $18 = HEAP32[$6 >> 2] | 0;
    $i$01 = $26;
   }
   $30 = HEAP32[$4 >> 2] | 0;
  }
 }
 $29 = $30 + 1 | 0;
 HEAP32[$4 >> 2] = $29;
 if (($29 | 0) != (HEAP32[$_q + 28 >> 2] | 0)) return;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$_q + 92 >> 2] = 1;
 return;
}

function _iirdes_dzpk2tff($_zd, $_pd, $_n, $_k, $_b, $_a) {
 $_zd = $_zd | 0;
 $_pd = $_pd | 0;
 $_n = $_n | 0;
 $_k = $_k | 0;
 $_b = $_b | 0;
 $_a = $_a | 0;
 var $0 = 0, $11 = 0.0, $12 = 0, $14 = 0.0, $16 = 0.0, $2 = 0, $21 = 0.0, $22 = 0.0, $27 = 0.0, $9 = 0.0, $i$02 = 0, $i$11 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 $2 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($_n + 1 << 3) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 _polycf_expandroots($_pd, $_n, $2);
 $i$02 = 0;
 do {
  HEAP32[$_a + ($i$02 << 2) >> 2] = HEAP32[$2 + ($_n - $i$02 << 3) >> 2];
  $i$02 = $i$02 + 1 | 0;
 } while ($i$02 >>> 0 <= $_n >>> 0);
 _polycf_expandroots($_zd, $_n, $2);
 $9 = +HEAPF32[$_k >> 2];
 $11 = +HEAPF32[$_k + 4 >> 2];
 $i$11 = 0;
 do {
  $12 = $_n - $i$11 | 0;
  $14 = +HEAPF32[$2 + ($12 << 3) >> 2];
  $16 = +HEAPF32[$2 + ($12 << 3) + 4 >> 2];
  $21 = $14 * $9 - $16 * $11;
  $22 = $16 * $9 + $14 * $11;
  if (($21 != $21 | 0.0 != 0.0) & ($22 != $22 | 0.0 != 0.0)) {
   ___mulsc3($0, $14, $16, $9, $11);
   $27 = +HEAPF32[$0 >> 2];
  } else $27 = $21;
  HEAPF32[$_b + ($i$11 << 2) >> 2] = $27;
  $i$11 = $i$11 + 1 | 0;
 } while ($i$11 >>> 0 <= $_n >>> 0);
 STACKTOP = sp;
 return;
}

function _liquid_unpack_bytes($_sym_in, $_sym_in_len, $_sym_out, $_sym_out_len, $_num_written) {
 $_sym_in = $_sym_in | 0;
 $_sym_in_len = $_sym_in_len | 0;
 $_sym_out = $_sym_out | 0;
 $_sym_out_len = $_sym_out_len | 0;
 $_num_written = $_num_written | 0;
 var $0 = 0, $5 = 0, $6 = 0, $i$02 = 0, $n$0$lcssa = 0, $n$01 = 0;
 $0 = $_sym_in_len << 3;
 if ($0 >>> 0 > $_sym_out_len >>> 0) {
  _fwrite(gb + 40158 | 0, 40, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(-1);
 }
 if (!$_sym_in_len) {
  $n$0$lcssa = 0;
  HEAP32[$_num_written >> 2] = $n$0$lcssa;
  return;
 } else {
  $i$02 = 0;
  $n$01 = 0;
 }
 while (1) {
  $5 = HEAP8[$_sym_in + $i$02 >> 0] | 0;
  $6 = $5 & 255;
  HEAP8[$_sym_out + $n$01 >> 0] = ($5 & 255) >>> 7;
  HEAP8[$_sym_out + ($n$01 | 1) >> 0] = $6 >>> 6 & 1;
  HEAP8[$_sym_out + ($n$01 | 2) >> 0] = $6 >>> 5 & 1;
  HEAP8[$_sym_out + ($n$01 | 3) >> 0] = $6 >>> 4 & 1;
  HEAP8[$_sym_out + ($n$01 | 4) >> 0] = $6 >>> 3 & 1;
  HEAP8[$_sym_out + ($n$01 | 5) >> 0] = $6 >>> 2 & 1;
  HEAP8[$_sym_out + ($n$01 | 6) >> 0] = $6 >>> 1 & 1;
  HEAP8[$_sym_out + ($n$01 | 7) >> 0] = $6 & 1;
  $i$02 = $i$02 + 1 | 0;
  if (($i$02 | 0) == ($_sym_in_len | 0)) {
   $n$0$lcssa = $0;
   break;
  } else $n$01 = $n$01 + 8 | 0;
 }
 HEAP32[$_num_written >> 2] = $n$0$lcssa;
 return;
}

function _hypotf($x, $y) {
 $x = +$x;
 $y = +$y;
 var $$ = 0, $$0 = 0.0, $$01 = 0.0, $$02 = 0.0, $$4 = 0, $0 = 0, $1 = 0, $17 = 0.0, $19 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $fabs = 0.0, $fabs3 = 0.0, $z$0 = 0.0;
 $fabs = +Math_abs(+$x);
 $0 = (HEAPF32[tempDoublePtr >> 2] = $fabs, HEAP32[tempDoublePtr >> 2] | 0);
 $fabs3 = +Math_abs(+$y);
 $1 = (HEAPF32[tempDoublePtr >> 2] = $fabs3, HEAP32[tempDoublePtr >> 2] | 0);
 $2 = $0 >>> 0 < $1 >>> 0;
 $$ = $2 ? $1 : $0;
 $$4 = $2 ? $0 : $1;
 $3 = (HEAP32[tempDoublePtr >> 2] = $$, +HEAPF32[tempDoublePtr >> 2]);
 $4 = (HEAP32[tempDoublePtr >> 2] = $$4, +HEAPF32[tempDoublePtr >> 2]);
 do if (($$4 | 0) == 2139095040) $$0 = $4; else {
  if ($$ >>> 0 > 2139095039 | ($$4 | 0) == 0 | ($$ - $$4 | 0) >>> 0 > 209715199) {
   $$0 = $3 + $4;
   break;
  }
  if ($$ >>> 0 > 1568669695) {
   $$01 = $4 * 8.077935669463161e-28;
   $$02 = $3 * 8.077935669463161e-28;
   $z$0 = 1237940039285380274899124.0e3;
  } else if ($$4 >>> 0 < 562036736) {
   $$01 = $4 * 1237940039285380274899124.0e3;
   $$02 = $3 * 1237940039285380274899124.0e3;
   $z$0 = 8.077935669463161e-28;
  } else {
   $$01 = $4;
   $$02 = $3;
   $z$0 = 1.0;
  }
  $17 = $$02;
  $19 = $$01;
  $$0 = $z$0 * +Math_sqrt(+($17 * $17 + $19 * $19));
 } while (0);
 return +$$0;
}

function _liquid_unpack_array($_src, $_n, $_k, $_b, $_sym_out) {
 $_src = $_src | 0;
 $_n = $_n | 0;
 $_k = $_k | 0;
 $_b = $_b | 0;
 $_sym_out = $_sym_out | 0;
 var $$0$ = 0, $$0$lcssa = 0, $$05 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $28 = 0, $3 = 0, $8 = 0, $b0$02 = 0, $i0$04 = 0, $out$0$lcssa = 0, $out$03 = 0;
 if ($_n << 3 >>> 0 <= $_k >>> 0) {
  _fwrite(gb + 40057 | 0, 61, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 $3 = $_k >>> 3;
 if (!($3 >>> 0 < $_n >>> 0 & ($_b | 0) != 0)) {
  $$0$lcssa = $_b;
  $out$0$lcssa = 0;
  $28 = $out$0$lcssa << $$0$lcssa;
  HEAP32[$_sym_out >> 2] = $28;
  return;
 }
 $$05 = $_b;
 $b0$02 = $_k - ($3 << 3) | 0;
 $i0$04 = $3;
 $out$03 = 0;
 while (1) {
  $8 = 8 - $b0$02 | 0;
  $$0$ = $$05 >>> 0 < $8 >>> 0 ? $$05 : $8;
  $20 = 255 >>> (8 - $$0$ | 0) & 255 & (HEAPU8[$_src + $i0$04 >> 0] | 0) >>> ($8 - $$0$ | 0) | $out$03 << $$0$;
  $21 = $$0$ + $b0$02 | 0;
  $22 = $21 >>> 0 > 7;
  $i0$04 = ($22 & 1) + $i0$04 | 0;
  $25 = $$05 - $$0$ | 0;
  if (!($i0$04 >>> 0 < $_n >>> 0 & ($$05 | 0) != ($$0$ | 0))) {
   $$0$lcssa = $25;
   $out$0$lcssa = $20;
   break;
  } else {
   $$05 = $25;
   $b0$02 = $22 ? $21 & 7 : $21;
   $out$03 = $20;
  }
 }
 $28 = $out$0$lcssa << $$0$lcssa;
 HEAP32[$_sym_out >> 2] = $28;
 return;
}

function _json_loads($string, $flags, $error) {
 $string = $string | 0;
 $flags = $flags | 0;
 $error = $error | 0;
 var $0 = 0, $1 = 0, $17 = 0, $2 = 0, $3 = 0, $lex = 0, $result = 0, $stream_data = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 104 | 0;
 $1 = sp + 100 | 0;
 $2 = sp + 96 | 0;
 $3 = sp + 92 | 0;
 $lex = sp;
 $result = sp + 88 | 0;
 $stream_data = sp + 80 | 0;
 HEAP32[$1 >> 2] = $string;
 HEAP32[$2 >> 2] = $flags;
 HEAP32[$3 >> 2] = $error;
 _jsonp_error_init(HEAP32[$3 >> 2] | 0, gb + 41277 | 0);
 if (!(HEAP32[$1 >> 2] | 0)) {
  _error_set(HEAP32[$3 >> 2] | 0, 0, gb + 41286 | 0, sp + 72 | 0);
  HEAP32[$0 >> 2] = 0;
  $17 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $17 | 0;
 }
 HEAP32[$stream_data >> 2] = HEAP32[$1 >> 2];
 HEAP32[$stream_data + 4 >> 2] = 0;
 if (_lex_init($lex, fb + 7 | 0, HEAP32[$2 >> 2] | 0, $stream_data) | 0) {
  HEAP32[$0 >> 2] = 0;
  $17 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $17 | 0;
 } else {
  HEAP32[$result >> 2] = _parse_json($lex, HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
  _lex_close($lex);
  HEAP32[$0 >> 2] = HEAP32[$result >> 2];
  $17 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $17 | 0;
 }
 return 0;
}

function _quiet_decoder_destroy($d) {
 $d = $d | 0;
 var $10 = 0, $13 = 0, $16 = 0, $19 = 0, $22 = 0, $25 = 0, $28 = 0, $31 = 0, $34 = 0, $37 = 0;
 if (!$d) return;
 switch (HEAP32[$d + 56 >> 2] | 0) {
 case 0:
  {
   _ofdmflexframesync_destroy(HEAP32[$d + 64 >> 2] | 0);
   break;
  }
 case 1:
  {
   _flexframesync_destroy(HEAP32[$d + 64 >> 2] | 0);
   break;
  }
 case 2:
  {
   _gmskframesync_destroy(HEAP32[$d + 64 >> 2] | 0);
   break;
  }
 default:
  {}
 }
 $10 = HEAP32[$d + 88 >> 2] | 0;
 if ($10 | 0) _resamp_rrrf_destroy($10);
 $13 = HEAP32[$d + 92 >> 2] | 0;
 if ($13 | 0) _free($13);
 $16 = HEAP32[$d + 276 >> 2] | 0;
 if ($16 | 0) _free($16);
 $19 = HEAP32[$d + 280 >> 2] | 0;
 if ($19 | 0) _free($19);
 $22 = HEAP32[$d + 284 >> 2] | 0;
 if ($22 | 0) _free($22);
 $25 = HEAP32[$d + 288 >> 2] | 0;
 if ($25 | 0) _free($25);
 $28 = HEAP32[$d + 292 >> 2] | 0;
 if ($28 | 0) _free($28);
 $31 = HEAP32[$d + 296 >> 2] | 0;
 if ($31 | 0) _free($31);
 $34 = HEAP32[$d + 300 >> 2] | 0;
 if ($34 | 0) _free($34);
 $37 = HEAP32[$d + 304 >> 2] | 0;
 if ($37 | 0) _free($37);
 _ring_destroy(HEAP32[$d + 104 >> 2] | 0);
 _free(HEAP32[$d + 108 >> 2] | 0);
 _demodulator_destroy(HEAP32[$d + 68 >> 2] | 0);
 _free(HEAP32[$d + 72 >> 2] | 0);
 _free($d);
 return;
}

function _flexframegen_set_header_len($_q, $_len) {
 $_q = $_q | 0;
 $_len = $_len | 0;
 var $10 = 0, $11 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $29 = 0, $5 = 0, $6 = 0, $7 = 0;
 if (HEAP32[$_q + 112 >> 2] | 0) {
  _fwrite(gb + 25505 | 0, 81, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  return;
 }
 HEAP32[$_q + 56 >> 2] = $_len;
 $5 = $_len + 6 | 0;
 $6 = $_q + 60 | 0;
 HEAP32[$6 >> 2] = $5;
 $7 = $_q + 52 | 0;
 HEAP32[$7 >> 2] = _realloc(HEAP32[$7 >> 2] | 0, $5) | 0;
 $10 = $_q + 64 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 if ($11 | 0) _qpacketmodem_destroy($11);
 $13 = _qpacketmodem_create() | 0;
 HEAP32[$10 >> 2] = $13;
 _qpacketmodem_configure($13, HEAP32[$6 >> 2] | 0, 6, 10, 5, 48) | 0;
 $16 = _qpacketmodem_get_frame_len(HEAP32[$10 >> 2] | 0) | 0;
 $17 = $_q + 68 | 0;
 HEAP32[$17 >> 2] = $16;
 $18 = $_q + 72 | 0;
 HEAP32[$18 >> 2] = _realloc(HEAP32[$18 >> 2] | 0, $16 << 3) | 0;
 $22 = $_q + 76 | 0;
 $23 = HEAP32[$22 >> 2] | 0;
 if ($23 | 0) _qpilotgen_destroy($23);
 $26 = _qpilotgen_create(HEAP32[$17 >> 2] | 0, 16) | 0;
 HEAP32[$22 >> 2] = $26;
 $27 = _qpilotgen_get_frame_len($26) | 0;
 HEAP32[$_q + 80 >> 2] = $27;
 $29 = $_q + 84 | 0;
 HEAP32[$29 >> 2] = _realloc(HEAP32[$29 >> 2] | 0, $27 << 3) | 0;
 return;
}

function _liquid_sumsqcf($_v, $_n) {
 $_v = $_v | 0;
 $_n = $_n | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $15 = 0.0, $20 = 0.0, $22 = 0.0, $26 = 0.0, $28 = 0.0, $5 = 0.0, $i$0$lcssa$i = 0, $i$04$i = 0, $i$12$i = 0, $r$0$lcssa$i = 0.0, $r$03$i = 0.0, $r$1$lcssa$i = 0.0, $r$11$i = 0.0;
 $0 = $_n << 1;
 $1 = $0 & -4;
 if (!$1) {
  $i$0$lcssa$i = 0;
  $r$0$lcssa$i = 0.0;
 } else {
  $i$04$i = 0;
  $r$03$i = 0.0;
  while (1) {
   $5 = +HEAPF32[$_v + ($i$04$i << 2) >> 2];
   $10 = +HEAPF32[$_v + (($i$04$i | 1) << 2) >> 2];
   $15 = +HEAPF32[$_v + (($i$04$i | 2) << 2) >> 2];
   $20 = +HEAPF32[$_v + (($i$04$i | 3) << 2) >> 2];
   $22 = $r$03$i + $5 * $5 + $10 * $10 + $15 * $15 + $20 * $20;
   $i$04$i = $i$04$i + 4 | 0;
   if ($i$04$i >>> 0 >= $1 >>> 0) {
    $i$0$lcssa$i = $1;
    $r$0$lcssa$i = $22;
    break;
   } else $r$03$i = $22;
  }
 }
 if ($i$0$lcssa$i >>> 0 < $0 >>> 0) {
  $i$12$i = $i$0$lcssa$i;
  $r$11$i = $r$0$lcssa$i;
 } else {
  $r$1$lcssa$i = $r$0$lcssa$i;
  return +$r$1$lcssa$i;
 }
 while (1) {
  $26 = +HEAPF32[$_v + ($i$12$i << 2) >> 2];
  $28 = $r$11$i + $26 * $26;
  $i$12$i = $i$12$i + 1 | 0;
  if (($i$12$i | 0) == ($0 | 0)) {
   $r$1$lcssa$i = $28;
   break;
  } else $r$11$i = $28;
 }
 return +$r$1$lcssa$i;
}

function _ofdmframegen_write_S0a($_q, $_y) {
 $_q = $_q | 0;
 $_y = $_y | 0;
 var $0 = 0, $1 = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $2 = 0, $20 = 0, $30 = 0.0, $31 = 0, $33 = 0, $36 = 0.0, $5 = 0, $6 = 0, $9 = 0, $i$02 = 0, $i$11 = 0;
 $0 = HEAP32[$_q >> 2] | 0;
 $1 = $_q + 4 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (($2 | 0) != (0 - $0 | 0)) {
  $5 = $_q + 64 | 0;
  $11 = $0;
  $13 = $2;
  $i$02 = 0;
  do {
   $15 = (($11 + $i$02 - ($13 << 1) | 0) >>> 0) % ($11 >>> 0) | 0;
   $16 = HEAP32[$5 >> 2] | 0;
   $20 = HEAP32[$16 + ($15 << 3) + 4 >> 2] | 0;
   HEAP32[$_y + ($i$02 << 3) >> 2] = HEAP32[$16 + ($15 << 3) >> 2];
   HEAP32[$_y + ($i$02 << 3) + 4 >> 2] = $20;
   $i$02 = $i$02 + 1 | 0;
   $11 = HEAP32[$_q >> 2] | 0;
   $13 = HEAP32[$1 >> 2] | 0;
  } while ($i$02 >>> 0 < ($13 + $11 | 0) >>> 0);
 }
 $6 = $_q + 12 | 0;
 if (!(HEAP32[$6 >> 2] | 0)) return;
 $9 = $_q + 16 | 0;
 $i$11 = 0;
 do {
  $30 = +HEAPF32[(HEAP32[$9 >> 2] | 0) + ($i$11 << 2) >> 2];
  $31 = $_y + ($i$11 << 3) | 0;
  $33 = $_y + ($i$11 << 3) + 4 | 0;
  $36 = $30 * +HEAPF32[$33 >> 2];
  HEAPF32[$31 >> 2] = $30 * +HEAPF32[$31 >> 2];
  HEAPF32[$33 >> 2] = $36;
  $i$11 = $i$11 + 1 | 0;
 } while ($i$11 >>> 0 < (HEAP32[$6 >> 2] | 0) >>> 0);
 return;
}

function _scramble_data($_x, $_n) {
 $_x = $_x | 0;
 $_n = $_n | 0;
 var $0 = 0, $15 = 0, $2 = 0, $21 = 0, $29 = 0, $3 = 0, $34 = 0, $36 = 0, $41 = 0, $43 = 0, $48 = 0, $50 = 0, $9 = 0, $i$0$lcssa = 0, $i$01 = 0;
 $0 = $_n & -4;
 if (!$0) $i$0$lcssa = 0; else {
  $2 = $_n & -4;
  $i$01 = 0;
  do {
   $3 = $_x + $i$01 | 0;
   HEAP8[$3 >> 0] = (HEAPU8[$3 >> 0] | 0) ^ 180;
   $9 = $_x + ($i$01 | 1) | 0;
   HEAP8[$9 >> 0] = (HEAPU8[$9 >> 0] | 0) ^ 106;
   $15 = $_x + ($i$01 | 2) | 0;
   HEAP8[$15 >> 0] = (HEAPU8[$15 >> 0] | 0) ^ 139;
   $21 = $_x + ($i$01 | 3) | 0;
   HEAP8[$21 >> 0] = (HEAPU8[$21 >> 0] | 0) ^ 197;
   $i$01 = $i$01 + 4 | 0;
  } while ($i$01 >>> 0 < $0 >>> 0);
  $i$0$lcssa = $2;
 }
 if ($i$0$lcssa >>> 0 < $_n >>> 0) {
  $29 = $_x + $i$0$lcssa | 0;
  HEAP8[$29 >> 0] = (HEAPU8[$29 >> 0] | 0) ^ 180;
 }
 $34 = $i$0$lcssa | 1;
 if ($34 >>> 0 < $_n >>> 0) {
  $36 = $_x + $34 | 0;
  HEAP8[$36 >> 0] = (HEAPU8[$36 >> 0] | 0) ^ 106;
 }
 $41 = $i$0$lcssa | 2;
 if ($41 >>> 0 < $_n >>> 0) {
  $43 = $_x + $41 | 0;
  HEAP8[$43 >> 0] = (HEAPU8[$43 >> 0] | 0) ^ 139;
 }
 $48 = $i$0$lcssa | 3;
 if ($48 >>> 0 >= $_n >>> 0) return;
 $50 = $_x + $48 | 0;
 HEAP8[$50 >> 0] = (HEAPU8[$50 >> 0] | 0) ^ 197;
 return;
}

function _fmt_u($0, $1, $s) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $s = $s | 0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa19 = 0, $13 = 0, $14 = 0, $25 = 0, $28 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0, $8$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$05 = $s;
  $7 = $0;
  $8 = $1;
  while (1) {
   $9 = ___uremdi3($7 | 0, $8 | 0, 10, 0) | 0;
   getTempRet0() | 0;
   $13 = $$05 + -1 | 0;
   HEAP8[$13 >> 0] = $9 | 48;
   $14 = ___udivdi3($7 | 0, $8 | 0, 10, 0) | 0;
   $8$looptemp = $8;
   $8 = getTempRet0() | 0;
   if (!($8$looptemp >>> 0 > 9 | ($8$looptemp | 0) == 9 & $7 >>> 0 > 4294967295)) {
    $$lcssa19 = $13;
    $28 = $14;
    break;
   } else {
    $$05 = $13;
    $7 = $14;
   }
  }
  $$0$lcssa = $$lcssa19;
  $$01$lcssa$off0 = $28;
 } else {
  $$0$lcssa = $s;
  $$01$lcssa$off0 = $0;
 }
 if (!$$01$lcssa$off0) $$1$lcssa = $$0$lcssa; else {
  $$12 = $$0$lcssa;
  $y$03 = $$01$lcssa$off0;
  while (1) {
   $25 = $$12 + -1 | 0;
   HEAP8[$25 >> 0] = ($y$03 >>> 0) % 10 | 0 | 48;
   if ($y$03 >>> 0 < 10) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;
    $y$03 = ($y$03 >>> 0) / 10 | 0;
   }
  }
 }
 return $$1$lcssa | 0;
}

function _modem_modulate_apsk($_q, $_sym_in, $_y) {
 $_q = $_q | 0;
 $_sym_in = $_sym_in | 0;
 $_y = $_y | 0;
 var $10 = 0, $14 = 0, $22 = 0.0, $34 = 0.0, $36 = 0.0, $8 = 0, $i$02 = 0, $p$0 = 0, $t$0$lcssa = 0, $t$01 = 0;
 if ((HEAP32[$_q + 8 >> 2] | 0) >>> 0 <= $_sym_in >>> 0) {
  _fwrite(gb + 32008 | 0, 59, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  return;
 }
 $8 = HEAPU8[(HEAP32[$_q + 232 >> 2] | 0) + $_sym_in >> 0] | 0;
 $10 = HEAP32[$_q + 100 >> 2] | 0;
 L5 : do if (!$10) {
  $p$0 = 0;
  $t$0$lcssa = 0;
 } else {
  $i$02 = 0;
  $t$01 = 0;
  while (1) {
   $14 = (HEAP32[$_q + 104 + ($i$02 << 2) >> 2] | 0) + $t$01 | 0;
   if ($8 >>> 0 < $14 >>> 0) {
    $p$0 = $i$02;
    $t$0$lcssa = $t$01;
    break L5;
   }
   $i$02 = $i$02 + 1 | 0;
   if ($i$02 >>> 0 >= $10 >>> 0) {
    $p$0 = 0;
    $t$0$lcssa = $14;
    break;
   } else $t$01 = $14;
  }
 } while (0);
 $22 = +HEAPF32[$_q + 136 + ($p$0 << 2) >> 2];
 $34 = +HEAPF32[$_q + 200 + ($p$0 << 2) >> 2] + +(($8 - $t$0$lcssa | 0) >>> 0) * 2.0 * 3.141592653589793 / +((HEAP32[$_q + 104 + ($p$0 << 2) >> 2] | 0) >>> 0);
 $36 = +Math_sin(+$34);
 HEAPF32[$_y >> 2] = $22 * (+Math_cos(+$34) + $36 * 0.0);
 HEAPF32[$_y + 4 >> 2] = $22 * $36;
 return;
}

function _detector_cccf_update_sumsq($_q, $_x) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $14 = 0.0, $15 = 0.0, $19 = 0, $2 = 0, $22 = 0.0, $23 = 0, $27 = 0.0, $3 = 0.0, $5 = 0.0, $7 = 0.0, $9 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 24 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp;
 $3 = +HEAPF32[$_x >> 2];
 $5 = +HEAPF32[$_x + 4 >> 2];
 HEAPF32[$1 >> 2] = $3;
 HEAPF32[$1 + 4 >> 2] = $5;
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 _conjf($0, $$byval_copy);
 $7 = +HEAPF32[$0 >> 2];
 $9 = +HEAPF32[$0 + 4 >> 2];
 $14 = $3 * $7 - $5 * $9;
 $15 = $5 * $7 + $3 * $9;
 if (($14 != $14 | 0.0 != 0.0) & ($15 != $15 | 0.0 != 0.0)) {
  ___mulsc3($2, $3, $5, $7, $9);
  $22 = +HEAPF32[$2 >> 2];
 } else $22 = $14;
 $19 = $_q + 60 | 0;
 _wdelayf_read(HEAP32[$19 >> 2] | 0, $$byval_copy);
 _wdelayf_push(HEAP32[$19 >> 2] | 0, $22);
 $23 = $_q + 64 | 0;
 $27 = $22 + +HEAPF32[$23 >> 2] - +HEAPF32[$$byval_copy >> 2];
 HEAPF32[$23 >> 2] = $27;
 HEAPF32[$_q + 68 >> 2] = $27 * +HEAPF32[$_q + 12 >> 2];
 STACKTOP = sp;
 return;
}

function _firdecim_crcf_create($_M, $_h, $_h_len) {
 $_M = $_M | 0;
 $_h = $_h | 0;
 $_h_len = $_h_len | 0;
 var $1 = 0, $16 = 0, $3 = 0, $4 = 0, $8 = 0, $9 = 0, $i$01 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 if (!$_h_len) {
  $1 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = gb + 20371;
  _fprintf($1, gb + 20376 | 0, $vararg_buffer) | 0;
  _exit(1);
 }
 if (!$_M) {
  $3 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer1 >> 2] = gb + 20371;
  _fprintf($3, gb + 20443 | 0, $vararg_buffer1) | 0;
  _exit(1);
 }
 $4 = _malloc(20) | 0;
 HEAP32[$4 + 4 >> 2] = $_h_len;
 HEAP32[$4 + 8 >> 2] = $_M;
 $8 = _malloc($_h_len << 2) | 0;
 HEAP32[$4 >> 2] = $8;
 $9 = $_h_len + -1 | 0;
 $i$01 = 0;
 do {
  HEAP32[$8 + ($i$01 << 2) >> 2] = HEAP32[$_h + ($9 - $i$01 << 2) >> 2];
  $i$01 = $i$01 + 1 | 0;
 } while ($i$01 >>> 0 < $_h_len >>> 0);
 $16 = _windowcf_create($_h_len) | 0;
 HEAP32[$4 + 12 >> 2] = $16;
 HEAP32[$4 + 16 >> 2] = _dotprod_crcf_create($8, $_h_len) | 0;
 _windowcf_clear($16);
 STACKTOP = sp;
 return $4 | 0;
}

function _hashtable_init($hashtable) {
 $hashtable = $hashtable | 0;
 var $0 = 0, $1 = 0, $10 = 0, $26 = 0, $40 = 0, $i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $i = sp;
 HEAP32[$1 >> 2] = $hashtable;
 HEAP32[HEAP32[$1 >> 2] >> 2] = 0;
 HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] = 3;
 $10 = _jsonp_malloc(1 << HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] << 3) | 0;
 HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] = $10;
 if (!(HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0)) {
  HEAP32[$0 >> 2] = -1;
  $40 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $40 | 0;
 }
 _list_init((HEAP32[$1 >> 2] | 0) + 12 | 0);
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= 1 << HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] >>> 0) break;
  $26 = (HEAP32[$1 >> 2] | 0) + 12 | 0;
  HEAP32[(HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[$i >> 2] << 3) + 4 >> 2] = $26;
  HEAP32[(HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[$i >> 2] << 3) >> 2] = $26;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$0 >> 2] = 0;
 $40 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $40 | 0;
}

function _fflush($f) {
 $f = $f | 0;
 var $$0 = 0, $$012 = 0, $$014 = 0, $24 = 0, $27 = 0, $6 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0;
 do if (!$f) {
  if (!(HEAP32[gb + 9568 >> 2] | 0)) $27 = 0; else $27 = _fflush(HEAP32[gb + 9568 >> 2] | 0) | 0;
  ___lock(gb + 45032 + 28 | 0);
  $$012 = HEAP32[gb + 45032 + 24 >> 2] | 0;
  if (!$$012) $r$0$lcssa = $27; else {
   $$014 = $$012;
   $r$03 = $27;
   while (1) {
    if ((HEAP32[$$014 + 76 >> 2] | 0) > -1) $24 = ___lockfile($$014) | 0; else $24 = 0;
    if ((HEAP32[$$014 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$014 + 28 >> 2] | 0) >>> 0) $r$1 = ___fflush_unlocked($$014) | 0 | $r$03; else $r$1 = $r$03;
    if ($24 | 0) ___unlockfile($$014);
    $$014 = HEAP32[$$014 + 56 >> 2] | 0;
    if (!$$014) {
     $r$0$lcssa = $r$1;
     break;
    } else $r$03 = $r$1;
   }
  }
  ___unlock(gb + 45032 + 28 | 0);
  $$0 = $r$0$lcssa;
 } else {
  if ((HEAP32[$f + 76 >> 2] | 0) <= -1) {
   $$0 = ___fflush_unlocked($f) | 0;
   break;
  }
  $phitmp = (___lockfile($f) | 0) == 0;
  $6 = ___fflush_unlocked($f) | 0;
  if ($phitmp) $$0 = $6; else {
   ___unlockfile($f);
   $$0 = $6;
  }
 } while (0);
 return $$0 | 0;
}

function _fmax($x, $y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $3 = 0, $fabs = 0.0, $fabs1 = 0.0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $fabs = +Math_abs(+$x);
 HEAPF64[tempDoublePtr >> 3] = $fabs;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 do if ($3 >>> 0 > 2146435072 | ($3 | 0) == 2146435072 & (HEAP32[tempDoublePtr >> 2] | 0) >>> 0 > 0) $$0 = $y; else {
  $fabs1 = +Math_abs(+$y);
  HEAPF64[tempDoublePtr >> 3] = $fabs1;
  $10 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  if ($10 >>> 0 > 2146435072 | ($10 | 0) == 2146435072 & (HEAP32[tempDoublePtr >> 2] | 0) >>> 0 > 0) $$0 = $x; else {
   HEAPF64[tempDoublePtr >> 3] = $y;
   $16 = HEAP32[tempDoublePtr >> 2] | 0;
   $17 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
   $18 = _bitshift64Lshr($0 | 0, $1 | 0, 63) | 0;
   getTempRet0() | 0;
   $20 = _bitshift64Lshr($16 | 0, $17 | 0, 63) | 0;
   getTempRet0() | 0;
   if (($18 | 0) == ($20 | 0)) {
    $$0 = $x < $y ? $y : $x;
    break;
   } else {
    $$0 = ($1 | 0) < 0 ? $y : $x;
    break;
   }
  }
 } while (0);
 return +$$0;
}

function _modulator_create($opt) {
 $opt = $opt | 0;
 var $$0 = 0, $1 = 0, $2 = 0, $20 = 0.0, $7 = 0;
 if (!$opt) {
  $$0 = 0;
  return $$0 | 0;
 }
 $1 = _malloc(40) | 0;
 HEAP32[$1 >> 2] = HEAP32[$opt >> 2];
 HEAP32[$1 + 4 >> 2] = HEAP32[$opt + 4 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[$opt + 8 >> 2];
 HEAP32[$1 + 12 >> 2] = HEAP32[$opt + 12 >> 2];
 HEAP32[$1 + 16 >> 2] = HEAP32[$opt + 16 >> 2];
 HEAP32[$1 + 20 >> 2] = HEAP32[$opt + 20 >> 2];
 HEAP32[$1 + 24 >> 2] = HEAP32[$opt + 24 >> 2];
 $2 = _nco_crcf_create(0) | 0;
 HEAP32[$1 + 28 >> 2] = $2;
 _nco_crcf_set_phase($2, 0.0);
 _nco_crcf_set_frequency($2, +HEAPF32[$opt + 16 >> 2]);
 $7 = HEAP32[$opt + 4 >> 2] | 0;
 if ($7 >>> 0 > 1) HEAP32[$1 + 32 >> 2] = _firinterp_crcf_create_prototype(HEAP32[$opt >> 2] | 0, $7, HEAP32[$opt + 8 >> 2] | 0, +HEAPF32[$opt + 12 >> 2], 0.0) | 0; else {
  HEAP32[$1 + 4 >> 2] = 1;
  HEAP32[$1 + 8 >> 2] = 0;
  HEAP32[$1 + 32 >> 2] = 0;
 }
 $20 = +HEAPF32[$opt + 24 >> 2];
 if ($20 != 0.0) {
  HEAP32[$1 + 36 >> 2] = _iirfilt_crcf_create_dc_blocker($20) | 0;
  $$0 = $1;
  return $$0 | 0;
 } else {
  HEAP32[$1 + 36 >> 2] = 0;
  $$0 = $1;
  return $$0 | 0;
 }
 return 0;
}

function _hashtable_get($hashtable, $key) {
 $hashtable = $hashtable | 0;
 $key = $key | 0;
 var $0 = 0, $1 = 0, $2 = 0, $29 = 0, $3 = 0, $5 = 0, $bucket = 0, $hash = 0, $pair = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 20 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 12 | 0;
 $pair = sp + 8 | 0;
 $hash = sp + 4 | 0;
 $bucket = sp;
 HEAP32[$1 >> 2] = $hashtable;
 HEAP32[$2 >> 2] = $key;
 $3 = HEAP32[$2 >> 2] | 0;
 $5 = _strlen(HEAP32[$2 >> 2] | 0) | 0;
 HEAP32[$hash >> 2] = _hashlittle($3, $5, HEAP32[gb + 45028 >> 2] | 0) | 0;
 HEAP32[$bucket >> 2] = (HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) + ((HEAP32[$hash >> 2] & (1 << HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2]) - 1) << 3);
 HEAP32[$pair >> 2] = _hashtable_find_pair(HEAP32[$1 >> 2] | 0, HEAP32[$bucket >> 2] | 0, HEAP32[$2 >> 2] | 0, HEAP32[$hash >> 2] | 0) | 0;
 if (HEAP32[$pair >> 2] | 0) {
  HEAP32[$0 >> 2] = HEAP32[(HEAP32[$pair >> 2] | 0) + 12 >> 2];
  $29 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $29 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $29 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $29 | 0;
 }
 return 0;
}

function _liquid_firdes_rcos($_k, $_m, $_beta, $_dt, $_h) {
 $_k = $_k | 0;
 $_m = $_m | 0;
 $_beta = +$_beta;
 $_dt = +$_dt;
 $_h = $_h | 0;
 var $$sink = 0.0, $11 = 0.0, $14 = 0.0, $15 = 0.0, $18 = 0, $22 = 0.0, $23 = 0.0, $26 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $n$02 = 0;
 if (!$_k) {
  _fwrite(gb + 24310 | 0, 54, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if (!$_m) {
  _fwrite(gb + 24365 | 0, 54, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if ($_beta < 0.0 | $_beta > 1.0) {
  _fwrite(gb + 24420 | 0, 51, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 $7 = +($_k >>> 0);
 $8 = +($_m >>> 0);
 $9 = $_beta;
 $11 = $_beta * 4.0 * $_beta;
 $14 = 3.141592653589793 / ($9 * 2.0);
 $15 = $9 * 3.141592653589793;
 $18 = (Math_imul($_m, $_k) | 0) << 1 | 1;
 $n$02 = 0;
 do {
  $22 = (+($n$02 >>> 0) + $_dt) / $7 - $8;
  $23 = +_sincf($22);
  $26 = 1.0 - $22 * ($11 * $22);
  if (+Math_abs(+$26) < 1.0000000474974513e-03) $$sink = +Math_sin(+$14) * $_beta * .5; else $$sink = $23 * +Math_cos(+($15 * $22)) / $26;
  HEAPF32[$_h + ($n$02 << 2) >> 2] = $$sink;
  $n$02 = $n$02 + 1 | 0;
 } while (($n$02 | 0) != ($18 | 0));
 return;
}

function _gmskmod_modulate($_q, $_s, $_y) {
 $_q = $_q | 0;
 $_s = $_s | 0;
 $_y = $_y | 0;
 var $11 = 0, $15 = 0.0, $16 = 0.0, $2 = 0.0, $20 = 0.0, $25 = 0.0, $6 = 0, $i$02 = 0, $storemerge = 0.0, $storemerge1 = 0.0, sp = 0;
 sp = STACKTOP;
 $2 = +HEAPF32[$_q + 28 >> 2];
 $6 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * (HEAP32[$_q >> 2] << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 _firinterp_rrrf_execute(HEAP32[$_q + 20 >> 2] | 0, ($_s | 0) == 0 ? -$2 : $2, $6);
 if (!(HEAP32[$_q >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 $11 = $_q + 24 | 0;
 $i$02 = 0;
 do {
  $15 = +HEAPF32[$6 + ($i$02 << 2) >> 2] + +HEAPF32[$11 >> 2];
  $16 = $15;
  $storemerge = $16 > 3.141592653589793 ? $16 + -6.283185307179586 : $15;
  $20 = $storemerge;
  $storemerge1 = $20 < -3.141592653589793 ? $20 + 6.283185307179586 : $storemerge;
  HEAPF32[$11 >> 2] = $storemerge1;
  $25 = +Math_sin(+$storemerge1);
  HEAPF32[$_y + ($i$02 << 3) >> 2] = +Math_cos(+$storemerge1) + $25 * 0.0;
  HEAPF32[$_y + ($i$02 << 3) + 4 >> 2] = $25;
  $i$02 = $i$02 + 1 | 0;
 } while ($i$02 >>> 0 < (HEAP32[$_q >> 2] | 0) >>> 0);
 STACKTOP = sp;
 return;
}

function _fec_secded2216_compute_parity($_m) {
 $_m = $_m | 0;
 var $0 = 0, $2 = 0;
 $0 = HEAP8[$_m >> 0] | 0;
 $2 = HEAP8[$_m + 1 >> 0] | 0;
 return ((HEAPU8[($2 & HEAP8[gb + 18960 + 11 >> 0] & 255) + (gb + 39229) >> 0] | 0) + (HEAPU8[($0 & HEAP8[gb + 18960 + 10 >> 0] & 255) + (gb + 39229) >> 0] | 0) & 1 | ((HEAPU8[($2 & HEAP8[gb + 18960 + 9 >> 0] & 255) + (gb + 39229) >> 0] | 0) + (HEAPU8[($0 & HEAP8[gb + 18960 + 8 >> 0] & 255) + (gb + 39229) >> 0] | 0) & 1 | ((HEAPU8[($2 & HEAP8[gb + 18960 + 7 >> 0] & 255) + (gb + 39229) >> 0] | 0) + (HEAPU8[($0 & HEAP8[gb + 18960 + 6 >> 0] & 255) + (gb + 39229) >> 0] | 0) & 1 | ((HEAPU8[($2 & HEAP8[gb + 18960 + 5 >> 0] & 255) + (gb + 39229) >> 0] | 0) + (HEAPU8[($0 & HEAP8[gb + 18960 + 4 >> 0] & 255) + (gb + 39229) >> 0] | 0) & 1 | ((HEAPU8[($2 & HEAP8[gb + 18960 + 3 >> 0] & 255) + (gb + 39229) >> 0] | 0) + (HEAPU8[($0 & HEAP8[gb + 18960 + 2 >> 0] & 255) + (gb + 39229) >> 0] | 0) & 1 | (HEAPU8[($2 & HEAP8[gb + 18960 + 1 >> 0] & 255) + (gb + 39229) >> 0] | 0) + (HEAPU8[($0 & HEAP8[gb + 18960 >> 0] & 255) + (gb + 39229) >> 0] | 0) << 1 & 2) << 1 & 6) << 1 & 14) << 1 & 30) << 1 & 62) & 255 | 0;
}

function _flexframesync_set_header_len($_q, $_len) {
 $_q = $_q | 0;
 $_len = $_len | 0;
 var $1 = 0, $12 = 0, $13 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $3 = 0, $6 = 0, $7 = 0, $9 = 0;
 HEAP32[$_q + 148 >> 2] = $_len;
 $1 = $_len + 6 | 0;
 $2 = $_q + 152 | 0;
 HEAP32[$2 >> 2] = $1;
 $3 = $_q + 156 | 0;
 HEAP32[$3 >> 2] = _realloc(HEAP32[$3 >> 2] | 0, $1) | 0;
 $6 = $_q + 144 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 if ($7 | 0) _qpacketmodem_destroy($7);
 $9 = _qpacketmodem_create() | 0;
 HEAP32[$6 >> 2] = $9;
 _qpacketmodem_configure($9, HEAP32[$2 >> 2] | 0, 6, 10, 5, 48) | 0;
 $12 = _qpacketmodem_get_frame_len(HEAP32[$6 >> 2] | 0) | 0;
 $13 = $_q + 140 | 0;
 HEAP32[$13 >> 2] = $12;
 $14 = $_q + 136 | 0;
 HEAP32[$14 >> 2] = _realloc(HEAP32[$14 >> 2] | 0, $12 << 3) | 0;
 $18 = $_q + 132 | 0;
 $19 = HEAP32[$18 >> 2] | 0;
 if ($19 | 0) _qpilotsync_destroy($19);
 $22 = _qpilotsync_create(HEAP32[$13 >> 2] | 0, 16) | 0;
 HEAP32[$18 >> 2] = $22;
 $23 = _qpilotsync_get_frame_len($22) | 0;
 HEAP32[$_q + 128 >> 2] = $23;
 $25 = $_q + 124 | 0;
 HEAP32[$25 >> 2] = _realloc(HEAP32[$25 >> 2] | 0, $23 << 3) | 0;
 return;
}

function _qdetector_cccf_execute($_q, $_x) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 var $$0 = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $12 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy1 = sp + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp;
 switch (HEAP32[$_q + 88 >> 2] | 0) {
 case 0:
  {
   $6 = HEAP32[$_x + 4 >> 2] | 0;
   HEAP32[$0 >> 2] = HEAP32[$_x >> 2];
   HEAP32[$0 + 4 >> 2] = $6;
   HEAP32[$$byval_copy1 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
   _qdetector_cccf_execute_seek($_q, $$byval_copy1);
   break;
  }
 case 1:
  {
   $10 = HEAP32[$_x + 4 >> 2] | 0;
   HEAP32[$1 >> 2] = HEAP32[$_x >> 2];
   HEAP32[$1 + 4 >> 2] = $10;
   HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   _qdetector_cccf_execute_align($_q, $$byval_copy1);
   break;
  }
 default:
  {}
 }
 $12 = $_q + 92 | 0;
 if (!(HEAP32[$12 >> 2] | 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$12 >> 2] = 0;
 $$0 = HEAP32[$_q + 28 >> 2] | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _liquid_firdes_fsech_freqresponse($_k, $_m, $_beta, $_H) {
 $_k = $_k | 0;
 $_m = $_m | 0;
 $_beta = +$_beta;
 $_H = $_H | 0;
 var $10 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $18 = 0, $20 = 0.0, $23 = 0.0, $3 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $i$01 = 0;
 $3 = 1.0 - $_beta;
 $5 = +($_k >>> 0);
 $6 = $3 * .5 / $5;
 $7 = .5 / $5;
 $8 = $_beta + 1.0;
 $10 = $8 * .5 / $5;
 $12 = 1.316957950592041 / ($7 * $_beta);
 $13 = +((Math_imul($_k << 1, $_m) | 0 | 1) >>> 0);
 $14 = $7 * $3;
 $15 = $7 * $8;
 $18 = (Math_imul($_m, $_k) | 0) << 1 | 1;
 $i$01 = 0;
 do {
  $20 = +($i$01 >>> 0) / $13;
  $23 = +Math_abs(+($20 > .5 ? $20 + -1.0 : $20));
  do if ($23 < $6) HEAPF32[$_H + ($i$01 << 2) >> 2] = 1.0; else {
   if (!($23 > $6 & $23 < $10)) {
    HEAPF32[$_H + ($i$01 << 2) >> 2] = 0.0;
    break;
   }
   if ($23 < $7) {
    HEAPF32[$_H + ($i$01 << 2) >> 2] = 1.0 / +_coshf($12 * ($23 - $14));
    break;
   } else {
    HEAPF32[$_H + ($i$01 << 2) >> 2] = 1.0 - 1.0 / +_coshf($12 * ($15 - $23));
    break;
   }
  } while (0);
  $i$01 = $i$01 + 1 | 0;
 } while (($i$01 | 0) != ($18 | 0));
 return;
}

function _liquid_firdes_fexp_freqresponse($_k, $_m, $_beta, $_H) {
 $_k = $_k | 0;
 $_m = $_m | 0;
 $_beta = +$_beta;
 $_H = $_H | 0;
 var $10 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $18 = 0, $20 = 0.0, $23 = 0.0, $3 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $i$01 = 0;
 $3 = 1.0 - $_beta;
 $5 = +($_k >>> 0);
 $6 = $3 * .5 / $5;
 $7 = .5 / $5;
 $8 = $_beta + 1.0;
 $10 = $8 * .5 / $5;
 $12 = .6931471824645996 / ($7 * $_beta);
 $13 = +((Math_imul($_k << 1, $_m) | 0 | 1) >>> 0);
 $14 = $7 * $3;
 $15 = $7 * $8;
 $18 = (Math_imul($_m, $_k) | 0) << 1 | 1;
 $i$01 = 0;
 do {
  $20 = +($i$01 >>> 0) / $13;
  $23 = +Math_abs(+($20 > .5 ? $20 + -1.0 : $20));
  do if ($23 < $6) HEAPF32[$_H + ($i$01 << 2) >> 2] = 1.0; else {
   if (!($23 > $6 & $23 < $10)) {
    HEAPF32[$_H + ($i$01 << 2) >> 2] = 0.0;
    break;
   }
   if ($23 < $7) {
    HEAPF32[$_H + ($i$01 << 2) >> 2] = +Math_exp(+($12 * ($14 - $23)));
    break;
   } else {
    HEAPF32[$_H + ($i$01 << 2) >> 2] = 1.0 - +Math_exp(+($12 * ($23 - $15)));
    break;
   }
  } while (0);
  $i$01 = $i$01 + 1 | 0;
 } while (($i$01 | 0) != ($18 | 0));
 return;
}

function _fec_hamming128_decode_symbol($_sym_enc) {
 $_sym_enc = $_sym_enc | 0;
 var $$0 = 0, $46 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0;
 if ($_sym_enc >>> 0 > 4095) {
  _fwrite(gb + 14137 | 0, 55, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 $6 = $_sym_enc >>> 8;
 $46 = (HEAPU8[($6 & 6) + (gb + 39485) >> 0] | 0) + (HEAPU8[($_sym_enc & 102) + (gb + 39485) >> 0] | 0) << 1 & 2 | (HEAPU8[($6 & 10) + (gb + 39485) >> 0] | 0) + (HEAPU8[($_sym_enc & 170) + (gb + 39485) >> 0] | 0) & 1 | (HEAPU8[($6 & 1) + (gb + 39485) >> 0] | 0) + (HEAPU8[($_sym_enc & 225) + (gb + 39485) >> 0] | 0) << 2 & 4 | (HEAPU8[gb + 39485 >> 0] | 0) + (HEAPU8[($_sym_enc & 31) + (gb + 39485) >> 0] | 0) << 3 & 8;
 if (($46 + -1 | 0) >>> 0 > 11) {
  $$0 = $_sym_enc;
  $52 = $$0 & 15;
  $53 = $$0 >>> 1;
  $54 = $53 & 112;
  $55 = $54 | $52;
  $56 = $$0 >>> 2;
  $57 = $56 & 128;
  $58 = $55 | $57;
  return $58 | 0;
 }
 $$0 = 1 << 12 - $46 ^ $_sym_enc;
 $52 = $$0 & 15;
 $53 = $$0 >>> 1;
 $54 = $53 & 112;
 $55 = $54 | $52;
 $56 = $$0 >>> 2;
 $57 = $56 & 128;
 $58 = $55 | $57;
 return $58 | 0;
}

function _nco_crcf_create($_type) {
 $_type = $_type | 0;
 var $0 = 0, $1 = 0, $12 = 0, $15 = 0, $i$01 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = _malloc(1060) | 0;
 HEAP32[$0 >> 2] = $_type;
 $1 = $0 + 12 | 0;
 $i$01 = 0;
 do {
  HEAPF32[$1 + ($i$01 << 2) >> 2] = +Math_sin(+(+($i$01 >>> 0) * 6.283185307179586 * .00390625));
  $i$01 = $i$01 + 1 | 0;
 } while (($i$01 | 0) != 256);
 HEAPF32[$0 + 1052 >> 2] = .10000000149011612;
 HEAPF32[$0 + 1056 >> 2] = .3162277638912201;
 $12 = HEAP32[$0 >> 2] | 0;
 switch ($12 | 0) {
 case 0:
  {
   HEAP32[$0 + 1048 >> 2] = fb + 6;
   break;
  }
 case 1:
  {
   HEAP32[$0 + 1048 >> 2] = fb + 7;
   break;
  }
 default:
  {
   $15 = HEAP32[gb + 9336 >> 2] | 0;
   HEAP32[$vararg_buffer >> 2] = $12;
   _fprintf($15, gb + 39084 | 0, $vararg_buffer) | 0;
   _exit(1);
  }
 }
 HEAPF32[$0 + 4 >> 2] = 0.0;
 HEAPF32[$0 + 8 >> 2] = 0.0;
 HEAP32[$0 + 1036 >> 2] = 0;
 HEAPF32[$0 + 1040 >> 2] = 0.0;
 HEAPF32[$0 + 1044 >> 2] = 1.0;
 STACKTOP = sp;
 return $0 | 0;
}

function _jsonp_error_vset($error, $line, $column, $position, $msg, $ap) {
 $error = $error | 0;
 $line = $line | 0;
 $column = $column | 0;
 $position = $position | 0;
 $msg = $msg | 0;
 $ap = $ap | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 20 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$0 >> 2] = $error;
 HEAP32[$1 >> 2] = $line;
 HEAP32[$2 >> 2] = $column;
 HEAP32[$3 >> 2] = $position;
 HEAP32[$4 >> 2] = $msg;
 HEAP32[$5 >> 2] = $ap;
 if (!(HEAP32[$0 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (HEAP8[(HEAP32[$0 >> 2] | 0) + 92 >> 0] | 0) {
  STACKTOP = sp;
  return;
 }
 HEAP32[HEAP32[$0 >> 2] >> 2] = HEAP32[$1 >> 2];
 HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] = HEAP32[$2 >> 2];
 HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] = HEAP32[$3 >> 2];
 _vsnprintf((HEAP32[$0 >> 2] | 0) + 92 | 0, 160, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0;
 HEAP8[(HEAP32[$0 >> 2] | 0) + 92 + 159 >> 0] = 0;
 STACKTOP = sp;
 return;
}

function _jsonp_strtod($strbuffer, $out) {
 $strbuffer = $strbuffer | 0;
 $out = $out | 0;
 var $0 = 0, $1 = 0, $2 = 0, $25 = 0, $end = 0, $value = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 20 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 12 | 0;
 $value = sp;
 $end = sp + 8 | 0;
 HEAP32[$1 >> 2] = $strbuffer;
 HEAP32[$2 >> 2] = $out;
 _to_locale(HEAP32[$1 >> 2] | 0);
 HEAP32[(___errno_location() | 0) >> 2] = 0;
 HEAPF64[$value >> 3] = +_strtod(HEAP32[HEAP32[$1 >> 2] >> 2] | 0, $end);
 if ((HEAP32[$end >> 2] | 0) != ((HEAP32[HEAP32[$1 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) | 0)) ___assert_fail(gb + 42088 | 0, gb + 42132 | 0, 71, gb + 42142 | 0);
 if (+HEAPF64[$value >> 3] == inf ? 1 : +HEAPF64[$value >> 3] == -inf) if ((HEAP32[(___errno_location() | 0) >> 2] | 0) == 34) {
  HEAP32[$0 >> 2] = -1;
  $25 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $25 | 0;
 }
 HEAPF64[HEAP32[$2 >> 2] >> 3] = +HEAPF64[$value >> 3];
 HEAP32[$0 >> 2] = 0;
 $25 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $25 | 0;
}

function _poly_fit_lagrange_barycentric($_x, $_n, $_w) {
 $_x = $_x | 0;
 $_n = $_n | 0;
 $_w = $_w | 0;
 var $$lcssa = 0.0, $0 = 0, $1 = 0, $13 = 0.0, $15 = 0, $19 = 0.0, $2 = 0, $8 = 0.0, $9 = 0.0, $j$06$us = 0, $k$02$us = 0;
 $0 = ($_n | 0) == 0;
 if ($0) return; else $j$06$us = 0;
 do {
  $1 = $_w + ($j$06$us << 3) | 0;
  HEAPF64[$1 >> 3] = 1.0;
  $2 = $_x + ($j$06$us << 3) | 0;
  $9 = 1.0;
  $k$02$us = 0;
  while (1) {
   if (($j$06$us | 0) == ($k$02$us | 0)) $19 = $9; else {
    $8 = $9 * (+HEAPF64[$2 >> 3] - +HEAPF64[$_x + ($k$02$us << 3) >> 3]);
    HEAPF64[$1 >> 3] = $8;
    $19 = $8;
   }
   $k$02$us = $k$02$us + 1 | 0;
   if (($k$02$us | 0) == ($_n | 0)) {
    $$lcssa = $19;
    break;
   } else $9 = $19;
  }
  HEAPF64[$1 >> 3] = 1.0 / $$lcssa;
  $j$06$us = $j$06$us + 1 | 0;
 } while (($j$06$us | 0) != ($_n | 0));
 $13 = +HEAPF64[$_w >> 3];
 if ($0) return;
 HEAPF64[$_w >> 3] = $13 / $13;
 if (($_n | 0) == 1) return; else $15 = 1;
 do {
  HEAPF64[$_w + ($15 << 3) >> 3] = +HEAPF64[$_w + ($15 << 3) >> 3] / $13;
  $15 = $15 + 1 | 0;
 } while (($15 | 0) != ($_n | 0));
 return;
}

function _json_real($value) {
 $value = +$value;
 var $0 = 0, $1 = 0, $12 = 0, $26 = 0, $3 = 0, $5 = 0, $real = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 12 | 0;
 $1 = sp;
 $real = sp + 8 | 0;
 HEAPF64[$1 >> 3] = $value;
 $3 = ___DOUBLE_BITS(+HEAPF64[$1 >> 3]) | 0;
 $5 = (getTempRet0() | 0) & 2147483647;
 if (!($5 >>> 0 > 2146435072 | ($5 | 0) == 2146435072 & $3 >>> 0 > 0)) {
  $12 = ___DOUBLE_BITS(+HEAPF64[$1 >> 3]) | 0;
  if (!(($12 | 0) == 0 & ((getTempRet0() | 0) & 2147483647 | 0) == 2146435072)) {
   HEAP32[$real >> 2] = _jsonp_malloc(16) | 0;
   if (HEAP32[$real >> 2] | 0) {
    _json_init(HEAP32[$real >> 2] | 0, 4);
    HEAPF64[(HEAP32[$real >> 2] | 0) + 8 >> 3] = +HEAPF64[$1 >> 3];
    HEAP32[$0 >> 2] = HEAP32[$real >> 2];
    $26 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $26 | 0;
   } else {
    HEAP32[$0 >> 2] = 0;
    $26 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $26 | 0;
   }
  }
 }
 HEAP32[$0 >> 2] = 0;
 $26 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $26 | 0;
}

function _liquid_pack_array($_dest, $_n, $_k, $_b, $_sym_in) {
 $_dest = $_dest | 0;
 $_n = $_n | 0;
 $_k = $_k | 0;
 $_b = $_b | 0;
 $_sym_in = $_sym_in | 0;
 var $$0$ = 0, $$04 = 0, $10 = 0, $14 = 0, $15 = 0, $20 = 0, $26 = 0, $27 = 0, $3 = 0, $8 = 0, $b0$02 = 0, $i0$03 = 0, $$04$looptemp = 0;
 if ($_n << 3 >>> 0 <= $_k >>> 0) {
  _fwrite(gb + 39997 | 0, 59, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 $3 = $_k >>> 3;
 if (!($3 >>> 0 < $_n >>> 0 & ($_b | 0) != 0)) return;
 $$04 = $_b;
 $b0$02 = $_k - ($3 << 3) | 0;
 $i0$03 = $3;
 while (1) {
  $8 = 8 - $b0$02 | 0;
  $$0$ = $$04 >>> 0 < $8 >>> 0 ? $$04 : $8;
  $10 = 8 - $$0$ | 0;
  $$04$looptemp = $$04;
  $$04 = $$04 - $$0$ | 0;
  $14 = 255 >>> $10 & 255;
  $15 = $10 - $b0$02 | 0;
  $20 = $_dest + $i0$03 | 0;
  HEAP8[$20 >> 0] = (HEAPU8[$20 >> 0] | 0) & ($14 << $15 ^ 255) | ($14 & $_sym_in >>> $$04) << $15;
  $26 = $$0$ + $b0$02 | 0;
  $27 = $26 >>> 0 > 7;
  $i0$03 = ($27 & 1) + $i0$03 | 0;
  if (!($i0$03 >>> 0 < $_n >>> 0 & ($$04$looptemp | 0) != ($$0$ | 0))) break; else $b0$02 = $27 ? $26 & 7 : $26;
 }
 return;
}

function _fec_rep5_decode_soft($_q, $_dec_msg_len, $_msg_enc, $_msg_dec) {
 $_q = $_q | 0;
 $_dec_msg_len = $_dec_msg_len | 0;
 $_msg_enc = $_msg_enc | 0;
 $_msg_dec = $_msg_dec | 0;
 var $1 = 0, $11 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $43 = 0, $5 = 0, $7 = 0, $9 = 0, $i$02 = 0, $j$01 = 0;
 if (!$_dec_msg_len) return;
 $1 = $_dec_msg_len << 1;
 $2 = $_dec_msg_len * 3 | 0;
 $3 = $_dec_msg_len << 2;
 $i$02 = 0;
 do {
  $4 = $_msg_dec + $i$02 | 0;
  HEAP8[$4 >> 0] = 0;
  $5 = $i$02 << 3;
  $7 = $i$02 + $_dec_msg_len << 3;
  $9 = $i$02 + $1 << 3;
  $11 = $i$02 + $2 << 3;
  $13 = $i$02 + $3 << 3;
  $43 = 0;
  $j$01 = 0;
  do {
   $43 = $43 & 255 | (((HEAPU8[$_msg_enc + ($j$01 + $7) >> 0] | 0) + (HEAPU8[$_msg_enc + ($j$01 + $5) >> 0] | 0) + (HEAPU8[$_msg_enc + ($j$01 + $9) >> 0] | 0) + (HEAPU8[$_msg_enc + ($j$01 + $11) >> 0] | 0) + (HEAPU8[$_msg_enc + ($j$01 + $13) >> 0] | 0) | 0) >>> 0 > 639 ? 1 << 7 - $j$01 : 0);
   HEAP8[$4 >> 0] = $43;
   $j$01 = $j$01 + 1 | 0;
  } while (($j$01 | 0) != 8);
  $i$02 = $i$02 + 1 | 0;
 } while (($i$02 | 0) != ($_dec_msg_len | 0));
 return;
}

function _ring_write($r, $buf, $len) {
 $r = $r | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $$0 = 0, $$sink = 0, $0 = 0, $1 = 0, $15 = 0, $17 = 0, $18 = 0, $22 = 0, $24 = 0, $3 = 0, $30 = 0, $32 = 0, $8 = 0, $9 = 0;
 $0 = $r + 12 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $3 = HEAP32[$r + 8 >> 2] | 0;
 if ($3 >>> 0 < $1 >>> 0) $8 = $3 + (HEAP32[$r >> 2] | 0) | 0; else $8 = $3;
 $9 = $1;
 if (($8 | 0) == ($1 | 0)) $$sink = HEAP32[$r >> 2] | 0; else $$sink = $8 - $9 | 0;
 if (($$sink + -1 | 0) >>> 0 < $len >>> 0) {
  $$0 = -1;
  return $$0 | 0;
 }
 $15 = $r + 4 | 0;
 $17 = HEAP32[$r >> 2] | 0;
 $18 = (HEAP32[$15 >> 2] | 0) + $17 | 0;
 $22 = ($18 >>> 0 < $1 >>> 0 ? $18 + $17 | 0 : $18) - $9 | 0;
 $24 = $22 >>> 0 > $len >>> 0 ? $len : $22;
 _memcpy($1 | 0, $buf | 0, $24 | 0) | 0;
 if ($24 >>> 0 < $len >>> 0) _memcpy(HEAP32[$15 >> 2] | 0, $buf + $24 | 0, $len - $24 | 0) | 0;
 $30 = (HEAP32[$0 >> 2] | 0) + $len | 0;
 $32 = HEAP32[$r >> 2] | 0;
 HEAP32[$0 >> 2] = $30 >>> 0 < ((HEAP32[$15 >> 2] | 0) + $32 | 0) >>> 0 ? $30 : $30 + (0 - $32) | 0;
 $$0 = $len;
 return $$0 | 0;
}

function _ilogb($x) {
 $x = +$x;
 var $$0 = 0, $0 = 0, $1 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $e$02 = 0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $2 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
 getTempRet0() | 0;
 $4 = $2 & 2047;
 switch ($4 | 0) {
 case 0:
  {
   $5 = _bitshift64Shl($0 | 0, $1 | 0, 12) | 0;
   $6 = getTempRet0() | 0;
   if (($5 | 0) == 0 & ($6 | 0) == 0) $$0 = -2147483648; else if (($6 | 0) > -1 | ($6 | 0) == -1 & $5 >>> 0 > 4294967295) {
    $16 = $5;
    $17 = $6;
    $e$02 = -1023;
    while (1) {
     $15 = $e$02 + -1 | 0;
     $16 = _bitshift64Shl($16 | 0, $17 | 0, 1) | 0;
     $17 = getTempRet0() | 0;
     if (!(($17 | 0) > -1 | ($17 | 0) == -1 & $16 >>> 0 > 4294967295)) {
      $$0 = $15;
      break;
     } else $e$02 = $15;
    }
   } else $$0 = -1023;
   break;
  }
 case 2047:
  {
   $$0 = ($0 | 0) != 0 | ($1 & 1048575 | 0) != 0 ? -2147483648 : 2147483647;
   break;
  }
 default:
  $$0 = $4 + -1023 | 0;
 }
 return $$0 | 0;
}

function _strlen($s) {
 $s = $s | 0;
 var $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $0 = 0, $18 = 0, $21 = 0, $5 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0;
 $0 = $s;
 L1 : do if (!($0 & 3)) {
  $$01$lcssa = $s;
  label = 4;
 } else {
  $$014 = $s;
  $21 = $0;
  while (1) {
   if (!(HEAP8[$$014 >> 0] | 0)) {
    $$pn = $21;
    break L1;
   }
   $5 = $$014 + 1 | 0;
   $21 = $5;
   if (!($21 & 3)) {
    $$01$lcssa = $5;
    label = 4;
    break;
   } else $$014 = $5;
  }
 } while (0);
 if ((label | 0) == 4) {
  $w$0 = $$01$lcssa;
  while (1) {
   $9 = HEAP32[$w$0 >> 2] | 0;
   if (!(($9 & -2139062144 ^ -2139062144) & $9 + -16843009)) $w$0 = $w$0 + 4 | 0; else {
    $$lcssa20 = $9;
    $w$0$lcssa = $w$0;
    break;
   }
  }
  if (!(($$lcssa20 & 255) << 24 >> 24)) $$1$lcssa = $w$0$lcssa; else {
   $$pn15 = $w$0$lcssa;
   while (1) {
    $18 = $$pn15 + 1 | 0;
    if (!(HEAP8[$18 >> 0] | 0)) {
     $$1$lcssa = $18;
     break;
    } else $$pn15 = $18;
   }
  }
  $$pn = $$1$lcssa;
 }
 return $$pn - $0 | 0;
}

function _utf8_check_first($byte) {
 $byte = $byte | 0;
 var $0 = 0, $1 = 0, $u = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 $1 = sp + 5 | 0;
 $u = sp + 4 | 0;
 HEAP8[$1 >> 0] = $byte;
 HEAP8[$u >> 0] = HEAP8[$1 >> 0] | 0;
 do if ((HEAPU8[$u >> 0] | 0 | 0) < 128) HEAP32[$0 >> 2] = 1; else {
  if (128 <= (HEAPU8[$u >> 0] | 0 | 0)) if ((HEAPU8[$u >> 0] | 0 | 0) <= 191) {
   HEAP32[$0 >> 2] = 0;
   break;
  }
  if ((HEAPU8[$u >> 0] | 0 | 0) != 192) if ((HEAPU8[$u >> 0] | 0 | 0) != 193) {
   if (194 <= (HEAPU8[$u >> 0] | 0 | 0)) if ((HEAPU8[$u >> 0] | 0 | 0) <= 223) {
    HEAP32[$0 >> 2] = 2;
    break;
   }
   if (224 <= (HEAPU8[$u >> 0] | 0 | 0)) if ((HEAPU8[$u >> 0] | 0 | 0) <= 239) {
    HEAP32[$0 >> 2] = 3;
    break;
   }
   if (240 <= (HEAPU8[$u >> 0] | 0 | 0)) if ((HEAPU8[$u >> 0] | 0 | 0) <= 244) {
    HEAP32[$0 >> 2] = 4;
    break;
   }
   HEAP32[$0 >> 2] = 0;
   break;
  }
  HEAP32[$0 >> 2] = 0;
 } while (0);
 STACKTOP = sp;
 return HEAP32[$0 >> 2] | 0;
}

function _gmskframegen_create() {
 var $0 = 0, $22 = 0, $24 = 0, $5 = 0, $7 = 0, $9 = 0;
 $0 = _malloc(100) | 0;
 HEAP32[$0 + 4 >> 2] = 2;
 HEAP32[$0 + 8 >> 2] = 3;
 HEAPF32[$0 + 12 >> 2] = .5;
 HEAP32[$0 + 16 >> 2] = 63;
 $5 = $0 + 24 | 0;
 HEAP32[$5 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 6;
 $7 = _gmskmod_create(2, 3, .5) | 0;
 HEAP32[$0 >> 2] = $7;
 $9 = $0 + 32 | 0;
 HEAP32[$9 >> 2] = _msequence_create(6, 109, 1) | 0;
 _gmskmod_reset($7);
 HEAP32[$0 + 84 >> 2] = 0;
 _msequence_reset(HEAP32[$9 >> 2] | 0);
 HEAP32[$0 + 88 >> 2] = 0;
 HEAP32[$0 + 92 >> 2] = 0;
 HEAP32[$0 + 96 >> 2] = 0;
 HEAP32[$0 + 44 >> 2] = 0;
 HEAP32[$0 + 48 >> 2] = 0;
 HEAP32[$0 + 52 >> 2] = 0;
 _gmskframegen_set_header_len($0, 8);
 HEAP32[$0 + 72 >> 2] = 0;
 HEAP32[$0 + 60 >> 2] = 6;
 HEAP32[$0 + 64 >> 2] = 1;
 HEAP32[$0 + 68 >> 2] = 1;
 $22 = _packetizer_create(0, 6, 1, 1) | 0;
 HEAP32[$0 + 56 >> 2] = $22;
 $24 = _packetizer_get_enc_msg_len($22) | 0;
 HEAP32[$0 + 76 >> 2] = $24;
 HEAP32[$5 >> 2] = $24 << 3;
 HEAP32[$0 + 80 >> 2] = _malloc($24) | 0;
 return $0 | 0;
}

function _jsonp_error_set_source($error, $source) {
 $error = $error | 0;
 $source = $source | 0;
 var $0 = 0, $1 = 0, $extra = 0, $length = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 12 | 0;
 $1 = sp + 8 | 0;
 $length = sp + 4 | 0;
 $extra = sp;
 HEAP32[$0 >> 2] = $error;
 HEAP32[$1 >> 2] = $source;
 if (!((HEAP32[$0 >> 2] | 0) != 0 & (HEAP32[$1 >> 2] | 0) != 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$length >> 2] = _strlen(HEAP32[$1 >> 2] | 0) | 0;
 if ((HEAP32[$length >> 2] | 0) >>> 0 < 80) {
  _strncpy((HEAP32[$0 >> 2] | 0) + 12 | 0, HEAP32[$1 >> 2] | 0, (HEAP32[$length >> 2] | 0) + 1 | 0) | 0;
  STACKTOP = sp;
  return;
 } else {
  HEAP32[$extra >> 2] = (HEAP32[$length >> 2] | 0) - 80 + 4;
  _strncpy((HEAP32[$0 >> 2] | 0) + 12 | 0, gb + 42155 | 0, 3) | 0;
  _strncpy((HEAP32[$0 >> 2] | 0) + 12 + 3 | 0, (HEAP32[$1 >> 2] | 0) + (HEAP32[$extra >> 2] | 0) | 0, (HEAP32[$length >> 2] | 0) - (HEAP32[$extra >> 2] | 0) + 1 | 0) | 0;
  STACKTOP = sp;
  return;
 }
}

function _firdecim_crcf_execute($_q, $_x, $_y) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 $_y = $_y | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $i$01 = 0, $r = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 16 | 0;
 $r = sp + 8 | 0;
 $0 = sp;
 $1 = $_q + 8 | 0;
 if (!(HEAP32[$1 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 $4 = $_q + 12 | 0;
 $5 = $0 + 4 | 0;
 $6 = $_q + 16 | 0;
 $i$01 = 0;
 do {
  $7 = HEAP32[$4 >> 2] | 0;
  $11 = HEAP32[$_x + ($i$01 << 3) + 4 >> 2] | 0;
  HEAP32[$0 >> 2] = HEAP32[$_x + ($i$01 << 3) >> 2];
  HEAP32[$5 >> 2] = $11;
  HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$0 + 4 >> 2];
  _windowcf_push($7, $$byval_copy);
  if (!$i$01) {
   _windowcf_read(HEAP32[$4 >> 2] | 0, $r);
   _dotprod_crcf_execute(HEAP32[$6 >> 2] | 0, HEAP32[$r >> 2] | 0, $_y);
  }
  $i$01 = $i$01 + 1 | 0;
 } while ($i$01 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0);
 STACKTOP = sp;
 return;
}

function ___remdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $rem = __stackBase__ | 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
 $4$1 = getTempRet0() | 0;
 ___udivmoddi4($4$0, $4$1, _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0, getTempRet0() | 0, $rem) | 0;
 $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0 | 0, HEAP32[$rem + 4 >> 2] ^ $1$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
 $10$1 = getTempRet0() | 0;
 STACKTOP = __stackBase__;
 return (setTempRet0($10$1 | 0), $10$0) | 0;
}

function _pad($f, $c, $w, $l, $fl) {
 $f = $f | 0;
 $c = $c | 0;
 $w = $w | 0;
 $l = $l | 0;
 $fl = $fl | 0;
 var $$0$lcssa6 = 0, $$02 = 0, $10 = 0, $14 = 0, $17 = 0, $18 = 0, $3 = 0, $7 = 0, $9 = 0, $pad = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $pad = sp;
 do if (($w | 0) > ($l | 0) & ($fl & 73728 | 0) == 0) {
  $3 = $w - $l | 0;
  _memset($pad | 0, $c | 0, ($3 >>> 0 > 256 ? 256 : $3) | 0) | 0;
  $7 = HEAP32[$f >> 2] | 0;
  $9 = ($7 & 32 | 0) == 0;
  if ($3 >>> 0 > 255) {
   $10 = $w - $l | 0;
   $$02 = $3;
   $17 = $7;
   $18 = $9;
   while (1) {
    if ($18) {
     ___fwritex($pad, 256, $f) | 0;
     $14 = HEAP32[$f >> 2] | 0;
    } else $14 = $17;
    $$02 = $$02 + -256 | 0;
    $18 = ($14 & 32 | 0) == 0;
    if ($$02 >>> 0 <= 255) break; else $17 = $14;
   }
   if ($18) $$0$lcssa6 = $10 & 255; else break;
  } else if ($9) $$0$lcssa6 = $3; else break;
  ___fwritex($pad, $$0$lcssa6, $f) | 0;
 } while (0);
 STACKTOP = sp;
 return;
}

function _poly_val_lagrange_barycentric($_x, $_y, $_w, $_x0, $_n) {
 $_x = $_x | 0;
 $_y = $_y | 0;
 $_w = $_w | 0;
 $_x0 = +$_x0;
 $_n = $_n | 0;
 var $$0 = 0.0, $14 = 0.0, $16 = 0.0, $3 = 0.0, $9 = 0.0, $j$06 = 0, $j$06$lcssa = 0, $t0$0$lcssa = 0.0, $t0$05 = 0.0, $t1$0$lcssa = 0.0, $t1$04 = 0.0;
 L1 : do if (!$_n) {
  $t0$0$lcssa = 0.0;
  $t1$0$lcssa = 0.0;
 } else {
  $j$06 = 0;
  $t0$05 = 0.0;
  $t1$04 = 0.0;
  while (1) {
   $3 = $_x0 - +HEAPF64[$_x + ($j$06 << 3) >> 3];
   if (+Math_abs(+$3) < 9.999999974752427e-07) {
    $j$06$lcssa = $j$06;
    break;
   }
   $9 = +HEAPF64[$_w + ($j$06 << 3) >> 3];
   $14 = $t0$05 + $9 * +HEAPF64[$_y + ($j$06 << 3) >> 3] / $3;
   $16 = $t1$04 + $9 / $3;
   $j$06 = $j$06 + 1 | 0;
   if ($j$06 >>> 0 >= $_n >>> 0) {
    $t0$0$lcssa = $14;
    $t1$0$lcssa = $16;
    break L1;
   } else {
    $t0$05 = $14;
    $t1$04 = $16;
   }
  }
  $$0 = +HEAPF64[$_y + ($j$06$lcssa << 3) >> 3];
  return +$$0;
 } while (0);
 $$0 = $t0$0$lcssa / $t1$0$lcssa;
 return +$$0;
}

function _json_array() {
 var $0 = 0, $13 = 0, $20 = 0, $23 = 0, $array = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 4 | 0;
 $array = sp;
 HEAP32[$array >> 2] = _jsonp_malloc(24) | 0;
 if (!(HEAP32[$array >> 2] | 0)) {
  HEAP32[$0 >> 2] = 0;
  $23 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $23 | 0;
 }
 _json_init(HEAP32[$array >> 2] | 0, 1);
 HEAP32[(HEAP32[$array >> 2] | 0) + 12 >> 2] = 0;
 HEAP32[(HEAP32[$array >> 2] | 0) + 8 >> 2] = 8;
 $13 = _jsonp_malloc(HEAP32[(HEAP32[$array >> 2] | 0) + 8 >> 2] << 2) | 0;
 HEAP32[(HEAP32[$array >> 2] | 0) + 16 >> 2] = $13;
 $20 = HEAP32[$array >> 2] | 0;
 if (HEAP32[(HEAP32[$array >> 2] | 0) + 16 >> 2] | 0) {
  HEAP32[$20 + 20 >> 2] = 0;
  HEAP32[$0 >> 2] = HEAP32[$array >> 2];
  $23 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $23 | 0;
 } else {
  _jsonp_free($20);
  HEAP32[$0 >> 2] = 0;
  $23 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $23 | 0;
 }
 return 0;
}

function _json_delete($json) {
 $json = $json | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $json;
 if (HEAP32[$0 >> 2] | 0) if (!(HEAP32[HEAP32[$0 >> 2] >> 2] | 0)) {
  _json_delete_object(HEAP32[$0 >> 2] | 0);
  STACKTOP = sp;
  return;
 }
 if (HEAP32[$0 >> 2] | 0) if ((HEAP32[HEAP32[$0 >> 2] >> 2] | 0) == 1) {
  _json_delete_array(HEAP32[$0 >> 2] | 0);
  STACKTOP = sp;
  return;
 }
 if (HEAP32[$0 >> 2] | 0) if ((HEAP32[HEAP32[$0 >> 2] >> 2] | 0) == 2) {
  _json_delete_string(HEAP32[$0 >> 2] | 0);
  STACKTOP = sp;
  return;
 }
 if (HEAP32[$0 >> 2] | 0) if ((HEAP32[HEAP32[$0 >> 2] >> 2] | 0) == 3) {
  _json_delete_integer(HEAP32[$0 >> 2] | 0);
  STACKTOP = sp;
  return;
 }
 if (!(HEAP32[$0 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[HEAP32[$0 >> 2] >> 2] | 0) != 4) {
  STACKTOP = sp;
  return;
 }
 _json_delete_real(HEAP32[$0 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _erff($x) {
 $x = +$x;
 var $$0 = 0.0, $1 = 0, $15 = 0.0, $2 = 0, $fabs = 0.0, $y$0 = 0.0;
 $1 = (HEAPF32[tempDoublePtr >> 2] = $x, HEAP32[tempDoublePtr >> 2] | 0) >>> 31;
 $fabs = +Math_abs(+$x);
 $2 = (HEAPF32[tempDoublePtr >> 2] = $fabs, HEAP32[tempDoublePtr >> 2] | 0);
 do if ($2 >>> 0 > 2139095039) $$0 = 1.0 / $x + +(1 - ($1 << 1) | 0); else if ($2 >>> 0 < 1062731776) if ($2 >>> 0 < 830472192) {
  $$0 = ($x * 8.0 + $x * 1.0270333290100098) * .125;
  break;
 } else {
  $15 = $x * $x;
  $$0 = ($15 * ($15 * ($15 * (-.005770270247012377 - $15 * 2.3763017452438362e-05) + -.028481749817728996) + -.32504209876060486) + .12837916612625122) / ($15 * ($15 * ($15 * ($15 * (1.324947370449081e-04 - $15 * 3.9602282413397916e-06) + 5.0813062116503716e-03) + .06502225250005722) + .3979172110557556) + 1.0) * $x + $x;
  break;
 } else {
  if ($2 >>> 0 < 1086324736) $y$0 = 1.0 - +_erfc2_142($2, $x); else $y$0 = 1.0;
  $$0 = $1 | 0 ? -$y$0 : $y$0;
  break;
 } while (0);
 return +$$0;
}

function _modem_get_demodulator_phase_error($_q) {
 $_q = $_q | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $12 = 0.0, $14 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $25 = 0.0, $4 = 0.0, $6 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 24 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp;
 $4 = +HEAPF32[$_q + 84 >> 2];
 $6 = +HEAPF32[$_q + 88 >> 2];
 $10 = HEAP32[$_q + 96 >> 2] | 0;
 HEAP32[$1 >> 2] = HEAP32[$_q + 92 >> 2];
 HEAP32[$1 + 4 >> 2] = $10;
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 _conjf($0, $$byval_copy);
 $12 = +HEAPF32[$0 >> 2];
 $14 = +HEAPF32[$0 + 4 >> 2];
 $19 = $4 * $12 - $6 * $14;
 $20 = $6 * $12 + $4 * $14;
 if (!(($19 != $19 | 0.0 != 0.0) & ($20 != $20 | 0.0 != 0.0))) {
  $25 = $20;
  STACKTOP = sp;
  return +$25;
 }
 ___mulsc3($2, $4, $6, $12, $14);
 $25 = +HEAPF32[$2 + 4 >> 2];
 STACKTOP = sp;
 return +$25;
}

function _liquid_getopt_str2firfilt($_str) {
 $_str = $_str | 0;
 var $$0 = 0, $29 = 0;
 if (!(_strcmp($_str, gb + 22474 | 0) | 0)) $$0 = 1; else if (!(_strcmp($_str, gb + 22481 | 0) | 0)) $$0 = 2; else if (!(_strcmp($_str, gb + 22484 | 0) | 0)) $$0 = 3; else if (!(_strcmp($_str, gb + 22489 | 0) | 0)) $$0 = 4; else if (!(_strcmp($_str, gb + 22494 | 0) | 0)) $$0 = 5; else if (!(_strcmp($_str, gb + 22500 | 0) | 0)) $$0 = 6; else if (!(_strcmp($_str, gb + 22509 | 0) | 0)) $$0 = 7; else if (!(_strcmp($_str, gb + 22518 | 0) | 0)) $$0 = 8; else if (!(_strcmp($_str, gb + 22526 | 0) | 0)) $$0 = 9; else if (!(_strcmp($_str, gb + 22532 | 0) | 0)) $$0 = 10; else if (!(_strcmp($_str, gb + 22536 | 0) | 0)) $$0 = 11; else if (!(_strcmp($_str, gb + 22543 | 0) | 0)) $$0 = 12; else if (!(_strcmp($_str, gb + 22550 | 0) | 0)) $$0 = 13; else if (!(_strcmp($_str, gb + 22556 | 0) | 0)) $$0 = 14; else {
  $29 = (_strcmp($_str, gb + 22563 | 0) | 0) == 0;
  $$0 = $29 ? 15 : 0;
 }
 return $$0 | 0;
}

function _gmskmod_create($_k, $_m, $_BT) {
 $_k = $_k | 0;
 $_m = $_m | 0;
 $_BT = +$_BT;
 var $15 = 0, $18 = 0, $20 = 0, $7 = 0;
 if ($_k >>> 0 < 2) {
  _fwrite(gb + 31057 | 0, 59, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if (!$_m) {
  _fwrite(gb + 31117 | 0, 57, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if ($_BT <= 0.0 | $_BT >= 1.0) {
  _fwrite(gb + 31175 | 0, 65, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 } else {
  $7 = _malloc(32) | 0;
  HEAP32[$7 >> 2] = $_k;
  HEAP32[$7 + 4 >> 2] = $_m;
  HEAPF32[$7 + 8 >> 2] = $_BT;
  HEAPF32[$7 + 28 >> 2] = 1.0 / +($_k >>> 0);
  $15 = Math_imul($_k << 1, $_m) | 0 | 1;
  HEAP32[$7 + 12 >> 2] = $15;
  $18 = _malloc($15 << 2) | 0;
  HEAP32[$7 + 16 >> 2] = $18;
  _liquid_firdes_gmsktx($_k, $_m, $_BT, 0.0, $18);
  $20 = _firinterp_rrrf_create_prototype(11, $_k, $_m, $_BT, 0.0) | 0;
  HEAP32[$7 + 20 >> 2] = $20;
  HEAPF32[$7 + 24 >> 2] = 0.0;
  _firinterp_rrrf_reset($20);
  return $7 | 0;
 }
 return 0;
}

function _ring_read($r, $dst, $len) {
 $r = $r | 0;
 $dst = $dst | 0;
 $len = $len | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $12 = 0, $14 = 0, $15 = 0, $19 = 0, $21 = 0, $27 = 0, $29 = 0, $3 = 0, $8 = 0, $9 = 0;
 $0 = $r + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $3 = HEAP32[$r + 12 >> 2] | 0;
 if ($3 >>> 0 < $1 >>> 0) $8 = $3 + (HEAP32[$r >> 2] | 0) | 0; else $8 = $3;
 $9 = $1;
 if (($8 - $9 | 0) >>> 0 < $len >>> 0) {
  $$0 = -1;
  return $$0 | 0;
 }
 $12 = $r + 4 | 0;
 $14 = HEAP32[$r >> 2] | 0;
 $15 = (HEAP32[$12 >> 2] | 0) + $14 | 0;
 $19 = ($15 >>> 0 < $1 >>> 0 ? $15 + $14 | 0 : $15) - $9 | 0;
 $21 = $19 >>> 0 > $len >>> 0 ? $len : $19;
 _memcpy($dst | 0, $1 | 0, $21 | 0) | 0;
 if ($21 >>> 0 < $len >>> 0) _memcpy($dst + $21 | 0, HEAP32[$12 >> 2] | 0, $len - $21 | 0) | 0;
 $27 = (HEAP32[$0 >> 2] | 0) + $len | 0;
 $29 = HEAP32[$r >> 2] | 0;
 HEAP32[$0 >> 2] = $27 >>> 0 < ((HEAP32[$12 >> 2] | 0) + $29 | 0) >>> 0 ? $27 : $27 + (0 - $29) | 0;
 $$0 = $len;
 return $$0 | 0;
}

function _seed_from_urandom($seed) {
 $seed = $seed | 0;
 var $0 = 0, $1 = 0, $12 = 0, $14 = 0, $data = 0, $ok = 0, $urandom = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 16 | 0;
 $1 = sp + 12 | 0;
 $data = sp + 20 | 0;
 $ok = sp + 8 | 0;
 $urandom = sp + 4 | 0;
 HEAP32[$1 >> 2] = $seed;
 HEAP32[$urandom >> 2] = _open(gb + 42159 | 0, 0, sp) | 0;
 if ((HEAP32[$urandom >> 2] | 0) == -1) {
  HEAP32[$0 >> 2] = 1;
  $14 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $14 | 0;
 }
 HEAP32[$ok >> 2] = (_read(HEAP32[$urandom >> 2] | 0, $data, 4) | 0) == 4 & 1;
 _close(HEAP32[$urandom >> 2] | 0) | 0;
 if (HEAP32[$ok >> 2] | 0) {
  $12 = _buf_to_uint32($data) | 0;
  HEAP32[HEAP32[$1 >> 2] >> 2] = $12;
  HEAP32[$0 >> 2] = 0;
  $14 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $14 | 0;
 } else {
  HEAP32[$0 >> 2] = 1;
  $14 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $14 | 0;
 }
 return 0;
}

function _dotprod_crcf_execute($_q, $_x, $_y) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 $_y = $_y | 0;
 var $0 = 0, $12 = 0.0, $13 = 0.0, $2 = 0, $5 = 0.0, $i$03$i = 0, $r$sroa$0$0$lcssa$i = 0.0, $r$sroa$0$02$i = 0.0, $r$sroa$6$0$lcssa$i = 0.0, $r$sroa$6$01$i = 0.0;
 $0 = HEAP32[$_q >> 2] | 0;
 $2 = HEAP32[$_q + 4 >> 2] | 0;
 if (!$2) {
  $r$sroa$0$0$lcssa$i = 0.0;
  $r$sroa$6$0$lcssa$i = 0.0;
 } else {
  $i$03$i = 0;
  $r$sroa$0$02$i = 0.0;
  $r$sroa$6$01$i = 0.0;
  while (1) {
   $5 = +HEAPF32[$0 + ($i$03$i << 2) >> 2];
   $12 = $r$sroa$0$02$i + $5 * +HEAPF32[$_x + ($i$03$i << 3) >> 2];
   $13 = $r$sroa$6$01$i + $5 * +HEAPF32[$_x + ($i$03$i << 3) + 4 >> 2];
   $i$03$i = $i$03$i + 1 | 0;
   if (($i$03$i | 0) == ($2 | 0)) {
    $r$sroa$0$0$lcssa$i = $12;
    $r$sroa$6$0$lcssa$i = $13;
    break;
   } else {
    $r$sroa$0$02$i = $12;
    $r$sroa$6$01$i = $13;
   }
  }
 }
 HEAPF32[$_y >> 2] = $r$sroa$0$0$lcssa$i;
 HEAPF32[$_y + 4 >> 2] = $r$sroa$6$0$lcssa$i;
 return;
}

function _ofdmframesync_reset($_q) {
 $_q = $_q | 0;
 var $18 = 0, $19 = 0.0, $20 = 0, $4 = 0, $5 = 0, $6 = 0;
 _nco_crcf_reset(HEAP32[$_q + 108 >> 2] | 0);
 _msequence_reset(HEAP32[$_q + 112 >> 2] | 0);
 $4 = $_q + 136 | 0;
 $5 = $_q + 116 | 0;
 HEAP32[$5 >> 2] = 0;
 HEAP32[$5 + 4 >> 2] = 0;
 HEAP32[$5 + 8 >> 2] = 0;
 HEAP32[$5 + 12 >> 2] = 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 HEAP32[$4 + 8 >> 2] = 0;
 HEAP32[$4 + 12 >> 2] = 0;
 $6 = HEAP32[$_q >> 2] | 0;
 if ($6 >>> 0 > 44) {
  HEAPF32[$_q + 152 >> 2] = .3499999940395355;
  $19 = .30000001192092896;
  $18 = $_q + 156 | 0;
  HEAPF32[$18 >> 2] = $19;
  $20 = $_q + 104 | 0;
  HEAP32[$20 >> 2] = 0;
  return;
 } else {
  HEAPF32[$_q + 152 >> 2] = +((44 - $6 | 0) >>> 0) * .009999999776482582 + .3499999940395355;
  $19 = +((44 - $6 | 0) >>> 0) * .009999999776482582 + .30000001192092896;
  $18 = $_q + 156 | 0;
  HEAPF32[$18 >> 2] = $19;
  $20 = $_q + 104 | 0;
  HEAP32[$20 >> 2] = 0;
  return;
 }
}

function _nco_crcf_mix_down($_q, $_x, $_y) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 $_y = $_y | 0;
 var $0 = 0, $11 = 0.0, $12 = 0.0, $17 = 0.0, $18 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $3 = 0.0, $5 = 0.0, $9 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 mftCall_vi(HEAP32[$_q + 1048 >> 2] | 0, $_q | 0);
 $3 = +HEAPF32[$_x >> 2];
 $5 = +HEAPF32[$_x + 4 >> 2];
 $9 = +HEAPF32[$_q + 1040 >> 2];
 $11 = +HEAPF32[$_q + 1044 >> 2] - $9 * 0.0;
 $12 = -$9;
 $17 = $3 * $11 - $5 * $12;
 $18 = $3 * $12 + $5 * $11;
 if (!(($17 != $17 | 0.0 != 0.0) & ($18 != $18 | 0.0 != 0.0))) {
  $25 = $17;
  $26 = $18;
  $24 = $_y + 4 | 0;
  HEAPF32[$_y >> 2] = $25;
  HEAPF32[$24 >> 2] = $26;
  STACKTOP = sp;
  return;
 }
 ___mulsc3($0, $3, $5, $11, $12);
 $25 = +HEAPF32[$0 >> 2];
 $26 = +HEAPF32[$0 + 4 >> 2];
 $24 = $_y + 4 | 0;
 HEAPF32[$_y >> 2] = $25;
 HEAPF32[$24 >> 2] = $26;
 STACKTOP = sp;
 return;
}

function _ofdm_subcarriers_create($opt) {
 $opt = $opt | 0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $13 = 0, $19 = 0, $3 = 0, $8 = 0, $left_end$0 = 0, $left_end$0$lcssa = 0, $right_end$0 = 0, $umax5 = 0;
 $0 = HEAP32[$opt >> 2] | 0;
 $1 = _malloc($0) | 0;
 _ofdmframe_init_default_sctype($0, $1);
 $3 = (HEAP32[$opt >> 2] | 0) >>> 1;
 $left_end$0 = $3;
 while (1) if (!(HEAP8[$1 + $left_end$0 >> 0] | 0)) $left_end$0 = $left_end$0 + -1 | 0; else {
  $left_end$0$lcssa = $left_end$0;
  break;
 }
 $right_end$0 = $3;
 while (1) {
  $8 = $1 + $right_end$0 | 0;
  if (!(HEAP8[$8 >> 0] | 0)) $right_end$0 = $right_end$0 + 1 | 0; else {
   $$lcssa = $8;
   break;
  }
 }
 $13 = HEAP32[$opt + 16 >> 2] | 0;
 if ($13 | 0) {
  $umax5 = $13 >>> 0 > 1 ? $13 : 1;
  _memset($1 + ($left_end$0$lcssa + 1 - $umax5) | 0, 0, $umax5 | 0) | 0;
 }
 $19 = HEAP32[$opt + 12 >> 2] | 0;
 if (!$19) return $1 | 0;
 _memset($$lcssa | 0, 0, ($19 >>> 0 > 1 ? $19 : 1) | 0) | 0;
 return $1 | 0;
}

function _flexframegen_setprops($_q, $_props) {
 $_q = $_q | 0;
 $_props = $_props | 0;
 var $$0 = 0, $15 = 0;
 if (HEAP32[$_q + 112 >> 2] | 0) {
  _fwrite(gb + 25505 | 0, 81, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  $$0 = -1;
  return $$0 | 0;
 }
 if (!$_props) {
  _flexframegen_setprops($_q, gb + 548 | 0) | 0;
  return 0;
 }
 if (((HEAP32[$_props >> 2] | 0) + -1 | 0) >>> 0 > 5) {
  _fwrite(gb + 25587 | 0, 63, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if (!(HEAP32[$_props + 4 >> 2] | 0)) {
  $15 = HEAP32[gb + 9336 >> 2] | 0;
  _fwrite(gb + 25651 | 0, 63, 1, $15) | 0;
  _exit(1);
 }
 if (!(HEAP32[$_props + 8 >> 2] | 0)) {
  $15 = HEAP32[gb + 9336 >> 2] | 0;
  _fwrite(gb + 25651 | 0, 63, 1, $15) | 0;
  _exit(1);
 }
 if (!(HEAP32[$_props + 12 >> 2] | 0)) {
  _fwrite(gb + 25715 | 0, 70, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 _memmove($_q + 32 | 0, $_props | 0, 16) | 0;
 _flexframegen_reconfigure($_q);
 $$0 = 0;
 return $$0 | 0;
}

function _crc24_generate_key($_msg, $_n) {
 $_msg = $_msg | 0;
 $_n = $_n | 0;
 var $$lcssa = 0, $0 = 0, $10 = 0, $15 = 0, $20 = 0, $25 = 0, $30 = 0, $35 = 0, $40 = 0, $45 = 0, $5 = 0, $i$04 = 0, $key24$0$lcssa = 0, $key24$03 = 0;
 $0 = _liquid_reverse_uint24(6122955) | 0;
 if (!$_n) {
  $key24$0$lcssa = 0;
  return $key24$0$lcssa | 0;
 } else {
  $i$04 = 0;
  $key24$03 = -1;
 }
 while (1) {
  $5 = (HEAPU8[$_msg + $i$04 >> 0] | 0) ^ $key24$03;
  $10 = $0 & 0 - ($5 & 1) ^ $5 >>> 1;
  $15 = $0 & 0 - ($10 & 1) ^ $10 >>> 1;
  $20 = $0 & 0 - ($15 & 1) ^ $15 >>> 1;
  $25 = $0 & 0 - ($20 & 1) ^ $20 >>> 1;
  $30 = $0 & 0 - ($25 & 1) ^ $25 >>> 1;
  $35 = $0 & 0 - ($30 & 1) ^ $30 >>> 1;
  $40 = $0 & 0 - ($35 & 1) ^ $35 >>> 1;
  $45 = $0 & 0 - ($40 & 1) ^ $40 >>> 1;
  $i$04 = $i$04 + 1 | 0;
  if (($i$04 | 0) == ($_n | 0)) {
   $$lcssa = $45;
   break;
  } else $key24$03 = $45;
 }
 $key24$0$lcssa = $$lcssa & 16777215 ^ 16777215;
 return $key24$0$lcssa | 0;
}

function _gmskframesync_destroy($_q) {
 $_q = $_q | 0;
 if (HEAP32[$_q + 236 >> 2] | 0) {
  _windowcf_destroy(HEAP32[$_q + 240 >> 2] | 0);
  _windowf_destroy(HEAP32[$_q + 244 >> 2] | 0);
  _windowf_destroy(HEAP32[$_q + 248 >> 2] | 0);
  _windowf_destroy(HEAP32[$_q + 252 >> 2] | 0);
 }
 _iirfilt_crcf_destroy(HEAP32[$_q >> 2] | 0);
 _firpfb_rrrf_destroy(HEAP32[$_q + 76 >> 2] | 0);
 _firpfb_rrrf_destroy(HEAP32[$_q + 80 >> 2] | 0);
 _nco_crcf_destroy(HEAP32[$_q + 128 >> 2] | 0);
 _detector_cccf_destroy(HEAP32[$_q + 108 >> 2] | 0);
 _windowcf_destroy(HEAP32[$_q + 124 >> 2] | 0);
 _free(HEAP32[$_q + 136 >> 2] | 0);
 _free(HEAP32[$_q + 140 >> 2] | 0);
 _packetizer_destroy(HEAP32[$_q + 168 >> 2] | 0);
 _free(HEAP32[$_q + 156 >> 2] | 0);
 _free(HEAP32[$_q + 160 >> 2] | 0);
 _free(HEAP32[$_q + 164 >> 2] | 0);
 _packetizer_destroy(HEAP32[$_q + 208 >> 2] | 0);
 _free(HEAP32[$_q + 200 >> 2] | 0);
 _free(HEAP32[$_q + 204 >> 2] | 0);
 _free($_q);
 return;
}

function _liquid_csqrtf($agg$result, $_z) {
 $agg$result = $agg$result | 0;
 $_z = $_z | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $12 = 0.0, $14 = 0, $15 = 0.0, $3 = 0, $5 = 0.0, $6 = 0.0, $9 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 8 | 0;
 $0 = sp;
 $1 = HEAP32[$_z >> 2] | 0;
 $3 = HEAP32[$_z + 4 >> 2] | 0;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $3;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 $5 = +_cabsf($$byval_copy);
 $6 = (HEAP32[tempDoublePtr >> 2] = $1, +HEAPF32[tempDoublePtr >> 2]);
 $9 = +Math_sqrt(+(($5 + $6) * .5));
 $12 = +Math_sqrt(+(($5 - $6) * .5));
 $14 = (HEAP32[tempDoublePtr >> 2] = $3, +HEAPF32[tempDoublePtr >> 2]) > 0.0;
 $15 = $12 * 0.0;
 HEAPF32[$agg$result >> 2] = $9 + ($14 ? $15 : -$15);
 HEAPF32[$agg$result + 4 >> 2] = $14 ? $12 : -$12;
 STACKTOP = sp;
 return;
}

function _ofdmflexframegen_setprops($_q, $_props) {
 $_q = $_q | 0;
 $_props = $_props | 0;
 var $11 = 0, $_props$tr = 0, $_props$tr$lcssa = 0;
 $_props$tr = $_props;
 while (1) if (!$_props$tr) $_props$tr = gb + 564 | 0; else {
  $_props$tr$lcssa = $_props$tr;
  break;
 }
 if (((HEAP32[$_props$tr$lcssa >> 2] | 0) + -1 | 0) >>> 0 > 5) {
  _fwrite(gb + 28659 | 0, 67, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if (!(HEAP32[$_props$tr$lcssa + 4 >> 2] | 0)) {
  $11 = HEAP32[gb + 9336 >> 2] | 0;
  _fwrite(gb + 28727 | 0, 67, 1, $11) | 0;
  _exit(1);
 }
 if (!(HEAP32[$_props$tr$lcssa + 8 >> 2] | 0)) {
  $11 = HEAP32[gb + 9336 >> 2] | 0;
  _fwrite(gb + 28727 | 0, 67, 1, $11) | 0;
  _exit(1);
 }
 if (!(HEAP32[$_props$tr$lcssa + 12 >> 2] | 0)) {
  _fwrite(gb + 28795 | 0, 74, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 } else {
  _memmove($_q + 140 | 0, $_props$tr$lcssa | 0, 16) | 0;
  _ofdmflexframegen_reconfigure($_q);
  return;
 }
}

function _crc16_generate_key($_msg, $_n) {
 $_msg = $_msg | 0;
 $_n = $_n | 0;
 var $$lcssa = 0, $0 = 0, $10 = 0, $15 = 0, $20 = 0, $25 = 0, $30 = 0, $35 = 0, $40 = 0, $45 = 0, $5 = 0, $i$04 = 0, $key16$0$lcssa = 0, $key16$03 = 0;
 $0 = _liquid_reverse_uint16(32773) | 0;
 if (!$_n) {
  $key16$0$lcssa = 0;
  return $key16$0$lcssa | 0;
 } else {
  $i$04 = 0;
  $key16$03 = -1;
 }
 while (1) {
  $5 = (HEAPU8[$_msg + $i$04 >> 0] | 0) ^ $key16$03;
  $10 = $0 & 0 - ($5 & 1) ^ $5 >>> 1;
  $15 = $0 & 0 - ($10 & 1) ^ $10 >>> 1;
  $20 = $0 & 0 - ($15 & 1) ^ $15 >>> 1;
  $25 = $0 & 0 - ($20 & 1) ^ $20 >>> 1;
  $30 = $0 & 0 - ($25 & 1) ^ $25 >>> 1;
  $35 = $0 & 0 - ($30 & 1) ^ $30 >>> 1;
  $40 = $0 & 0 - ($35 & 1) ^ $35 >>> 1;
  $45 = $0 & 0 - ($40 & 1) ^ $40 >>> 1;
  $i$04 = $i$04 + 1 | 0;
  if (($i$04 | 0) == ($_n | 0)) {
   $$lcssa = $45;
   break;
  } else $key16$03 = $45;
 }
 $key16$0$lcssa = $$lcssa & 65535 ^ 65535;
 return $key16$0$lcssa | 0;
}

function _matrixf_trans($_X, $_XR, $_XC) {
 $_X = $_X | 0;
 $_XR = $_XR | 0;
 $_XC = $_XC | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $4 = 0, $5 = 0, $i$01 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 32 | 0;
 $0 = sp + 16 | 0;
 $1 = sp;
 _matrixf_hermitian($_X, $_XR, $_XC);
 $2 = Math_imul($_XC, $_XR) | 0;
 if (!$2) {
  STACKTOP = sp;
  return;
 }
 $4 = $1 + 8 | 0;
 $i$01 = 0;
 do {
  $5 = $_X + ($i$01 << 2) | 0;
  HEAPF64[$1 >> 3] = +HEAPF32[$5 >> 2];
  HEAPF64[$4 >> 3] = 0.0;
  HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$1 + 12 >> 2];
  _conj($0, $$byval_copy);
  HEAPF32[$5 >> 2] = +HEAPF64[$0 >> 3];
  $i$01 = $i$01 + 1 | 0;
 } while (($i$01 | 0) != ($2 | 0));
 STACKTOP = sp;
 return;
}

function _fec_rep5_decode($_q, $_dec_msg_len, $_msg_enc, $_msg_dec) {
 $_q = $_q | 0;
 $_dec_msg_len = $_dec_msg_len | 0;
 $_msg_enc = $_msg_enc | 0;
 $_msg_dec = $_msg_dec | 0;
 var $1 = 0, $11 = 0, $14 = 0, $17 = 0, $2 = 0, $22 = 0, $26 = 0, $3 = 0, $5 = 0, $8 = 0, $i$01 = 0;
 if (!$_dec_msg_len) return;
 $1 = $_dec_msg_len << 1;
 $2 = $_dec_msg_len * 3 | 0;
 $3 = $_dec_msg_len << 2;
 $i$01 = 0;
 do {
  $5 = HEAP8[$_msg_enc + $i$01 >> 0] | 0;
  $8 = HEAP8[$_msg_enc + ($i$01 + $_dec_msg_len) >> 0] | 0;
  $11 = HEAP8[$_msg_enc + ($i$01 + $1) >> 0] | 0;
  $14 = HEAP8[$_msg_enc + ($i$01 + $2) >> 0] | 0;
  $17 = HEAP8[$_msg_enc + ($i$01 + $3) >> 0] | 0;
  $22 = $11 & $5;
  $26 = $11 & $8;
  HEAP8[$_msg_dec + $i$01 >> 0] = ($26 | $22) & $14 | $17 & $22 | $14 & $5 & $17 | $17 & $26 | $14 & $8 & $17 | $14 & $11 & $17 | $8 & $5 & ($14 | $11 | $17);
  $i$01 = $i$01 + 1 | 0;
 } while (($i$01 | 0) != ($_dec_msg_len | 0));
 return;
}

function _nco_crcf_mix_up($_q, $_x, $_y) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 $_y = $_y | 0;
 var $0 = 0, $11 = 0.0, $16 = 0.0, $17 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $3 = 0.0, $5 = 0.0, $9 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 mftCall_vi(HEAP32[$_q + 1048 >> 2] | 0, $_q | 0);
 $3 = +HEAPF32[$_x >> 2];
 $5 = +HEAPF32[$_x + 4 >> 2];
 $9 = +HEAPF32[$_q + 1040 >> 2];
 $11 = +HEAPF32[$_q + 1044 >> 2] + $9 * 0.0;
 $16 = $3 * $11 - $5 * $9;
 $17 = $3 * $9 + $5 * $11;
 if (!(($16 != $16 | 0.0 != 0.0) & ($17 != $17 | 0.0 != 0.0))) {
  $24 = $16;
  $25 = $17;
  $23 = $_y + 4 | 0;
  HEAPF32[$_y >> 2] = $24;
  HEAPF32[$23 >> 2] = $25;
  STACKTOP = sp;
  return;
 }
 ___mulsc3($0, $3, $5, $11, $9);
 $24 = +HEAPF32[$0 >> 2];
 $25 = +HEAPF32[$0 + 4 >> 2];
 $23 = $_y + 4 | 0;
 HEAPF32[$_y >> 2] = $24;
 HEAPF32[$23 >> 2] = $25;
 STACKTOP = sp;
 return;
}

function _fec_hamming74_decode($_q, $_dec_msg_len, $_msg_enc, $_msg_dec) {
 $_q = $_q | 0;
 $_dec_msg_len = $_dec_msg_len | 0;
 $_msg_enc = $_msg_enc | 0;
 $_msg_dec = $_msg_dec | 0;
 var $0 = 0, $i$02 = 0, $k$01 = 0, $r0 = 0, $r1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $r0 = sp + 4 | 0;
 $r1 = sp;
 $0 = _fec_block_get_enc_msg_len($_dec_msg_len, 4, 7) | 0;
 if (!$_dec_msg_len) {
  STACKTOP = sp;
  return;
 } else {
  $i$02 = 0;
  $k$01 = 0;
 }
 while (1) {
  _liquid_unpack_array($_msg_enc, $0, $k$01, 7, $r0);
  _liquid_unpack_array($_msg_enc, $0, $k$01 + 7 | 0, 7, $r1);
  HEAP8[$_msg_dec + $i$02 >> 0] = HEAPU8[(HEAP32[$r1 >> 2] | 0) + (gb + 13629) >> 0] | 0 | (HEAPU8[(HEAP32[$r0 >> 2] | 0) + (gb + 13629) >> 0] | 0) << 4;
  $i$02 = $i$02 + 1 | 0;
  if (($i$02 | 0) == ($_dec_msg_len | 0)) break; else $k$01 = $k$01 + 14 | 0;
 }
 STACKTOP = sp;
 return;
}

function _fopen($filename, $mode) {
 $filename = $filename | 0;
 $mode = $mode | 0;
 var $$0 = 0, $5 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 if (!(_memchr(gb + 44873 | 0, HEAP8[$mode >> 0] | 0, 4) | 0)) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  $$0 = 0;
 } else {
  $5 = ___fmodeflags($mode) | 0 | 32768;
  HEAP32[$vararg_buffer >> 2] = $filename;
  HEAP32[$vararg_buffer + 4 >> 2] = $5;
  HEAP32[$vararg_buffer + 8 >> 2] = 438;
  $7 = ___syscall_ret(___syscall5(5, $vararg_buffer | 0) | 0) | 0;
  if (($7 | 0) < 0) $$0 = 0; else {
   $9 = ___fdopen($7, $mode) | 0;
   if (!$9) {
    HEAP32[$vararg_buffer3 >> 2] = $7;
    ___syscall6(6, $vararg_buffer3 | 0) | 0;
    $$0 = 0;
   } else $$0 = $9;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _json_object() {
 var $0 = 0, $10 = 0, $11 = 0, $16 = 0, $object = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 4 | 0;
 $object = sp;
 HEAP32[$object >> 2] = _jsonp_malloc(36) | 0;
 if (!(HEAP32[$object >> 2] | 0)) {
  HEAP32[$0 >> 2] = 0;
  $16 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $16 | 0;
 }
 if (!(HEAP32[gb + 45028 >> 2] | 0)) _json_object_seed(0);
 _json_init(HEAP32[$object >> 2] | 0, 0);
 $10 = (_hashtable_init((HEAP32[$object >> 2] | 0) + 8 | 0) | 0) != 0;
 $11 = HEAP32[$object >> 2] | 0;
 if ($10) {
  _jsonp_free($11);
  HEAP32[$0 >> 2] = 0;
  $16 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $16 | 0;
 } else {
  HEAP32[$11 + 28 >> 2] = 0;
  HEAP32[(HEAP32[$object >> 2] | 0) + 32 >> 2] = 0;
  HEAP32[$0 >> 2] = HEAP32[$object >> 2];
  $16 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $16 | 0;
 }
 return 0;
}

function _scalbn($x, $n) {
 $x = +$x;
 $n = $n | 0;
 var $$0 = 0, $1 = 0.0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $5 = 0, $8 = 0.0, $9 = 0, $y$0 = 0.0;
 if (($n | 0) > 1023) {
  $1 = $x * 8988465674311579538646525.0e283;
  $2 = $n + -1023 | 0;
  if (($2 | 0) > 1023) {
   $5 = $n + -2046 | 0;
   $$0 = ($5 | 0) > 1023 ? 1023 : $5;
   $y$0 = $1 * 8988465674311579538646525.0e283;
  } else {
   $$0 = $2;
   $y$0 = $1;
  }
 } else if (($n | 0) < -1022) {
  $8 = $x * 2.2250738585072014e-308;
  $9 = $n + 1022 | 0;
  if (($9 | 0) < -1022) {
   $12 = $n + 2044 | 0;
   $$0 = ($12 | 0) < -1022 ? -1022 : $12;
   $y$0 = $8 * 2.2250738585072014e-308;
  } else {
   $$0 = $9;
   $y$0 = $8;
  }
 } else {
  $$0 = $n;
  $y$0 = $x;
 }
 $15 = _bitshift64Shl($$0 + 1023 | 0, 0, 52) | 0;
 $16 = getTempRet0() | 0;
 HEAP32[tempDoublePtr >> 2] = $15;
 HEAP32[tempDoublePtr + 4 >> 2] = $16;
 return +($y$0 * +HEAPF64[tempDoublePtr >> 3]);
}

function _firpfb_crcf_execute($_q, $_i, $_y) {
 $_q = $_q | 0;
 $_i = $_i | 0;
 $_y = $_y | 0;
 var $1 = 0, $12 = 0.0, $14 = 0, $17 = 0.0, $3 = 0, $r = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $r = sp + 8 | 0;
 $1 = HEAP32[$_q + 12 >> 2] | 0;
 if ($1 >>> 0 > $_i >>> 0) {
  _windowcf_read(HEAP32[$_q + 16 >> 2] | 0, $r);
  _dotprod_crcf_execute(HEAP32[(HEAP32[$_q + 20 >> 2] | 0) + ($_i << 2) >> 2] | 0, HEAP32[$r >> 2] | 0, $_y);
  $12 = +HEAPF32[$_q + 24 >> 2];
  $14 = $_y + 4 | 0;
  $17 = $12 * +HEAPF32[$14 >> 2];
  HEAPF32[$_y >> 2] = $12 * +HEAPF32[$_y >> 2];
  HEAPF32[$14 >> 2] = $17;
  STACKTOP = sp;
  return;
 } else {
  $3 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = $_i;
  HEAP32[$vararg_buffer + 4 >> 2] = $1;
  _fprintf($3, gb + 21457 | 0, $vararg_buffer) | 0;
  _exit(1);
 }
}

function _lex_init($lex, $get, $flags, $data) {
 $lex = $lex | 0;
 $get = $get | 0;
 $flags = $flags | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 16 | 0;
 $1 = sp + 12 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$1 >> 2] = $lex;
 HEAP32[$2 >> 2] = $get;
 HEAP32[$3 >> 2] = $flags;
 HEAP32[$4 >> 2] = $data;
 _stream_init(HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0, HEAP32[$4 >> 2] | 0);
 if (_strbuffer_init((HEAP32[$1 >> 2] | 0) + 40 | 0) | 0) {
  HEAP32[$0 >> 2] = -1;
  $17 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $17 | 0;
 } else {
  HEAP32[(HEAP32[$1 >> 2] | 0) + 52 >> 2] = HEAP32[$3 >> 2];
  HEAP32[(HEAP32[$1 >> 2] | 0) + 56 >> 2] = -1;
  HEAP32[$0 >> 2] = 0;
  $17 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $17 | 0;
 }
 return 0;
}

function ___overflow($f, $_c) {
 $f = $f | 0;
 $_c = $_c | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $6 = 0, $7 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $c = sp;
 $0 = $_c & 255;
 HEAP8[$c >> 0] = $0;
 $1 = $f + 16 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!$2) if (!(___towrite($f) | 0)) {
  $9 = HEAP32[$1 >> 2] | 0;
  label = 4;
 } else $$0 = -1; else {
  $9 = $2;
  label = 4;
 }
 do if ((label | 0) == 4) {
  $6 = $f + 20 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  if ($7 >>> 0 < $9 >>> 0) {
   $10 = $_c & 255;
   if (($10 | 0) != (HEAP8[$f + 75 >> 0] | 0)) {
    HEAP32[$6 >> 2] = $7 + 1;
    HEAP8[$7 >> 0] = $0;
    $$0 = $10;
    break;
   }
  }
  if ((mftCall_iiii(HEAP32[$f + 36 >> 2] | 0, $f | 0, $c | 0, 1) | 0) == 1) $$0 = HEAPU8[$c >> 0] | 0; else $$0 = -1;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _demodulator_create($opt) {
 $opt = $opt | 0;
 var $$0 = 0, $1 = 0, $2 = 0, $7 = 0;
 if (!$opt) {
  $$0 = 0;
  return $$0 | 0;
 }
 $1 = _malloc(28) | 0;
 HEAP32[$1 >> 2] = HEAP32[$opt >> 2];
 HEAP32[$1 + 4 >> 2] = HEAP32[$opt + 4 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[$opt + 8 >> 2];
 HEAP32[$1 + 12 >> 2] = HEAP32[$opt + 12 >> 2];
 HEAP32[$1 + 16 >> 2] = HEAP32[$opt + 16 >> 2];
 $2 = _nco_crcf_create(0) | 0;
 HEAP32[$1 + 20 >> 2] = $2;
 _nco_crcf_set_phase($2, 0.0);
 _nco_crcf_set_frequency($2, +HEAPF32[$opt + 16 >> 2]);
 $7 = HEAP32[$opt + 4 >> 2] | 0;
 if ($7 >>> 0 > 1) {
  HEAP32[$1 + 24 >> 2] = _firdecim_crcf_create_prototype(HEAP32[$opt >> 2] | 0, $7, HEAP32[$opt + 8 >> 2] | 0, +HEAPF32[$opt + 12 >> 2], 0.0) | 0;
  $$0 = $1;
  return $$0 | 0;
 } else {
  HEAP32[$1 + 4 >> 2] = 1;
  HEAP32[$1 + 8 >> 2] = 0;
  HEAP32[$1 + 24 >> 2] = 0;
  $$0 = $1;
  return $$0 | 0;
 }
 return 0;
}

function _liquid_getopt_str2crc($_str) {
 $_str = $_str | 0;
 var $$0 = 0, $21 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 if (!(_strcmp($_str, HEAP32[gb + 0 >> 2] | 0) | 0)) $$0 = 0; else if (!(_strcmp($_str, HEAP32[gb + 0 + 8 >> 2] | 0) | 0)) $$0 = 1; else if (!(_strcmp($_str, HEAP32[gb + 0 + 16 >> 2] | 0) | 0)) $$0 = 2; else if (!(_strcmp($_str, HEAP32[gb + 0 + 24 >> 2] | 0) | 0)) $$0 = 3; else if (!(_strcmp($_str, HEAP32[gb + 0 + 32 >> 2] | 0) | 0)) $$0 = 4; else if (!(_strcmp($_str, HEAP32[gb + 0 + 40 >> 2] | 0) | 0)) $$0 = 5; else if (!(_strcmp($_str, HEAP32[gb + 0 + 48 >> 2] | 0) | 0)) $$0 = 6; else {
  $21 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = $_str;
  _fprintf($21, gb + 11320 | 0, $vararg_buffer) | 0;
  $$0 = 0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _iirfilt_crcf_reset($_q) {
 $_q = $_q | 0;
 var $10 = 0, $18 = 0, $3 = 0, $6 = 0, $7 = 0, $i$03 = 0, $i$14 = 0, dest = 0, stop = 0;
 if ((HEAP32[$_q + 24 >> 2] | 0) == 1) {
  $7 = $_q + 32 | 0;
  if (!(HEAP32[$7 >> 2] | 0)) return;
  $10 = $_q + 28 | 0;
  $i$03 = 0;
  do {
   dest = (HEAP32[(HEAP32[$10 >> 2] | 0) + ($i$03 << 2) >> 2] | 0) + 24 | 0;
   stop = dest + 72 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   $i$03 = $i$03 + 1 | 0;
  } while ($i$03 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0);
  return;
 } else {
  $3 = $_q + 12 | 0;
  if (!(HEAP32[$3 >> 2] | 0)) return;
  $6 = $_q + 8 | 0;
  $i$14 = 0;
  do {
   $18 = HEAP32[$6 >> 2] | 0;
   HEAPF32[$18 + ($i$14 << 3) >> 2] = 0.0;
   HEAPF32[$18 + ($i$14 << 3) + 4 >> 2] = 0.0;
   $i$14 = $i$14 + 1 | 0;
  } while ($i$14 >>> 0 < (HEAP32[$3 >> 2] | 0) >>> 0);
  return;
 }
}

function _strerror($e) {
 $e = $e | 0;
 var $$lcssa = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
 $i$03 = 0;
 while (1) {
  if ((HEAPU8[gb + 42928 + $i$03 >> 0] | 0) == ($e | 0)) {
   $i$03$lcssa = $i$03;
   label = 2;
   break;
  }
  $i$03 = $i$03 + 1 | 0;
  if (($i$03 | 0) == 87) {
   $i$12 = 87;
   $s$01 = gb + 43016 | 0;
   label = 5;
   break;
  }
 }
 if ((label | 0) == 2) if (!$i$03$lcssa) $s$0$lcssa = gb + 43016 | 0; else {
  $i$12 = $i$03$lcssa;
  $s$01 = gb + 43016 | 0;
  label = 5;
 }
 if ((label | 0) == 5) while (1) {
  label = 0;
  $s$1 = $s$01;
  while (1) {
   $9 = $s$1 + 1 | 0;
   if (!(HEAP8[$s$1 >> 0] | 0)) {
    $$lcssa = $9;
    break;
   } else $s$1 = $9;
  }
  $i$12 = $i$12 + -1 | 0;
  if (!$i$12) {
   $s$0$lcssa = $$lcssa;
   break;
  } else {
   $s$01 = $$lcssa;
   label = 5;
  }
 }
 return $s$0$lcssa | 0;
}

function _wcrtomb($s, $wc, $st) {
 $s = $s | 0;
 $wc = $wc | 0;
 $st = $st | 0;
 var $$0 = 0;
 do if (!$s) $$0 = 1; else {
  if ($wc >>> 0 < 128) {
   HEAP8[$s >> 0] = $wc;
   $$0 = 1;
   break;
  }
  if ($wc >>> 0 < 2048) {
   HEAP8[$s >> 0] = $wc >>> 6 | 192;
   HEAP8[$s + 1 >> 0] = $wc & 63 | 128;
   $$0 = 2;
   break;
  }
  if ($wc >>> 0 < 55296 | ($wc & -8192 | 0) == 57344) {
   HEAP8[$s >> 0] = $wc >>> 12 | 224;
   HEAP8[$s + 1 >> 0] = $wc >>> 6 & 63 | 128;
   HEAP8[$s + 2 >> 0] = $wc & 63 | 128;
   $$0 = 3;
   break;
  }
  if (($wc + -65536 | 0) >>> 0 < 1048576) {
   HEAP8[$s >> 0] = $wc >>> 18 | 240;
   HEAP8[$s + 1 >> 0] = $wc >>> 12 & 63 | 128;
   HEAP8[$s + 2 >> 0] = $wc >>> 6 & 63 | 128;
   HEAP8[$s + 3 >> 0] = $wc & 63 | 128;
   $$0 = 4;
   break;
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 84;
   $$0 = -1;
   break;
  }
 } while (0);
 return $$0 | 0;
}

function _fft_create_plan($_nfft, $_x, $_y, $_dir, $_flags) {
 $_nfft = $_nfft | 0;
 $_x = $_x | 0;
 $_y = $_y | 0;
 $_dir = $_dir | 0;
 $_flags = $_flags | 0;
 var $$0 = 0;
 switch (_liquid_fft_estimate_method($_nfft) | 0) {
 case 1:
  {
   $$0 = _fft_create_plan_radix2($_nfft, $_x, $_y, $_dir, $_flags) | 0;
   return $$0 | 0;
  }
 case 2:
  {
   $$0 = _fft_create_plan_mixed_radix($_nfft, $_x, $_y, $_dir, $_flags) | 0;
   return $$0 | 0;
  }
 case 3:
  {
   $$0 = _fft_create_plan_rader($_nfft, $_x, $_y, $_dir, $_flags) | 0;
   return $$0 | 0;
  }
 case 4:
  {
   $$0 = _fft_create_plan_rader2($_nfft, $_x, $_y, $_dir, $_flags) | 0;
   return $$0 | 0;
  }
 case 5:
  {
   $$0 = _fft_create_plan_dft($_nfft, $_x, $_y, $_dir, $_flags) | 0;
   return $$0 | 0;
  }
 default:
  {
   _fwrite(gb + 40552 | 0, 53, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
   _exit(1);
  }
 }
 return 0;
}

function _windowcf_create($_n) {
 $_n = $_n | 0;
 var $1 = 0, $10 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 if (!$_n) {
  $1 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = gb + 40304;
  _fprintf($1, gb + 40307 | 0, $vararg_buffer) | 0;
  _exit(1);
 } else {
  $2 = _malloc(28) | 0;
  HEAP32[$2 + 4 >> 2] = $_n;
  $4 = _liquid_msb_index($_n) | 0;
  HEAP32[$2 + 8 >> 2] = $4;
  $6 = 1 << $4;
  HEAP32[$2 + 12 >> 2] = $6;
  $8 = $6 + -1 | 0;
  HEAP32[$2 + 16 >> 2] = $8;
  $10 = $8 + $_n | 0;
  HEAP32[$2 + 20 >> 2] = $10;
  $12 = $10 << 3;
  $13 = _malloc($12) | 0;
  HEAP32[$2 >> 2] = $13;
  HEAP32[$2 + 24 >> 2] = 0;
  _memset($13 | 0, 0, $12 | 0) | 0;
  STACKTOP = sp;
  return $2 | 0;
 }
 return 0;
}

function _windowf_create($_n) {
 $_n = $_n | 0;
 var $1 = 0, $10 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 if (!$_n) {
  $1 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = gb + 40302;
  _fprintf($1, gb + 40307 | 0, $vararg_buffer) | 0;
  _exit(1);
 } else {
  $2 = _malloc(28) | 0;
  HEAP32[$2 + 4 >> 2] = $_n;
  $4 = _liquid_msb_index($_n) | 0;
  HEAP32[$2 + 8 >> 2] = $4;
  $6 = 1 << $4;
  HEAP32[$2 + 12 >> 2] = $6;
  $8 = $6 + -1 | 0;
  HEAP32[$2 + 16 >> 2] = $8;
  $10 = $8 + $_n | 0;
  HEAP32[$2 + 20 >> 2] = $10;
  $12 = $10 << 2;
  $13 = _malloc($12) | 0;
  HEAP32[$2 >> 2] = $13;
  HEAP32[$2 + 24 >> 2] = 0;
  _memset($13 | 0, 0, $12 | 0) | 0;
  STACKTOP = sp;
  return $2 | 0;
 }
 return 0;
}

function _frexp($x, $e) {
 $x = +$x;
 $e = $e | 0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $2 = 0, $4 = 0, $7 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $2 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
 getTempRet0() | 0;
 $4 = $2 & 2047;
 switch ($4 | 0) {
 case 0:
  {
   if ($x != 0.0) {
    $7 = +_frexp($x * 18446744073709551616.0, $e);
    $$01 = $7;
    $storemerge = (HEAP32[$e >> 2] | 0) + -64 | 0;
   } else {
    $$01 = $x;
    $storemerge = 0;
   }
   HEAP32[$e >> 2] = $storemerge;
   $$0 = $$01;
   break;
  }
 case 2047:
  {
   $$0 = $x;
   break;
  }
 default:
  {
   HEAP32[$e >> 2] = $4 + -1022;
   HEAP32[tempDoublePtr >> 2] = $0;
   HEAP32[tempDoublePtr + 4 >> 2] = $1 & -2146435073 | 1071644672;
   $$0 = +HEAPF64[tempDoublePtr >> 3];
  }
 }
 return +$$0;
}

function ___ldexp_cexpf($agg$result, $z, $expt) {
 $agg$result = $agg$result | 0;
 $z = $z | 0;
 $expt = $expt | 0;
 var $11 = 0, $12 = 0, $15 = 0.0, $19 = 0.0, $2 = 0.0, $27 = 0.0, $4 = 0.0, $5 = 0, $9 = 0.0;
 $2 = +HEAPF32[$z + 4 >> 2];
 $4 = +Math_exp(+(+HEAPF32[$z >> 2] + -162.88958740234375));
 $5 = (HEAPF32[tempDoublePtr >> 2] = $4, HEAP32[tempDoublePtr >> 2] | 0);
 $9 = (HEAP32[tempDoublePtr >> 2] = $5 & 8388607 | 2130706432, +HEAPF32[tempDoublePtr >> 2]);
 $11 = $expt + -19 + ($5 >>> 23) | 0;
 $12 = ($11 | 0) / 2 | 0;
 $15 = (HEAP32[tempDoublePtr >> 2] = ($12 << 23) + 1065353216, +HEAPF32[tempDoublePtr >> 2]);
 $19 = (HEAP32[tempDoublePtr >> 2] = ($11 - $12 << 23) + 1065353216, +HEAPF32[tempDoublePtr >> 2]);
 $27 = +Math_sin(+$2) * $9 * $15 * $19;
 HEAPF32[$agg$result >> 2] = +Math_cos(+$2) * $9 * $15 * $19;
 HEAPF32[$agg$result + 4 >> 2] = $27;
 return;
}

function _modem_init_map($_q) {
 $_q = $_q | 0;
 var $0 = 0, $1 = 0, $10 = 0, $17 = 0, $4 = 0, $5 = 0, $9 = 0;
 $0 = $_q + 76 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) {
  _fwrite(gb + 31299 | 0, 65, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 $4 = $_q + 8 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if (($5 + -1 | 0) >>> 0 > 65535) {
  _fwrite(gb + 31365 | 0, 60, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 $9 = $_q + 236 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 if (!$10) {
  _fwrite(gb + 31426 | 0, 70, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if (!$5) return;
 mftCall_viii($10 | 0, $_q | 0, 0, $1 | 0);
 if ((HEAP32[$4 >> 2] | 0) >>> 0 > 1) $17 = 1; else return;
 do {
  mftCall_viii(HEAP32[$9 >> 2] | 0, $_q | 0, $17 | 0, (HEAP32[$0 >> 2] | 0) + ($17 << 3) | 0);
  $17 = $17 + 1 | 0;
 } while ($17 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0);
 return;
}

function _json_integer($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $17 = 0, $2 = 0, $20 = 0, $25 = 0, $3 = 0, $4 = 0, $integer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $2 = sp + 12 | 0;
 $3 = sp;
 $integer = sp + 8 | 0;
 $4 = $3;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$4 + 4 >> 2] = $1;
 HEAP32[$integer >> 2] = _jsonp_malloc(16) | 0;
 if (HEAP32[$integer >> 2] | 0) {
  _json_init(HEAP32[$integer >> 2] | 0, 3);
  $12 = $3;
  $17 = HEAP32[$12 + 4 >> 2] | 0;
  $20 = (HEAP32[$integer >> 2] | 0) + 8 | 0;
  HEAP32[$20 >> 2] = HEAP32[$12 >> 2];
  HEAP32[$20 + 4 >> 2] = $17;
  HEAP32[$2 >> 2] = HEAP32[$integer >> 2];
  $25 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $25 | 0;
 } else {
  HEAP32[$2 >> 2] = 0;
  $25 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $25 | 0;
 }
 return 0;
}

function _fec_rep3_decode_soft($_q, $_dec_msg_len, $_msg_enc, $_msg_dec) {
 $_q = $_q | 0;
 $_dec_msg_len = $_dec_msg_len | 0;
 $_msg_enc = $_msg_enc | 0;
 $_msg_dec = $_msg_dec | 0;
 var $1 = 0, $2 = 0, $27 = 0, $3 = 0, $5 = 0, $7 = 0, $i$02 = 0, $j$01 = 0;
 if (!$_dec_msg_len) return;
 $1 = $_dec_msg_len << 1;
 $i$02 = 0;
 do {
  $2 = $_msg_dec + $i$02 | 0;
  HEAP8[$2 >> 0] = 0;
  $3 = $i$02 << 3;
  $5 = $i$02 + $_dec_msg_len << 3;
  $7 = $i$02 + $1 << 3;
  $27 = 0;
  $j$01 = 0;
  do {
   $27 = $27 & 255 | (((HEAPU8[$_msg_enc + ($j$01 + $5) >> 0] | 0) + (HEAPU8[$_msg_enc + ($j$01 + $3) >> 0] | 0) + (HEAPU8[$_msg_enc + ($j$01 + $7) >> 0] | 0) | 0) >>> 0 > 383 ? 1 << 7 - $j$01 : 0);
   HEAP8[$2 >> 0] = $27;
   $j$01 = $j$01 + 1 | 0;
  } while (($j$01 | 0) != 8);
  $i$02 = $i$02 + 1 | 0;
 } while (($i$02 | 0) != ($_dec_msg_len | 0));
 return;
}

function _json_object_seed($seed) {
 $seed = $seed | 0;
 var $0 = 0, $1 = 0, $2 = 0, $6 = 0, $new_seed = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 12 | 0;
 $new_seed = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$0 >> 2] = $seed;
 HEAP32[$new_seed >> 2] = HEAP32[$0 >> 2];
 if (HEAP32[gb + 45028 >> 2] | 0) {
  STACKTOP = sp;
  return;
 }
 $6 = HEAP8[gb + 45576 >> 0] | 0;
 HEAP8[gb + 45576 >> 0] = 1;
 if ($6 << 24 >> 24 != 0 | 0) {
  do {
   _sched_yield() | 0;
   HEAP32[$2 >> 2] = HEAP32[gb + 45028 >> 2];
  } while (!(HEAP32[$2 >> 2] | 0));
  STACKTOP = sp;
  return;
 }
 if (!(HEAP32[$new_seed >> 2] | 0)) HEAP32[$new_seed >> 2] = _generate_seed() | 0;
 HEAP32[$1 >> 2] = HEAP32[$new_seed >> 2];
 HEAP32[gb + 45028 >> 2] = HEAP32[$1 >> 2];
 STACKTOP = sp;
 return;
}

function _strbuffer_pop($strbuff) {
 $strbuff = $strbuff | 0;
 var $0 = 0, $1 = 0, $21 = 0, $7 = 0, $9 = 0, $c = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 5 | 0;
 $1 = sp;
 $c = sp + 4 | 0;
 HEAP32[$1 >> 2] = $strbuff;
 if ((HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) >>> 0 > 0) {
  $7 = (HEAP32[$1 >> 2] | 0) + 4 | 0;
  $9 = (HEAP32[$7 >> 2] | 0) + -1 | 0;
  HEAP32[$7 >> 2] = $9;
  HEAP8[$c >> 0] = HEAP8[(HEAP32[HEAP32[$1 >> 2] >> 2] | 0) + $9 >> 0] | 0;
  HEAP8[(HEAP32[HEAP32[$1 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0) >> 0] = 0;
  HEAP8[$0 >> 0] = HEAP8[$c >> 0] | 0;
  $21 = HEAP8[$0 >> 0] | 0;
  STACKTOP = sp;
  return $21 | 0;
 } else {
  HEAP8[$0 >> 0] = 0;
  $21 = HEAP8[$0 >> 0] | 0;
  STACKTOP = sp;
  return $21 | 0;
 }
 return 0;
}

function _insert_to_bucket($hashtable, $bucket, $list) {
 $hashtable = $hashtable | 0;
 $bucket = $bucket | 0;
 $list = $list | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$0 >> 2] = $hashtable;
 HEAP32[$1 >> 2] = $bucket;
 HEAP32[$2 >> 2] = $list;
 if (_bucket_is_empty(HEAP32[$0 >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0) {
  _list_insert((HEAP32[$0 >> 2] | 0) + 12 | 0, HEAP32[$2 >> 2] | 0);
  $10 = HEAP32[$2 >> 2] | 0;
  HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] = $10;
  HEAP32[HEAP32[$1 >> 2] >> 2] = $10;
  STACKTOP = sp;
  return;
 } else {
  _list_insert(HEAP32[HEAP32[$1 >> 2] >> 2] | 0, HEAP32[$2 >> 2] | 0);
  HEAP32[HEAP32[$1 >> 2] >> 2] = HEAP32[$2 >> 2];
  STACKTOP = sp;
  return;
 }
}

function _fec_hamming74_decode_soft($_q, $_dec_msg_len, $_msg_enc, $_msg_dec) {
 $_q = $_q | 0;
 $_dec_msg_len = $_dec_msg_len | 0;
 $_msg_enc = $_msg_enc | 0;
 $_msg_dec = $_msg_dec | 0;
 var $0 = 0, $3 = 0, $i$02 = 0, $k$0$lcssa = 0, $k$01 = 0;
 $0 = _fec_block_get_enc_msg_len($_dec_msg_len, 4, 7) | 0;
 if (!$_dec_msg_len) $k$0$lcssa = 0; else {
  $i$02 = 0;
  $k$01 = 0;
  while (1) {
   $3 = _fecsoft_hamming74_decode($_msg_enc + $k$01 | 0) | 0;
   HEAP8[$_msg_dec + $i$02 >> 0] = ($3 & 255) << 4 | (_fecsoft_hamming74_decode($_msg_enc + ($k$01 + 7) | 0) | 0) & 255;
   $i$02 = $i$02 + 1 | 0;
   if (($i$02 | 0) == ($_dec_msg_len | 0)) break; else $k$01 = $k$01 + 14 | 0;
  }
  $k$0$lcssa = $_dec_msg_len * 14 | 0;
 }
 if (($k$0$lcssa | 0) == ($0 << 3 | 0)) return; else ___assert_fail(gb + 14329 | 0, gb + 13757 | 0, 193, gb + 13785 | 0);
}

function _liquid_firdes_rkaiser_internal_isi($_k, $_m, $_beta, $_dt, $_rho, $_h) {
 $_k = $_k | 0;
 $_m = $_m | 0;
 $_beta = +$_beta;
 $_dt = +$_dt;
 $_rho = +$_rho;
 $_h = $_h | 0;
 var $6 = 0, $7 = 0.0, $isi_max = 0, $isi_rms = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $isi_max = sp + 4 | 0;
 $isi_rms = sp;
 if ($_rho < 0.0) _fwrite(gb + 25007 | 0, 55, 1, HEAP32[gb + 9336 >> 2] | 0) | 0; else if ($_rho > 1.0) _fwrite(gb + 25063 | 0, 55, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
 $6 = Math_imul($_k << 1, $_m) | 0 | 1;
 $7 = +($_k >>> 0);
 _liquid_firdes_kaiser($6, ((1.0 - $_rho) * $_beta + 1.0) * .5 / $7, +_estimate_req_filter_As($_beta * $_rho / $7, $6), $_dt, $_h);
 _liquid_filter_isi($_h, $_k, $_m, $isi_rms, $isi_max);
 STACKTOP = sp;
 return +(+HEAPF32[$isi_rms >> 2]);
}

function _fec_hamming84_decode_soft($_q, $_dec_msg_len, $_msg_enc, $_msg_dec) {
 $_q = $_q | 0;
 $_dec_msg_len = $_dec_msg_len | 0;
 $_msg_enc = $_msg_enc | 0;
 $_msg_dec = $_msg_dec | 0;
 var $0 = 0, $3 = 0, $i$02 = 0, $k$0$lcssa = 0, $k$01 = 0;
 $0 = _fec_block_get_enc_msg_len($_dec_msg_len, 4, 8) | 0;
 if (!$_dec_msg_len) $k$0$lcssa = 0; else {
  $i$02 = 0;
  $k$01 = 0;
  while (1) {
   $3 = _fecsoft_hamming84_decode($_msg_enc + $k$01 | 0) | 0;
   HEAP8[$_msg_dec + $i$02 >> 0] = ($3 & 255) << 4 | (_fecsoft_hamming84_decode($_msg_enc + ($k$01 | 8) | 0) | 0) & 255;
   $i$02 = $i$02 + 1 | 0;
   if (($i$02 | 0) == ($_dec_msg_len | 0)) break; else $k$01 = $k$01 + 16 | 0;
  }
  $k$0$lcssa = $_dec_msg_len << 4;
 }
 if (($k$0$lcssa | 0) == ($0 << 3 | 0)) return; else ___assert_fail(gb + 14329 | 0, gb + 14083 | 0, 181, gb + 14111 | 0);
}

function _ofdmframegen_write_S0b($_q, $_y) {
 $_q = $_q | 0;
 $_y = $_y | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $14 = 0, $2 = 0, $6 = 0, $8 = 0, $9 = 0, $i$01 = 0;
 $0 = HEAP32[$_q >> 2] | 0;
 $1 = $_q + 4 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $$pre = $_q + 64 | 0;
 if (($2 | 0) != (0 - $0 | 0)) {
  $6 = $0;
  $8 = $2;
  $i$01 = 0;
  do {
   $9 = (($6 + $i$01 - $8 | 0) >>> 0) % ($6 >>> 0) | 0;
   $10 = HEAP32[$$pre >> 2] | 0;
   $14 = HEAP32[$10 + ($9 << 3) + 4 >> 2] | 0;
   HEAP32[$_y + ($i$01 << 3) >> 2] = HEAP32[$10 + ($9 << 3) >> 2];
   HEAP32[$_y + ($i$01 << 3) + 4 >> 2] = $14;
   $i$01 = $i$01 + 1 | 0;
   $6 = HEAP32[$_q >> 2] | 0;
   $8 = HEAP32[$1 >> 2] | 0;
  } while ($i$01 >>> 0 < ($8 + $6 | 0) >>> 0);
 }
 _memmove(HEAP32[$_q + 20 >> 2] | 0, HEAP32[$$pre >> 2] | 0, HEAP32[$_q + 12 >> 2] << 3 | 0) | 0;
 return;
}

function _jsonp_strndup($str, $len) {
 $str = $str | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $15 = 0, $2 = 0, $new_str = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 12 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $new_str = sp;
 HEAP32[$1 >> 2] = $str;
 HEAP32[$2 >> 2] = $len;
 HEAP32[$new_str >> 2] = _jsonp_malloc((HEAP32[$2 >> 2] | 0) + 1 | 0) | 0;
 if (HEAP32[$new_str >> 2] | 0) {
  _memcpy(HEAP32[$new_str >> 2] | 0, HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0) | 0;
  HEAP8[(HEAP32[$new_str >> 2] | 0) + (HEAP32[$2 >> 2] | 0) >> 0] = 0;
  HEAP32[$0 >> 2] = HEAP32[$new_str >> 2];
  $15 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $15 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $15 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $15 | 0;
 }
 return 0;
}

function _ofdmframe_init_default_sctype($_M, $_p) {
 $_M = $_M | 0;
 $_p = $_p | 0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $6 = 0, $7 = 0, $9 = 0, $i$16 = 0, $i$25 = 0;
 if ($_M >>> 0 < 6) _fwrite(gb + 35570 | 0, 66, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
 $3 = ($_M >>> 0) / 10 | 0;
 $6 = $_M >>> 0 > 34 ? 8 : 4;
 $7 = $6 >>> 1;
 if ($_M | 0) _memset($_p | 0, 0, $_M | 0) | 0;
 $9 = ($_M >>> 1) - ($3 >>> 0 < 2 ? 2 : $3) | 0;
 $10 = $9 >>> 0 > 1;
 if (!$10) return;
 $11 = $6 + -1 | 0;
 $i$16 = 1;
 do {
  HEAP8[$_p + $i$16 >> 0] = ($i$16 + $7 & $11 | 0) == 0 ? 1 : 2;
  $i$16 = $i$16 + 1 | 0;
 } while ($i$16 >>> 0 < $9 >>> 0);
 if (!$10) return;
 $12 = $6 + -1 | 0;
 $i$25 = 1;
 do {
  HEAP8[$_p + ($_M - $i$25) >> 0] = ($i$25 + $7 & $12 | 0) == 0 ? 1 : 2;
  $i$25 = $i$25 + 1 | 0;
 } while ($i$25 >>> 0 < $9 >>> 0);
 return;
}

function _msequence_create($_m, $_g, $_a) {
 $_m = $_m | 0;
 $_g = $_g | 0;
 $_a = $_a | 0;
 var $$02 = 0, $$lcssa = 0, $10 = 0, $18 = 0, $2 = 0, $5 = 0, $8 = 0, $i$03 = 0;
 if (($_m + -2 | 0) >>> 0 > 13) {
  _fwrite(gb + 39186 | 0, 42, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 $2 = _malloc(24) | 0;
 HEAP32[$2 >> 2] = $_m;
 HEAP32[$2 + 4 >> 2] = $_g >>> 1;
 $5 = $2 + 8 | 0;
 HEAP32[$5 >> 2] = 0;
 if (!$_m) $18 = 0; else {
  $$02 = $_a;
  $8 = 0;
  $i$03 = 0;
  while (1) {
   $10 = $8 << 1 | $$02 & 1;
   $i$03 = $i$03 + 1 | 0;
   if ($i$03 >>> 0 >= $_m >>> 0) {
    $$lcssa = $10;
    break;
   } else {
    $$02 = $$02 >>> 1;
    $8 = $10;
   }
  }
  HEAP32[$5 >> 2] = $$lcssa;
  $18 = $$lcssa;
 }
 HEAP32[$2 + 12 >> 2] = (1 << $_m) + -1;
 HEAP32[$2 + 16 >> 2] = $18;
 HEAP32[$2 + 20 >> 2] = 0;
 return $2 | 0;
}

function _matrixf_hermitian($_X, $_XR, $_XC) {
 $_X = $_X | 0;
 $_XR = $_XR | 0;
 $_XC = $_XC | 0;
 var $0 = 0, $1 = 0, $6 = 0, $c$01$us = 0, $r$02$us = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($_XC, $_XR) | 0;
 $1 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($0 << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 _memcpy($1 | 0, $_X | 0, $0 << 2 | 0) | 0;
 if (($_XR | 0) == 0 | ($_XC | 0) == 0) {
  STACKTOP = sp;
  return;
 } else $r$02$us = 0;
 do {
  $6 = Math_imul($r$02$us, $_XC) | 0;
  $c$01$us = 0;
  do {
   HEAP32[$_X + ((Math_imul($c$01$us, $_XR) | 0) + $r$02$us << 2) >> 2] = HEAP32[$1 + ($c$01$us + $6 << 2) >> 2];
   $c$01$us = $c$01$us + 1 | 0;
  } while (($c$01$us | 0) != ($_XC | 0));
  $r$02$us = $r$02$us + 1 | 0;
 } while (($r$02$us | 0) != ($_XR | 0));
 STACKTOP = sp;
 return;
}

function ___divdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $7$0 = 0, $7$1 = 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
 $4$1 = getTempRet0() | 0;
 $7$0 = $2$0 ^ $1$0;
 $7$1 = $2$1 ^ $1$1;
 return _i64Subtract((___udivmoddi4($4$0, $4$1, _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0, getTempRet0() | 0, 0) | 0) ^ $7$0 | 0, (getTempRet0() | 0) ^ $7$1 | 0, $7$0 | 0, $7$1 | 0) | 0;
}

function _windowcf_push($_q, $_v) {
 $_q = $_q | 0;
 $_v = $_v | 0;
 var $$pre$phi3Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $11 = 0, $17 = 0, $20 = 0, $21 = 0, $22 = 0, $5 = 0, $7 = 0;
 $0 = $_q + 24 | 0;
 $5 = HEAP32[$_q + 16 >> 2] & (HEAP32[$0 >> 2] | 0) + 1;
 HEAP32[$0 >> 2] = $5;
 if (!$5) {
  $7 = HEAP32[$_q >> 2] | 0;
  $11 = $_q + 4 | 0;
  _memmove($7 | 0, $7 + (HEAP32[$_q + 12 >> 2] << 3) | 0, (HEAP32[$11 >> 2] << 3) + -8 | 0) | 0;
  $$pre$phi3Z2D = $_q;
  $$pre$phiZ2D = $11;
  $20 = HEAP32[$0 >> 2] | 0;
 } else {
  $$pre$phi3Z2D = $_q;
  $$pre$phiZ2D = $_q + 4 | 0;
  $20 = $5;
 }
 $17 = HEAP32[$_v + 4 >> 2] | 0;
 $21 = $20 + -1 + (HEAP32[$$pre$phiZ2D >> 2] | 0) | 0;
 $22 = HEAP32[$$pre$phi3Z2D >> 2] | 0;
 HEAP32[$22 + ($21 << 3) >> 2] = HEAP32[$_v >> 2];
 HEAP32[$22 + ($21 << 3) + 4 >> 2] = $17;
 return;
}

function _modulator_flush($m, $samples) {
 $m = $m | 0;
 $samples = $samples | 0;
 var $$0 = 0, $2 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $i$01 = 0, sp = 0;
 sp = STACKTOP;
 if (!$m) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $2 = HEAP32[$m + 8 >> 2] | 0;
 if (!$2) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $5 = ($2 << 1) + 50 | 0;
 $6 = _llvm_stacksave() | 0;
 $7 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($5 << 3) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 if ($5 | 0) {
  $i$01 = 0;
  do {
   HEAPF32[$7 + ($i$01 << 3) >> 2] = 0.0;
   HEAPF32[$7 + ($i$01 << 3) + 4 >> 2] = 0.0;
   $i$01 = $i$01 + 1 | 0;
  } while (($i$01 | 0) != ($5 | 0));
 }
 $9 = _modulator_emit($m, $7, $5, $samples) | 0;
 _llvm_stackrestore($6 | 0);
 $$0 = $9;
 STACKTOP = sp;
 return $$0 | 0;
}

function _string_get($data) {
 $data = $data | 0;
 var $0 = 0, $1 = 0, $14 = 0, $19 = 0, $c = 0, $stream = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $c = sp + 12 | 0;
 $stream = sp;
 HEAP32[$1 >> 2] = $data;
 HEAP32[$stream >> 2] = HEAP32[$1 >> 2];
 HEAP8[$c >> 0] = HEAP8[(HEAP32[HEAP32[$stream >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$stream >> 2] | 0) + 4 >> 2] | 0) >> 0] | 0;
 if (!(HEAP8[$c >> 0] | 0)) {
  HEAP32[$0 >> 2] = -1;
  $19 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $19 | 0;
 } else {
  $14 = (HEAP32[$stream >> 2] | 0) + 4 | 0;
  HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 1;
  HEAP32[$0 >> 2] = HEAPU8[$c >> 0];
  $19 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $19 | 0;
 }
 return 0;
}

function _flexframesync_destroy($_q) {
 $_q = $_q | 0;
 if (HEAP32[$_q + 208 >> 2] | 0) _windowcf_destroy(HEAP32[$_q + 216 >> 2] | 0);
 _free(HEAP32[$_q + 116 >> 2] | 0);
 _free(HEAP32[$_q + 120 >> 2] | 0);
 _free(HEAP32[$_q + 124 >> 2] | 0);
 _free(HEAP32[$_q + 136 >> 2] | 0);
 _free(HEAP32[$_q + 156 >> 2] | 0);
 _free(HEAP32[$_q + 168 >> 2] | 0);
 _free(HEAP32[$_q + 180 >> 2] | 0);
 _qpilotsync_destroy(HEAP32[$_q + 132 >> 2] | 0);
 _qpacketmodem_destroy(HEAP32[$_q + 144 >> 2] | 0);
 _modem_destroy(HEAP32[$_q + 164 >> 2] | 0);
 _qpacketmodem_destroy(HEAP32[$_q + 176 >> 2] | 0);
 _qdetector_cccf_destroy(HEAP32[$_q + 72 >> 2] | 0);
 _firpfb_crcf_destroy(HEAP32[$_q + 100 >> 2] | 0);
 _nco_crcf_destroy(HEAP32[$_q + 92 >> 2] | 0);
 _nco_crcf_destroy(HEAP32[$_q + 96 >> 2] | 0);
 _free($_q);
 return;
}

function _lex_steal_string($lex, $out_len) {
 $lex = $lex | 0;
 $out_len = $out_len | 0;
 var $0 = 0, $1 = 0, $19 = 0, $result = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $result = sp;
 HEAP32[$0 >> 2] = $lex;
 HEAP32[$1 >> 2] = $out_len;
 HEAP32[$result >> 2] = 0;
 if ((HEAP32[(HEAP32[$0 >> 2] | 0) + 56 >> 2] | 0) != 256) {
  $19 = HEAP32[$result >> 2] | 0;
  STACKTOP = sp;
  return $19 | 0;
 }
 HEAP32[$result >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) + 64 >> 2];
 HEAP32[HEAP32[$1 >> 2] >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) + 64 + 4 >> 2];
 HEAP32[(HEAP32[$0 >> 2] | 0) + 64 >> 2] = 0;
 HEAP32[(HEAP32[$0 >> 2] | 0) + 64 + 4 >> 2] = 0;
 $19 = HEAP32[$result >> 2] | 0;
 STACKTOP = sp;
 return $19 | 0;
}

function _jsonp_error_set($error, $line, $column, $position, $msg, $varargs) {
 $error = $error | 0;
 $line = $line | 0;
 $column = $column | 0;
 $position = $position | 0;
 $msg = $msg | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $ap = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 32 | 0;
 $1 = sp + 28 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 20 | 0;
 $4 = sp + 16 | 0;
 $ap = sp;
 HEAP32[$0 >> 2] = $error;
 HEAP32[$1 >> 2] = $line;
 HEAP32[$2 >> 2] = $column;
 HEAP32[$3 >> 2] = $position;
 HEAP32[$4 >> 2] = $msg;
 HEAP32[$ap >> 2] = $varargs;
 _jsonp_error_vset(HEAP32[$0 >> 2] | 0, HEAP32[$1 >> 2] | 0, HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0, $ap);
 STACKTOP = sp;
 return;
}

function _qpacketmodem_encode($_q, $_payload, $_frame) {
 $_q = $_q | 0;
 $_payload = $_payload | 0;
 $_frame = $_frame | 0;
 var $0 = 0, $1 = 0, $4 = 0, $7 = 0, $i$01 = 0;
 $0 = $_q + 20 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $4 = $_q + 16 | 0;
 _packetizer_encode(HEAP32[$_q + 4 >> 2] | 0, $_payload, HEAP32[$4 >> 2] | 0);
 $7 = $_q + 32 | 0;
 _memset(HEAP32[$0 >> 2] | 0, 0, HEAP32[$7 >> 2] << 2 | 0) | 0;
 _liquid_unpack_array_block(HEAP32[$4 >> 2] | 0, HEAP32[$_q + 24 >> 2] | 0, HEAP32[$_q + 8 >> 2] | 0, HEAP32[$7 >> 2] | 0, $1);
 if (!(HEAP32[$7 >> 2] | 0)) return;
 $i$01 = 0;
 do {
  _modem_modulate(HEAP32[$_q >> 2] | 0, HEAP32[(HEAP32[$0 >> 2] | 0) + ($i$01 << 2) >> 2] | 0, $_frame + ($i$01 << 3) | 0);
  $i$01 = $i$01 + 1 | 0;
 } while ($i$01 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0);
 return;
}

function _scalbnf($x, $n) {
 $x = +$x;
 $n = $n | 0;
 var $$0 = 0, $1 = 0.0, $12 = 0, $2 = 0, $5 = 0, $8 = 0.0, $9 = 0, $y$0 = 0.0;
 if (($n | 0) > 127) {
  $1 = $x * 1701411834604692317316873.0e14;
  $2 = $n + -127 | 0;
  if (($2 | 0) > 127) {
   $5 = $n + -254 | 0;
   $$0 = ($5 | 0) > 127 ? 127 : $5;
   $y$0 = $1 * 1701411834604692317316873.0e14;
  } else {
   $$0 = $2;
   $y$0 = $1;
  }
 } else if (($n | 0) < -126) {
  $8 = $x * 1.1754943508222875e-38;
  $9 = $n + 126 | 0;
  if (($9 | 0) < -126) {
   $12 = $n + 252 | 0;
   $$0 = ($12 | 0) < -126 ? -126 : $12;
   $y$0 = $8 * 1.1754943508222875e-38;
  } else {
   $$0 = $9;
   $y$0 = $8;
  }
 } else {
  $$0 = $n;
  $y$0 = $x;
 }
 return +($y$0 * (HEAP32[tempDoublePtr >> 2] = ($$0 << 23) + 1065353216, +HEAPF32[tempDoublePtr >> 2]));
}

function _json_number_value($json) {
 $json = $json | 0;
 var $0 = 0, $1 = 0, $18 = 0.0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 $1 = sp + 8 | 0;
 HEAP32[$1 >> 2] = $json;
 if (HEAP32[$1 >> 2] | 0) if ((HEAP32[HEAP32[$1 >> 2] >> 2] | 0) == 3) {
  $8 = _json_integer_value(HEAP32[$1 >> 2] | 0) | 0;
  HEAPF64[$0 >> 3] = +($8 >>> 0) + 4294967296.0 * +(getTempRet0() | 0);
  $18 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$18;
 }
 if (HEAP32[$1 >> 2] | 0) if ((HEAP32[HEAP32[$1 >> 2] >> 2] | 0) == 4) {
  HEAPF64[$0 >> 3] = +_json_real_value(HEAP32[$1 >> 2] | 0);
  $18 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$18;
 }
 HEAPF64[$0 >> 3] = 0.0;
 $18 = +HEAPF64[$0 >> 3];
 STACKTOP = sp;
 return +$18;
}

function _gmskframegen_set_header_len($_q, $_len) {
 $_q = $_q | 0;
 $_len = $_len | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $5 = 0, $6 = 0, $9 = 0;
 if (HEAP32[$_q + 88 >> 2] | 0) {
  _fwrite(gb + 27264 | 0, 87, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  return;
 }
 HEAP32[$_q + 36 >> 2] = $_len;
 $5 = $_len + 5 | 0;
 $6 = $_q + 44 | 0;
 HEAP32[$6 >> 2] = _realloc(HEAP32[$6 >> 2] | 0, $5) | 0;
 $9 = $_q + 52 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 if ($10 | 0) _packetizer_destroy($10);
 $12 = _packetizer_create($5, 6, 6, 1) | 0;
 HEAP32[$9 >> 2] = $12;
 $13 = _packetizer_get_enc_msg_len($12) | 0;
 $14 = $_q + 40 | 0;
 HEAP32[$14 >> 2] = $13;
 $15 = $_q + 48 | 0;
 HEAP32[$15 >> 2] = _realloc(HEAP32[$15 >> 2] | 0, $13) | 0;
 HEAP32[$_q + 20 >> 2] = HEAP32[$14 >> 2] << 3;
 return;
}

function _firpfb_rrrf_execute($_q, $_i, $_y) {
 $_q = $_q | 0;
 $_i = $_i | 0;
 $_y = $_y | 0;
 var $1 = 0, $3 = 0, $r = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $r = sp + 8 | 0;
 $1 = HEAP32[$_q + 12 >> 2] | 0;
 if ($1 >>> 0 > $_i >>> 0) {
  _windowf_read(HEAP32[$_q + 16 >> 2] | 0, $r);
  _dotprod_rrrf_execute(HEAP32[(HEAP32[$_q + 20 >> 2] | 0) + ($_i << 2) >> 2] | 0, HEAP32[$r >> 2] | 0, $_y);
  HEAPF32[$_y >> 2] = +HEAPF32[$_q + 24 >> 2] * +HEAPF32[$_y >> 2];
  STACKTOP = sp;
  return;
 } else {
  $3 = HEAP32[gb + 9336 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = $_i;
  HEAP32[$vararg_buffer + 4 >> 2] = $1;
  _fprintf($3, gb + 21457 | 0, $vararg_buffer) | 0;
  _exit(1);
 }
}

function _liquid_firdes_rkaiser($_k, $_m, $_beta, $_dt, $_h) {
 $_k = $_k | 0;
 $_m = $_m | 0;
 $_beta = +$_beta;
 $_dt = +$_dt;
 $_h = $_h | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 if ($_k >>> 0 < 2) {
  _fwrite(gb + 24472 | 0, 53, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if (!$_m) {
  _fwrite(gb + 24526 | 0, 53, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if ($_beta <= 0.0 | $_beta >= 1.0) {
  _fwrite(gb + 24580 | 0, 54, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if ($_dt < -1.0 | $_dt > 1.0) {
  _fwrite(gb + 24635 | 0, 53, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 } else {
  _liquid_firdes_rkaiser_quadratic($_k, $_m, $_beta, $_dt, $_h, sp);
  STACKTOP = sp;
  return;
 }
}

function _fec_rs_create($_fs) {
 $_fs = $_fs | 0;
 var $0 = 0;
 $0 = _malloc(148) | 0;
 HEAP32[$0 >> 2] = $_fs;
 HEAPF32[$0 + 4 >> 2] = +_fec_get_rate($_fs);
 HEAP32[$0 + 136 >> 2] = fb + 26;
 HEAP32[$0 + 140 >> 2] = fb + 27;
 HEAP32[$0 + 144 >> 2] = 0;
 if (($_fs | 0) == 27) {
  HEAP32[$0 + 64 >> 2] = 8;
  HEAP32[$0 + 68 >> 2] = 285;
  HEAP32[$0 + 72 >> 2] = 1;
  HEAP32[$0 + 76 >> 2] = 1;
  HEAP32[$0 + 80 >> 2] = 32;
  HEAP32[$0 + 88 >> 2] = 255;
  HEAP32[$0 + 92 >> 2] = 223;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 96 >> 2] = 0;
  HEAP32[$0 + 120 >> 2] = _malloc(255) | 0;
  HEAP32[$0 + 124 >> 2] = _malloc(1020) | 0;
  HEAP32[$0 + 128 >> 2] = _malloc(1020) | 0;
  return $0 | 0;
 } else {
  _fwrite(gb + 18922 | 0, 37, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 return 0;
}

function _gmskframesync_set_header_len($_q, $_len) {
 $_q = $_q | 0;
 $_len = $_len | 0;
 var $1 = 0, $10 = 0, $11 = 0, $15 = 0, $17 = 0, $2 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0;
 HEAP32[$_q + 144 >> 2] = $_len;
 $1 = $_len + 5 | 0;
 $2 = $_q + 164 | 0;
 HEAP32[$2 >> 2] = _realloc(HEAP32[$2 >> 2] | 0, $1) | 0;
 $5 = $_q + 168 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 if ($6 | 0) _packetizer_destroy($6);
 $8 = _packetizer_create($1, 6, 6, 1) | 0;
 HEAP32[$5 >> 2] = $8;
 $9 = _packetizer_get_enc_msg_len($8) | 0;
 $10 = $_q + 148 | 0;
 HEAP32[$10 >> 2] = $9;
 $11 = $_q + 160 | 0;
 HEAP32[$11 >> 2] = _realloc(HEAP32[$11 >> 2] | 0, $9) | 0;
 $15 = HEAP32[$10 >> 2] << 3;
 HEAP32[$_q + 152 >> 2] = $15;
 $17 = $_q + 156 | 0;
 HEAP32[$17 >> 2] = _realloc(HEAP32[$17 >> 2] | 0, $15) | 0;
 return;
}

function _realloc($oldmem, $bytes) {
 $oldmem = $oldmem | 0;
 $bytes = $bytes | 0;
 var $12 = 0, $15 = 0, $20 = 0, $9 = 0, $mem$1 = 0;
 if (!$oldmem) {
  $mem$1 = _malloc($bytes) | 0;
  return $mem$1 | 0;
 }
 if ($bytes >>> 0 > 4294967231) {
  HEAP32[(___errno_location() | 0) >> 2] = 12;
  $mem$1 = 0;
  return $mem$1 | 0;
 }
 $9 = _try_realloc_chunk($oldmem + -8 | 0, $bytes >>> 0 < 11 ? 16 : $bytes + 11 & -8) | 0;
 if ($9 | 0) {
  $mem$1 = $9 + 8 | 0;
  return $mem$1 | 0;
 }
 $12 = _malloc($bytes) | 0;
 if (!$12) {
  $mem$1 = 0;
  return $mem$1 | 0;
 }
 $15 = HEAP32[$oldmem + -4 >> 2] | 0;
 $20 = ($15 & -8) - (($15 & 3 | 0) == 0 ? 8 : 4) | 0;
 _memcpy($12 | 0, $oldmem | 0, ($20 >>> 0 < $bytes >>> 0 ? $20 : $bytes) | 0) | 0;
 _free($oldmem);
 $mem$1 = $12;
 return $mem$1 | 0;
}

function _fec_hamming128_decode_soft($_q, $_dec_msg_len, $_msg_enc, $_msg_dec) {
 $_q = $_q | 0;
 $_dec_msg_len = $_dec_msg_len | 0;
 $_msg_enc = $_msg_enc | 0;
 $_msg_dec = $_msg_dec | 0;
 var $0 = 0, $3 = 0, $i$02 = 0, $k$0$lcssa = 0, $k$01 = 0;
 $0 = $_dec_msg_len & 1;
 $3 = (($_dec_msg_len * 3 | 0) >>> 1) + $0 | 0;
 if (!$_dec_msg_len) $k$0$lcssa = 0; else {
  $i$02 = 0;
  $k$01 = 0;
  while (1) {
   HEAP8[$_msg_dec + $i$02 >> 0] = _fecsoft_hamming128_decode_n3($_msg_enc + $k$01 | 0) | 0;
   $i$02 = $i$02 + 1 | 0;
   if (($i$02 | 0) == ($_dec_msg_len | 0)) break; else $k$01 = $k$01 + 12 | 0;
  }
  $k$0$lcssa = $_dec_msg_len * 12 | 0;
 }
 if (($k$0$lcssa + ($0 << 2) | 0) == ($3 << 3 | 0)) return; else ___assert_fail(gb + 14329 | 0, gb + 14256 | 0, 326, gb + 14348 | 0);
}

function _stream_init($stream, $get, $data) {
 $stream = $stream | 0;
 $get = $get | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$0 >> 2] = $stream;
 HEAP32[$1 >> 2] = $get;
 HEAP32[$2 >> 2] = $data;
 HEAP32[HEAP32[$0 >> 2] >> 2] = HEAP32[$1 >> 2];
 HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] = HEAP32[$2 >> 2];
 HEAP8[(HEAP32[$0 >> 2] | 0) + 8 >> 0] = 0;
 HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] = 0;
 HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] = 0;
 HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] = 1;
 HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] = 0;
 HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function _hashtable_do_clear($hashtable) {
 $hashtable = $hashtable | 0;
 var $0 = 0, $list = 0, $next = 0, $pair = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 12 | 0;
 $list = sp + 8 | 0;
 $next = sp + 4 | 0;
 $pair = sp;
 HEAP32[$0 >> 2] = $hashtable;
 HEAP32[$list >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) + 12 + 4 >> 2];
 while (1) {
  if ((HEAP32[$list >> 2] | 0) == ((HEAP32[$0 >> 2] | 0) + 12 | 0)) break;
  HEAP32[$next >> 2] = HEAP32[(HEAP32[$list >> 2] | 0) + 4 >> 2];
  HEAP32[$pair >> 2] = HEAP32[$list >> 2];
  _json_decref_1974(HEAP32[(HEAP32[$pair >> 2] | 0) + 12 >> 2] | 0);
  _jsonp_free(HEAP32[$pair >> 2] | 0);
  HEAP32[$list >> 2] = HEAP32[$next >> 2];
 }
 STACKTOP = sp;
 return;
}

function _json_integer_value($json) {
 $json = $json | 0;
 var $0 = 0, $1 = 0, $13 = 0, $18 = 0, $19 = 0, $23 = 0, $25 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 $1 = sp + 8 | 0;
 HEAP32[$1 >> 2] = $json;
 if (HEAP32[$1 >> 2] | 0) if ((HEAP32[HEAP32[$1 >> 2] >> 2] | 0) == 3) {
  $13 = (HEAP32[$1 >> 2] | 0) + 8 | 0;
  $18 = HEAP32[$13 + 4 >> 2] | 0;
  $19 = $0;
  HEAP32[$19 >> 2] = HEAP32[$13 >> 2];
  HEAP32[$19 + 4 >> 2] = $18;
 } else label = 3; else label = 3;
 if ((label | 0) == 3) {
  $7 = $0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
 }
 $23 = $0;
 $25 = HEAP32[$23 >> 2] | 0;
 setTempRet0(HEAP32[$23 + 4 >> 2] | 0);
 STACKTOP = sp;
 return $25 | 0;
}

function _strtox($s, $p, $prec) {
 $s = $s | 0;
 $p = $p | 0;
 $prec = $prec | 0;
 var $0 = 0, $1 = 0, $10 = 0, $4 = 0.0, $f = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $f = sp;
 dest = $f;
 stop = dest + 112 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $0 = $f + 4 | 0;
 HEAP32[$0 >> 2] = $s;
 $1 = $f + 8 | 0;
 HEAP32[$1 >> 2] = -1;
 HEAP32[$f + 44 >> 2] = $s;
 HEAP32[$f + 76 >> 2] = -1;
 ___shlim($f, 0);
 $4 = +___floatscan($f, $prec, 1);
 $10 = (HEAP32[$0 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) + (HEAP32[$f + 108 >> 2] | 0) | 0;
 if ($p | 0) HEAP32[$p >> 2] = $10 | 0 ? $s + $10 | 0 : $s;
 STACKTOP = sp;
 return +$4;
}

function _fft_execute_dft($_q) {
 $_q = $_q | 0;
 var $0 = 0, $12 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $22 = 0.0, $3 = 0, $4 = 0, $i$01 = 0;
 $0 = HEAP32[$_q >> 2] | 0;
 if (!$0) return;
 $2 = $_q + 44 | 0;
 $3 = $_q + 4 | 0;
 $4 = $_q + 8 | 0;
 $i$01 = 0;
 do {
  _dotprod_cccf_execute(HEAP32[(HEAP32[$2 >> 2] | 0) + ($i$01 << 2) >> 2] | 0, (HEAP32[$3 >> 2] | 0) + 8 | 0, (HEAP32[$4 >> 2] | 0) + ($i$01 << 3) | 0);
  $12 = HEAP32[$3 >> 2] | 0;
  $16 = HEAP32[$4 >> 2] | 0;
  $17 = $16 + ($i$01 << 3) | 0;
  $19 = $16 + ($i$01 << 3) + 4 | 0;
  $22 = +HEAPF32[$12 + 4 >> 2] + +HEAPF32[$19 >> 2];
  HEAPF32[$17 >> 2] = +HEAPF32[$12 >> 2] + +HEAPF32[$17 >> 2];
  HEAPF32[$19 >> 2] = $22;
  $i$01 = $i$01 + 1 | 0;
 } while (($i$01 | 0) != ($0 | 0));
 return;
}

function _json_object_get($json, $key) {
 $json = $json | 0;
 $key = $key | 0;
 var $0 = 0, $1 = 0, $15 = 0, $2 = 0, $object = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 12 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $object = sp;
 HEAP32[$1 >> 2] = $json;
 HEAP32[$2 >> 2] = $key;
 if ((HEAP32[$2 >> 2] | 0) != 0 & (HEAP32[$1 >> 2] | 0) != 0) if (!(HEAP32[HEAP32[$1 >> 2] >> 2] | 0)) {
  HEAP32[$object >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 >> 2] = _hashtable_get((HEAP32[$object >> 2] | 0) + 8 | 0, HEAP32[$2 >> 2] | 0) | 0;
  $15 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $15 | 0;
 }
 HEAP32[$0 >> 2] = 0;
 $15 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $15 | 0;
}

function _strbuffer_init($strbuff) {
 $strbuff = $strbuff | 0;
 var $0 = 0, $1 = 0, $16 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $strbuff;
 HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] = 16;
 HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] = 0;
 $9 = _jsonp_malloc(HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] | 0) | 0;
 HEAP32[HEAP32[$1 >> 2] >> 2] = $9;
 if (HEAP32[HEAP32[$1 >> 2] >> 2] | 0) {
  HEAP8[HEAP32[HEAP32[$1 >> 2] >> 2] >> 0] = 0;
  HEAP32[$0 >> 2] = 0;
  $16 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $16 | 0;
 } else {
  HEAP32[$0 >> 2] = -1;
  $16 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $16 | 0;
 }
 return 0;
}

function _jsonp_error_init($error, $source) {
 $error = $error | 0;
 $source = $source | 0;
 var $0 = 0, $1 = 0, $13 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = $error;
 HEAP32[$1 >> 2] = $source;
 if (!(HEAP32[$0 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP8[(HEAP32[$0 >> 2] | 0) + 92 >> 0] = 0;
 HEAP32[HEAP32[$0 >> 2] >> 2] = -1;
 HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] = -1;
 HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] = 0;
 $13 = HEAP32[$0 >> 2] | 0;
 if (HEAP32[$1 >> 2] | 0) {
  _jsonp_error_set_source($13, HEAP32[$1 >> 2] | 0);
  STACKTOP = sp;
  return;
 } else {
  HEAP8[$13 + 12 >> 0] = 0;
  STACKTOP = sp;
  return;
 }
}

function _fec_hamming74_encode($_q, $_dec_msg_len, $_msg_dec, $_msg_enc) {
 $_q = $_q | 0;
 $_dec_msg_len = $_dec_msg_len | 0;
 $_msg_dec = $_msg_dec | 0;
 $_msg_enc = $_msg_enc | 0;
 var $0 = 0, $13 = 0, $3 = 0, $i$02 = 0, $k$01 = 0;
 $0 = _fec_block_get_enc_msg_len($_dec_msg_len, 4, 7) | 0;
 if (!$_dec_msg_len) return; else {
  $i$02 = 0;
  $k$01 = 0;
 }
 while (1) {
  $3 = HEAP8[$_msg_dec + $i$02 >> 0] | 0;
  $13 = HEAPU8[($3 & 15) + (gb + 13613) >> 0] | 0;
  _liquid_pack_array($_msg_enc, $0, $k$01, 7, HEAPU8[(($3 & 255) >>> 4 & 255) + (gb + 13613) >> 0] | 0);
  _liquid_pack_array($_msg_enc, $0, $k$01 + 7 | 0, 7, $13);
  $i$02 = $i$02 + 1 | 0;
  if (($i$02 | 0) == ($_dec_msg_len | 0)) break; else $k$01 = $k$01 + 14 | 0;
 }
 return;
}

function _quiet_decoder_recv($d, $data, $len) {
 $d = $d | 0;
 $data = $data | 0;
 $len = $len | 0;
 var $$0 = 0, $0 = 0, $4 = 0, $6 = 0, $framelen = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $framelen = sp;
 $0 = $d + 104 | 0;
 if ((_ring_read(HEAP32[$0 >> 2] | 0, $framelen, 4) | 0) < 0) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $4 = HEAP32[$framelen >> 2] | 0;
 $6 = $4 >>> 0 < $len >>> 0 ? $4 : $len;
 if ((_ring_read(HEAP32[$0 >> 2] | 0, $data, $6) | 0) < 0) ___assert_fail(gb + 10540 | 0, gb + 10336 | 0, 215, gb + 10374 | 0);
 _ring_advance_reader(HEAP32[$0 >> 2] | 0, (HEAP32[$framelen >> 2] | 0) - $6 | 0);
 $$0 = $6;
 STACKTOP = sp;
 return $$0 | 0;
}

function ___fflush_unlocked($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $9 = 0, label = 0;
 $0 = $f + 20 | 0;
 $2 = $f + 28 | 0;
 if ((HEAP32[$0 >> 2] | 0) >>> 0 > (HEAP32[$2 >> 2] | 0) >>> 0) {
  mftCall_iiii(HEAP32[$f + 36 >> 2] | 0, $f | 0, 0, 0) | 0;
  if (!(HEAP32[$0 >> 2] | 0)) $$0 = -1; else label = 3;
 } else label = 3;
 if ((label | 0) == 3) {
  $9 = $f + 4 | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  $11 = $f + 8 | 0;
  $12 = HEAP32[$11 >> 2] | 0;
  if ($10 >>> 0 < $12 >>> 0) mftCall_iiii(HEAP32[$f + 40 >> 2] | 0, $f | 0, $10 - $12 | 0, 1) | 0;
  HEAP32[$f + 16 >> 2] = 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$11 >> 2] = 0;
  HEAP32[$9 >> 2] = 0;
  $$0 = 0;
 }
 return $$0 | 0;
}

function _strtox_519($s, $p, $base, $0, $1) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $6 = 0, $8 = 0, $9 = 0, $f = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $f = sp;
 HEAP32[$f >> 2] = 0;
 $2 = $f + 4 | 0;
 HEAP32[$2 >> 2] = $s;
 HEAP32[$f + 44 >> 2] = $s;
 $6 = $f + 8 | 0;
 HEAP32[$6 >> 2] = ($s | 0) < 0 ? -1 : $s + 2147483647 | 0;
 HEAP32[$f + 76 >> 2] = -1;
 ___shlim($f, 0);
 $8 = ___intscan($f, $base, 1, $0, $1) | 0;
 $9 = getTempRet0() | 0;
 if ($p | 0) HEAP32[$p >> 2] = $s + ((HEAP32[$2 >> 2] | 0) + (HEAP32[$f + 108 >> 2] | 0) - (HEAP32[$6 >> 2] | 0));
 setTempRet0($9 | 0);
 STACKTOP = sp;
 return $8 | 0;
}

function _qpacketmodem_create() {
 var $0 = 0, $4 = 0, $6 = 0, $8 = 0, $d = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $d = sp;
 $0 = _malloc(36) | 0;
 HEAP32[$0 >> 2] = _modem_create(48) | 0;
 HEAP32[$0 + 8 >> 2] = 2;
 HEAP32[$0 + 12 >> 2] = 1;
 $4 = _packetizer_create(1, 1, 1, 1) | 0;
 HEAP32[$0 + 4 >> 2] = $4;
 $6 = _packetizer_get_enc_msg_len($4) | 0;
 HEAP32[$0 + 24 >> 2] = $6;
 $8 = $6 << 3;
 HEAP32[$0 + 28 >> 2] = $8;
 _div($d, $8, 2);
 HEAP32[$0 + 16 >> 2] = _malloc(((HEAP32[$d + 4 >> 2] | 0) != 0 & 1) + (HEAP32[$d >> 2] | 0) << 1) | 0;
 HEAP32[$0 + 32 >> 2] = $6 << 1;
 HEAP32[$0 + 20 >> 2] = _malloc($6 << 3) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function _fclose($f) {
 $f = $f | 0;
 var $$pre = 0, $12 = 0, $18 = 0, $22 = 0, $24 = 0, $5 = 0, $7 = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) {}
 $5 = (HEAP32[$f >> 2] & 1 | 0) != 0;
 if (!$5) {
  ___lock(gb + 45032 + 28 | 0);
  $7 = HEAP32[$f + 52 >> 2] | 0;
  $$pre = $f + 56 | 0;
  if ($7 | 0) HEAP32[$7 + 56 >> 2] = HEAP32[$$pre >> 2];
  $12 = HEAP32[$$pre >> 2] | 0;
  if ($12 | 0) HEAP32[$12 + 52 >> 2] = $7;
  if ((HEAP32[gb + 45032 + 24 >> 2] | 0) == ($f | 0)) HEAP32[gb + 45032 + 24 >> 2] = $12;
  ___unlock(gb + 45032 + 28 | 0);
 }
 $18 = _fflush($f) | 0;
 $22 = mftCall_ii(HEAP32[$f + 12 >> 2] | 0, $f | 0) | 0 | $18;
 $24 = HEAP32[$f + 92 >> 2] | 0;
 if ($24 | 0) _free($24);
 if (!$5) _free($f);
 return $22 | 0;
}

function _msequence_generate_symbol($_ms, $_bps) {
 $_ms = $_ms | 0;
 $_bps = $_bps | 0;
 var $1 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $7 = 0, $8 = 0, $i$01 = 0, $s$0$lcssa = 0, $s$02 = 0;
 if (!$_bps) {
  $s$0$lcssa = 0;
  return $s$0$lcssa | 0;
 }
 $1 = $_ms + 16 | 0;
 $2 = $_ms + 4 | 0;
 $3 = $_ms + 20 | 0;
 $4 = $_ms + 12 | 0;
 $7 = HEAP32[$1 >> 2] | 0;
 $i$01 = 0;
 $s$02 = 0;
 while (1) {
  $8 = _liquid_bdotprod($7, HEAP32[$2 >> 2] | 0) | 0;
  HEAP32[$3 >> 2] = $8;
  $7 = (HEAP32[$1 >> 2] << 1 | $8) & HEAP32[$4 >> 2];
  HEAP32[$1 >> 2] = $7;
  $14 = $8 | $s$02 << 1;
  $i$01 = $i$01 + 1 | 0;
  if (($i$01 | 0) == ($_bps | 0)) {
   $s$0$lcssa = $14;
   break;
  } else $s$02 = $14;
 }
 return $s$0$lcssa | 0;
}

function _quiet_encoder_destroy($e) {
 $e = $e | 0;
 var $10 = 0;
 if (!$e) return;
 switch (HEAP32[$e + 64 >> 2] | 0) {
 case 0:
  {
   _ofdmflexframegen_destroy(HEAP32[$e + 88 >> 2] | 0);
   break;
  }
 case 1:
  {
   _flexframegen_destroy(HEAP32[$e + 88 >> 2] | 0);
   break;
  }
 case 2:
  {
   _gmskframegen_destroy(HEAP32[$e + 88 >> 2] | 0);
   break;
  }
 default:
  {}
 }
 $10 = HEAP32[$e + 140 >> 2] | 0;
 if ($10 | 0) _resamp_rrrf_destroy($10);
 _modulator_destroy(HEAP32[$e + 96 >> 2] | 0);
 _free(HEAP32[$e + 100 >> 2] | 0);
 _free(HEAP32[$e + 108 >> 2] | 0);
 _ring_destroy(HEAP32[$e + 144 >> 2] | 0);
 _free(HEAP32[$e + 148 >> 2] | 0);
 _free(HEAP32[$e + 152 >> 2] | 0);
 _free($e);
 return;
}

function _crc_get_length($_scheme) {
 $_scheme = $_scheme | 0;
 var $$0 = 0, $0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 switch ($_scheme | 0) {
 case 1:
 case 0:
  {
   $$0 = 0;
   break;
  }
 case 2:
  {
   $$0 = 1;
   break;
  }
 case 3:
  {
   $$0 = 1;
   break;
  }
 case 4:
  {
   $$0 = 2;
   break;
  }
 case 5:
  {
   $$0 = 3;
   break;
  }
 case 6:
  {
   $$0 = 4;
   break;
  }
 default:
  {
   $0 = HEAP32[gb + 9336 >> 2] | 0;
   HEAP32[$vararg_buffer >> 2] = $_scheme;
   _fprintf($0, gb + 11391 | 0, $vararg_buffer) | 0;
   _exit(1);
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((num | 0) >= 4096) return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
 ret = dest | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  while ((num | 0) >= 4) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
   num = num - 4 | 0;
  }
 }
 while ((num | 0) > 0) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
  num = num - 1 | 0;
 }
 return ret | 0;
}

function _open($filename, $flags, $varargs) {
 $filename = $filename | 0;
 $flags = $flags | 0;
 $varargs = $varargs | 0;
 var $5 = 0, $6 = 0, $9 = 0, $ap = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $ap = sp + 16 | 0;
 HEAP32[$ap >> 2] = $varargs;
 $5 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
 $6 = HEAP32[$5 >> 2] | 0;
 HEAP32[$ap >> 2] = $5 + 4;
 HEAP32[$vararg_buffer >> 2] = $filename;
 HEAP32[$vararg_buffer + 4 >> 2] = $flags | 32768;
 HEAP32[$vararg_buffer + 8 >> 2] = $6;
 $9 = ___syscall_ret(___syscall5(5, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function ___stdio_seek($f, $off, $whence) {
 $f = $f | 0;
 $off = $off | 0;
 $whence = $whence | 0;
 var $5 = 0, $ret = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $ret = sp + 20 | 0;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$f + 60 >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = 0;
 HEAP32[$vararg_buffer + 8 >> 2] = $off;
 HEAP32[$vararg_buffer + 12 >> 2] = $ret;
 HEAP32[$vararg_buffer + 16 >> 2] = $whence;
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  HEAP32[$ret >> 2] = -1;
  $5 = -1;
 } else $5 = HEAP32[$ret >> 2] | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function _array_copy($dest, $dpos, $src, $spos, $count) {
 $dest = $dest | 0;
 $dpos = $dpos | 0;
 $src = $src | 0;
 $spos = $spos | 0;
 $count = $count | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 16 | 0;
 $1 = sp + 12 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$0 >> 2] = $dest;
 HEAP32[$1 >> 2] = $dpos;
 HEAP32[$2 >> 2] = $src;
 HEAP32[$3 >> 2] = $spos;
 HEAP32[$4 >> 2] = $count;
 _memcpy((HEAP32[$0 >> 2] | 0) + (HEAP32[$1 >> 2] << 2) | 0, (HEAP32[$2 >> 2] | 0) + (HEAP32[$3 >> 2] << 2) | 0, HEAP32[$4 >> 2] << 2 | 0) | 0;
 STACKTOP = sp;
 return;
}

function _kaiser($_n, $_N, $_beta, $_mu) {
 $_n = $_n | 0;
 $_N = $_N | 0;
 $_beta = +$_beta;
 $_mu = +$_mu;
 var $15 = 0.0, $20 = 0.0;
 if ($_n >>> 0 > $_N >>> 0) {
  _fwrite(gb + 30633 | 0, 60, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if ($_beta < 0.0) {
  _fwrite(gb + 30694 | 0, 60, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if ($_mu < -.5 | $_mu > .5) {
  _fwrite(gb + 30755 | 0, 64, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 } else {
  $15 = (+($_n >>> 0) - +(($_N + -1 | 0) >>> 0) * .5 + $_mu) * 2.0 / +($_N >>> 0);
  $20 = +_liquid_besseli0f(+Math_sqrt(+(1.0 - $15 * $15)) * $_beta);
  return +($20 / +_liquid_besseli0f($_beta));
 }
 return +(0.0);
}

function _demodulator_flush($d, $symbols) {
 $d = $d | 0;
 $symbols = $symbols | 0;
 var $$0 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 if (!$d) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $2 = HEAP32[$d + 4 >> 2] | 0;
 $4 = HEAP32[$d + 8 >> 2] | 0;
 $6 = Math_imul($4 << 1, $2) | 0;
 $7 = _llvm_stacksave() | 0;
 $8 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($6 << 2) | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 if ($6 | 0) _memset($8 | 0, 0, (Math_imul($4, $2) | 0) << 3 | 0) | 0;
 $12 = _demodulator_recv($d, $8, $6, $symbols) | 0;
 _llvm_stackrestore($7 | 0);
 $$0 = $12;
 STACKTOP = sp;
 return $$0 | 0;
}

function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
 stop = ptr + num | 0;
 if ((num | 0) >= 20) {
  value = value & 255;
  unaligned = ptr & 3;
  value4 = value | value << 8 | value << 16 | value << 24;
  stop4 = stop & ~3;
  if (unaligned) {
   unaligned = ptr + 4 - unaligned | 0;
   while ((ptr | 0) < (unaligned | 0)) {
    HEAP8[ptr >> 0] = value;
    ptr = ptr + 1 | 0;
   }
  }
  while ((ptr | 0) < (stop4 | 0)) {
   HEAP32[ptr >> 2] = value4;
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (stop | 0)) {
  HEAP8[ptr >> 0] = value;
  ptr = ptr + 1 | 0;
 }
 return ptr - num | 0;
}

function _windowf_push($_q, $_v) {
 $_q = $_q | 0;
 $_v = +$_v;
 var $$pre$phi3Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $11 = 0, $17 = 0, $5 = 0, $7 = 0;
 $0 = $_q + 24 | 0;
 $5 = HEAP32[$_q + 16 >> 2] & (HEAP32[$0 >> 2] | 0) + 1;
 HEAP32[$0 >> 2] = $5;
 if (!$5) {
  $7 = HEAP32[$_q >> 2] | 0;
  $11 = $_q + 4 | 0;
  _memmove($7 | 0, $7 + (HEAP32[$_q + 12 >> 2] << 2) | 0, (HEAP32[$11 >> 2] << 2) + -4 | 0) | 0;
  $$pre$phi3Z2D = $_q;
  $$pre$phiZ2D = $11;
  $17 = HEAP32[$0 >> 2] | 0;
 } else {
  $$pre$phi3Z2D = $_q;
  $$pre$phiZ2D = $_q + 4 | 0;
  $17 = $5;
 }
 HEAPF32[(HEAP32[$$pre$phi3Z2D >> 2] | 0) + ($17 + -1 + (HEAP32[$$pre$phiZ2D >> 2] | 0) << 2) >> 2] = $_v;
 return;
}

function _lex_save_cached($lex) {
 $lex = $lex | 0;
 var $0 = 0, $20 = 0, $24 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $lex;
 while (1) {
  if (!(HEAP8[(HEAP32[$0 >> 2] | 0) + 8 + (HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0) >> 0] | 0)) break;
  _lex_save(HEAP32[$0 >> 2] | 0, HEAP8[(HEAP32[$0 >> 2] | 0) + 8 + (HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0) >> 0] | 0);
  $20 = (HEAP32[$0 >> 2] | 0) + 16 | 0;
  HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) + 1;
  $24 = (HEAP32[$0 >> 2] | 0) + 36 | 0;
  HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function _lex_unget_unsave($lex, $c) {
 $lex = $lex | 0;
 $c = $c | 0;
 var $0 = 0, $1 = 0, $d = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 4 | 0;
 $1 = sp;
 $d = sp + 8 | 0;
 HEAP32[$0 >> 2] = $lex;
 HEAP32[$1 >> 2] = $c;
 if (!((HEAP32[$1 >> 2] | 0) != -1 & (HEAP32[$1 >> 2] | 0) != -2)) {
  STACKTOP = sp;
  return;
 }
 _stream_unget(HEAP32[$0 >> 2] | 0, HEAP32[$1 >> 2] | 0);
 HEAP8[$d >> 0] = _strbuffer_pop((HEAP32[$0 >> 2] | 0) + 40 | 0) | 0;
 if ((HEAP32[$1 >> 2] | 0) != (HEAP8[$d >> 0] | 0)) ___assert_fail(gb + 41493 | 0, gb + 41349 | 0, 272, gb + 41500 | 0);
 STACKTOP = sp;
 return;
}

function _liquid_getopt_str2mod($_str) {
 $_str = $_str | 0;
 var $$0 = 0, $6 = 0, $i$02 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $i$02 = 0;
 do {
  if (!(_strcmp($_str, HEAP32[gb + 580 + ($i$02 << 4) >> 2] | 0) | 0)) {
   $$0 = $i$02;
   label = 5;
   break;
  }
  $i$02 = $i$02 + 1 | 0;
 } while ($i$02 >>> 0 < 61);
 if ((label | 0) == 5) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 $6 = HEAP32[gb + 9336 >> 2] | 0;
 HEAP32[$vararg_buffer >> 2] = $_str;
 _fprintf($6, gb + 34851 | 0, $vararg_buffer) | 0;
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _liquid_getopt_str2fec($_str) {
 $_str = $_str | 0;
 var $$0 = 0, $6 = 0, $i$02 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $i$02 = 0;
 do {
  if (!(_strcmp($_str, HEAP32[gb + 56 + ($i$02 << 3) >> 2] | 0) | 0)) {
   $$0 = $i$02;
   label = 5;
   break;
  }
  $i$02 = $i$02 + 1 | 0;
 } while ($i$02 >>> 0 < 28);
 if ((label | 0) == 5) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 $6 = HEAP32[gb + 9336 >> 2] | 0;
 HEAP32[$vararg_buffer >> 2] = $_str;
 _fprintf($6, gb + 12476 | 0, $vararg_buffer) | 0;
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _ilogbf($x) {
 $x = +$x;
 var $$0 = 0, $0 = 0, $2 = 0, $3 = 0, $6 = 0, $e$02 = 0, $i$01 = 0;
 $0 = (HEAPF32[tempDoublePtr >> 2] = $x, HEAP32[tempDoublePtr >> 2] | 0);
 $2 = $0 >>> 23 & 255;
 switch ($2 | 0) {
 case 0:
  {
   $3 = $0 << 9;
   if (!$3) $$0 = -2147483648; else if (($3 | 0) > -1) {
    $e$02 = -127;
    $i$01 = $3;
    while (1) {
     $6 = $e$02 + -1 | 0;
     $i$01 = $i$01 << 1;
     if (($i$01 | 0) <= -1) {
      $$0 = $6;
      break;
     } else $e$02 = $6;
    }
   } else $$0 = -127;
   break;
  }
 case 255:
  {
   $$0 = $0 & 8388607 | 0 ? -2147483648 : 2147483647;
   break;
  }
 default:
  $$0 = $2 + -127 | 0;
 }
 return $$0 | 0;
}

function ___toread($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $15 = 0, $2 = 0, $21 = 0, $6 = 0, $8 = 0;
 $0 = $f + 74 | 0;
 $2 = HEAP8[$0 >> 0] | 0;
 HEAP8[$0 >> 0] = $2 + 255 | $2;
 $6 = $f + 20 | 0;
 $8 = $f + 44 | 0;
 if ((HEAP32[$6 >> 2] | 0) >>> 0 > (HEAP32[$8 >> 2] | 0) >>> 0) mftCall_iiii(HEAP32[$f + 36 >> 2] | 0, $f | 0, 0, 0) | 0;
 HEAP32[$f + 16 >> 2] = 0;
 HEAP32[$f + 28 >> 2] = 0;
 HEAP32[$6 >> 2] = 0;
 $15 = HEAP32[$f >> 2] | 0;
 if (!($15 & 20)) {
  $21 = HEAP32[$8 >> 2] | 0;
  HEAP32[$f + 8 >> 2] = $21;
  HEAP32[$f + 4 >> 2] = $21;
  $$0 = 0;
 } else if (!($15 & 4)) $$0 = -1; else {
  HEAP32[$f >> 2] = $15 | 32;
  $$0 = -1;
 }
 return $$0 | 0;
}

function _fmaxf($x, $y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $0 = 0, $fabs = 0.0, $fabs1 = 0.0;
 $0 = (HEAPF32[tempDoublePtr >> 2] = $x, HEAP32[tempDoublePtr >> 2] | 0);
 $fabs = +Math_abs(+$x);
 do if ((HEAPF32[tempDoublePtr >> 2] = $fabs, HEAP32[tempDoublePtr >> 2] | 0) >>> 0 > 2139095040) $$0 = $y; else {
  $fabs1 = +Math_abs(+$y);
  if ((HEAPF32[tempDoublePtr >> 2] = $fabs1, HEAP32[tempDoublePtr >> 2] | 0) >>> 0 > 2139095040) $$0 = $x; else if (((HEAPF32[tempDoublePtr >> 2] = $y, HEAP32[tempDoublePtr >> 2] | 0) ^ $0 | 0) < 0) {
   $$0 = ($0 | 0) < 0 ? $y : $x;
   break;
  } else {
   $$0 = $x < $y ? $y : $x;
   break;
  }
 } while (0);
 return +$$0;
}

function _csinf($agg$result, $z) {
 $agg$result = $agg$result | 0;
 $z = $z | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0.0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp;
 $5 = HEAP32[$z >> 2] | 0;
 HEAPF32[$1 >> 2] = -+HEAPF32[$z + 4 >> 2];
 HEAP32[$1 + 4 >> 2] = $5;
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 _csinhf($0, $$byval_copy);
 $10 = -+HEAPF32[$0 >> 2];
 HEAP32[$agg$result >> 2] = HEAP32[$0 + 4 >> 2];
 HEAPF32[$agg$result + 4 >> 2] = $10;
 STACKTOP = sp;
 return;
}

function _quiet_encoder_profile_str($input, $profilename) {
 $input = $input | 0;
 $profilename = $profilename | 0;
 var $$0 = 0, $0 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = _json_loads($input, 0, sp) | 0;
 if (!$0) {
  _puts(gb + 11159 | 0) | 0;
  $$0 = 0;
 } else {
  $2 = _encoder_profile($0, $profilename) | 0;
  $3 = $0 + 4 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  if (($4 | 0) == -1) $$0 = $2; else {
   $6 = $4 + -1 | 0;
   HEAP32[$3 >> 2] = $6;
   if (!$6) {
    _json_delete($0);
    $$0 = $2;
   } else $$0 = $2;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _quiet_decoder_profile_str($input, $profilename) {
 $input = $input | 0;
 $profilename = $profilename | 0;
 var $$0 = 0, $0 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = _json_loads($input, 0, sp) | 0;
 if (!$0) {
  _puts(gb + 11159 | 0) | 0;
  $$0 = 0;
 } else {
  $2 = _decoder_profile($0, $profilename) | 0;
  $3 = $0 + 4 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  if (($4 | 0) == -1) $$0 = $2; else {
   $6 = $4 + -1 | 0;
   HEAP32[$3 >> 2] = $6;
   if (!$6) {
    _json_delete($0);
    $$0 = $2;
   } else $$0 = $2;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _ccosf($agg$result, $z) {
 $agg$result = $agg$result | 0;
 $z = $z | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp;
 $5 = HEAP32[$z >> 2] | 0;
 HEAPF32[$1 >> 2] = -+HEAPF32[$z + 4 >> 2];
 HEAP32[$1 + 4 >> 2] = $5;
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 _ccoshf($0, $$byval_copy);
 $9 = HEAP32[$0 + 4 >> 2] | 0;
 HEAP32[$agg$result >> 2] = HEAP32[$0 >> 2];
 HEAP32[$agg$result + 4 >> 2] = $9;
 STACKTOP = sp;
 return;
}

function _to_locale($strbuffer) {
 $strbuffer = $strbuffer | 0;
 var $0 = 0, $point = 0, $pos = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 8 | 0;
 $point = sp + 4 | 0;
 $pos = sp;
 HEAP32[$0 >> 2] = $strbuffer;
 HEAP32[$point >> 2] = HEAP32[(_localeconv() | 0) >> 2];
 if ((HEAP8[HEAP32[$point >> 2] >> 0] | 0) == 46) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$pos >> 2] = _strchr(HEAP32[HEAP32[$0 >> 2] >> 2] | 0, 46) | 0;
 if (!(HEAP32[$pos >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP8[HEAP32[$pos >> 2] >> 0] = HEAP8[HEAP32[$point >> 2] >> 0] | 0;
 STACKTOP = sp;
 return;
}

function _detector_cccf_destroy($_q) {
 $_q = $_q | 0;
 var $2 = 0, $5 = 0, $k$01 = 0;
 _windowcf_destroy(HEAP32[$_q + 16 >> 2] | 0);
 $2 = $_q + 24 | 0;
 $5 = $_q + 20 | 0;
 if (HEAP32[$2 >> 2] | 0) {
  $k$01 = 0;
  do {
   _dotprod_cccf_destroy(HEAP32[(HEAP32[$5 >> 2] | 0) + ($k$01 << 2) >> 2] | 0);
   $k$01 = $k$01 + 1 | 0;
  } while ($k$01 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0);
 }
 _free(HEAP32[$5 >> 2] | 0);
 _free(HEAP32[$_q + 36 >> 2] | 0);
 _free(HEAP32[$_q + 40 >> 2] | 0);
 _free(HEAP32[$_q + 44 >> 2] | 0);
 _free(HEAP32[$_q + 48 >> 2] | 0);
 _wdelayf_destroy(HEAP32[$_q + 60 >> 2] | 0);
 _free(HEAP32[$_q >> 2] | 0);
 _free($_q);
 return;
}

function _json_delete_array($array) {
 $array = $array | 0;
 var $0 = 0, $i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 4 | 0;
 $i = sp;
 HEAP32[$0 >> 2] = $array;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[$0 >> 2] | 0) + 12 >> 2] | 0) >>> 0) break;
  _json_decref_1931(HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] | 0);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 _jsonp_free(HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0);
 _jsonp_free(HEAP32[$0 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _ofdmframesync_debug_enable($_q) {
 $_q = $_q | 0;
 var $0 = 0, $15 = 0;
 $0 = $_q + 172 | 0;
 if (HEAP32[$0 >> 2] | 0) return;
 HEAP32[$_q + 176 >> 2] = _windowcf_create(2048) | 0;
 HEAP32[$_q + 180 >> 2] = _windowf_create(2048) | 0;
 HEAP32[$_q + 184 >> 2] = _windowcf_create(2048) | 0;
 HEAP32[$_q + 188 >> 2] = _malloc(HEAP32[$_q >> 2] << 3) | 0;
 $15 = HEAP32[$_q + 20 >> 2] << 2;
 HEAP32[$_q + 192 >> 2] = _malloc($15) | 0;
 HEAP32[$_q + 196 >> 2] = _malloc($15) | 0;
 HEAP32[$_q + 208 >> 2] = _windowf_create(2048) | 0;
 HEAP32[$_q + 212 >> 2] = _windowf_create(2048) | 0;
 HEAP32[$_q + 168 >> 2] = 1;
 HEAP32[$0 >> 2] = 1;
 return;
}

function _lex_get_save($lex, $error) {
 $lex = $lex | 0;
 $error = $error | 0;
 var $0 = 0, $1 = 0, $11 = 0, $c = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $c = sp;
 HEAP32[$0 >> 2] = $lex;
 HEAP32[$1 >> 2] = $error;
 HEAP32[$c >> 2] = _stream_get(HEAP32[$0 >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0;
 if (!((HEAP32[$c >> 2] | 0) != -1 & (HEAP32[$c >> 2] | 0) != -2)) {
  $11 = HEAP32[$c >> 2] | 0;
  STACKTOP = sp;
  return $11 | 0;
 }
 _lex_save(HEAP32[$0 >> 2] | 0, HEAP32[$c >> 2] | 0);
 $11 = HEAP32[$c >> 2] | 0;
 STACKTOP = sp;
 return $11 | 0;
}

function _packetizer_recreate($_p, $_n, $_crc, $_fec0, $_fec1) {
 $_p = $_p | 0;
 $_n = $_n | 0;
 $_crc = $_crc | 0;
 $_fec0 = $_fec0 | 0;
 $_fec1 = $_fec1 | 0;
 var $$0 = 0, $8 = 0;
 if (!$_p) {
  $$0 = _packetizer_create($_n, $_crc, $_fec0, $_fec1) | 0;
  return $$0 | 0;
 }
 if ((HEAP32[$_p >> 2] | 0) == ($_n | 0)) if ((HEAP32[$_p + 8 >> 2] | 0) == ($_crc | 0)) {
  $8 = HEAP32[$_p + 16 >> 2] | 0;
  if ((HEAP32[$8 + 8 >> 2] | 0) == ($_fec0 | 0)) if ((HEAP32[$8 + 28 >> 2] | 0) == ($_fec1 | 0)) {
   $$0 = $_p;
   return $$0 | 0;
  }
 }
 _packetizer_destroy($_p);
 $$0 = _packetizer_create($_n, $_crc, $_fec0, $_fec1) | 0;
 return $$0 | 0;
}

function ___fmodeflags($mode) {
 $mode = $mode | 0;
 var $1 = 0, $2 = 0, $4 = 0, $7 = 0, $flags$0 = 0, $flags$0$ = 0, $flags$2 = 0, $flags$2$ = 0, $flags$4 = 0;
 $1 = (_strchr($mode, 43) | 0) == 0;
 $2 = HEAP8[$mode >> 0] | 0;
 $flags$0 = $1 ? $2 << 24 >> 24 != 114 & 1 : 2;
 $4 = (_strchr($mode, 120) | 0) == 0;
 $flags$0$ = $4 ? $flags$0 : $flags$0 | 128;
 $7 = (_strchr($mode, 101) | 0) == 0;
 $flags$2 = $7 ? $flags$0$ : $flags$0$ | 524288;
 $flags$2$ = $2 << 24 >> 24 == 114 ? $flags$2 : $flags$2 | 64;
 $flags$4 = $2 << 24 >> 24 == 119 ? $flags$2$ | 512 : $flags$2$;
 return ($2 << 24 >> 24 == 97 ? $flags$4 | 1024 : $flags$4) | 0;
}

function _liquid_msb_index($_x) {
 $_x = $_x | 0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $11 = 0, $6 = 0, $9 = 0, $bits$02$lcssa = 0;
 $0 = $_x >>> 24;
 if (!$0) {
  $6 = $_x >>> 16 & 255;
  if (!$6) {
   $9 = $_x >>> 8 & 255;
   if (!$9) {
    $11 = $_x & 255;
    if (!$11) {
     $$0 = 0;
     return $$0 | 0;
    } else {
     $$lcssa = $11;
     $bits$02$lcssa = 8;
    }
   } else {
    $$lcssa = $9;
    $bits$02$lcssa = 16;
   }
  } else {
   $$lcssa = $6;
   $bits$02$lcssa = 24;
  }
 } else {
  $$lcssa = $0;
  $bits$02$lcssa = 32;
 }
 $$0 = $bits$02$lcssa - (HEAP32[gb + 7848 + ($$lcssa << 2) >> 2] | 0) | 0;
 return $$0 | 0;
}

function _dotprod_rrrf_execute($_q, $_x, $_y) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 $_y = $_y | 0;
 var $0 = 0, $2 = 0, $9 = 0.0, $i$02$i = 0, $r$0$lcssa$i = 0.0, $r$01$i = 0.0;
 $0 = HEAP32[$_q >> 2] | 0;
 $2 = HEAP32[$_q + 4 >> 2] | 0;
 if (!$2) {
  $r$0$lcssa$i = 0.0;
  HEAPF32[$_y >> 2] = $r$0$lcssa$i;
  return;
 } else {
  $i$02$i = 0;
  $r$01$i = 0.0;
 }
 while (1) {
  $9 = $r$01$i + +HEAPF32[$0 + ($i$02$i << 2) >> 2] * +HEAPF32[$_x + ($i$02$i << 2) >> 2];
  $i$02$i = $i$02$i + 1 | 0;
  if (($i$02$i | 0) == ($2 | 0)) {
   $r$0$lcssa$i = $9;
   break;
  } else $r$01$i = $9;
 }
 HEAPF32[$_y >> 2] = $r$0$lcssa$i;
 return;
}

function _fec_hamming84_encode($_q, $_dec_msg_len, $_msg_dec, $_msg_enc) {
 $_q = $_q | 0;
 $_dec_msg_len = $_dec_msg_len | 0;
 $_msg_dec = $_msg_dec | 0;
 $_msg_enc = $_msg_enc | 0;
 var $2 = 0, $i$02 = 0, $j$01 = 0;
 if (!$_dec_msg_len) return; else {
  $i$02 = 0;
  $j$01 = 0;
 }
 while (1) {
  $2 = HEAP8[$_msg_dec + $i$02 >> 0] | 0;
  HEAP8[$_msg_enc + $j$01 >> 0] = HEAP8[(($2 & 255) >>> 4 & 255) + (gb + 13811) >> 0] | 0;
  HEAP8[$_msg_enc + ($j$01 | 1) >> 0] = HEAP8[($2 & 15) + (gb + 13811) >> 0] | 0;
  $i$02 = $i$02 + 1 | 0;
  if (($i$02 | 0) == ($_dec_msg_len | 0)) break; else $j$01 = $j$01 + 2 | 0;
 }
 return;
}

function _modem_demodulate($_q, $x, $symbol_out) {
 $_q = $_q | 0;
 $x = $x | 0;
 $symbol_out = $symbol_out | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 8 | 0;
 $0 = sp;
 $2 = HEAP32[$_q + 240 >> 2] | 0;
 $5 = HEAP32[$x + 4 >> 2] | 0;
 HEAP32[$0 >> 2] = HEAP32[$x >> 2];
 HEAP32[$0 + 4 >> 2] = $5;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 mftCall_viii($2 | 0, $_q | 0, $$byval_copy | 0, $symbol_out | 0);
 STACKTOP = sp;
 return;
}

function _bucket_is_empty($hashtable, $bucket) {
 $hashtable = $hashtable | 0;
 $bucket = $bucket | 0;
 var $0 = 0, $1 = 0, $13 = 0, $14 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = $hashtable;
 HEAP32[$1 >> 2] = $bucket;
 if ((HEAP32[HEAP32[$1 >> 2] >> 2] | 0) != ((HEAP32[$0 >> 2] | 0) + 12 | 0)) {
  $14 = 0;
  $13 = $14 & 1;
  STACKTOP = sp;
  return $13 | 0;
 }
 $14 = (HEAP32[HEAP32[$1 >> 2] >> 2] | 0) == (HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0);
 $13 = $14 & 1;
 STACKTOP = sp;
 return $13 | 0;
}

function ___stdout_write($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $9 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 HEAP32[$f + 36 >> 2] = fb + 1;
 if (!(HEAP32[$f >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$f + 60 >> 2];
  HEAP32[$vararg_buffer + 4 >> 2] = 21505;
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 12;
  if (___syscall54(54, $vararg_buffer | 0) | 0) HEAP8[$f + 75 >> 0] = -1;
 }
 $9 = ___stdio_write($f, $buf, $len) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function _quiet_encoder_send($e, $buf, $len) {
 $e = $e | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $$1 = 0, $11 = 0, $3 = 0, $4 = 0;
 if ((HEAP32[$e + 84 >> 2] | 0) >>> 0 < $len >>> 0) {
  $$1 = -1;
  return $$1 | 0;
 }
 $3 = $e + 148 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 HEAP8[$4 >> 0] = $len;
 HEAP8[$4 + 1 >> 0] = $len >> 8;
 HEAP8[$4 + 2 >> 0] = $len >> 16;
 HEAP8[$4 + 3 >> 0] = $len >> 24;
 _memcpy((HEAP32[$3 >> 2] | 0) + 4 | 0, $buf | 0, $len | 0) | 0;
 $11 = _ring_write(HEAP32[$e + 144 >> 2] | 0, HEAP32[$3 >> 2] | 0, $len + 4 | 0) | 0;
 $$1 = ($11 | 0) == -1 ? -1 : $11 + -4 | 0;
 return $$1 | 0;
}

function _strcmp($l, $r) {
 $l = $l | 0;
 $r = $r | 0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $6 = 0, $7 = 0;
 $0 = HEAP8[$l >> 0] | 0;
 $1 = HEAP8[$r >> 0] | 0;
 if ($0 << 24 >> 24 == 0 ? 1 : $0 << 24 >> 24 != $1 << 24 >> 24) {
  $$lcssa = $0;
  $$lcssa2 = $1;
 } else {
  $$014 = $l;
  $$05 = $r;
  do {
   $$014 = $$014 + 1 | 0;
   $$05 = $$05 + 1 | 0;
   $6 = HEAP8[$$014 >> 0] | 0;
   $7 = HEAP8[$$05 >> 0] | 0;
  } while (!($6 << 24 >> 24 == 0 ? 1 : $6 << 24 >> 24 != $7 << 24 >> 24));
  $$lcssa = $6;
  $$lcssa2 = $7;
 }
 return ($$lcssa & 255) - ($$lcssa2 & 255) | 0;
}

function _modem_modulate($_q, $_symbol_in, $_y) {
 $_q = $_q | 0;
 $_symbol_in = $_symbol_in | 0;
 $_y = $_y | 0;
 var $12 = 0, $8 = 0;
 if ((HEAP32[$_q + 8 >> 2] | 0) >>> 0 <= $_symbol_in >>> 0) {
  _fwrite(gb + 31561 | 0, 65, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if (!(HEAP32[$_q + 80 >> 2] | 0)) {
  mftCall_viii(HEAP32[$_q + 236 >> 2] | 0, $_q | 0, $_symbol_in | 0, $_y | 0);
  return;
 } else {
  $8 = HEAP32[$_q + 76 >> 2] | 0;
  $12 = HEAP32[$8 + ($_symbol_in << 3) + 4 >> 2] | 0;
  HEAP32[$_y >> 2] = HEAP32[$8 + ($_symbol_in << 3) >> 2];
  HEAP32[$_y + 4 >> 2] = $12;
  return;
 }
}

function _puts($s) {
 $s = $s | 0;
 var $0 = 0, $10 = 0, $11 = 0, $18 = 0, $20 = 0;
 $0 = HEAP32[gb + 9452 >> 2] | 0;
 if ((HEAP32[$0 + 76 >> 2] | 0) > -1) $20 = ___lockfile($0) | 0; else $20 = 0;
 do if ((_fputs($s, $0) | 0) < 0) $18 = 1; else {
  if ((HEAP8[$0 + 75 >> 0] | 0) != 10) {
   $10 = $0 + 20 | 0;
   $11 = HEAP32[$10 >> 2] | 0;
   if ($11 >>> 0 < (HEAP32[$0 + 16 >> 2] | 0) >>> 0) {
    HEAP32[$10 >> 2] = $11 + 1;
    HEAP8[$11 >> 0] = 10;
    $18 = 0;
    break;
   }
  }
  $18 = (___overflow($0, 10) | 0) < 0;
 } while (0);
 if ($20 | 0) ___unlockfile($0);
 return $18 << 31 >> 31 | 0;
}

function _flexframegen_reconfigure($_q) {
 $_q = $_q | 0;
 var $0 = 0, $13 = 0, $15 = 0, $18 = 0;
 $0 = $_q + 92 | 0;
 _qpacketmodem_configure(HEAP32[$0 >> 2] | 0, HEAP32[$_q + 88 >> 2] | 0, HEAP32[$_q + 32 >> 2] | 0, HEAP32[$_q + 36 >> 2] | 0, HEAP32[$_q + 40 >> 2] | 0, HEAP32[$_q + 44 >> 2] | 0) | 0;
 $13 = _qpacketmodem_get_frame_len(HEAP32[$0 >> 2] | 0) | 0;
 HEAP32[$_q + 96 >> 2] = $13;
 $15 = $_q + 100 | 0;
 $18 = _realloc(HEAP32[$15 >> 2] | 0, $13 << 3) | 0;
 HEAP32[$15 >> 2] = $18;
 if (!$18) {
  _fwrite(gb + 25786 | 0, 71, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 } else return;
}

function _buf_to_uint32($data) {
 $data = $data | 0;
 var $0 = 0, $3 = 0, $i = 0, $result = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 8 | 0;
 $i = sp + 4 | 0;
 $result = sp;
 HEAP32[$0 >> 2] = $data;
 HEAP32[$result >> 2] = 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  $3 = HEAP32[$result >> 2] | 0;
  if ((HEAP32[$i >> 2] | 0) >>> 0 >= 4) break;
  HEAP32[$result >> 2] = $3 << 8 | (HEAPU8[(HEAP32[$0 >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return $3 | 0;
}

function _fft_execute_dft_2($_q) {
 $_q = $_q | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $14 = 0, $23 = 0.0, $24 = 0;
 $0 = $_q + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $10 = +HEAPF32[$1 + 4 >> 2] + +HEAPF32[$1 + 12 >> 2];
 $11 = $_q + 8 | 0;
 $12 = HEAP32[$11 >> 2] | 0;
 HEAPF32[$12 >> 2] = +HEAPF32[$1 >> 2] + +HEAPF32[$1 + 8 >> 2];
 HEAPF32[$12 + 4 >> 2] = $10;
 $14 = HEAP32[$0 >> 2] | 0;
 $23 = +HEAPF32[$14 + 4 >> 2] - +HEAPF32[$14 + 12 >> 2];
 $24 = HEAP32[$11 >> 2] | 0;
 HEAPF32[$24 + 8 >> 2] = +HEAPF32[$14 >> 2] - +HEAPF32[$14 + 8 >> 2];
 HEAPF32[$24 + 12 >> 2] = $23;
 return;
}

function _fec_rep5_encode($_q, $_dec_msg_len, $_msg_dec, $_msg_enc) {
 $_q = $_q | 0;
 $_dec_msg_len = $_dec_msg_len | 0;
 $_msg_dec = $_msg_dec | 0;
 $_msg_enc = $_msg_enc | 0;
 _memcpy($_msg_enc | 0, $_msg_dec | 0, $_dec_msg_len | 0) | 0;
 _memcpy($_msg_enc + $_dec_msg_len | 0, $_msg_dec | 0, $_dec_msg_len | 0) | 0;
 _memcpy($_msg_enc + ($_dec_msg_len << 1) | 0, $_msg_dec | 0, $_dec_msg_len | 0) | 0;
 _memcpy($_msg_enc + ($_dec_msg_len * 3 | 0) | 0, $_msg_dec | 0, $_dec_msg_len | 0) | 0;
 _memcpy($_msg_enc + ($_dec_msg_len << 2) | 0, $_msg_dec | 0, $_dec_msg_len | 0) | 0;
 return;
}

function _sinhf($x) {
 $x = +$x;
 var $$ = 0.0, $$0 = 0.0, $2 = 0, $4 = 0.0, $fabs = 0.0;
 $$ = ((HEAPF32[tempDoublePtr >> 2] = $x, HEAP32[tempDoublePtr >> 2] | 0) | 0) < 0 ? -.5 : .5;
 $fabs = +Math_abs(+$x);
 $2 = (HEAPF32[tempDoublePtr >> 2] = $fabs, HEAP32[tempDoublePtr >> 2] | 0);
 do if ($2 >>> 0 < 1118925335) {
  $4 = +_expm1f($fabs);
  if ($2 >>> 0 >= 1065353216) {
   $$0 = $$ * ($4 + $4 / ($4 + 1.0));
   break;
  }
  if ($2 >>> 0 < 964689920) $$0 = $x; else $$0 = $$ * ($4 * 2.0 - $4 * $4 / ($4 + 1.0));
 } else $$0 = $$ * 2.0 * +___expo2f($fabs); while (0);
 return +$$0;
}

function _json_decref_1974($json) {
 $json = $json | 0;
 var $0 = 0, $10 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $json;
 if (!(HEAP32[$0 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0) == -1) {
  STACKTOP = sp;
  return;
 }
 $8 = (HEAP32[$0 >> 2] | 0) + 4 | 0;
 $10 = (HEAP32[$8 >> 2] | 0) + -1 | 0;
 HEAP32[$8 >> 2] = $10;
 if ($10 | 0) {
  STACKTOP = sp;
  return;
 }
 _json_delete(HEAP32[$0 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _json_decref_1931($json) {
 $json = $json | 0;
 var $0 = 0, $10 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $json;
 if (!(HEAP32[$0 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0) == -1) {
  STACKTOP = sp;
  return;
 }
 $8 = (HEAP32[$0 >> 2] | 0) + 4 | 0;
 $10 = (HEAP32[$8 >> 2] | 0) + -1 | 0;
 HEAP32[$8 >> 2] = $10;
 if ($10 | 0) {
  STACKTOP = sp;
  return;
 }
 _json_delete(HEAP32[$0 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _modem_modulate_dpsk($_q, $_sym_in, $_y) {
 $_q = $_q | 0;
 $_sym_in = $_sym_in | 0;
 $_y = $_y | 0;
 var $13 = 0.0, $15 = 0.0, $17 = 0.0, $2 = 0.0, $6 = 0, $9 = 0.0;
 $2 = +((_gray_decode($_sym_in) | 0) << 1 >>> 0);
 $6 = $_q + 104 | 0;
 $9 = +HEAPF32[$6 >> 2] + +HEAPF32[$_q + 108 >> 2] * $2;
 $13 = $9 - ($9 > 6.283185307179586 ? 6.283185307179586 : 0.0);
 HEAPF32[$6 >> 2] = $13;
 $15 = +Math_sin(+$13);
 $17 = +Math_cos(+$13) + $15 * 0.0;
 HEAPF32[$_y >> 2] = $17;
 HEAPF32[$_y + 4 >> 2] = $15;
 HEAPF32[$_q + 84 >> 2] = $17;
 HEAPF32[$_q + 88 >> 2] = $15;
 return;
}

function _json_object_set_nocheck($object, $key, $value) {
 $object = $object | 0;
 $key = $key | 0;
 $value = $value | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$0 >> 2] = $object;
 HEAP32[$1 >> 2] = $key;
 HEAP32[$2 >> 2] = $value;
 $3 = HEAP32[$0 >> 2] | 0;
 $4 = HEAP32[$1 >> 2] | 0;
 $7 = _json_object_set_new_nocheck($3, $4, _json_incref(HEAP32[$2 >> 2] | 0) | 0) | 0;
 STACKTOP = sp;
 return $7 | 0;
}

function _generate_seed() {
 var $8 = 0, $done = 0, $seed = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $seed = sp + 4 | 0;
 $done = sp;
 HEAP32[$done >> 2] = 0;
 if (!(HEAP32[$done >> 2] | 0)) if (!(_seed_from_urandom($seed) | 0)) HEAP32[$done >> 2] = 1;
 if (!(HEAP32[$done >> 2] | 0)) _seed_from_timestamp_and_pid($seed) | 0;
 if (HEAP32[$seed >> 2] | 0) {
  $8 = HEAP32[$seed >> 2] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 HEAP32[$seed >> 2] = 1;
 $8 = HEAP32[$seed >> 2] | 0;
 STACKTOP = sp;
 return $8 | 0;
}

function _json_decref($json) {
 $json = $json | 0;
 var $0 = 0, $10 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $json;
 if (!(HEAP32[$0 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0) == -1) {
  STACKTOP = sp;
  return;
 }
 $8 = (HEAP32[$0 >> 2] | 0) + 4 | 0;
 $10 = (HEAP32[$8 >> 2] | 0) + -1 | 0;
 HEAP32[$8 >> 2] = $10;
 if ($10 | 0) {
  STACKTOP = sp;
  return;
 }
 _json_delete(HEAP32[$0 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _modem_get_demodulator_evm($_q) {
 $_q = $_q | 0;
 var $$byval_copy = 0, $0 = 0, $10 = 0.0, $12 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 8 | 0;
 $0 = sp;
 $10 = +HEAPF32[$_q + 96 >> 2] - +HEAPF32[$_q + 88 >> 2];
 HEAPF32[$0 >> 2] = +HEAPF32[$_q + 92 >> 2] - +HEAPF32[$_q + 84 >> 2];
 HEAPF32[$0 + 4 >> 2] = $10;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 $12 = +_cabsf($$byval_copy);
 STACKTOP = sp;
 return +$12;
}

function _fec_block_get_enc_msg_len($_dec_msg_len, $_m, $_k) {
 $_dec_msg_len = $_dec_msg_len | 0;
 $_m = $_m | 0;
 $_k = $_k | 0;
 var $10 = 0, $4 = 0;
 if (!$_m) {
  _fwrite(gb + 12682 | 0, 61, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if ($_k >>> 0 < $_m >>> 0) {
  _fwrite(gb + 12744 | 0, 76, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 } else {
  $4 = $_dec_msg_len << 3;
  $10 = Math_imul(((($4 >>> 0) % ($_m >>> 0) | 0 | 0) != 0 & 1) + (($4 >>> 0) / ($_m >>> 0) | 0) | 0, $_k) | 0;
  return (($10 & 7 | 0) != 0 & 1) + ($10 >>> 3) | 0;
 }
 return 0;
}

function _ofdmflexframesync_destroy($_q) {
 $_q = $_q | 0;
 _ofdmframesync_destroy(HEAP32[$_q + 184 >> 2] | 0);
 _packetizer_destroy(HEAP32[$_q + 40 >> 2] | 0);
 _modem_destroy(HEAP32[$_q + 36 >> 2] | 0);
 _packetizer_destroy(HEAP32[$_q + 100 >> 2] | 0);
 _modem_destroy(HEAP32[$_q + 104 >> 2] | 0);
 _free(HEAP32[$_q + 12 >> 2] | 0);
 _free(HEAP32[$_q + 108 >> 2] | 0);
 _free(HEAP32[$_q + 112 >> 2] | 0);
 _free(HEAP32[$_q + 128 >> 2] | 0);
 _free(HEAP32[$_q + 44 >> 2] | 0);
 _free(HEAP32[$_q + 48 >> 2] | 0);
 _free(HEAP32[$_q + 52 >> 2] | 0);
 _free($_q);
 return;
}

function _fec_rep3_decode($_q, $_dec_msg_len, $_msg_enc, $_msg_dec) {
 $_q = $_q | 0;
 $_dec_msg_len = $_dec_msg_len | 0;
 $_msg_enc = $_msg_enc | 0;
 $_msg_dec = $_msg_dec | 0;
 var $1 = 0, $6 = 0, $9 = 0, $i$01 = 0;
 if (!$_dec_msg_len) return;
 $1 = $_dec_msg_len << 1;
 $i$01 = 0;
 do {
  $6 = HEAP8[$_msg_enc + ($i$01 + $_dec_msg_len) >> 0] | 0;
  $9 = HEAP8[$_msg_enc + ($i$01 + $1) >> 0] | 0;
  HEAP8[$_msg_dec + $i$01 >> 0] = ($9 | $6) & HEAP8[$_msg_enc + $i$01 >> 0] | $9 & $6;
  $i$01 = $i$01 + 1 | 0;
 } while (($i$01 | 0) != ($_dec_msg_len | 0));
 return;
}

function _ofdmflexframegen_destroy($_q) {
 $_q = $_q | 0;
 _ofdmframegen_destroy(HEAP32[$_q + 40 >> 2] | 0);
 _packetizer_destroy(HEAP32[$_q + 56 >> 2] | 0);
 _modem_destroy(HEAP32[$_q + 52 >> 2] | 0);
 _packetizer_destroy(HEAP32[$_q + 88 >> 2] | 0);
 _modem_destroy(HEAP32[$_q + 96 >> 2] | 0);
 _free(HEAP32[$_q + 100 >> 2] | 0);
 _free(HEAP32[$_q + 104 >> 2] | 0);
 _free(HEAP32[$_q + 36 >> 2] | 0);
 _free(HEAP32[$_q + 12 >> 2] | 0);
 _free(HEAP32[$_q + 60 >> 2] | 0);
 _free(HEAP32[$_q + 64 >> 2] | 0);
 _free(HEAP32[$_q + 68 >> 2] | 0);
 _free($_q);
 return;
}

function _interleaver_create($_n) {
 $_n = $_n | 0;
 var $0 = 0, $6 = 0, $9 = 0, $storemerge = 0, $storemerge$lcssa = 0;
 $0 = _malloc(16) | 0;
 HEAP32[$0 >> 2] = $_n;
 HEAP32[$0 + 12 >> 2] = 4;
 $6 = (~~+Math_floor(+(+Math_sqrt(+(+($_n >>> 0))))) >>> 0) + 1 | 0;
 HEAP32[$0 + 4 >> 2] = $6;
 $9 = $0 + 8 | 0;
 $storemerge = ($_n >>> 0) / ($6 >>> 0) | 0;
 while (1) if ((Math_imul($6, $storemerge) | 0) >>> 0 > $_n >>> 0) {
  $storemerge$lcssa = $storemerge;
  break;
 } else $storemerge = $storemerge + 1 | 0;
 HEAP32[$9 >> 2] = $storemerge$lcssa;
 return $0 | 0;
}

function _msequence_create_default($_m) {
 $_m = $_m | 0;
 var $2 = 0, $3 = 0;
 if (($_m + -2 | 0) >>> 0 > 13) {
  _fwrite(gb + 39186 | 0, 42, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 } else {
  $2 = _malloc(24) | 0;
  $3 = gb + 7464 + ($_m * 24 | 0) | 0;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  HEAP32[$2 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
  HEAP32[$2 + 16 >> 2] = HEAP32[$3 + 16 >> 2];
  HEAP32[$2 + 20 >> 2] = HEAP32[$3 + 20 >> 2];
  return $2 | 0;
 }
 return 0;
}

function _modem_destroy($_q) {
 $_q = $_q | 0;
 var $1 = 0, $4 = 0, $6 = 0;
 $1 = HEAP32[$_q + 76 >> 2] | 0;
 if ($1 | 0) _free($1);
 $4 = HEAP32[$_q + 244 >> 2] | 0;
 if ($4 | 0) _free($4);
 $6 = HEAP32[$_q >> 2] | 0;
 switch ($6 | 0) {
 case 50:
  {
   _free(HEAP32[$_q + 100 >> 2] | 0);
   _free($_q);
   return;
  }
 case 51:
  {
   _free(HEAP32[$_q + 100 >> 2] | 0);
   _free($_q);
   return;
  }
 default:
  {
   if (!(_liquid_modem_is_apsk($6) | 0)) {
    _free($_q);
    return;
   }
   _free(HEAP32[$_q + 232 >> 2] | 0);
   _free($_q);
   return;
  }
 }
}

function _ofdmflexframesync_internal_callback($_X, $_p, $_M, $_userdata) {
 $_X = $_X | 0;
 $_p = $_p | 0;
 $_M = $_M | 0;
 $_userdata = $_userdata | 0;
 var $0 = 0;
 $0 = $_userdata + 188 | 0;
 HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 1;
 switch (HEAP32[$_userdata + 192 >> 2] | 0) {
 case 0:
  {
   _ofdmflexframesync_rxheader($_userdata, $_X);
   return 0;
  }
 case 1:
  {
   _ofdmflexframesync_rxpayload($_userdata, $_X);
   return 0;
  }
 default:
  {
   _fwrite(gb + 29714 | 0, 81, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
   _exit(1);
  }
 }
 return 0;
}

function _qdetector_cccf_set_threshold($_q, $_threshold) {
 $_q = $_q | 0;
 $_threshold = +$_threshold;
 var $2 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 if ($_threshold <= 0.0 | $_threshold > 2.0) {
  $2 = HEAP32[gb + 9336 >> 2] | 0;
  HEAPF64[$vararg_buffer >> 3] = $_threshold;
  _fprintf($2, gb + 29860 | 0, $vararg_buffer) | 0;
  STACKTOP = sp;
  return;
 } else {
  HEAPF32[$_q + 48 >> 2] = $_threshold;
  STACKTOP = sp;
  return;
 }
}

function _list_insert($list, $node) {
 $list = $list | 0;
 $node = $node | 0;
 var $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = $list;
 HEAP32[$1 >> 2] = $node;
 HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] = HEAP32[$0 >> 2];
 HEAP32[HEAP32[$1 >> 2] >> 2] = HEAP32[HEAP32[$0 >> 2] >> 2];
 HEAP32[(HEAP32[HEAP32[$0 >> 2] >> 2] | 0) + 4 >> 2] = HEAP32[$1 >> 2];
 HEAP32[HEAP32[$0 >> 2] >> 2] = HEAP32[$1 >> 2];
 STACKTOP = sp;
 return;
}

function _firpfb_crcf_push($_q, $_x) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 8 | 0;
 $0 = sp;
 $2 = HEAP32[$_q + 16 >> 2] | 0;
 $5 = HEAP32[$_x + 4 >> 2] | 0;
 HEAP32[$0 >> 2] = HEAP32[$_x >> 2];
 HEAP32[$0 + 4 >> 2] = $5;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 _windowcf_push($2, $$byval_copy);
 STACKTOP = sp;
 return;
}

function _packetizer_destroy($_p) {
 $_p = $_p | 0;
 var $0 = 0, $3 = 0, $i$01 = 0;
 $0 = $_p + 20 | 0;
 $3 = $_p + 16 | 0;
 if (HEAP32[$0 >> 2] | 0) {
  $i$01 = 0;
  do {
   _fec_destroy(HEAP32[(HEAP32[$3 >> 2] | 0) + ($i$01 * 20 | 0) + 12 >> 2] | 0);
   _interleaver_destroy(HEAP32[(HEAP32[$3 >> 2] | 0) + ($i$01 * 20 | 0) + 16 >> 2] | 0);
   $i$01 = $i$01 + 1 | 0;
  } while ($i$01 >>> 0 < (HEAP32[$0 >> 2] | 0) >>> 0);
 }
 _free(HEAP32[$3 >> 2] | 0);
 _free(HEAP32[$_p + 28 >> 2] | 0);
 _free(HEAP32[$_p + 32 >> 2] | 0);
 _free($_p);
 return;
}

function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0;
 $y_sroa_0_0_extract_trunc = $b$0;
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
 $1$1 = getTempRet0() | 0;
 return (setTempRet0((Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0 | 0), $1$0 | 0 | 0) | 0;
}

function _fec_hamming84_decode($_q, $_dec_msg_len, $_msg_enc, $_msg_dec) {
 $_q = $_q | 0;
 $_dec_msg_len = $_dec_msg_len | 0;
 $_msg_enc = $_msg_enc | 0;
 $_msg_dec = $_msg_dec | 0;
 var $1 = 0, $i$01 = 0;
 if (!$_dec_msg_len) return; else $i$01 = 0;
 do {
  $1 = $i$01 << 1;
  HEAP8[$_msg_dec + $i$01 >> 0] = (HEAPU8[(HEAPU8[$_msg_enc + $1 >> 0] | 0) + (gb + 13827) >> 0] | 0) << 4 | (HEAPU8[(HEAPU8[$_msg_enc + ($1 | 1) >> 0] | 0) + (gb + 13827) >> 0] | 0);
  $i$01 = $i$01 + 1 | 0;
 } while (($i$01 | 0) != ($_dec_msg_len | 0));
 return;
}

function _modem_demodulate_qpsk($_q, $_x, $_sym_out) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 $_sym_out = $_sym_out | 0;
 var $0 = 0.0, $3 = 0.0, $4 = 0, $not$ = 0;
 $0 = +HEAPF32[$_x >> 2];
 $not$ = !($0 > 0.0);
 $3 = +HEAPF32[$_x + 4 >> 2];
 $4 = $3 > 0.0;
 HEAP32[$_sym_out >> 2] = ($4 ? 0 : 2) | $not$ & 1;
 HEAPF32[$_q + 92 >> 2] = ($not$ ? -.7071067811865476 : .7071067811865476) + ($4 ? 0.0 : -0.0);
 HEAPF32[$_q + 96 >> 2] = $4 ? .7071067690849304 : -.7071067690849304;
 HEAPF32[$_q + 84 >> 2] = $0;
 HEAPF32[$_q + 88 >> 2] = $3;
 return;
}

function _iirfilt_crcf_destroy($_q) {
 $_q = $_q | 0;
 var $6 = 0, $9 = 0, $i$01 = 0;
 _free(HEAP32[$_q >> 2] | 0);
 _free(HEAP32[$_q + 4 >> 2] | 0);
 if ((HEAP32[$_q + 24 >> 2] | 0) != 1) {
  _free(HEAP32[$_q + 8 >> 2] | 0);
  _free($_q);
  return;
 }
 $6 = $_q + 32 | 0;
 $9 = $_q + 28 | 0;
 if (HEAP32[$6 >> 2] | 0) {
  $i$01 = 0;
  do {
   _free(HEAP32[(HEAP32[$9 >> 2] | 0) + ($i$01 << 2) >> 2] | 0);
   $i$01 = $i$01 + 1 | 0;
  } while ($i$01 >>> 0 < (HEAP32[$6 >> 2] | 0) >>> 0);
 }
 _free(HEAP32[$9 >> 2] | 0);
 _free($_q);
 return;
}

function _fwrite($src, $size, $nmemb, $f) {
 $src = $src | 0;
 $size = $size | 0;
 $nmemb = $nmemb | 0;
 $f = $f | 0;
 var $0 = 0, $10 = 0, $6 = 0, $8 = 0, $phitmp = 0;
 $0 = Math_imul($nmemb, $size) | 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($f) | 0) == 0;
  $6 = ___fwritex($src, $0, $f) | 0;
  if ($phitmp) $8 = $6; else {
   ___unlockfile($f);
   $8 = $6;
  }
 } else $8 = ___fwritex($src, $0, $f) | 0;
 if (($8 | 0) == ($0 | 0)) $10 = $nmemb; else $10 = ($8 >>> 0) / ($size >>> 0) | 0;
 return $10 | 0;
}

function _firinterp_crcf_destroy($_q) {
 $_q = $_q | 0;
 var $1 = 0, $2 = 0, $5 = 0, $i$01$i = 0;
 $1 = HEAP32[$_q + 16 >> 2] | 0;
 $2 = $1 + 12 | 0;
 $5 = $1 + 20 | 0;
 if (HEAP32[$2 >> 2] | 0) {
  $i$01$i = 0;
  do {
   _dotprod_crcf_destroy(HEAP32[(HEAP32[$5 >> 2] | 0) + ($i$01$i << 2) >> 2] | 0);
   $i$01$i = $i$01$i + 1 | 0;
  } while ($i$01$i >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0);
 }
 _free(HEAP32[$5 >> 2] | 0);
 _windowcf_destroy(HEAP32[$1 + 16 >> 2] | 0);
 _free($1);
 _free(HEAP32[$_q >> 2] | 0);
 _free($_q);
 return;
}

function _firinterp_rrrf_destroy($_q) {
 $_q = $_q | 0;
 var $1 = 0, $2 = 0, $5 = 0, $i$01$i = 0;
 $1 = HEAP32[$_q + 16 >> 2] | 0;
 $2 = $1 + 12 | 0;
 $5 = $1 + 20 | 0;
 if (HEAP32[$2 >> 2] | 0) {
  $i$01$i = 0;
  do {
   _dotprod_rrrf_destroy(HEAP32[(HEAP32[$5 >> 2] | 0) + ($i$01$i << 2) >> 2] | 0);
   $i$01$i = $i$01$i + 1 | 0;
  } while ($i$01$i >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0);
 }
 _free(HEAP32[$5 >> 2] | 0);
 _windowf_destroy(HEAP32[$1 + 16 >> 2] | 0);
 _free($1);
 _free(HEAP32[$_q >> 2] | 0);
 _free($_q);
 return;
}

function _calloc($n_elements, $elem_size) {
 $n_elements = $n_elements | 0;
 $elem_size = $elem_size | 0;
 var $1 = 0, $6 = 0, $req$0 = 0;
 if (!$n_elements) $req$0 = 0; else {
  $1 = Math_imul($elem_size, $n_elements) | 0;
  if (($elem_size | $n_elements) >>> 0 > 65535) $req$0 = (($1 >>> 0) / ($n_elements >>> 0) | 0 | 0) == ($elem_size | 0) ? $1 : -1; else $req$0 = $1;
 }
 $6 = _malloc($req$0) | 0;
 if (!$6) return $6 | 0;
 if (!(HEAP32[$6 + -4 >> 2] & 3)) return $6 | 0;
 _memset($6 | 0, 0, $req$0 | 0) | 0;
 return $6 | 0;
}

function _json_string_value($json) {
 $json = $json | 0;
 var $0 = 0, $1 = 0, $10 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $json;
 if (HEAP32[$1 >> 2] | 0) if ((HEAP32[HEAP32[$1 >> 2] >> 2] | 0) == 2) {
  HEAP32[$0 >> 2] = HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2];
  $10 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $10 | 0;
 }
 HEAP32[$0 >> 2] = 0;
 $10 = HEAP32[$0 >> 2] | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function _json_real_value($json) {
 $json = $json | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 $1 = sp + 8 | 0;
 HEAP32[$1 >> 2] = $json;
 if (HEAP32[$1 >> 2] | 0) if ((HEAP32[HEAP32[$1 >> 2] >> 2] | 0) == 4) {
  HEAPF64[$0 >> 3] = +HEAPF64[(HEAP32[$1 >> 2] | 0) + 8 >> 3];
  $10 = +HEAPF64[$0 >> 3];
  STACKTOP = sp;
  return +$10;
 }
 HEAPF64[$0 >> 3] = 0.0;
 $10 = +HEAPF64[$0 >> 3];
 STACKTOP = sp;
 return +$10;
}

function _nco_crcf_pll_step($_q, $_dphi) {
 $_q = $_q | 0;
 $_dphi = +$_dphi;
 var $11 = 0.0, $12 = 0.0, $3 = 0, $9 = 0;
 $3 = $_q + 8 | 0;
 HEAPF32[$3 >> 2] = +HEAPF32[$3 >> 2] + +HEAPF32[$_q + 1052 >> 2] * $_dphi;
 $9 = $_q + 4 | 0;
 $11 = +HEAPF32[$9 >> 2] + +HEAPF32[$_q + 1056 >> 2] * $_dphi;
 HEAPF32[$9 >> 2] = $11;
 $12 = $11;
 if ($12 > 3.141592653589793) {
  HEAPF32[$9 >> 2] = $12 + -6.283185307179586;
  return;
 }
 if (!($12 < -3.141592653589793)) return;
 HEAPF32[$9 >> 2] = $12 + 6.283185307179586;
 return;
}

function _jsonp_malloc($size) {
 $size = $size | 0;
 var $0 = 0, $1 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $size;
 if (HEAP32[$1 >> 2] | 0) {
  HEAP32[$0 >> 2] = mftCall_ii(HEAP32[gb + 9304 >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0;
  $7 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $7 | 0;
 } else {
  HEAP32[$0 >> 2] = 0;
  $7 = HEAP32[$0 >> 2] | 0;
  STACKTOP = sp;
  return $7 | 0;
 }
 return 0;
}

function _modem_modulate_qam($_q, $_sym_in, $_y) {
 $_q = $_q | 0;
 $_sym_in = $_sym_in | 0;
 $_y = $_y | 0;
 var $1 = 0, $15 = 0.0, $23 = 0.0, $6 = 0, $7 = 0;
 $1 = HEAP32[$_q + 104 >> 2] | 0;
 $6 = _gray_decode($_sym_in >>> $1) | 0;
 $7 = _gray_decode((1 << $1) + -1 & $_sym_in) | 0;
 $15 = +HEAPF32[$_q + 116 >> 2];
 $23 = $15 * +(($7 << 1 | 1) - (HEAP32[$_q + 112 >> 2] | 0) | 0);
 HEAPF32[$_y >> 2] = $15 * +(($6 << 1 | 1) - (HEAP32[$_q + 108 >> 2] | 0) | 0) + $23 * 0.0;
 HEAPF32[$_y + 4 >> 2] = $23;
 return;
}

function _coshf($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $10 = 0.0, $3 = 0.0, $fabs = 0.0;
 $fabs = +Math_abs(+$x);
 $0 = (HEAPF32[tempDoublePtr >> 2] = $fabs, HEAP32[tempDoublePtr >> 2] | 0);
 do if ($0 >>> 0 < 1060205079) if ($0 >>> 0 < 964689920) $$0 = 1.0; else {
  $3 = +_expm1f($fabs);
  $$0 = $3 * $3 / (($3 + 1.0) * 2.0) + 1.0;
 } else if ($0 >>> 0 < 1118925335) {
  $10 = +Math_exp(+$fabs);
  $$0 = ($10 + 1.0 / $10) * .5;
  break;
 } else {
  $$0 = +___expo2f($fabs);
  break;
 } while (0);
 return +$$0;
}

function _polyf_val($_p, $_k, $_x) {
 $_p = $_p | 0;
 $_k = $_k | 0;
 $_x = +$_x;
 var $4 = 0.0, $i$01 = 0, $xk$02 = 0.0, $y$0$lcssa = 0.0, $y$03 = 0.0;
 if (!$_k) {
  $y$0$lcssa = 0.0;
  return +$y$0$lcssa;
 } else {
  $i$01 = 0;
  $xk$02 = 1.0;
  $y$03 = 0.0;
 }
 while (1) {
  $4 = $y$03 + $xk$02 * +HEAPF32[$_p + ($i$01 << 2) >> 2];
  $i$01 = $i$01 + 1 | 0;
  if (($i$01 | 0) == ($_k | 0)) {
   $y$0$lcssa = $4;
   break;
  } else {
   $xk$02 = $xk$02 * $_x;
   $y$03 = $4;
  }
 }
 return +$y$0$lcssa;
}

function _gmskframesync_debug_enable($_q) {
 $_q = $_q | 0;
 var $0 = 0, $11 = 0;
 $0 = $_q + 236 | 0;
 if (HEAP32[$0 >> 2] | 0) {
  $11 = $_q + 232 | 0;
  HEAP32[$11 >> 2] = 1;
  HEAP32[$0 >> 2] = 1;
  return;
 }
 HEAP32[$_q + 240 >> 2] = _windowcf_create(2e3) | 0;
 HEAP32[$_q + 244 >> 2] = _windowf_create(2e3) | 0;
 HEAP32[$_q + 248 >> 2] = _windowf_create(2e3) | 0;
 HEAP32[$_q + 252 >> 2] = _windowf_create(2e3) | 0;
 $11 = $_q + 232 | 0;
 HEAP32[$11 >> 2] = 1;
 HEAP32[$0 >> 2] = 1;
 return;
}

function ___towrite($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $13 = 0, $2 = 0, $6 = 0;
 $0 = $f + 74 | 0;
 $2 = HEAP8[$0 >> 0] | 0;
 HEAP8[$0 >> 0] = $2 + 255 | $2;
 $6 = HEAP32[$f >> 2] | 0;
 if (!($6 & 8)) {
  HEAP32[$f + 8 >> 2] = 0;
  HEAP32[$f + 4 >> 2] = 0;
  $13 = HEAP32[$f + 44 >> 2] | 0;
  HEAP32[$f + 28 >> 2] = $13;
  HEAP32[$f + 20 >> 2] = $13;
  HEAP32[$f + 16 >> 2] = $13 + (HEAP32[$f + 48 >> 2] | 0);
  $$0 = 0;
 } else {
  HEAP32[$f >> 2] = $6 | 32;
  $$0 = -1;
 }
 return $$0 | 0;
}

function _resamp_rrrf_destroy($_q) {
 $_q = $_q | 0;
 var $1 = 0, $2 = 0, $5 = 0, $i$01$i = 0;
 $1 = HEAP32[$_q + 48 >> 2] | 0;
 $2 = $1 + 12 | 0;
 $5 = $1 + 20 | 0;
 if (HEAP32[$2 >> 2] | 0) {
  $i$01$i = 0;
  do {
   _dotprod_rrrf_destroy(HEAP32[(HEAP32[$5 >> 2] | 0) + ($i$01$i << 2) >> 2] | 0);
   $i$01$i = $i$01$i + 1 | 0;
  } while ($i$01$i >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0);
 }
 _free(HEAP32[$5 >> 2] | 0);
 _windowf_destroy(HEAP32[$1 + 16 >> 2] | 0);
 _free($1);
 _free($_q);
 return;
}

function _firdespm_destroy($_q) {
 $_q = $_q | 0;
 _free(HEAP32[$_q + 88 >> 2] | 0);
 _free(HEAP32[$_q + 64 >> 2] | 0);
 _free(HEAP32[$_q + 68 >> 2] | 0);
 _free(HEAP32[$_q + 72 >> 2] | 0);
 _free(HEAP32[$_q + 48 >> 2] | 0);
 _free(HEAP32[$_q + 52 >> 2] | 0);
 _free(HEAP32[$_q + 56 >> 2] | 0);
 _free(HEAP32[$_q + 60 >> 2] | 0);
 _free(HEAP32[$_q + 32 >> 2] | 0);
 _free(HEAP32[$_q + 36 >> 2] | 0);
 _free(HEAP32[$_q + 40 >> 2] | 0);
 _free(HEAP32[$_q + 44 >> 2] | 0);
 _free($_q);
 return;
}

function _detector_cccf_reset($_q) {
 $_q = $_q | 0;
 var $13 = 0;
 _windowcf_clear(HEAP32[$_q + 16 >> 2] | 0);
 _wdelayf_clear(HEAP32[$_q + 60 >> 2] | 0);
 HEAP32[$_q + 76 >> 2] = HEAP32[$_q + 4 >> 2];
 HEAP32[$_q + 72 >> 2] = 0;
 HEAP32[$_q + 52 >> 2] = 0;
 HEAP32[$_q + 56 >> 2] = 0;
 HEAPF32[$_q + 64 >> 2] = 0.0;
 $13 = $_q + 24 | 0;
 _memset(HEAP32[$_q + 44 >> 2] | 0, 0, HEAP32[$13 >> 2] << 2 | 0) | 0;
 _memset(HEAP32[$_q + 48 >> 2] | 0, 0, HEAP32[$13 >> 2] << 2 | 0) | 0;
 return;
}

function _seed_from_timestamp_and_pid($seed) {
 $seed = $seed | 0;
 var $0 = 0, $6 = 0, $7 = 0, $tv = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 8 | 0;
 $tv = sp;
 HEAP32[$0 >> 2] = $seed;
 _gettimeofday($tv | 0, 0) | 0;
 HEAP32[HEAP32[$0 >> 2] >> 2] = HEAP32[$tv >> 2] ^ HEAP32[$tv + 4 >> 2];
 $6 = _getpid() | 0;
 $7 = HEAP32[$0 >> 2] | 0;
 HEAP32[$7 >> 2] = HEAP32[$7 >> 2] ^ $6;
 STACKTOP = sp;
 return 0;
}

function _ofdmframegen_destroy($_q) {
 $_q = $_q | 0;
 _free(HEAP32[$_q + 8 >> 2] | 0);
 _free(HEAP32[$_q + 52 >> 2] | 0);
 _free(HEAP32[$_q + 56 >> 2] | 0);
 _fft_destroy_plan(HEAP32[$_q + 48 >> 2] | 0);
 _free(HEAP32[$_q + 16 >> 2] | 0);
 _free(HEAP32[$_q + 20 >> 2] | 0);
 _free(HEAP32[$_q + 60 >> 2] | 0);
 _free(HEAP32[$_q + 64 >> 2] | 0);
 _free(HEAP32[$_q + 68 >> 2] | 0);
 _free(HEAP32[$_q + 72 >> 2] | 0);
 _msequence_destroy(HEAP32[$_q + 76 >> 2] | 0);
 _free($_q);
 return;
}

function copyTempDouble(ptr) {
 ptr = ptr | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[ptr >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[ptr + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[ptr + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[ptr + 3 >> 0];
 HEAP8[tempDoublePtr + 4 >> 0] = HEAP8[ptr + 4 >> 0];
 HEAP8[tempDoublePtr + 5 >> 0] = HEAP8[ptr + 5 >> 0];
 HEAP8[tempDoublePtr + 6 >> 0] = HEAP8[ptr + 6 >> 0];
 HEAP8[tempDoublePtr + 7 >> 0] = HEAP8[ptr + 7 >> 0];
}

function _read($fd, $buf, $count) {
 $fd = $fd | 0;
 $buf = $buf | 0;
 $count = $count | 0;
 var $1 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = $fd;
 HEAP32[$vararg_buffer + 4 >> 2] = $buf;
 HEAP32[$vararg_buffer + 8 >> 2] = $count;
 $1 = ___syscall_ret(___syscall3(3, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function _liquid_modpow($_base, $_exp, $_n) {
 $_base = $_base | 0;
 $_exp = $_exp | 0;
 $_n = $_n | 0;
 var $2 = 0, $c$0$lcssa = 0, $c$01 = 0, $i$02 = 0;
 if (!$_exp) {
  $c$0$lcssa = 1;
  return $c$0$lcssa | 0;
 } else {
  $c$01 = 1;
  $i$02 = 0;
 }
 while (1) {
  $2 = ((Math_imul($c$01, $_base) | 0) >>> 0) % ($_n >>> 0) | 0;
  $i$02 = $i$02 + 1 | 0;
  if (($i$02 | 0) == ($_exp | 0)) {
   $c$0$lcssa = $2;
   break;
  } else $c$01 = $2;
 }
 return $c$0$lcssa | 0;
}

function _crc_validate_message($_scheme, $_msg, $_n, $_key) {
 $_scheme = $_scheme | 0;
 $_msg = $_msg | 0;
 $_n = $_n | 0;
 $_key = $_key | 0;
 var $$0 = 0;
 switch ($_scheme | 0) {
 case 0:
  {
   _fwrite(gb + 11579 | 0, 71, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
   _exit(-1);
   break;
  }
 case 1:
  {
   $$0 = 1;
   return $$0 | 0;
  }
 default:
  {
   $$0 = (_crc_generate_key($_scheme, $_msg, $_n) | 0) == ($_key | 0) & 1;
   return $$0 | 0;
  }
 }
 return 0;
}

function _liquid_nextpow2($_x) {
 $_x = $_x | 0;
 var $$01 = 0, $2 = 0, $5 = 0, $n$0$lcssa = 0, $n$02 = 0;
 if (!$_x) {
  _fwrite(gb + 30574 | 0, 58, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 $2 = $_x + -1 | 0;
 if (!$2) {
  $n$0$lcssa = 0;
  return $n$0$lcssa | 0;
 } else {
  $$01 = $2;
  $n$02 = 0;
 }
 while (1) {
  $$01 = $$01 >>> 1;
  $5 = $n$02 + 1 | 0;
  if (!$$01) {
   $n$0$lcssa = $5;
   break;
  } else $n$02 = $5;
 }
 return $n$0$lcssa | 0;
}

function _firdespm_run($_h_len, $_num_bands, $_bands, $_des, $_weights, $_wtype, $_btype, $_h) {
 $_h_len = $_h_len | 0;
 $_num_bands = $_num_bands | 0;
 $_bands = $_bands | 0;
 $_des = $_des | 0;
 $_weights = $_weights | 0;
 $_wtype = $_wtype | 0;
 $_btype = $_btype | 0;
 $_h = $_h | 0;
 var $0 = 0;
 $0 = _firdespm_create($_h_len, $_num_bands, $_bands, $_des, $_weights, $_wtype, $_btype) | 0;
 _firdespm_execute($0, $_h);
 _firdespm_destroy($0);
 return;
}

function _modem_modulate_arb($_q, $_sym_in, $_y) {
 $_q = $_q | 0;
 $_sym_in = $_sym_in | 0;
 $_y = $_y | 0;
 var $5 = 0, $9 = 0;
 if ((HEAP32[$_q + 8 >> 2] | 0) >>> 0 > $_sym_in >>> 0) {
  $5 = HEAP32[$_q + 76 >> 2] | 0;
  $9 = HEAP32[$5 + ($_sym_in << 3) + 4 >> 2] | 0;
  HEAP32[$_y >> 2] = HEAP32[$5 + ($_sym_in << 3) >> 2];
  HEAP32[$_y + 4 >> 2] = $9;
  return;
 } else {
  _fwrite(gb + 32224 | 0, 52, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
}

function ___uflow($f) {
 $f = $f | 0;
 var $$0 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $c = sp;
 if (!(HEAP32[$f + 8 >> 2] | 0)) if (!(___toread($f) | 0)) label = 3; else $$0 = -1; else label = 3;
 if ((label | 0) == 3) if ((mftCall_iiii(HEAP32[$f + 32 >> 2] | 0, $f | 0, $c | 0, 1) | 0) == 1) $$0 = HEAPU8[$c >> 0] | 0; else $$0 = -1;
 STACKTOP = sp;
 return $$0 | 0;
}

function _strbuffer_close($strbuff) {
 $strbuff = $strbuff | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $strbuff;
 if (HEAP32[HEAP32[$0 >> 2] >> 2] | 0) _jsonp_free(HEAP32[HEAP32[$0 >> 2] >> 2] | 0);
 HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] = 0;
 HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[HEAP32[$0 >> 2] >> 2] = 0;
 STACKTOP = sp;
 return;
}

function _flexframegen_destroy($_q) {
 $_q = $_q | 0;
 _firinterp_crcf_destroy(HEAP32[$_q + 12 >> 2] | 0);
 _qpacketmodem_destroy(HEAP32[$_q + 64 >> 2] | 0);
 _qpilotgen_destroy(HEAP32[$_q + 76 >> 2] | 0);
 _qpacketmodem_destroy(HEAP32[$_q + 92 >> 2] | 0);
 _free(HEAP32[$_q + 48 >> 2] | 0);
 _free(HEAP32[$_q + 52 >> 2] | 0);
 _free(HEAP32[$_q + 72 >> 2] | 0);
 _free(HEAP32[$_q + 84 >> 2] | 0);
 _free(HEAP32[$_q + 100 >> 2] | 0);
 _free($_q);
 return;
}

function _fft_reverse_index($_i, $_n) {
 $_i = $_i | 0;
 $_n = $_n | 0;
 var $$01 = 0, $3 = 0, $j$0$lcssa = 0, $j$02 = 0, $k$03 = 0;
 if (!$_n) {
  $j$0$lcssa = 0;
  return $j$0$lcssa | 0;
 } else {
  $$01 = $_i;
  $j$02 = 0;
  $k$03 = 0;
 }
 while (1) {
  $3 = $j$02 << 1 | $$01 & 1;
  $k$03 = $k$03 + 1 | 0;
  if (($k$03 | 0) == ($_n | 0)) {
   $j$0$lcssa = $3;
   break;
  } else {
   $$01 = $$01 >>> 1;
   $j$02 = $3;
  }
 }
 return $j$0$lcssa | 0;
}

function _liquid_besseli0f($_z) {
 $_z = +$_z;
 var $$0 = 0.0, $10 = 0.0, $2 = 0.0, $3 = 0.0, $k$01 = 0, $y$02 = 0.0;
 if ($_z == 0.0) {
  $$0 = 1.0;
  return +$$0;
 }
 $2 = +Math_log(+($_z * .5));
 $k$01 = 0;
 $y$02 = 0.0;
 while (1) {
  $3 = +($k$01 >>> 0);
  $10 = $y$02 + +Math_exp(+(($3 * $2 - +_liquid_lngammaf($3 + 1.0)) * 2.0));
  $k$01 = $k$01 + 1 | 0;
  if (($k$01 | 0) == 32) {
   $$0 = $10;
   break;
  } else $y$02 = $10;
 }
 return +$$0;
}

function _json_array_append($array, $value) {
 $array = $array | 0;
 $value = $value | 0;
 var $0 = 0, $1 = 0, $2 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = $array;
 HEAP32[$1 >> 2] = $value;
 $2 = HEAP32[$0 >> 2] | 0;
 $5 = _json_array_append_new($2, _json_incref(HEAP32[$1 >> 2] | 0) | 0) | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535;
 $2 = $b & 65535;
 $3 = Math_imul($2, $1) | 0;
 $6 = $a >>> 16;
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
 $11 = $b >>> 16;
 $12 = Math_imul($11, $1) | 0;
 return (setTempRet0(($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0), $8 + $12 << 16 | $3 & 65535 | 0) | 0;
}

function _modem_demodulate_ook($_q, $_x, $_sym_out) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 $_sym_out = $_sym_out | 0;
 var $0 = 0.0, $7 = 0, $not$ = 0;
 $0 = +HEAPF32[$_x >> 2];
 $not$ = !($0 > .7071067811865476);
 HEAP32[$_sym_out >> 2] = $not$ & 1;
 HEAPF32[$_q + 92 >> 2] = $not$ ? 0.0 : 1.4142135381698608;
 HEAPF32[$_q + 96 >> 2] = 0.0;
 $7 = HEAP32[$_x + 4 >> 2] | 0;
 HEAPF32[$_q + 84 >> 2] = $0;
 HEAP32[$_q + 88 >> 2] = $7;
 return;
}

function _firpfb_crcf_destroy($_q) {
 $_q = $_q | 0;
 var $0 = 0, $3 = 0, $i$01 = 0;
 $0 = $_q + 12 | 0;
 $3 = $_q + 20 | 0;
 if (HEAP32[$0 >> 2] | 0) {
  $i$01 = 0;
  do {
   _dotprod_crcf_destroy(HEAP32[(HEAP32[$3 >> 2] | 0) + ($i$01 << 2) >> 2] | 0);
   $i$01 = $i$01 + 1 | 0;
  } while ($i$01 >>> 0 < (HEAP32[$0 >> 2] | 0) >>> 0);
 }
 _free(HEAP32[$3 >> 2] | 0);
 _windowcf_destroy(HEAP32[$_q + 16 >> 2] | 0);
 _free($_q);
 return;
}

function _ofdmframegen_reset($_q) {
 $_q = $_q | 0;
 var $2 = 0, $5 = 0, $6 = 0, $i$01 = 0;
 _msequence_reset(HEAP32[$_q + 76 >> 2] | 0);
 $2 = $_q + 12 | 0;
 if (!(HEAP32[$2 >> 2] | 0)) return;
 $5 = $_q + 20 | 0;
 $i$01 = 0;
 do {
  $6 = HEAP32[$5 >> 2] | 0;
  HEAPF32[$6 + ($i$01 << 3) >> 2] = 0.0;
  HEAPF32[$6 + ($i$01 << 3) + 4 >> 2] = 0.0;
  $i$01 = $i$01 + 1 | 0;
 } while ($i$01 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0);
 return;
}

function _firpfb_rrrf_destroy($_q) {
 $_q = $_q | 0;
 var $0 = 0, $3 = 0, $i$01 = 0;
 $0 = $_q + 12 | 0;
 $3 = $_q + 20 | 0;
 if (HEAP32[$0 >> 2] | 0) {
  $i$01 = 0;
  do {
   _dotprod_rrrf_destroy(HEAP32[(HEAP32[$3 >> 2] | 0) + ($i$01 << 2) >> 2] | 0);
   $i$01 = $i$01 + 1 | 0;
  } while ($i$01 >>> 0 < (HEAP32[$0 >> 2] | 0) >>> 0);
 }
 _free(HEAP32[$3 >> 2] | 0);
 _windowf_destroy(HEAP32[$_q + 16 >> 2] | 0);
 _free($_q);
 return;
}

function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest;
  src = src + num | 0;
  dest = dest + num | 0;
  while ((num | 0) > 0) {
   dest = dest - 1 | 0;
   src = src - 1 | 0;
   num = num - 1 | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  }
  dest = ret;
 } else _memcpy(dest, src, num) | 0;
 return dest | 0;
}

function _iirfilt_crcf_create_dc_blocker($_alpha) {
 $_alpha = +$_alpha;
 var $3 = 0, $a = 0, $b = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $b = sp + 8 | 0;
 $a = sp;
 HEAPF32[$b >> 2] = 1.0;
 HEAPF32[$b + 4 >> 2] = -1.0;
 HEAPF32[$a >> 2] = 1.0;
 HEAPF32[$a + 4 >> 2] = $_alpha + -1.0;
 $3 = _iirfilt_crcf_create($b, 2, $a, 2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function mftCall_iiiiiiii(ptr, p0, p1, p2, p3, p4, p5, p6) {
 ptr = ptr | 0;
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 if ((ptr | 0) >= (fb | 0) & (ptr | 0) < (fb + 1 | 0)) return FUNCTION_TABLE_iiiiiiii[ptr - fb & 1](p0 | 0, p1 | 0, p2 | 0, p3 | 0, p4 | 0, p5 | 0, p6 | 0) | 0;
 return ftCall_iiiiiiii(ptr | 0, p0 | 0, p1 | 0, p2 | 0, p3 | 0, p4 | 0, p5 | 0, p6 | 0) | 0;
}

function _json_incref($json) {
 $json = $json | 0;
 var $0 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $json;
 if (HEAP32[$0 >> 2] | 0) if ((HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0) != -1) {
  $8 = (HEAP32[$0 >> 2] | 0) + 4 | 0;
  HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return HEAP32[$0 >> 2] | 0;
}

function _rand() {
 var $0 = 0, $10 = 0, $14 = 0, $6 = 0, $8 = 0, $9 = 0;
 $0 = gb + 44880 | 0;
 $6 = ___muldi3(HEAP32[$0 >> 2] | 0, HEAP32[$0 + 4 >> 2] | 0, 1284865837, 1481765933) | 0;
 $8 = _i64Add($6 | 0, getTempRet0() | 0, 1, 0) | 0;
 $9 = getTempRet0() | 0;
 $10 = gb + 44880 | 0;
 HEAP32[$10 >> 2] = $8;
 HEAP32[$10 + 4 >> 2] = $9;
 $14 = _bitshift64Lshr($8 | 0, $9 | 0, 33) | 0;
 getTempRet0() | 0;
 return $14 | 0;
}

function _copysign($x, $y) {
 $x = +$x;
 $y = +$y;
 var $1 = 0, $5 = 0, $fabs = 0.0;
 HEAPF64[tempDoublePtr >> 3] = $y;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $fabs = +Math_abs(+$x);
 HEAPF64[tempDoublePtr >> 3] = $fabs;
 $5 = $1 & -2147483648 | HEAP32[tempDoublePtr + 4 >> 2];
 HEAP32[tempDoublePtr >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[tempDoublePtr + 4 >> 2] = $5;
 return +(+HEAPF64[tempDoublePtr >> 3]);
}

function _gmskframegen_getframelen($_q) {
 $_q = $_q | 0;
 var $$0 = 0;
 if (!(HEAP32[$_q + 88 >> 2] | 0)) {
  _fwrite(gb + 27352 | 0, 58, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  $$0 = 0;
  return $$0 | 0;
 } else {
  $$0 = Math_imul((HEAP32[$_q + 20 >> 2] | 0) + (HEAP32[$_q + 16 >> 2] | 0) + (HEAP32[$_q + 24 >> 2] | 0) + (HEAP32[$_q + 8 >> 2] << 1) | 0, HEAP32[$_q + 4 >> 2] | 0) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _fec_rep3_encode($_q, $_dec_msg_len, $_msg_dec, $_msg_enc) {
 $_q = $_q | 0;
 $_dec_msg_len = $_dec_msg_len | 0;
 $_msg_dec = $_msg_dec | 0;
 $_msg_enc = $_msg_enc | 0;
 _memcpy($_msg_enc | 0, $_msg_dec | 0, $_dec_msg_len | 0) | 0;
 _memcpy($_msg_enc + $_dec_msg_len | 0, $_msg_dec | 0, $_dec_msg_len | 0) | 0;
 _memcpy($_msg_enc + ($_dec_msg_len << 1) | 0, $_msg_dec | 0, $_dec_msg_len | 0) | 0;
 return;
}

function _modem_demodulate_bpsk($_q, $_x, $_sym_out) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 $_sym_out = $_sym_out | 0;
 var $0 = 0.0, $6 = 0, $not$ = 0;
 $0 = +HEAPF32[$_x >> 2];
 $not$ = !($0 > 0.0);
 HEAP32[$_sym_out >> 2] = $not$ & 1;
 HEAPF32[$_q + 92 >> 2] = $not$ ? -1.0 : 1.0;
 HEAPF32[$_q + 96 >> 2] = 0.0;
 $6 = HEAP32[$_x + 4 >> 2] | 0;
 HEAPF32[$_q + 84 >> 2] = $0;
 HEAP32[$_q + 88 >> 2] = $6;
 return;
}

function _jsonp_stringn_nocheck_own($value, $len) {
 $value = $value | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = $value;
 HEAP32[$1 >> 2] = $len;
 $4 = _string_create(HEAP32[$0 >> 2] | 0, HEAP32[$1 >> 2] | 0, 1) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function _strbuffer_append_byte($strbuff, $byte) {
 $strbuff = $strbuff | 0;
 $byte = $byte | 0;
 var $0 = 0, $1 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 $1 = sp + 4 | 0;
 HEAP32[$0 >> 2] = $strbuff;
 HEAP8[$1 >> 0] = $byte;
 $3 = _strbuffer_append_bytes(HEAP32[$0 >> 2] | 0, $1, 1) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function _gray_decode($symbol_in) {
 $symbol_in = $symbol_in | 0;
 return $symbol_in >>> 1 ^ $symbol_in ^ $symbol_in >>> 2 ^ $symbol_in >>> 3 ^ $symbol_in >>> 4 ^ $symbol_in >>> 5 ^ $symbol_in >>> 6 ^ $symbol_in >>> 7 ^ $symbol_in >>> 8 ^ $symbol_in >>> 9 ^ $symbol_in >>> 10 ^ $symbol_in >>> 11 ^ $symbol_in >>> 12 ^ $symbol_in >>> 13 ^ $symbol_in >>> 14 ^ $symbol_in >>> 15 ^ $symbol_in >>> 16 | 0;
}

function _json_init($json, $type) {
 $json = $json | 0;
 $type = $type | 0;
 var $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = $json;
 HEAP32[$1 >> 2] = $type;
 HEAP32[HEAP32[$0 >> 2] >> 2] = HEAP32[$1 >> 2];
 HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] = 1;
 STACKTOP = sp;
 return;
}

function ___DOUBLE_BITS($__f) {
 $__f = +$__f;
 var $0 = 0, $2 = 0, $4 = 0, $__u = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 8 | 0;
 $__u = sp;
 HEAPF64[$0 >> 3] = $__f;
 HEAPF64[$__u >> 3] = +HEAPF64[$0 >> 3];
 $2 = $__u;
 $4 = HEAP32[$2 >> 2] | 0;
 setTempRet0(HEAP32[$2 + 4 >> 2] | 0);
 STACKTOP = sp;
 return $4 | 0;
}

function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $rem = __stackBase__ | 0;
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
 STACKTOP = __stackBase__;
 return (setTempRet0(HEAP32[$rem + 4 >> 2] | 0), HEAP32[$rem >> 2] | 0) | 0;
}

function _flexframegen_getframelen($_q) {
 $_q = $_q | 0;
 var $$0 = 0;
 if (!(HEAP32[$_q + 112 >> 2] | 0)) {
  _fwrite(gb + 25858 | 0, 58, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  $$0 = 0;
  return $$0 | 0;
 } else {
  $$0 = Math_imul((HEAP32[$_q + 80 >> 2] | 0) + 64 + (HEAP32[$_q + 96 >> 2] | 0) + (HEAP32[$_q + 4 >> 2] << 1) | 0, HEAP32[$_q >> 2] | 0) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _lex_get($lex, $error) {
 $lex = $lex | 0;
 $error = $error | 0;
 var $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = $lex;
 HEAP32[$1 >> 2] = $error;
 $4 = _stream_get(HEAP32[$0 >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function _lex_free_string($lex) {
 $lex = $lex | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $lex;
 _jsonp_free(HEAP32[(HEAP32[$0 >> 2] | 0) + 64 >> 2] | 0);
 HEAP32[(HEAP32[$0 >> 2] | 0) + 64 >> 2] = 0;
 HEAP32[(HEAP32[$0 >> 2] | 0) + 64 + 4 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function _qdetector_cccf_destroy($_q) {
 $_q = $_q | 0;
 _free(HEAP32[$_q + 4 >> 2] | 0);
 _free(HEAP32[$_q + 8 >> 2] | 0);
 _free(HEAP32[$_q + 16 >> 2] | 0);
 _free(HEAP32[$_q + 20 >> 2] | 0);
 _free(HEAP32[$_q + 24 >> 2] | 0);
 _free(HEAP32[$_q + 28 >> 2] | 0);
 _fft_destroy_plan(HEAP32[$_q + 36 >> 2] | 0);
 _fft_destroy_plan(HEAP32[$_q + 40 >> 2] | 0);
 _free($_q);
 return;
}

function _liquid_lngammaf($_z) {
 $_z = +$_z;
 if ($_z < 0.0) {
  _fwrite(gb + 30820 | 0, 47, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 }
 if ($_z < 10.0) return +(+_liquid_lngammaf($_z + 1.0) - +Math_log(+$_z)); else return +((1.8378770351409912 - +Math_log(+$_z)) * .5 + (+Math_log(+(1.0 / ($_z * 12.0 - .10000000149011612 / $_z) + $_z)) + -1.0) * $_z);
 return +(0.0);
}

function _close($fd) {
 $fd = $fd | 0;
 var $0 = 0, $2 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = $fd;
 $0 = ___syscall6(6, $vararg_buffer | 0) | 0;
 $2 = ___syscall_ret(($0 | 0) == -4 ? -115 : $0) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function _lex_save($lex, $c) {
 $lex = $lex | 0;
 $c = $c | 0;
 var $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = $lex;
 HEAP32[$1 >> 2] = $c;
 _strbuffer_append_byte((HEAP32[$0 >> 2] | 0) + 40 | 0, HEAP32[$1 >> 2] & 255) | 0;
 STACKTOP = sp;
 return;
}

function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret | 0;
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret + 8 | 0;
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret + 16 | 0;
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0;
}

function _lex_close($lex) {
 $lex = $lex | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $lex;
 if ((HEAP32[(HEAP32[$0 >> 2] | 0) + 56 >> 2] | 0) == 256) _lex_free_string(HEAP32[$0 >> 2] | 0);
 _strbuffer_close((HEAP32[$0 >> 2] | 0) + 40 | 0);
 STACKTOP = sp;
 return;
}

function _gmskframegen_destroy($_q) {
 $_q = $_q | 0;
 _gmskmod_destroy(HEAP32[$_q >> 2] | 0);
 _msequence_destroy(HEAP32[$_q + 32 >> 2] | 0);
 _free(HEAP32[$_q + 44 >> 2] | 0);
 _free(HEAP32[$_q + 48 >> 2] | 0);
 _packetizer_destroy(HEAP32[$_q + 52 >> 2] | 0);
 _free(HEAP32[$_q + 80 >> 2] | 0);
 _packetizer_destroy(HEAP32[$_q + 56 >> 2] | 0);
 _free($_q);
 return;
}

function _nco_crcf_step($_q) {
 $_q = $_q | 0;
 var $2 = 0, $4 = 0.0, $5 = 0.0;
 $2 = $_q + 4 | 0;
 $4 = +HEAPF32[$_q + 8 >> 2] + +HEAPF32[$2 >> 2];
 HEAPF32[$2 >> 2] = $4;
 $5 = $4;
 if ($5 > 3.141592653589793) {
  HEAPF32[$2 >> 2] = $5 + -6.283185307179586;
  return;
 }
 if (!($5 < -3.141592653589793)) return;
 HEAPF32[$2 >> 2] = $5 + 6.283185307179586;
 return;
}

function _snprintf($s, $n, $fmt, $varargs) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $ap = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $0 = _vsnprintf($s, $n, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function ___shlim($f, $lim) {
 $f = $f | 0;
 $lim = $lim | 0;
 var $2 = 0, $4 = 0, $5 = 0;
 HEAP32[$f + 104 >> 2] = $lim;
 $2 = HEAP32[$f + 8 >> 2] | 0;
 $4 = HEAP32[$f + 4 >> 2] | 0;
 $5 = $2 - $4 | 0;
 HEAP32[$f + 108 >> 2] = $5;
 if (($lim | 0) != 0 & ($5 | 0) > ($lim | 0)) HEAP32[$f + 100 >> 2] = $4 + $lim; else HEAP32[$f + 100 >> 2] = $2;
 return;
}

function _hashtable_close($hashtable) {
 $hashtable = $hashtable | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $hashtable;
 _hashtable_do_clear(HEAP32[$0 >> 2] | 0);
 _jsonp_free(HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function ___stdio_close($f) {
 $f = $f | 0;
 var $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$f + 60 >> 2];
 $3 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function _constrained_write($src, $src_len, $dst, $dest_len) {
 $src = $src | 0;
 $src_len = $src_len | 0;
 $dst = $dst | 0;
 $dest_len = $dest_len | 0;
 var $dest_len$src_len = 0;
 $dest_len$src_len = $dest_len >>> 0 < $src_len >>> 0 ? $dest_len : $src_len;
 _memmove($dst | 0, $src | 0, $dest_len$src_len << 2 | 0) | 0;
 return $dest_len$src_len | 0;
}

function _logb($x) {
 $x = +$x;
 var $$0 = 0.0, $2 = 0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $2 = HEAP32[tempDoublePtr + 4 >> 2] & 2146435072;
 do if ($2 >>> 0 < 2146435072 | ($2 | 0) == 2146435072 & 0 < 0) if ($x == 0.0) {
  $$0 = -1.0 / ($x * $x);
  break;
 } else {
  $$0 = +(_ilogb($x) | 0);
  break;
 } else $$0 = $x * $x; while (0);
 return +$$0;
}

function _lex_unget($lex, $c) {
 $lex = $lex | 0;
 $c = $c | 0;
 var $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = $lex;
 HEAP32[$1 >> 2] = $c;
 _stream_unget(HEAP32[$0 >> 2] | 0, HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _nco_crcf_compute_sincos_nco($_q) {
 $_q = $_q | 0;
 var $5 = 0, $6 = 0;
 $5 = ~~(+HEAPF32[$_q + 4 >> 2] * 40.7436637878418 + 512.0 + .5) >>> 0;
 $6 = $5 & 255;
 HEAP32[$_q + 1036 >> 2] = $6;
 HEAP32[$_q + 1040 >> 2] = HEAP32[$_q + 12 + ($6 << 2) >> 2];
 HEAP32[$_q + 1044 >> 2] = HEAP32[$_q + 12 + (($5 + 64 & 255) << 2) >> 2];
 return;
}

function _liquid_is_prime($_n) {
 $_n = $_n | 0;
 var $$1 = 0, $i$01 = 0;
 L1 : do if ($_n >>> 0 > 3) {
  $i$01 = 2;
  while (1) {
   if (!(($_n >>> 0) % ($i$01 >>> 0) | 0)) {
    $$1 = 0;
    break L1;
   }
   $i$01 = $i$01 + 1 | 0;
   if ($i$01 >>> 0 >= $_n >>> 0) {
    $$1 = 1;
    break;
   }
  }
 } else $$1 = 1; while (0);
 return $$1 | 0;
}

function _jsonp_free($ptr) {
 $ptr = $ptr | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $ptr;
 if (!(HEAP32[$0 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 mftCall_vi(HEAP32[gb + 9308 >> 2] | 0, HEAP32[$0 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _sn_write($f, $s, $l) {
 $f = $f | 0;
 $s = $s | 0;
 $l = $l | 0;
 var $2 = 0, $3 = 0, $4 = 0, $l$ = 0;
 $2 = $f + 20 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = (HEAP32[$f + 16 >> 2] | 0) - $3 | 0;
 $l$ = $4 >>> 0 > $l >>> 0 ? $l : $4;
 _memcpy($3 | 0, $s | 0, $l$ | 0) | 0;
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $l$;
 return $l | 0;
}

function _nco_crcf_set_phase($_q, $_phi) {
 $_q = $_q | 0;
 $_phi = +$_phi;
 var $0 = 0, $1 = 0.0;
 $0 = $_q + 4 | 0;
 HEAPF32[$0 >> 2] = $_phi;
 $1 = $_phi;
 if ($1 > 3.141592653589793) {
  HEAPF32[$0 >> 2] = $1 + -6.283185307179586;
  return;
 }
 if (!($1 < -3.141592653589793)) return;
 HEAPF32[$0 >> 2] = $1 + 6.283185307179586;
 return;
}

function _modem_modulate_psk($_q, $_sym_in, $_y) {
 $_q = $_q | 0;
 $_sym_in = $_sym_in | 0;
 $_y = $_y | 0;
 var $2 = 0.0, $5 = 0.0, $7 = 0.0;
 $2 = +((_gray_decode($_sym_in) | 0) << 1 >>> 0);
 $5 = +HEAPF32[$_q + 104 >> 2] * $2;
 $7 = +Math_sin(+$5);
 HEAPF32[$_y >> 2] = +Math_cos(+$5) + $7 * 0.0;
 HEAPF32[$_y + 4 >> 2] = $7;
 return;
}

function _printf($fmt, $varargs) {
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $ap = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $1 = _vfprintf(HEAP32[gb + 9452 >> 2] | 0, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function _strbuffer_clear($strbuff) {
 $strbuff = $strbuff | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $strbuff;
 HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] = 0;
 HEAP8[HEAP32[HEAP32[$0 >> 2] >> 2] >> 0] = 0;
 STACKTOP = sp;
 return;
}

function _json_delete_string($string) {
 $string = $string | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $string;
 _jsonp_free(HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0);
 _jsonp_free(HEAP32[$0 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _copysignf($x, $y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $fabs = 0.0;
 $0 = (HEAPF32[tempDoublePtr >> 2] = $y, HEAP32[tempDoublePtr >> 2] | 0);
 $fabs = +Math_abs(+$x);
 return +(HEAP32[tempDoublePtr >> 2] = $0 & -2147483648 | (HEAPF32[tempDoublePtr >> 2] = $fabs, HEAP32[tempDoublePtr >> 2] | 0), +HEAPF32[tempDoublePtr >> 2]);
}

function _modem_modulate_qpsk($_q, $_sym_in, $_y) {
 $_q = $_q | 0;
 $_sym_in = $_sym_in | 0;
 $_y = $_y | 0;
 var $4 = 0;
 $4 = ($_sym_in & 2 | 0) != 0;
 HEAPF32[$_y >> 2] = ($_sym_in & 1 | 0 ? -.7071067811865476 : .7071067811865476) + ($4 ? -0.0 : 0.0);
 HEAPF32[$_y + 4 >> 2] = $4 ? -.7071067690849304 : .7071067690849304;
 return;
}

function _list_init($list) {
 $list = $list | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $list;
 HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] = HEAP32[$0 >> 2];
 HEAP32[HEAP32[$0 >> 2] >> 2] = HEAP32[$0 >> 2];
 STACKTOP = sp;
 return;
}

function _sprintf($s, $fmt, $varargs) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $ap = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $0 = _vsprintf($s, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function _fprintf($f, $fmt, $varargs) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $ap = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $0 = _vfprintf($f, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function _json_delete_object($object) {
 $object = $object | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $object;
 _hashtable_close((HEAP32[$0 >> 2] | 0) + 8 | 0);
 _jsonp_free(HEAP32[$0 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _nco_crcf_pll_set_bandwidth($_q, $_bandwidth) {
 $_q = $_q | 0;
 $_bandwidth = +$_bandwidth;
 if ($_bandwidth < 0.0) {
  _fwrite(gb + 39126 | 0, 59, 1, HEAP32[gb + 9336 >> 2] | 0) | 0;
  _exit(1);
 } else {
  HEAPF32[$_q + 1052 >> 2] = $_bandwidth;
  HEAPF32[$_q + 1056 >> 2] = +Math_sqrt(+$_bandwidth);
  return;
 }
}

function mftCall_iiiii(ptr, p0, p1, p2, p3) {
 ptr = ptr | 0;
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((ptr | 0) >= (fb | 0) & (ptr | 0) < (fb + 7 | 0)) return FUNCTION_TABLE_iiiii[ptr - fb & 7](p0 | 0, p1 | 0, p2 | 0, p3 | 0) | 0;
 return ftCall_iiiii(ptr | 0, p0 | 0, p1 | 0, p2 | 0, p3 | 0) | 0;
}

function _liquid_bdotprod($_x, $_y) {
 $_x = $_x | 0;
 $_y = $_y | 0;
 var $0 = 0;
 $0 = $_y & $_x;
 return (HEAPU8[($0 >>> 8 & 255) + (gb + 39485) >> 0] | 0) + (HEAPU8[($0 & 255) + (gb + 39485) >> 0] | 0) + (HEAPU8[($0 >>> 16 & 255) + (gb + 39485) >> 0] | 0) + (HEAPU8[($0 >>> 24) + (gb + 39485) >> 0] | 0) & 1 | 0;
}

function ___FLOAT_BITS($__f) {
 $__f = +$__f;
 var $0 = 0, $__u = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 4 | 0;
 $__u = sp;
 HEAPF32[$0 >> 2] = $__f;
 HEAPF32[$__u >> 2] = +HEAPF32[$0 >> 2];
 STACKTOP = sp;
 return HEAP32[$__u >> 2] | 0;
}

function mftCall_viiii(ptr, p0, p1, p2, p3) {
 ptr = ptr | 0;
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((ptr | 0) >= (fb | 0) & (ptr | 0) < (fb + 63 | 0)) {
  FUNCTION_TABLE_viiii[ptr - fb & 63](p0 | 0, p1 | 0, p2 | 0, p3 | 0);
  return;
 }
 ftCall_viiii(ptr | 0, p0 | 0, p1 | 0, p2 | 0, p3 | 0);
}

function _fec_conv_init_v29($_q) {
 $_q = $_q | 0;
 HEAP32[$_q + 28 >> 2] = 2;
 HEAP32[$_q + 32 >> 2] = 9;
 HEAP32[$_q + 24 >> 2] = gb + 288;
 HEAP32[$_q + 44 >> 2] = fb + 4;
 HEAP32[$_q + 48 >> 2] = fb + 2;
 HEAP32[$_q + 52 >> 2] = fb + 6;
 HEAP32[$_q + 56 >> 2] = fb + 2;
 HEAP32[$_q + 60 >> 2] = fb + 3;
 return;
}

function _fec_conv_init_v27($_q) {
 $_q = $_q | 0;
 HEAP32[$_q + 28 >> 2] = 2;
 HEAP32[$_q + 32 >> 2] = 7;
 HEAP32[$_q + 24 >> 2] = gb + 280;
 HEAP32[$_q + 44 >> 2] = fb + 3;
 HEAP32[$_q + 48 >> 2] = fb + 1;
 HEAP32[$_q + 52 >> 2] = fb + 5;
 HEAP32[$_q + 56 >> 2] = fb + 1;
 HEAP32[$_q + 60 >> 2] = fb + 2;
 return;
}

function _sincf($_x) {
 $_x = +$_x;
 var $$0 = 0.0, $3 = 0.0;
 $3 = $_x * 3.141592653589793;
 if (+Math_abs(+$_x) < .009999999776482582) {
  $$0 = +Math_cos(+($3 * .5)) * +Math_cos(+($3 * .25)) * +Math_cos(+($3 * .125));
  return +$$0;
 } else {
  $$0 = +Math_sin(+$3) / $3;
  return +$$0;
 }
 return +(0.0);
}

function _fft_run($_nfft, $_x, $_y, $_dir, $_flags) {
 $_nfft = $_nfft | 0;
 $_x = $_x | 0;
 $_y = $_y | 0;
 $_dir = $_dir | 0;
 $_flags = $_flags | 0;
 var $0 = 0;
 $0 = _fft_create_plan($_nfft, $_x, $_y, $_dir, $_flags) | 0;
 mftCall_vi(HEAP32[$0 + 28 >> 2] | 0, $0 | 0);
 _fft_destroy_plan($0);
 return;
}

function _logbf($x) {
 $x = +$x;
 var $$0 = 0.0;
 do if (((HEAPF32[tempDoublePtr >> 2] = $x, HEAP32[tempDoublePtr >> 2] | 0) & 2139095040) >>> 0 < 2139095040) if ($x == 0.0) {
  $$0 = -1.0 / ($x * $x);
  break;
 } else {
  $$0 = +(_ilogbf($x) | 0);
  break;
 } else $$0 = $x * $x; while (0);
 return +$$0;
}

function _ofdmflexframegen_reset($_q) {
 $_q = $_q | 0;
 var $0 = 0;
 $0 = $_q + 116 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 _ofdmframegen_reset(HEAP32[$_q + 40 >> 2] | 0);
 return;
}

function _modulator_destroy($m) {
 $m = $m | 0;
 var $4 = 0, $7 = 0;
 if (!$m) return;
 _nco_crcf_destroy(HEAP32[$m + 28 >> 2] | 0);
 $4 = HEAP32[$m + 32 >> 2] | 0;
 if ($4 | 0) _firinterp_crcf_destroy($4);
 $7 = HEAP32[$m + 36 >> 2] | 0;
 if ($7 | 0) _iirfilt_crcf_destroy($7);
 _free($m);
 return;
}

function _ring_advance_reader($r, $len) {
 $r = $r | 0;
 $len = $len | 0;
 var $0 = 0, $2 = 0, $5 = 0;
 $0 = $r + 8 | 0;
 $2 = (HEAP32[$0 >> 2] | 0) + $len | 0;
 $5 = HEAP32[$r >> 2] | 0;
 HEAP32[$0 >> 2] = $2 >>> 0 < ((HEAP32[$r + 4 >> 2] | 0) + $5 | 0) >>> 0 ? $2 : $2 + (0 - $5) | 0;
 return;
}

function _bitshift64Ashr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  setTempRet0(high >> bits | 0);
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 setTempRet0(((high | 0) < 0 ? -1 : 0) | 0);
 return high >> bits - 32 | 0;
}

function _modem_modulate_ask($_q, $_sym_in, $_y) {
 $_q = $_q | 0;
 $_sym_in = $_sym_in | 0;
 $_y = $_y | 0;
 var $1 = 0;
 $1 = (_gray_decode($_sym_in) | 0) << 1;
 HEAPF32[$_y >> 2] = +HEAPF32[$_q + 100 >> 2] * +(1 - (HEAP32[$_q + 8 >> 2] | 0) + $1 | 0);
 HEAPF32[$_y + 4 >> 2] = 0.0;
 return;
}

function _msequence_advance($_ms) {
 $_ms = $_ms | 0;
 var $0 = 0, $4 = 0;
 $0 = $_ms + 16 | 0;
 $4 = _liquid_bdotprod(HEAP32[$0 >> 2] | 0, HEAP32[$_ms + 4 >> 2] | 0) | 0;
 HEAP32[$_ms + 20 >> 2] = $4;
 HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] << 1 | $4) & HEAP32[$_ms + 12 >> 2];
 return $4 | 0;
}

function _liquid_reverse_uint32($_x) {
 $_x = $_x | 0;
 return (HEAPU8[($_x >>> 8 & 255) + (gb + 39741) >> 0] | 0) << 16 | (HEAPU8[($_x & 255) + (gb + 39741) >> 0] | 0) << 24 | (HEAPU8[($_x >>> 16 & 255) + (gb + 39741) >> 0] | 0) << 8 | (HEAPU8[($_x >>> 24) + (gb + 39741) >> 0] | 0) | 0;
}

function _wdelayf_create($_delay) {
 $_delay = $_delay | 0;
 var $0 = 0, $2 = 0, $3 = 0;
 $0 = _malloc(12) | 0;
 HEAP32[$0 + 4 >> 2] = $_delay;
 $2 = $_delay << 2;
 $3 = _malloc($2) | 0;
 HEAP32[$0 >> 2] = $3;
 HEAP32[$0 + 8 >> 2] = 0;
 _memset($3 | 0, 0, $2 | 0) | 0;
 return $0 | 0;
}

function mftCall_iiii(ptr, p0, p1, p2) {
 ptr = ptr | 0;
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((ptr | 0) >= (fb | 0) & (ptr | 0) < (fb + 15 | 0)) return FUNCTION_TABLE_iiii[ptr - fb & 15](p0 | 0, p1 | 0, p2 | 0) | 0;
 return ftCall_iiii(ptr | 0, p0 | 0, p1 | 0, p2 | 0) | 0;
}

function _json_delete_integer($integer) {
 $integer = $integer | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $integer;
 _jsonp_free(HEAP32[$0 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _fec_hamming128_create($_opts) {
 $_opts = $_opts | 0;
 var $0 = 0;
 $0 = _malloc(148) | 0;
 HEAP32[$0 >> 2] = 6;
 HEAPF32[$0 + 4 >> 2] = +_fec_get_rate(6);
 HEAP32[$0 + 136 >> 2] = fb + 15;
 HEAP32[$0 + 140 >> 2] = fb + 16;
 HEAP32[$0 + 144 >> 2] = fb + 17;
 return $0 | 0;
}

function _fec_encode($_q, $_dec_msg_len, $_msg_dec, $_msg_enc) {
 $_q = $_q | 0;
 $_dec_msg_len = $_dec_msg_len | 0;
 $_msg_dec = $_msg_dec | 0;
 $_msg_enc = $_msg_enc | 0;
 mftCall_viiii(HEAP32[$_q + 136 >> 2] | 0, $_q | 0, $_dec_msg_len | 0, $_msg_dec | 0, $_msg_enc | 0);
 return;
}

function _fec_decode($_q, $_dec_msg_len, $_msg_enc, $_msg_dec) {
 $_q = $_q | 0;
 $_dec_msg_len = $_dec_msg_len | 0;
 $_msg_enc = $_msg_enc | 0;
 $_msg_dec = $_msg_dec | 0;
 mftCall_viiii(HEAP32[$_q + 140 >> 2] | 0, $_q | 0, $_dec_msg_len | 0, $_msg_enc | 0, $_msg_dec | 0);
 return;
}

function _fec_hamming84_create($_opts) {
 $_opts = $_opts | 0;
 var $0 = 0;
 $0 = _malloc(148) | 0;
 HEAP32[$0 >> 2] = 5;
 HEAPF32[$0 + 4 >> 2] = +_fec_get_rate(5);
 HEAP32[$0 + 136 >> 2] = fb + 12;
 HEAP32[$0 + 140 >> 2] = fb + 13;
 HEAP32[$0 + 144 >> 2] = fb + 14;
 return $0 | 0;
}

function _fec_hamming74_create($_opts) {
 $_opts = $_opts | 0;
 var $0 = 0;
 $0 = _malloc(148) | 0;
 HEAP32[$0 >> 2] = 4;
 HEAPF32[$0 + 4 >> 2] = +_fec_get_rate(4);
 HEAP32[$0 + 136 >> 2] = fb + 9;
 HEAP32[$0 + 140 >> 2] = fb + 10;
 HEAP32[$0 + 144 >> 2] = fb + 11;
 return $0 | 0;
}

function _fec_secded7264_create($_opts) {
 $_opts = $_opts | 0;
 var $0 = 0;
 $0 = _malloc(148) | 0;
 HEAP32[$0 >> 2] = 10;
 HEAPF32[$0 + 4 >> 2] = +_fec_get_rate(10);
 HEAP32[$0 + 136 >> 2] = fb + 32;
 HEAP32[$0 + 140 >> 2] = fb + 33;
 HEAP32[$0 + 144 >> 2] = 0;
 return $0 | 0;
}

function _fec_conv_punctured_destroy($_q) {
 $_q = $_q | 0;
 var $1 = 0, $6 = 0;
 $1 = HEAP32[$_q + 20 >> 2] | 0;
 if ($1 | 0) mftCall_vi(HEAP32[$_q + 60 >> 2] | 0, $1 | 0);
 $6 = HEAP32[$_q + 16 >> 2] | 0;
 if (!$6) {
  _free($_q);
  return;
 }
 _free($6);
 _free($_q);
 return;
}

function mftCall_viii(ptr, p0, p1, p2) {
 ptr = ptr | 0;
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((ptr | 0) >= (fb | 0) & (ptr | 0) < (fb + 31 | 0)) {
  FUNCTION_TABLE_viii[ptr - fb & 31](p0 | 0, p1 | 0, p2 | 0);
  return;
 }
 ftCall_viii(ptr | 0, p0 | 0, p1 | 0, p2 | 0);
}

function _wdelayf_push($_q, $_v) {
 $_q = $_q | 0;
 $_v = +$_v;
 var $0 = 0, $1 = 0;
 $0 = $_q + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAPF32[(HEAP32[$_q >> 2] | 0) + ($1 << 2) >> 2] = $_v;
 HEAP32[$0 >> 2] = (($1 + 1 | 0) >>> 0) % ((HEAP32[$_q + 4 >> 2] | 0) >>> 0) | 0;
 return;
}

function _strbuffer_value($strbuff) {
 $strbuff = $strbuff | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $strbuff;
 STACKTOP = sp;
 return HEAP32[HEAP32[$0 >> 2] >> 2] | 0;
}

function _fec_secded3932_create($_opts) {
 $_opts = $_opts | 0;
 var $0 = 0;
 $0 = _malloc(148) | 0;
 HEAP32[$0 >> 2] = 9;
 HEAPF32[$0 + 4 >> 2] = +_fec_get_rate(9);
 HEAP32[$0 + 136 >> 2] = fb + 30;
 HEAP32[$0 + 140 >> 2] = fb + 31;
 HEAP32[$0 + 144 >> 2] = 0;
 return $0 | 0;
}

function _fec_secded2216_create($_opts) {
 $_opts = $_opts | 0;
 var $0 = 0;
 $0 = _malloc(148) | 0;
 HEAP32[$0 >> 2] = 8;
 HEAPF32[$0 + 4 >> 2] = +_fec_get_rate(8);
 HEAP32[$0 + 136 >> 2] = fb + 28;
 HEAP32[$0 + 140 >> 2] = fb + 29;
 HEAP32[$0 + 144 >> 2] = 0;
 return $0 | 0;
}

function _fec_rep5_create($_opts) {
 $_opts = $_opts | 0;
 var $0 = 0;
 $0 = _malloc(148) | 0;
 HEAP32[$0 >> 2] = 3;
 HEAPF32[$0 + 4 >> 2] = +_fec_get_rate(3);
 HEAP32[$0 + 136 >> 2] = fb + 23;
 HEAP32[$0 + 140 >> 2] = fb + 24;
 HEAP32[$0 + 144 >> 2] = fb + 25;
 return $0 | 0;
}

function _fec_rep3_create($_opts) {
 $_opts = $_opts | 0;
 var $0 = 0;
 $0 = _malloc(148) | 0;
 HEAP32[$0 >> 2] = 2;
 HEAPF32[$0 + 4 >> 2] = +_fec_get_rate(2);
 HEAP32[$0 + 136 >> 2] = fb + 20;
 HEAP32[$0 + 140 >> 2] = fb + 21;
 HEAP32[$0 + 144 >> 2] = fb + 22;
 return $0 | 0;
}

function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  setTempRet0(high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits | 0);
  return low << bits;
 }
 setTempRet0(low << bits - 32 | 0);
 return 0;
}

function _fec_golay2412_create($_opts) {
 $_opts = $_opts | 0;
 var $0 = 0;
 $0 = _malloc(148) | 0;
 HEAP32[$0 >> 2] = 7;
 HEAPF32[$0 + 4 >> 2] = +_fec_get_rate(7);
 HEAP32[$0 + 136 >> 2] = fb + 7;
 HEAP32[$0 + 140 >> 2] = fb + 8;
 HEAP32[$0 + 144 >> 2] = 0;
 return $0 | 0;
}

function _fec_pass_create($_opts) {
 $_opts = $_opts | 0;
 var $0 = 0;
 $0 = _malloc(148) | 0;
 HEAP32[$0 >> 2] = 1;
 HEAPF32[$0 + 4 >> 2] = +_fec_get_rate(1);
 HEAP32[$0 + 136 >> 2] = fb + 18;
 HEAP32[$0 + 140 >> 2] = fb + 19;
 HEAP32[$0 + 144 >> 2] = 0;
 return $0 | 0;
}

function _fec_conv_destroy($_q) {
 $_q = $_q | 0;
 var $1 = 0, $6 = 0;
 $1 = HEAP32[$_q + 20 >> 2] | 0;
 if ($1 | 0) mftCall_vi(HEAP32[$_q + 60 >> 2] | 0, $1 | 0);
 $6 = HEAP32[$_q + 16 >> 2] | 0;
 if (!$6) {
  _free($_q);
  return;
 }
 _free($6);
 _free($_q);
 return;
}

function _dotprod_rrrf_create($_h, $_n) {
 $_h = $_h | 0;
 $_n = $_n | 0;
 var $0 = 0, $2 = 0, $3 = 0;
 $0 = _malloc(8) | 0;
 HEAP32[$0 + 4 >> 2] = $_n;
 $2 = $_n << 2;
 $3 = _malloc($2) | 0;
 HEAP32[$0 >> 2] = $3;
 _memcpy($3 | 0, $_h | 0, $2 | 0) | 0;
 return $0 | 0;
}

function _dotprod_crcf_create($_h, $_n) {
 $_h = $_h | 0;
 $_n = $_n | 0;
 var $0 = 0, $2 = 0, $3 = 0;
 $0 = _malloc(8) | 0;
 HEAP32[$0 + 4 >> 2] = $_n;
 $2 = $_n << 2;
 $3 = _malloc($2) | 0;
 HEAP32[$0 >> 2] = $3;
 _memcpy($3 | 0, $_h | 0, $2 | 0) | 0;
 return $0 | 0;
}

function _dotprod_cccf_create($_h, $_n) {
 $_h = $_h | 0;
 $_n = $_n | 0;
 var $0 = 0, $2 = 0, $3 = 0;
 $0 = _malloc(8) | 0;
 HEAP32[$0 + 4 >> 2] = $_n;
 $2 = $_n << 3;
 $3 = _malloc($2) | 0;
 HEAP32[$0 >> 2] = $3;
 _memcpy($3 | 0, $_h | 0, $2 | 0) | 0;
 return $0 | 0;
}

function _json_delete_real($real) {
 $real = $real | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp;
 HEAP32[$0 >> 2] = $real;
 _jsonp_free(HEAP32[$0 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  setTempRet0(high >>> bits | 0);
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 setTempRet0(0);
 return high >>> bits - 32 | 0;
}

function _fec_rs_destroy($_q) {
 $_q = $_q | 0;
 var $1 = 0;
 $1 = HEAP32[$_q + 96 >> 2] | 0;
 if ($1 | 0) _free_rs_char($1 | 0);
 _free(HEAP32[$_q + 120 >> 2] | 0);
 _free(HEAP32[$_q + 124 >> 2] | 0);
 _free(HEAP32[$_q + 128 >> 2] | 0);
 _free($_q);
 return;
}

function _gmskframegen_reset($_q) {
 $_q = $_q | 0;
 _gmskmod_reset(HEAP32[$_q >> 2] | 0);
 HEAP32[$_q + 84 >> 2] = 0;
 _msequence_reset(HEAP32[$_q + 32 >> 2] | 0);
 HEAP32[$_q + 88 >> 2] = 0;
 HEAP32[$_q + 92 >> 2] = 0;
 HEAP32[$_q + 96 >> 2] = 0;
 return;
}

function _modem_recreate($_q, $_scheme) {
 $_q = $_q | 0;
 $_scheme = $_scheme | 0;
 var $$0 = 0;
 if ((HEAP32[$_q >> 2] | 0) == ($_scheme | 0)) {
  $$0 = $_q;
  return $$0 | 0;
 }
 _modem_destroy($_q);
 $$0 = _modem_create($_scheme) | 0;
 return $$0 | 0;
}

function _ring_create($length) {
 $length = $length | 0;
 var $0 = 0, $1 = 0;
 $0 = _malloc(16) | 0;
 HEAP32[$0 >> 2] = $length;
 $1 = _malloc($length) | 0;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $1;
 return $0 | 0;
}

function copyTempFloat(ptr) {
 ptr = ptr | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[ptr >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[ptr + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[ptr + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[ptr + 3 >> 0];
}

function _quiet_decoder_enable_stats($d) {
 $d = $d | 0;
 var dest = 0, stop = 0;
 HEAP8[$d + 344 >> 0] = 1;
 dest = $d + 276 | 0;
 stop = dest + 68 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 return;
}

function _fec_pass_encode($_q, $_dec_msg_len, $_msg_dec, $_msg_enc) {
 $_q = $_q | 0;
 $_dec_msg_len = $_dec_msg_len | 0;
 $_msg_dec = $_msg_dec | 0;
 $_msg_enc = $_msg_enc | 0;
 _memmove($_msg_enc | 0, $_msg_dec | 0, $_dec_msg_len | 0) | 0;
 return;
}

function _fec_pass_decode($_q, $_dec_msg_len, $_msg_enc, $_msg_dec) {
 $_q = $_q | 0;
 $_dec_msg_len = $_dec_msg_len | 0;
 $_msg_enc = $_msg_enc | 0;
 $_msg_dec = $_msg_dec | 0;
 _memmove($_msg_dec | 0, $_msg_enc | 0, $_dec_msg_len | 0) | 0;
 return;
}

function mftCall_iii(ptr, p0, p1) {
 ptr = ptr | 0;
 p0 = p0 | 0;
 p1 = p1 | 0;
 if ((ptr | 0) >= (fb | 0) & (ptr | 0) < (fb + 7 | 0)) return FUNCTION_TABLE_iii[ptr - fb & 7](p0 | 0, p1 | 0) | 0;
 return ftCall_iii(ptr | 0, p0 | 0, p1 | 0) | 0;
}

function _flexframesync_debug_enable($_q) {
 $_q = $_q | 0;
 var $0 = 0;
 $0 = $_q + 208 | 0;
 if (HEAP32[$0 >> 2] | 0) return;
 HEAP32[$_q + 216 >> 2] = _windowcf_create(2e3) | 0;
 HEAP32[$_q + 204 >> 2] = 1;
 HEAP32[$0 >> 2] = 1;
 return;
}

function _modulator_symbol_len($m, $sample_len) {
 $m = $m | 0;
 $sample_len = $sample_len | 0;
 var $$0 = 0;
 if (!$m) {
  $$0 = 0;
  return $$0 | 0;
 }
 $$0 = ($sample_len >>> 0) / ((HEAP32[$m + 4 >> 2] | 0) >>> 0) | 0;
 return $$0 | 0;
}

function _div($agg$result, $num, $den) {
 $agg$result = $agg$result | 0;
 $num = $num | 0;
 $den = $den | 0;
 HEAP32[$agg$result >> 2] = ($num | 0) / ($den | 0) | 0;
 HEAP32[$agg$result + 4 >> 2] = ($num | 0) % ($den | 0) | 0;
 return;
}

function _liquid_reverse_uint24($_x) {
 $_x = $_x | 0;
 return (HEAPU8[($_x >>> 8 & 255) + (gb + 39741) >> 0] | 0) << 8 | (HEAPU8[($_x & 255) + (gb + 39741) >> 0] | 0) << 16 | (HEAPU8[($_x >>> 16 & 255) + (gb + 39741) >> 0] | 0) | 0;
}

function _qpacketmodem_destroy($_q) {
 $_q = $_q | 0;
 _packetizer_destroy(HEAP32[$_q + 4 >> 2] | 0);
 _modem_destroy(HEAP32[$_q >> 2] | 0);
 _free(HEAP32[$_q + 16 >> 2] | 0);
 _free(HEAP32[$_q + 20 >> 2] | 0);
 _free($_q);
 return;
}

function _modulator_sample_len($m, $symbol_len) {
 $m = $m | 0;
 $symbol_len = $symbol_len | 0;
 var $$0 = 0;
 if (!$m) {
  $$0 = 0;
  return $$0 | 0;
 }
 $$0 = Math_imul(HEAP32[$m + 4 >> 2] | 0, $symbol_len) | 0;
 return $$0 | 0;
}

function _qpilotsync_destroy($_q) {
 $_q = $_q | 0;
 _free(HEAP32[$_q + 16 >> 2] | 0);
 _free(HEAP32[$_q + 24 >> 2] | 0);
 _free(HEAP32[$_q + 28 >> 2] | 0);
 _fft_destroy_plan(HEAP32[$_q + 32 >> 2] | 0);
 _free($_q);
 return;
}

function _modulator_reset($m) {
 $m = $m | 0;
 var $1 = 0, $4 = 0;
 $1 = HEAP32[$m + 32 >> 2] | 0;
 if ($1 | 0) _firinterp_crcf_reset($1);
 $4 = HEAP32[$m + 36 >> 2] | 0;
 if (!$4) return;
 _iirfilt_crcf_reset($4);
 return;
}

function _flexframegen_reset($_q) {
 $_q = $_q | 0;
 var $0 = 0;
 $0 = $_q + 104 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 return;
}

function _demodulator_destroy($d) {
 $d = $d | 0;
 var $4 = 0;
 if (!$d) return;
 _nco_crcf_destroy(HEAP32[$d + 20 >> 2] | 0);
 $4 = HEAP32[$d + 24 >> 2] | 0;
 if ($4 | 0) _firdecim_crcf_destroy($4);
 _free($d);
 return;
}

function _framedatastats_reset($_stats) {
 $_stats = $_stats | 0;
 if (!$_stats) return;
 HEAP32[$_stats >> 2] = 0;
 HEAP32[$_stats + 4 >> 2] = 0;
 HEAP32[$_stats + 8 >> 2] = 0;
 HEAP32[$_stats + 12 >> 2] = 0;
 return;
}

function _conj($agg$result, $z) {
 $agg$result = $agg$result | 0;
 $z = $z | 0;
 var $3 = 0.0;
 $3 = -+HEAPF64[$z + 8 >> 3];
 HEAPF64[$agg$result >> 3] = +HEAPF64[$z >> 3];
 HEAPF64[$agg$result + 8 >> 3] = $3;
 return;
}

function _conjf($agg$result, $z) {
 $agg$result = $agg$result | 0;
 $z = $z | 0;
 var $3 = 0.0;
 $3 = -+HEAPF32[$z + 4 >> 2];
 HEAP32[$agg$result >> 2] = HEAP32[$z >> 2];
 HEAPF32[$agg$result + 4 >> 2] = $3;
 return;
}

function _modulator_flush_sample_len($m) {
 $m = $m | 0;
 var $$0 = 0;
 if (!$m) {
  $$0 = 0;
  return $$0 | 0;
 }
 $$0 = Math_imul((HEAP32[$m + 8 >> 2] << 1) + 50 | 0, HEAP32[$m + 4 >> 2] | 0) | 0;
 return $$0 | 0;
}

function _liquid_firdes_rfarcsech($_k, $_m, $_beta, $_dt, $_h) {
 $_k = $_k | 0;
 $_m = $_m | 0;
 $_beta = +$_beta;
 $_dt = +$_dt;
 $_h = $_h | 0;
 _liquid_firdes_fnyquist(6, 1, $_k, $_m, $_beta, 0.0, $_h);
 return;
}

function _liquid_firdes_farcsech($_k, $_m, $_beta, $_dt, $_h) {
 $_k = $_k | 0;
 $_m = $_m | 0;
 $_beta = +$_beta;
 $_dt = +$_dt;
 $_h = $_h | 0;
 _liquid_firdes_fnyquist(6, 0, $_k, $_m, $_beta, 0.0, $_h);
 return;
}

function _nco_crcf_reset($_q) {
 $_q = $_q | 0;
 HEAPF32[$_q + 4 >> 2] = 0.0;
 HEAPF32[$_q + 8 >> 2] = 0.0;
 HEAP32[$_q + 1036 >> 2] = 0;
 HEAPF32[$_q + 1040 >> 2] = 0.0;
 HEAPF32[$_q + 1044 >> 2] = 1.0;
 return;
}

function _liquid_firdes_rfsech($_k, $_m, $_beta, $_dt, $_h) {
 $_k = $_k | 0;
 $_m = $_m | 0;
 $_beta = +$_beta;
 $_dt = +$_dt;
 $_h = $_h | 0;
 _liquid_firdes_fnyquist(5, 1, $_k, $_m, $_beta, 0.0, $_h);
 return;
}

function _liquid_firdes_rfexp($_k, $_m, $_beta, $_dt, $_h) {
 $_k = $_k | 0;
 $_m = $_m | 0;
 $_beta = +$_beta;
 $_dt = +$_dt;
 $_h = $_h | 0;
 _liquid_firdes_fnyquist(4, 1, $_k, $_m, $_beta, 0.0, $_h);
 return;
}

function _liquid_firdes_fsech($_k, $_m, $_beta, $_dt, $_h) {
 $_k = $_k | 0;
 $_m = $_m | 0;
 $_beta = +$_beta;
 $_dt = +$_dt;
 $_h = $_h | 0;
 _liquid_firdes_fnyquist(5, 0, $_k, $_m, $_beta, 0.0, $_h);
 return;
}

function _liquid_firdes_fexp($_k, $_m, $_beta, $_dt, $_h) {
 $_k = $_k | 0;
 $_m = $_m | 0;
 $_beta = +$_beta;
 $_dt = +$_dt;
 $_h = $_h | 0;
 _liquid_firdes_fnyquist(4, 0, $_k, $_m, $_beta, 0.0, $_h);
 return;
}

function _modem_modulate_ook($_q, $_sym_in, $_y) {
 $_q = $_q | 0;
 $_sym_in = $_sym_in | 0;
 $_y = $_y | 0;
 HEAPF32[$_y >> 2] = $_sym_in | 0 ? 0.0 : 1.4142135381698608;
 HEAPF32[$_y + 4 >> 2] = 0.0;
 return;
}

function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0;
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
 return (setTempRet0(h | 0), a - c >>> 0 | 0) | 0;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 15 & -16;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 return ret | 0;
}

function mftCall_ii(ptr, p0) {
 ptr = ptr | 0;
 p0 = p0 | 0;
 if ((ptr | 0) >= (fb | 0) & (ptr | 0) < (fb + 7 | 0)) return FUNCTION_TABLE_ii[ptr - fb & 7](p0 | 0) | 0;
 return ftCall_ii(ptr | 0, p0 | 0) | 0;
}

function _getpid() {
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = ___syscall20(20, sp | 0) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function mftCall_vi(ptr, p0) {
 ptr = ptr | 0;
 p0 = p0 | 0;
 if ((ptr | 0) >= (fb | 0) & (ptr | 0) < (fb + 31 | 0)) {
  FUNCTION_TABLE_vi[ptr - fb & 31](p0 | 0);
  return;
 }
 ftCall_vi(ptr | 0, p0 | 0);
}

function _firdecim_crcf_destroy($_q) {
 $_q = $_q | 0;
 _windowcf_destroy(HEAP32[$_q + 12 >> 2] | 0);
 _dotprod_crcf_destroy(HEAP32[$_q + 16 >> 2] | 0);
 _free(HEAP32[$_q >> 2] | 0);
 _free($_q);
 return;
}

function _nco_crcf_compute_sincos_vco($_q) {
 $_q = $_q | 0;
 var $1 = 0.0;
 $1 = +HEAPF32[$_q + 4 >> 2];
 HEAPF32[$_q + 1040 >> 2] = +Math_sin(+$1);
 HEAPF32[$_q + 1044 >> 2] = +Math_cos(+$1);
 return;
}

function _strtoll($s, $p, $base) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 var $0 = 0;
 $0 = _strtox_519($s, $p, $base, 0, -2147483648) | 0;
 setTempRet0(getTempRet0() | 0);
 return $0 | 0;
}

function _modem_modulate_bpsk($_q, $_sym_in, $_y) {
 $_q = $_q | 0;
 $_sym_in = $_sym_in | 0;
 $_y = $_y | 0;
 HEAPF32[$_y >> 2] = $_sym_in | 0 ? -1.0 : 1.0;
 HEAPF32[$_y + 4 >> 2] = 0.0;
 return;
}

function _iirfilt_crcf_create_lowpass($_order, $_fc) {
 $_order = $_order | 0;
 $_fc = +$_fc;
 return _iirfilt_crcf_create_prototype(0, 0, 0, $_order, $_fc, 0.0, .10000000149011612, 60.0) | 0;
}

function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0;
 return (setTempRet0(b + d + (l >>> 0 < a >>> 0 | 0) >>> 0 | 0), l | 0) | 0;
}

function ___syscall_ret($r) {
 $r = $r | 0;
 var $$0 = 0;
 if ($r >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - $r;
  $$0 = -1;
 } else $$0 = $r;
 return $$0 | 0;
}

function _ofdmflexframesync_debug_print($_q, $_filename) {
 $_q = $_q | 0;
 $_filename = $_filename | 0;
 _ofdmframesync_debug_print(HEAP32[$_q + 184 >> 2] | 0, $_filename);
 return;
}

function _chainback_viterbi615__wrapper(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 return _chainback_viterbi615(p0 | 0, p1 | 0, p2 | 0, p3 | 0) | 0;
}

function _chainback_viterbi39__wrapper(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 return _chainback_viterbi39(p0 | 0, p1 | 0, p2 | 0, p3 | 0) | 0;
}

function _chainback_viterbi29__wrapper(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 return _chainback_viterbi29(p0 | 0, p1 | 0, p2 | 0, p3 | 0) | 0;
}

function _chainback_viterbi27__wrapper(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 return _chainback_viterbi27(p0 | 0, p1 | 0, p2 | 0, p3 | 0) | 0;
}

function ___errno_location() {
 var $$0 = 0;
 if (!(HEAP32[gb + 45032 >> 2] | 0)) $$0 = gb + 45076 | 0; else $$0 = HEAP32[(_pthread_self() | 0) + 64 >> 2] | 0;
 return $$0 | 0;
}

function _quiet_decoder_consume_stats($d, $num_frames) {
 $d = $d | 0;
 $num_frames = $num_frames | 0;
 HEAP32[$num_frames >> 2] = HEAP32[$d + 340 >> 2];
 return $d + 116 | 0;
}

function b0(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 nullFunc_iiiiiiii(0);
 return 0;
}

function _ofdmflexframesync_execute($_q, $_x, $_n) {
 $_q = $_q | 0;
 $_x = $_x | 0;
 $_n = $_n | 0;
 _ofdmframesync_execute(HEAP32[$_q + 184 >> 2] | 0, $_x, $_n);
 return;
}

function _liquid_reverse_uint16($_x) {
 $_x = $_x | 0;
 return (HEAPU8[($_x & 255) + (gb + 39741) >> 0] | 0) << 8 | (HEAPU8[($_x >>> 8 & 255) + (gb + 39741) >> 0] | 0) | 0;
}

function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
}

function _strchr($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $0 = 0;
 $0 = ___strchrnul($s, $c) | 0;
 return ((HEAP8[$0 >> 0] | 0) == ($c & 255) << 24 >> 24 ? $0 : 0) | 0;
}

function _nco_crcf_adjust_frequency($_q, $_df) {
 $_q = $_q | 0;
 $_df = +$_df;
 var $0 = 0;
 $0 = $_q + 8 | 0;
 HEAPF32[$0 >> 2] = +HEAPF32[$0 >> 2] + $_df;
 return;
}

function _demodulator_flush_symbol_len($d) {
 $d = $d | 0;
 var $$0 = 0;
 if (!$d) {
  $$0 = 0;
  return $$0 | 0;
 }
 $$0 = HEAP32[$d + 8 >> 2] << 1;
 return $$0 | 0;
}

function _hamming($_n, $_N) {
 $_n = $_n | 0;
 $_N = $_N | 0;
 return +(.53836 - +Math_cos(+(+($_n >>> 0) * 6.283185307179586 / +(($_N + -1 | 0) >>> 0))) * .46164);
}

function _wdelayf_read($_q, $_v) {
 $_q = $_q | 0;
 $_v = $_v | 0;
 HEAP32[$_v >> 2] = HEAP32[(HEAP32[$_q >> 2] | 0) + (HEAP32[$_q + 8 >> 2] << 2) >> 2];
 return;
}

function _gmskmod_destroy($_q) {
 $_q = $_q | 0;
 _firinterp_rrrf_destroy(HEAP32[$_q + 20 >> 2] | 0);
 _free(HEAP32[$_q + 16 >> 2] | 0);
 _free($_q);
 return;
}

function _update_viterbi615_blk__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 return _update_viterbi615_blk(p0 | 0, p1 | 0, p2 | 0) | 0;
}

function _windowcf_clear($_q) {
 $_q = $_q | 0;
 HEAP32[$_q + 24 >> 2] = 0;
 _memset(HEAP32[$_q >> 2] | 0, 0, HEAP32[$_q + 20 >> 2] << 3 | 0) | 0;
 return;
}

function _windowf_clear($_q) {
 $_q = $_q | 0;
 HEAP32[$_q + 24 >> 2] = 0;
 _memset(HEAP32[$_q >> 2] | 0, 0, HEAP32[$_q + 20 >> 2] << 2 | 0) | 0;
 return;
}

function _update_viterbi39_blk__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 return _update_viterbi39_blk(p0 | 0, p1 | 0, p2 | 0) | 0;
}

function _update_viterbi29_blk__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 return _update_viterbi29_blk(p0 | 0, p1 | 0, p2 | 0) | 0;
}

function _update_viterbi27_blk__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 return _update_viterbi27_blk(p0 | 0, p1 | 0, p2 | 0) | 0;
}

function _wdelayf_clear($_q) {
 $_q = $_q | 0;
 HEAP32[$_q + 8 >> 2] = 0;
 _memset(HEAP32[$_q >> 2] | 0, 0, HEAP32[$_q + 4 >> 2] << 2 | 0) | 0;
 return;
}

function ___expo2f($x) {
 $x = +$x;
 return +(+Math_exp(+($x + -162.88958740234375)) * 1661534994731144841129758.0e11 * 1661534994731144841129758.0e11);
}

function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase;
 STACK_MAX = stackMax;
}

function _windowcf_read($_q, $_v) {
 $_q = $_q | 0;
 $_v = $_v | 0;
 HEAP32[$_v >> 2] = (HEAP32[$_q >> 2] | 0) + (HEAP32[$_q + 24 >> 2] << 3);
 return;
}

function _windowf_read($_q, $_v) {
 $_q = $_q | 0;
 $_v = $_v | 0;
 HEAP32[$_v >> 2] = (HEAP32[$_q >> 2] | 0) + (HEAP32[$_q + 24 >> 2] << 2);
 return;
}

function _modem_gen_rand_sym($_q) {
 $_q = $_q | 0;
 var $0 = 0;
 $0 = _rand() | 0;
 return ($0 >>> 0) % ((HEAP32[$_q + 8 >> 2] | 0) >>> 0) | 0 | 0;
}

function _wctomb($s, $wc) {
 $s = $s | 0;
 $wc = $wc | 0;
 var $$0 = 0;
 if (!$s) $$0 = 0; else $$0 = _wcrtomb($s, $wc, 0) | 0;
 return $$0 | 0;
}

function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw;
  threwValue = value;
 }
}

function _gmskmod_reset($_q) {
 $_q = $_q | 0;
 HEAPF32[$_q + 24 >> 2] = 0.0;
 _firinterp_rrrf_reset(HEAP32[$_q + 20 >> 2] | 0);
 return;
}

function _ofdmflexframegen_getframelen($_q) {
 $_q = $_q | 0;
 return (HEAP32[$_q + 44 >> 2] | 0) + 3 + (HEAP32[$_q + 48 >> 2] | 0) | 0;
}

function _vsprintf($s, $fmt, $ap) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 return _vsnprintf($s, 2147483647, $fmt, $ap) | 0;
}

function _firinterp_crcf_reset($_q) {
 $_q = $_q | 0;
 _windowcf_clear(HEAP32[(HEAP32[$_q + 16 >> 2] | 0) + 16 >> 2] | 0);
 return;
}

function _ofdmflexframesync_debug_enable($_q) {
 $_q = $_q | 0;
 _ofdmframesync_debug_enable(HEAP32[$_q + 184 >> 2] | 0);
 return;
}

function _interleaver_set_depth($_q, $_depth) {
 $_q = $_q | 0;
 $_depth = $_depth | 0;
 HEAP32[$_q + 12 >> 2] = $_depth;
 return;
}

function _firinterp_rrrf_reset($_q) {
 $_q = $_q | 0;
 _windowf_clear(HEAP32[(HEAP32[$_q + 16 >> 2] | 0) + 16 >> 2] | 0);
 return;
}

function _framesyncstats_init_default($_stats) {
 $_stats = $_stats | 0;
 _memmove($_stats | 0, gb + 44988 | 0, 40) | 0;
 return;
}

function _firpfb_crcf_set_scale($_q, $_scale) {
 $_q = $_q | 0;
 $_scale = +$_scale;
 HEAPF32[$_q + 24 >> 2] = $_scale;
 return;
}

function _firpfb_rrrf_push($_q, $_x) {
 $_q = $_q | 0;
 $_x = +$_x;
 _windowf_push(HEAP32[$_q + 16 >> 2] | 0, $_x);
 return;
}

function _ofdmframesync_get_cfo($_q) {
 $_q = $_q | 0;
 return +(+_nco_crcf_get_frequency(HEAP32[$_q + 108 >> 2] | 0));
}

function _strncpy($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 ___stpncpy($d, $s, $n) | 0;
 return $d | 0;
}

function _init_viterbi615__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 return _init_viterbi615(p0 | 0, p1 | 0) | 0;
}

function b5(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(5);
 return 0;
}

function _init_viterbi39__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 return _init_viterbi39(p0 | 0, p1 | 0) | 0;
}

function _init_viterbi29__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 return _init_viterbi29(p0 | 0, p1 | 0) | 0;
}

function _init_viterbi27__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 return _init_viterbi27(p0 | 0, p1 | 0) | 0;
}

function _qpacketmodem_get_fec1($_q) {
 $_q = $_q | 0;
 return _packetizer_get_fec1(HEAP32[$_q + 4 >> 2] | 0) | 0;
}

function _qpacketmodem_get_fec0($_q) {
 $_q = $_q | 0;
 return _packetizer_get_fec0(HEAP32[$_q + 4 >> 2] | 0) | 0;
}

function _fputs($s, $f) {
 $s = $s | 0;
 $f = $f | 0;
 return (_fwrite($s, _strlen($s) | 0, 1, $f) | 0) + -1 | 0;
}

function _qpacketmodem_get_modscheme($_q) {
 $_q = $_q | 0;
 return _modem_get_scheme(HEAP32[$_q >> 2] | 0) | 0;
}

function _qpacketmodem_get_crc($_q) {
 $_q = $_q | 0;
 return _packetizer_get_crc(HEAP32[$_q + 4 >> 2] | 0) | 0;
}

function _nco_crcf_set_frequency($_q, $_f) {
 $_q = $_q | 0;
 $_f = +$_f;
 HEAPF32[$_q + 8 >> 2] = $_f;
 return;
}

function _packetizer_get_fec1($_p) {
 $_p = $_p | 0;
 return HEAP32[(HEAP32[$_p + 16 >> 2] | 0) + 28 >> 2] | 0;
}

function _packetizer_get_fec0($_p) {
 $_p = $_p | 0;
 return HEAP32[(HEAP32[$_p + 16 >> 2] | 0) + 8 >> 2] | 0;
}

function _msequence_reset($_ms) {
 $_ms = $_ms | 0;
 HEAP32[$_ms + 16 >> 2] = HEAP32[$_ms + 8 >> 2];
 return;
}

function _ofdmframesync_get_rssi($_q) {
 $_q = $_q | 0;
 return +(+_log10(+HEAPF32[$_q + 80 >> 2]) * -10.0);
}

function _gray_encode($symbol_in) {
 $symbol_in = $symbol_in | 0;
 return $symbol_in >>> 1 ^ $symbol_in | 0;
}

function _qpilotgen_destroy($_q) {
 $_q = $_q | 0;
 _free(HEAP32[$_q + 16 >> 2] | 0);
 _free($_q);
 return;
}

function _cargf($z) {
 $z = $z | 0;
 return +(+Math_atan2(+(+HEAPF32[$z + 4 >> 2]), +(+HEAPF32[$z >> 2])));
}

function b7(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(7);
}

function _unscramble_data($_x, $_n) {
 $_x = $_x | 0;
 $_n = $_n | 0;
 _scramble_data($_x, $_n);
 return;
}

function _dotprod_rrrf_destroy($_q) {
 $_q = $_q | 0;
 _free(HEAP32[$_q >> 2] | 0);
 _free($_q);
 return;
}

function _dotprod_crcf_destroy($_q) {
 $_q = $_q | 0;
 _free(HEAP32[$_q >> 2] | 0);
 _free($_q);
 return;
}

function _dotprod_cccf_destroy($_q) {
 $_q = $_q | 0;
 _free(HEAP32[$_q >> 2] | 0);
 _free($_q);
 return;
}

function _firpfb_crcf_reset($_q) {
 $_q = $_q | 0;
 _windowcf_clear(HEAP32[$_q + 16 >> 2] | 0);
 return;
}

function _firpfb_rrrf_reset($_q) {
 $_q = $_q | 0;
 _windowf_clear(HEAP32[$_q + 16 >> 2] | 0);
 return;
}

function _cleanup_387($p) {
 $p = $p | 0;
 if (!(HEAP32[$p + 68 >> 2] | 0)) ___unlockfile($p);
 return;
}

function _cleanup_382($p) {
 $p = $p | 0;
 if (!(HEAP32[$p + 68 >> 2] | 0)) ___unlockfile($p);
 return;
}

function _fft_execute($_q) {
 $_q = $_q | 0;
 mftCall_vi(HEAP32[$_q + 28 >> 2] | 0, $_q | 0);
 return;
}

function _windowcf_destroy($_q) {
 $_q = $_q | 0;
 _free(HEAP32[$_q >> 2] | 0);
 _free($_q);
 return;
}

function _windowf_destroy($_q) {
 $_q = $_q | 0;
 _free(HEAP32[$_q >> 2] | 0);
 _free($_q);
 return;
}

function _wdelayf_destroy($_q) {
 $_q = $_q | 0;
 _free(HEAP32[$_q >> 2] | 0);
 _free($_q);
 return;
}

function _ofdmflexframegen_is_assembled($_q) {
 $_q = $_q | 0;
 return HEAP32[$_q + 124 >> 2] | 0;
}

function _cabsf($z) {
 $z = $z | 0;
 return +(+_hypotf(+HEAPF32[$z >> 2], +HEAPF32[$z + 4 >> 2]));
}

function b1(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(1);
 return 0;
}

function _isspace($c) {
 $c = $c | 0;
 return (($c | 0) == 32 | ($c + -9 | 0) >>> 0 < 5) & 1 | 0;
}

function _ring_destroy($r) {
 $r = $r | 0;
 _free(HEAP32[$r + 4 >> 2] | 0);
 _free($r);
 return;
}

function _liquid_modem_is_apsk($_ms) {
 $_ms = $_ms | 0;
 return ($_ms + -40 | 0) >>> 0 < 7 | 0;
}

function _liquid_Qf($_z) {
 $_z = +$_z;
 return +((1.0 - +_erff($_z * .7071067811865476)) * .5);
}

function _create_viterbi615__wrapper(p0) {
 p0 = p0 | 0;
 return _create_viterbi615(p0 | 0) | 0;
}

function _liquid_modem_is_dpsk($_ms) {
 $_ms = $_ms | 0;
 return ($_ms + -9 | 0) >>> 0 < 8 | 0;
}

function _qpacketmodem_get_frame_len($_q) {
 $_q = $_q | 0;
 return HEAP32[$_q + 32 >> 2] | 0;
}

function _qdetector_cccf_get_buf_len($_q) {
 $_q = $_q | 0;
 return HEAP32[$_q + 32 >> 2] | 0;
}

function _flexframegen_is_assembled($_q) {
 $_q = $_q | 0;
 return HEAP32[$_q + 112 >> 2] | 0;
}

function _create_viterbi39__wrapper(p0) {
 p0 = p0 | 0;
 return _create_viterbi39(p0 | 0) | 0;
}

function _create_viterbi29__wrapper(p0) {
 p0 = p0 | 0;
 return _create_viterbi29(p0 | 0) | 0;
}

function _create_viterbi27__wrapper(p0) {
 p0 = p0 | 0;
 return _create_viterbi27(p0 | 0) | 0;
}

function _quiet_decoder_checksum_fails($d) {
 $d = $d | 0;
 return HEAP32[$d + 100 >> 2] | 0;
}

function _qdetector_cccf_get_gamma($_q) {
 $_q = $_q | 0;
 return +(+HEAPF32[$_q + 76 >> 2]);
}

function _packetizer_get_enc_msg_len($_p) {
 $_p = $_p | 0;
 return HEAP32[$_p + 4 >> 2] | 0;
}

function _gmskframegen_is_assembled($_q) {
 $_q = $_q | 0;
 return HEAP32[$_q + 88 >> 2] | 0;
}

function _qpilotsync_get_frame_len($_q) {
 $_q = $_q | 0;
 return HEAP32[$_q + 12 >> 2] | 0;
}

function _qdetector_cccf_get_dphi($_q) {
 $_q = $_q | 0;
 return +(+HEAPF32[$_q + 80 >> 2]);
}

function _roundf(f) {
 f = +f;
 return f >= 0.0 ? +Math_floor(f + .5) : +Math_ceil(f - .5);
}

function _quiet_encoder_get_frame_len($e) {
 $e = $e | 0;
 return HEAP32[$e + 84 >> 2] | 0;
}

function _qpilotgen_get_frame_len($_q) {
 $_q = $_q | 0;
 return HEAP32[$_q + 12 >> 2] | 0;
}

function _qdetector_cccf_get_tau($_q) {
 $_q = $_q | 0;
 return +(+HEAPF32[$_q + 72 >> 2]);
}

function _qdetector_cccf_get_phi($_q) {
 $_q = $_q | 0;
 return +(+HEAPF32[$_q + 84 >> 2]);
}

function _nco_crcf_get_frequency($_q) {
 $_q = $_q | 0;
 return +(+HEAPF32[$_q + 8 >> 2]);
}

function _qpilotsync_get_dphi($_q) {
 $_q = $_q | 0;
 return +(+HEAPF32[$_q + 36 >> 2]);
}

function _qpilotsync_get_phi($_q) {
 $_q = $_q | 0;
 return +(+HEAPF32[$_q + 40 >> 2]);
}

function b4(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(4);
}

function _strtod($s, $p) {
 $s = $s | 0;
 $p = $p | 0;
 return +(+_strtox($s, $p, 1));
}

function _packetizer_get_crc($_p) {
 $_p = $_p | 0;
 return HEAP32[$_p + 8 >> 2] | 0;
}

function _delete_viterbi615__wrapper(p0) {
 p0 = p0 | 0;
 _delete_viterbi615(p0 | 0);
}

function _delete_viterbi39__wrapper(p0) {
 p0 = p0 | 0;
 _delete_viterbi39(p0 | 0);
}

function _delete_viterbi29__wrapper(p0) {
 p0 = p0 | 0;
 _delete_viterbi29(p0 | 0);
}

function _delete_viterbi27__wrapper(p0) {
 p0 = p0 | 0;
 _delete_viterbi27(p0 | 0);
}

function _copysignl($x, $y) {
 $x = +$x;
 $y = +$y;
 return +(+_copysign($x, $y));
}

function _scalbnl($x, $n) {
 $x = +$x;
 $n = $n | 0;
 return +(+_scalbn($x, $n));
}

function _modem_get_bps($_q) {
 $_q = $_q | 0;
 return HEAP32[$_q + 4 >> 2] | 0;
}

function _modem_get_scheme($_q) {
 $_q = $_q | 0;
 return HEAP32[$_q >> 2] | 0;
}

function _frexpl($x, $e) {
 $x = +$x;
 $e = $e | 0;
 return +(+_frexp($x, $e));
}

function b6(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(6);
 return 0;
}

function _fec_secded7264_destroy($_q) {
 $_q = $_q | 0;
 _free($_q);
 return;
}

function _fec_secded3932_destroy($_q) {
 $_q = $_q | 0;
 _free($_q);
 return;
}

function _fec_secded2216_destroy($_q) {
 $_q = $_q | 0;
 _free($_q);
 return;
}

function _fec_hamming128_destroy($_q) {
 $_q = $_q | 0;
 _free($_q);
 return;
}

function _msequence_destroy($_ms) {
 $_ms = $_ms | 0;
 _free($_ms);
 return;
}

function _fec_hamming84_destroy($_q) {
 $_q = $_q | 0;
 _free($_q);
 return;
}

function _fec_hamming74_destroy($_q) {
 $_q = $_q | 0;
 _free($_q);
 return;
}

function _fec_golay2412_destroy($_q) {
 $_q = $_q | 0;
 _free($_q);
 return;
}

function _interleaver_destroy($_q) {
 $_q = $_q | 0;
 _free($_q);
 return;
}

function _fmodl($x, $y) {
 $x = +$x;
 $y = +$y;
 return +(+_fmod($x, $y));
}

function _nco_crcf_destroy($_q) {
 $_q = $_q | 0;
 _free($_q);
 return;
}

function _fec_rep5_destroy($_q) {
 $_q = $_q | 0;
 _free($_q);
 return;
}

function _fec_rep3_destroy($_q) {
 $_q = $_q | 0;
 _free($_q);
 return;
}

function _fec_pass_destroy($_q) {
 $_q = $_q | 0;
 _free($_q);
 return;
}

function _qdetector_cccf_reset($_q) {
 $_q = $_q | 0;
 return;
}

function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}

function b3(p0) {
 p0 = p0 | 0;
 nullFunc_ii(3);
 return 0;
}

function ___unlockfile($f) {
 $f = $f | 0;
 return;
}

function ___lockfile($f) {
 $f = $f | 0;
 return 0;
}

function b2(p0) {
 p0 = p0 | 0;
 nullFunc_vi(2);
}

function _localeconv() {
 return gb + 9716 | 0;
}

function _json_false() {
 return gb + 9320 | 0;
}

function _json_true() {
 return gb + 9312 | 0;
}

function _json_null() {
 return gb + 9328 | 0;
}

function stackSave() {
 return STACKTOP | 0;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiiiiiii = [b0,_decoder_on_decode];
var FUNCTION_TABLE_iiii = [b1,___stdio_write,___stdio_seek,___stdout_write,_sn_write,_update_viterbi27_blk__wrapper,_update_viterbi29_blk__wrapper,_update_viterbi39_blk__wrapper,_update_viterbi615_blk__wrapper,___stdio_read,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_vi = [b2,_free,_delete_viterbi27__wrapper,_delete_viterbi29__wrapper,_delete_viterbi39__wrapper,_delete_viterbi615__wrapper,_nco_crcf_compute_sincos_nco,_nco_crcf_compute_sincos_vco,_fft_execute_radix2,_fft_execute_mixed_radix,_fft_execute_rader,_fft_execute_rader2,_fft_execute_dft_2,_fft_execute_dft_3,_fft_execute_dft_4,_fft_execute_dft_5,_fft_execute_dft_6,_fft_execute_dft_7,_fft_execute_dft_8,_fft_execute_dft_16,_fft_execute_dft,_cleanup_387,_cleanup_382,b2,b2,b2,b2,b2,b2
,b2,b2,b2];
var FUNCTION_TABLE_ii = [b3,_malloc,___stdio_close,_create_viterbi27__wrapper,_create_viterbi29__wrapper,_create_viterbi39__wrapper,_create_viterbi615__wrapper,_string_get];
var FUNCTION_TABLE_viii = [b4,_modem_modulate_dpsk,_modem_demodulate_dpsk,_modem_modulate_ask,_modem_demodulate_ask,_modem_modulate_bpsk,_modem_demodulate_bpsk,_modem_modulate_qpsk,_modem_demodulate_qpsk,_modem_modulate_ook,_modem_demodulate_ook,_modem_modulate_sqam32,_modem_demodulate_sqam32,_modem_modulate_sqam128,_modem_demodulate_sqam128,_modem_modulate_arb,_modem_demodulate_arb,_modem_modulate_psk,_modem_demodulate_psk,_modem_modulate_qam,_modem_demodulate_qam,_modem_modulate_apsk,_modem_demodulate_apsk,b4,b4,b4,b4,b4,b4
,b4,b4,b4];
var FUNCTION_TABLE_iiiii = [b5,_chainback_viterbi27__wrapper,_chainback_viterbi29__wrapper,_chainback_viterbi39__wrapper,_chainback_viterbi615__wrapper,_ofdmflexframesync_internal_callback,b5,b5];
var FUNCTION_TABLE_iii = [b6,_init_viterbi27__wrapper,_init_viterbi29__wrapper,_init_viterbi39__wrapper,_init_viterbi615__wrapper,b6,b6,b6];
var FUNCTION_TABLE_viiii = [b7,_fec_conv_encode,_fec_conv_decode_hard,_fec_conv_decode_soft,_fec_conv_punctured_encode,_fec_conv_punctured_decode_hard,_fec_conv_punctured_decode_soft,_fec_golay2412_encode,_fec_golay2412_decode,_fec_hamming74_encode,_fec_hamming74_decode,_fec_hamming74_decode_soft,_fec_hamming84_encode,_fec_hamming84_decode,_fec_hamming84_decode_soft,_fec_hamming128_encode,_fec_hamming128_decode,_fec_hamming128_decode_soft,_fec_pass_encode,_fec_pass_decode,_fec_rep3_encode,_fec_rep3_decode,_fec_rep3_decode_soft,_fec_rep5_encode,_fec_rep5_decode,_fec_rep5_decode_soft,_fec_rs_encode,_fec_rs_decode,_fec_secded2216_encode
,_fec_secded2216_decode,_fec_secded3932_encode,_fec_secded3932_decode,_fec_secded7264_encode,_fec_secded7264_decode,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7];

  return { _fec_hamming84_decode_soft: _fec_hamming84_decode_soft, _fec_hamming84_destroy: _fec_hamming84_destroy, _nco_crcf_set_frequency: _nco_crcf_set_frequency, _crc_generate_key: _crc_generate_key, _memchr: _memchr, _flexframegen_write_samples: _flexframegen_write_samples, _strbuffer_append_byte: _strbuffer_append_byte, _ellip_acdf: _ellip_acdf, _liquid_cacosf: _liquid_cacosf, _fec_secded7264_encode: _fec_secded7264_encode, _fft_create_plan_rader: _fft_create_plan_rader, _fec_get_enc_msg_length: _fec_get_enc_msg_length, _jsonp_stringn_nocheck_own: _jsonp_stringn_nocheck_own, _fec_hamming84_encode: _fec_hamming84_encode, _ilogb: _ilogb, _firpfb_rrrf_create_drnyquist: _firpfb_rrrf_create_drnyquist, _wdelayf_read: _wdelayf_read, _nco_crcf_mix_down: _nco_crcf_mix_down, _decoder_profile: _decoder_profile, _ofdmframegen_write_S0b: _ofdmframegen_write_S0b, _ofdmframegen_write_S0a: _ofdmframegen_write_S0a, _iirfilt_crcf_reset: _iirfilt_crcf_reset, _fec_block_get_enc_msg_len: _fec_block_get_enc_msg_len, _vsprintf: _vsprintf, _modem_modulate_psk: _modem_modulate_psk, _puts: _puts, _liquid_firdes_prototype: _liquid_firdes_prototype, _liquid_reverse_uint24: _liquid_reverse_uint24, _liquid_firdes_fnyquist: _liquid_firdes_fnyquist, _dotprod_cccf_execute: _dotprod_cccf_execute, _json_decref_1974: _json_decref_1974, _qdetector_cccf_get_phi: _qdetector_cccf_get_phi, _gmskframesync_update_symsync: _gmskframesync_update_symsync, _flexframegen_reconfigure: _flexframegen_reconfigure, stackSave: stackSave, _iirfilt_crcf_destroy: _iirfilt_crcf_destroy, _jsonp_free: _jsonp_free, _modulator_symbol_len: _modulator_symbol_len, _pad: _pad, _modem_modulate_qam: _modem_modulate_qam, _iirfilt_crcf_create_dc_blocker: _iirfilt_crcf_create_dc_blocker, _ofdmframe_validate_sctype: _ofdmframe_validate_sctype, _nco_crcf_compute_sincos_nco: _nco_crcf_compute_sincos_nco, _json_array_append: _json_array_append, _qdetector_cccf_execute_seek: _qdetector_cccf_execute_seek, _ccosf: _ccosf, _ellip_cdf: _ellip_cdf, _nco_crcf_reset: _nco_crcf_reset, _quiet_decoder_checksum_fails: _quiet_decoder_checksum_fails, _ofdmflexframesync_execute: _ofdmflexframesync_execute, _resamp_rrrf_destroy: _resamp_rrrf_destroy, _fec_secded7264_compute_syndrome: _fec_secded7264_compute_syndrome, _firinterp_crcf_execute: _firinterp_crcf_execute, _fft_execute_rader2: _fft_execute_rader2, _modem_modulate_ask: _modem_modulate_ask, setThrew: setThrew, _liquid_firdes_fexp_freqresponse: _liquid_firdes_fexp_freqresponse, _fec_rs_setlength: _fec_rs_setlength, _liquid_firdes_rfsech: _liquid_firdes_rfsech, _qdetector_cccf_get_buf_len: _qdetector_cccf_get_buf_len, ___towrite: ___towrite, _ofdmflexframegen_create: _ofdmflexframegen_create, _ofdmframegen_destroy: _ofdmframegen_destroy, _liquid_nextpow2: _liquid_nextpow2, _json_object_set_new_nocheck: _json_object_set_new_nocheck, _liquid_firdes_fsech_freqresponse: _liquid_firdes_fsech_freqresponse, _modem_demodulate_dpsk: _modem_demodulate_dpsk, _packetizer_destroy: _packetizer_destroy, _qpilotsync_get_dphi: _qpilotsync_get_dphi, _packetizer_recreate: _packetizer_recreate, _packetizer_get_enc_msg_len: _packetizer_get_enc_msg_len, ___strchrnul: ___strchrnul, _flexframegen_getframelen: _flexframegen_getframelen, _modem_demodulate_apsk: _modem_demodulate_apsk, _windowcf_create: _windowcf_create, _flexframesync_execute_rxpreamble: _flexframesync_execute_rxpreamble, _ofdmflexframegen_destroy: _ofdmflexframegen_destroy, _fft_create_plan: _fft_create_plan, _encoder_profile: _encoder_profile, _localeconv: _localeconv, _matrixf_trans: _matrixf_trans, _firinterp_crcf_create: _firinterp_crcf_create, _modem_demodulate: _modem_demodulate, _flexframegen_generate_symbol: _flexframegen_generate_symbol, _fec_rep5_destroy: _fec_rep5_destroy, _modem_recreate: _modem_recreate, _flexframegen_create: _flexframegen_create, _json_delete_object: _json_delete_object, _json_false: _json_false, _liquid_csqrtf: _liquid_csqrtf, _json_object_get: _json_object_get, _liquid_msb_index: _liquid_msb_index, _crc_validate_message: _crc_validate_message, _hashtable_do_clear: _hashtable_do_clear, _liquid_cplxpair_cleanup: _liquid_cplxpair_cleanup, _conjf: _conjf, _fft_execute_dft_7: _fft_execute_dft_7, _nco_crcf_destroy: _nco_crcf_destroy, _gmskframegen_destroy: _gmskframegen_destroy, _gmskframegen_getframelen: _gmskframegen_getframelen, _fec_rep3_decode: _fec_rep3_decode, _iirdes_dzpk2sosf: _iirdes_dzpk2sosf, _list_insert: _list_insert, _fec_golay2412_decode: _fec_golay2412_decode, _quiet_decoder_recv: _quiet_decoder_recv, _gmskframegen_create: _gmskframegen_create, _strtoll: _strtoll, _fec_secded7264_decode: _fec_secded7264_decode, ___uflow: ___uflow, _fec_secded2216_decode: _fec_secded2216_decode, _liquid_Qf: _liquid_Qf, _demodulator_recv: _demodulator_recv, _matrixf_hermitian: _matrixf_hermitian, _stream_get: _stream_get, _json_number_value: _json_number_value, _fec_hamming128_decode_symbol: _fec_hamming128_decode_symbol, _modem_demodulate_arb: _modem_demodulate_arb, ___stdio_seek: ___stdio_seek, _conj: _conj, _scramble_data: _scramble_data, _msequence_reset: _msequence_reset, _quiet_encoder_profile_str: _quiet_encoder_profile_str, _pop_arg: _pop_arg, _json_array_append_new: _json_array_append_new, _buf_to_uint32: _buf_to_uint32, _lex_close: _lex_close, _malloc: _malloc, _generate_seed: _generate_seed, _firinterp_crcf_reset: _firinterp_crcf_reset, _fopen: _fopen, _msequence_destroy: _msequence_destroy, ___mulsc3: ___mulsc3, _ofdmflexframesync_debug_print: _ofdmflexframesync_debug_print, _dotprod_cccf_create: _dotprod_cccf_create, _ofdmframesync_reset: _ofdmframesync_reset, _fft_create_plan_rader2: _fft_create_plan_rader2, _ofdmframesync_estimate_gain_S1: _ofdmframesync_estimate_gain_S1, _ofdmframesync_estimate_gain_S0: _ofdmframesync_estimate_gain_S0, _unscramble_data: _unscramble_data, _liquid_reverse_uint16: _liquid_reverse_uint16, _sinhf: _sinhf, _fec_secded7264_compute_parity: _fec_secded7264_compute_parity, _gmskmod_modulate: _gmskmod_modulate, _gmskframesync_execute_rxpreamble: _gmskframesync_execute_rxpreamble, _ofdmframesync_rxsymbol: _ofdmframesync_rxsymbol, _ring_write: _ring_write, _fec_conv_init_v29: _fec_conv_init_v29, _fec_secded3932_estimate_ehat: _fec_secded3932_estimate_ehat, _erfc2_142: _erfc2_142, _fec_conv_punctured_create: _fec_conv_punctured_create, _modem_demodulate_sqam128: _modem_demodulate_sqam128, _fec_pass_create: _fec_pass_create, _dispose_chunk: _dispose_chunk, _interleaver_decode: _interleaver_decode, _strtox_519: _strtox_519, ___lockfile: ___lockfile, _log10: _log10, _fec_conv_decode_hard: _fec_conv_decode_hard, _detector_cccf_destroy: _detector_cccf_destroy, _cexpf: _cexpf, _modem_get_demodulator_evm: _modem_get_demodulator_evm, _modem_demodulate_sqam32: _modem_demodulate_sqam32, _json_array: _json_array, _firdespm_init_grid: _firdespm_init_grid, _modem_gen_rand_sym: _modem_gen_rand_sym, _liquid_filter_isi: _liquid_filter_isi, _demodulator_flush: _demodulator_flush, stackRestore: stackRestore, _gmskmod_destroy: _gmskmod_destroy, _firpfb_crcf_execute: _firpfb_crcf_execute, _liquid_firdes_fsech: _liquid_firdes_fsech, _crc_get_length: _crc_get_length, _qpacketmodem_destroy: _qpacketmodem_destroy, _qdetector_cccf_create: _qdetector_cccf_create, _lex_scan_string: _lex_scan_string, _ofdmflexframesync_rxheader: _ofdmflexframesync_rxheader, _fpoly_bessel_roots_orchard_recursion: _fpoly_bessel_roots_orchard_recursion, _wcrtomb: _wcrtomb, _modulator_create: _modulator_create, ___stdio_close: ___stdio_close, _fft_create_plan_mixed_radix: _fft_create_plan_mixed_radix, _butter_azpkf: _butter_azpkf, _hashlittle: _hashlittle, _ofdmframegen_writesymbol: _ofdmframegen_writesymbol, _modem_modulate_dpsk: _modem_modulate_dpsk, _modem_modulate_sqam128: _modem_modulate_sqam128, _ofdmframesync_execute_S1: _ofdmframesync_execute_S1, ___muldc3: ___muldc3, _modem_modulate_ook: _modem_modulate_ook, _liquid_firdes_gmsktx: _liquid_firdes_gmsktx, _quiet_decoder_destroy: _quiet_decoder_destroy, _hashtable_set: _hashtable_set, _cleanup_382: _cleanup_382, _qdetector_cccf_execute: _qdetector_cccf_execute, _cleanup_387: _cleanup_387, _firdespm_destroy: _firdespm_destroy, _fec_pass_destroy: _fec_pass_destroy, ___divdc3: ___divdc3, _json_integer: _json_integer, _liquid_getopt_str2mod: _liquid_getopt_str2mod, _ofdmframe_init_default_sctype: _ofdmframe_init_default_sctype, _nco_crcf_adjust_frequency: _nco_crcf_adjust_frequency, _liquid_firdes_rkaiser_quadratic: _liquid_firdes_rkaiser_quadratic, _ofdmflexframesync_decode_header: _ofdmflexframesync_decode_header, _windowf_create: _windowf_create, _flexframesync_execute_rxheader: _flexframesync_execute_rxheader, _ofdmframesync_get_rssi: _ofdmframesync_get_rssi, _interleaver_encode: _interleaver_encode, _nco_crcf_set_phase: _nco_crcf_set_phase, _ofdmframesync_destroy: _ofdmframesync_destroy, _fec_conv_decode_soft: _fec_conv_decode_soft, _jsonp_strndup: _jsonp_strndup, _lex_save: _lex_save, ___fmodeflags: ___fmodeflags, _rand: _rand, _json_init: _json_init, _free: _free, _scalbn: _scalbn, _qpacketmodem_get_frame_len: _qpacketmodem_get_frame_len, _liquid_firdes_gmskrx: _liquid_firdes_gmskrx, _flexframesync_execute_seekpn: _flexframesync_execute_seekpn, _gmskframesync_destroy: _gmskframesync_destroy, _quiet_decoder_flush: _quiet_decoder_flush, _dotprod_rrrf_destroy: _dotprod_rrrf_destroy, _modem_get_scheme: _modem_get_scheme, _dotprod_cccf_destroy: _dotprod_cccf_destroy, _error_set: _error_set, _flexframesync_debug_print: _flexframesync_debug_print, _liquid_firdes_kaiser: _liquid_firdes_kaiser, _ofdmflexframesync_create: _ofdmflexframesync_create, _demodulator_flush_symbol_len: _demodulator_flush_symbol_len, _fecsoft_hamming74_decode: _fecsoft_hamming74_decode, _cheby1_azpkf: _cheby1_azpkf, _fft_execute_dft_16: _fft_execute_dft_16, _qdetector_cccf_reset: _qdetector_cccf_reset, _csinhf: _csinhf, ___unlockfile: ___unlockfile, _interleaver_set_depth: _interleaver_set_depth, _nco_crcf_mix_up: _nco_crcf_mix_up, _firdespm_run: _firdespm_run, _nco_crcf_get_frequency: _nco_crcf_get_frequency, _firpfb_rrrf_execute: _firpfb_rrrf_execute, _firinterp_rrrf_reset: _firinterp_rrrf_reset, _getpid: _getpid, _cabsf: _cabsf, _div: _div, _modulator_flush: _modulator_flush, _quiet_encoder_clamp_frame_len: _quiet_encoder_clamp_frame_len, _ofdmflexframegen_writesymbol: _ofdmflexframegen_writesymbol, _ofdmframesync_estimate_eqgain_poly: _ofdmframesync_estimate_eqgain_poly, _utf8_check_first: _utf8_check_first, _json_object: _json_object, _flexframesync_create: _flexframesync_create, _strbuffer_init: _strbuffer_init, _modem_demodulate_ook: _modem_demodulate_ook, _logb: _logb, _windowf_push: _windowf_push, _fwrite: _fwrite, _fec_rs_encode: _fec_rs_encode, _modem_get_bps: _modem_get_bps, _fec_secded7264_create: _fec_secded7264_create, _roundf: _roundf, _qpacketmodem_decode: _qpacketmodem_decode, _fec_secded7264_decode_symbol: _fec_secded7264_decode_symbol, _firdecim_crcf_create: _firdecim_crcf_create, _fpoly_bessel_roots_orchard: _fpoly_bessel_roots_orchard, _fec_hamming74_decode: _fec_hamming74_decode, _qdetector_cccf_destroy: _qdetector_cccf_destroy, _bilinear_zpkf: _bilinear_zpkf, _memset: _memset, _modem_demodulate_qpsk: _modem_demodulate_qpsk, _to_locale: _to_locale, _windowf_destroy: _windowf_destroy, _fec_hamming128_destroy: _fec_hamming128_destroy, _interleaver_create: _interleaver_create, _vfprintf: _vfprintf, _liquid_unpack_bytes: _liquid_unpack_bytes, _iirdes_dzpk_lp2bp: _iirdes_dzpk_lp2bp, _modem_demodulate_ask: _modem_demodulate_ask, _firinterp_crcf_destroy: _firinterp_crcf_destroy, _fec_hamming128_create: _fec_hamming128_create, _qpacketmodem_get_fec0: _qpacketmodem_get_fec0, _qpacketmodem_get_fec1: _qpacketmodem_get_fec1, _gmskmod_reset: _gmskmod_reset, _poly_val_lagrange_barycentric: _poly_val_lagrange_barycentric, _snprintf: _snprintf, _parse_object: _parse_object, _matrixf_gjelim: _matrixf_gjelim, _cargf: _cargf, _lex_scan: _lex_scan, _json_delete_integer: _json_delete_integer, _msequence_create: _msequence_create, _modem_modulate_arb: _modem_modulate_arb, _fec_rep5_decode: _fec_rep5_decode, _detector_cccf_create: _detector_cccf_create, _modem_create_qam: _modem_create_qam, _modem_demodulate_qam: _modem_demodulate_qam, _ellip_snf: _ellip_snf, _modem_modulate: _modem_modulate, _quiet_decoder_consume: _quiet_decoder_consume, _modem_demodulate_bpsk: _modem_demodulate_bpsk, _string_create: _string_create, _fec_rep5_encode: _fec_rep5_encode, _frexpl: _frexpl, _windowcf_destroy: _windowcf_destroy, _flexframegen_reset: _flexframegen_reset, _modem_create_psk: _modem_create_psk, _fec_secded7264_destroy: _fec_secded7264_destroy, _hashtable_get: _hashtable_get, _isspace: _isspace, _cheby2_azpkf: _cheby2_azpkf, _liquid_firdes_farcsech_freqresponse: _liquid_firdes_farcsech_freqresponse, _fec_rep3_decode_soft: _fec_rep3_decode_soft, _gmskframesync_execute_rxheader: _gmskframesync_execute_rxheader, _ring_create: _ring_create, _quiet_encoder_get_frame_len: _quiet_encoder_get_frame_len, _i64Subtract: _i64Subtract, _packetizer_get_fec1: _packetizer_get_fec1, _packetizer_get_fec0: _packetizer_get_fec0, _fec_pass_encode: _fec_pass_encode, _msequence_advance: _msequence_advance, _firpfb_rrrf_create: _firpfb_rrrf_create, _qpilotgen_destroy: _qpilotgen_destroy, _fecsoft_hamming128_decode_n3: _fecsoft_hamming128_decode_n3, _dotprod_crcf_execute: _dotprod_crcf_execute, _ofdmframegen_reset: _ofdmframegen_reset, _open: _open, _fflush: _fflush, _firinterp_rrrf_execute: _firinterp_rrrf_execute, _liquid_sumsqcf: _liquid_sumsqcf, _qdetector_cccf_create_linear: _qdetector_cccf_create_linear, ___FLOAT_BITS: ___FLOAT_BITS, _fft_execute_mixed_radix: _fft_execute_mixed_radix, _dotprod_crcf_destroy: _dotprod_crcf_destroy, _ofdmframesync_create: _ofdmframesync_create, _detector_cccf_correlate: _detector_cccf_correlate, _firdespm_iext_search: _firdespm_iext_search, ___expo2f: ___expo2f, _scalbnl: _scalbnl, _expm1f: _expm1f, _coshf: _coshf, _firpfb_crcf_push: _firpfb_crcf_push, _calloc: _calloc, _fec_conv_punctured_destroy: _fec_conv_punctured_destroy, _scalbnf: _scalbnf, _gmskframegen_write_preamble: _gmskframegen_write_preamble, _flexframesync_set_header_len: _flexframesync_set_header_len, _qpacketmodem_create: _qpacketmodem_create, _utf8_check_full: _utf8_check_full, _flexframesync_execute: _flexframesync_execute, _resamp_rrrf_create: _resamp_rrrf_create, _flexframesync_execute_rxpayload: _flexframesync_execute_rxpayload, _json_delete_string: _json_delete_string, ___errno_location: ___errno_location, _fec_hamming84_decode: _fec_hamming84_decode, _strcmp: _strcmp, _fec_secded2216_encode: _fec_secded2216_encode, _ofdmframesync_execute_rxsymbols: _ofdmframesync_execute_rxsymbols, _copysign: _copysign, _csqrtf: _csqrtf, _printf_core: _printf_core, _memmove: _memmove, _liquid_lngammaf: _liquid_lngammaf, _qdetector_cccf_get_dphi: _qdetector_cccf_get_dphi, _lex_save_cached: _lex_save_cached, _ofdmflexframesync_rxpayload: _ofdmflexframesync_rxpayload, _hamming: _hamming, _ofdmflexframegen_set_header_len: _ofdmflexframegen_set_header_len, _strlen: _strlen, _ofdmflexframesync_destroy: _ofdmflexframesync_destroy, _json_decref: _json_decref, _polycf_expandroots: _polycf_expandroots, _strbuffer_pop: _strbuffer_pop, _fec_conv_encode: _fec_conv_encode, _flexframegen_setprops: _flexframegen_setprops, _fec_hamming74_destroy: _fec_hamming74_destroy, _firdespm_execute: _firdespm_execute, _strncpy: _strncpy, _resamp_rrrf_execute_output_block: _resamp_rrrf_execute_output_block, _json_integer_value: _json_integer_value, _hashtable_init: _hashtable_init, ___stpncpy: ___stpncpy, ___stdio_write: ___stdio_write, _liquid_modem_is_apsk: _liquid_modem_is_apsk, _gmskframegen_write_tail: _gmskframegen_write_tail, _ofdmflexframegen_assemble: _ofdmflexframegen_assemble, _json_null: _json_null, _msequence_generate_symbol: _msequence_generate_symbol, _modem_modulate_apsk: _modem_modulate_apsk, _packetizer_create: _packetizer_create, _ofdmframegen_create: _ofdmframegen_create, _liquid_firdes_rcos: _liquid_firdes_rcos, _flexframegen_destroy: _flexframegen_destroy, _liquid_firdes_farcsech: _liquid_firdes_farcsech, _fec_conv_init_v27: _fec_conv_init_v27, ___DOUBLE_BITS: ___DOUBLE_BITS, _fec_rep3_destroy: _fec_rep3_destroy, _gmskframesync_set_header_len: _gmskframesync_set_header_len, _windowf_read: _windowf_read, _fmt_u: _fmt_u, _jsonp_error_vset: _jsonp_error_vset, _iirfilt_crcf_create: _iirfilt_crcf_create, _quiet_encoder_create: _quiet_encoder_create, _polyf_fit: _polyf_fit, _matrixf_inv: _matrixf_inv, _qpilotgen_get_frame_len: _qpilotgen_get_frame_len, _qpilotsync_get_phi: _qpilotsync_get_phi, ___shgetc: ___shgetc, _qpilotsync_destroy: _qpilotsync_destroy, _ofdmflexframegen_setprops: _ofdmflexframegen_setprops, _gmskframesync_execute: _gmskframesync_execute, _firpfb_crcf_set_scale: _firpfb_crcf_set_scale, _firpfb_rrrf_destroy: _firpfb_rrrf_destroy, _fft_execute_dft_5: _fft_execute_dft_5, _fft_execute_dft_4: _fft_execute_dft_4, _json_real: _json_real, _fft_execute_dft_6: _fft_execute_dft_6, _liquid_modem_is_dpsk: _liquid_modem_is_dpsk, _fft_execute_dft_3: _fft_execute_dft_3, _fft_execute_dft_2: _fft_execute_dft_2, _strbuffer_clear: _strbuffer_clear, _fft_execute_dft_8: _fft_execute_dft_8, _fmodl: _fmodl, _fec_hamming128_decode_soft: _fec_hamming128_decode_soft, _packetizer_get_crc: _packetizer_get_crc, _liquid_firdes_rrcos: _liquid_firdes_rrcos, _liquid_firdes_fexp: _liquid_firdes_fexp, _fec_hamming74_encode: _fec_hamming74_encode, _ring_destroy: _ring_destroy, _ellipkf: _ellipkf, _lex_scan_number: _lex_scan_number, _iirfilt_crcf_execute: _iirfilt_crcf_execute, _fft_create_plan_dft: _fft_create_plan_dft, _modulator_reset: _modulator_reset, _fec_secded2216_estimate_ehat: _fec_secded2216_estimate_ehat, _lex_free_string: _lex_free_string, _fec_golay2412_destroy: _fec_golay2412_destroy, _flexframesync_destroy: _flexframesync_destroy, _modem_get_demodulator_phase_error: _modem_get_demodulator_phase_error, _firinterp_rrrf_create_prototype: _firinterp_rrrf_create_prototype, _fec_secded3932_decode: _fec_secded3932_decode, _framesyncstats_init_default: _framesyncstats_init_default, _ofdmframesync_execute: _ofdmframesync_execute, _modem_arb_init: _modem_arb_init, _fec_secded3932_create: _fec_secded3932_create, _flexframegen_assemble: _flexframegen_assemble, _jsonp_error_set_source: _jsonp_error_set_source, _matrixf_mul: _matrixf_mul, _quiet_decoder_consume_stats: _quiet_decoder_consume_stats, _ofdmflexframegen_is_assembled: _ofdmflexframegen_is_assembled, _fecsoft_hamming84_decode: _fecsoft_hamming84_decode, _strchr: _strchr, _dotprod_rrrf_create: _dotprod_rrrf_create, _liquid_bdotprod: _liquid_bdotprod, _qpilotsync_execute: _qpilotsync_execute, _fec_secded3932_destroy: _fec_secded3932_destroy, _fft_execute: _fft_execute, _parse_json: _parse_json, _gmskframegen_assemble: _gmskframegen_assemble, _bessel_azpkf: _bessel_azpkf, _firdecim_crcf_destroy: _firdecim_crcf_destroy, _detector_cccf_reset: _detector_cccf_reset, _vsnprintf: _vsnprintf, _firinterp_crcf_create_prototype: _firinterp_crcf_create_prototype, _firpfb_rrrf_create_rnyquist: _firpfb_rrrf_create_rnyquist, _liquid_firdes_rfarcsech: _liquid_firdes_rfarcsech, _fec_conv_punctured_encode: _fec_conv_punctured_encode, _rkaiser_approximate_rho: _rkaiser_approximate_rho, _poly_fit_lagrange_barycentric: _poly_fit_lagrange_barycentric, _fprintf: _fprintf, _sprintf: _sprintf, _gray_decode: _gray_decode, _detector_cccf_update_sumsq: _detector_cccf_update_sumsq, _strbuffer_close: _strbuffer_close, _ofdmframesync_execute_S0b: _ofdmframesync_execute_S0b, _liquid_fft_estimate_method: _liquid_fft_estimate_method, _firinterp_rrrf_create: _firinterp_rrrf_create, _qpilotsync_create: _qpilotsync_create, _copysignf: _copysignf, _jsonp_error_set: _jsonp_error_set, _modulator_emit: _modulator_emit, _wctomb: _wctomb, _nco_crcf_compute_sincos_vco: _nco_crcf_compute_sincos_vco, _ellip_azpkf: _ellip_azpkf, _liquid_pack_bytes: _liquid_pack_bytes, _polyf_val: _polyf_val, _demodulator_create: _demodulator_create, _logbf: _logbf, _estimate_req_filter_As: _estimate_req_filter_As, _fec_get_rate: _fec_get_rate, _dotprod_rrrf_execute: _dotprod_rrrf_execute, _fclose: _fclose, _parse_value: _parse_value, _ofdmflexframesync_debug_enable: _ofdmflexframesync_debug_enable, _liquid_getopt_str2crc: _liquid_getopt_str2crc, _liquid_factor: _liquid_factor, _insert_to_bucket: _insert_to_bucket, _liquid_firdes_rfexp: _liquid_firdes_rfexp, _ofdm_subcarriers_create: _ofdm_subcarriers_create, _lex_unget: _lex_unget, _fft_execute_radix2: _fft_execute_radix2, _liquid_is_prime: _liquid_is_prime, _firpfb_crcf_reset: _firpfb_crcf_reset, ___intscan: ___intscan, _decode_unicode_escape: _decode_unicode_escape, _gmskframesync_debug_print: _gmskframesync_debug_print, _ofdmflexframegen_reset: _ofdmflexframegen_reset, _json_true: _json_true, _sincf: _sincf, _modem_destroy: _modem_destroy, _flexframegen_is_assembled: _flexframegen_is_assembled, _modem_init_map: _modem_init_map, _wdelayf_destroy: _wdelayf_destroy, _modulator_destroy: _modulator_destroy, _qpacketmodem_encode: _qpacketmodem_encode, _fft_reverse_index: _fft_reverse_index, ___stdio_read: ___stdio_read, _liquid_primitive_root_prime: _liquid_primitive_root_prime, _csinf: _csinf, _iirfilt_crcf_create_sos: _iirfilt_crcf_create_sos, _fec_secded2216_destroy: _fec_secded2216_destroy, _modulator_sample_len: _modulator_sample_len, _gmskframegen_write_samples: _gmskframegen_write_samples, _bitshift64Shl: _bitshift64Shl, _fec_conv_punctured_decode_soft: _fec_conv_punctured_decode_soft, _i64Add: _i64Add, _interleaver_destroy: _interleaver_destroy, _fmax: _fmax, _framedatastats_reset: _framedatastats_reset, _wdelayf_push: _wdelayf_push, _wdelayf_create: _wdelayf_create, _quiet_encoder_send: _quiet_encoder_send, _hypot: _hypot, _seed_from_timestamp_and_pid: _seed_from_timestamp_and_pid, _modulator_flush_sample_len: _modulator_flush_sample_len, ___shlim: ___shlim, _fec_rs_create: _fec_rs_create, _hypotf: _hypotf, _copysignl: _copysignl, _fec_hamming84_create: _fec_hamming84_create, _fec_conv_punctured_decode_hard: _fec_conv_punctured_decode_hard, _fec_rep3_encode: _fec_rep3_encode, _ccoshf: _ccoshf, _firdespm_create: _firdespm_create, _frexp: _frexp, _gmskframegen_set_header_len: _gmskframegen_set_header_len, _hashtable_close: _hashtable_close, _quiet_decoder_profile_str: _quiet_decoder_profile_str, _liquid_reverse_uint32: _liquid_reverse_uint32, _firdespm_compute_interp: _firdespm_compute_interp, _hashtable_find_pair: _hashtable_find_pair, _liquid_getopt_str2firfilt: _liquid_getopt_str2firfilt, ___syscall_ret: ___syscall_ret, _liquid_vectorcf_mulscalar: _liquid_vectorcf_mulscalar, _fec_rs_destroy: _fec_rs_destroy, _bitshift64Lshr: _bitshift64Lshr, _modem_demodulate_psk: _modem_demodulate_psk, _fec_create: _fec_create, _modem_modulate_bpsk: _modem_modulate_bpsk, _fec_hamming128_decode: _fec_hamming128_decode, _liquid_getopt_str2fec: _liquid_getopt_str2fec, _parse_array: _parse_array, ___fdopen: ___fdopen, _gmskframesync_pushpn: _gmskframesync_pushpn, _memcpy: _memcpy, _json_object_set_nocheck: _json_object_set_nocheck, _dotprod_crcf_create: _dotprod_crcf_create, _ofdmframesync_S0_metrics: _ofdmframesync_S0_metrics, _close: _close, _qpacketmodem_configure: _qpacketmodem_configure, _qpilotgen_execute: _qpilotgen_execute, _gmskframegen_is_assembled: _gmskframegen_is_assembled, ___stdout_write: ___stdout_write, _liquid_iirdes: _liquid_iirdes, _sn_write: _sn_write, _fec_decode: _fec_decode, _bitshift64Ashr: _bitshift64Ashr, _firdecim_crcf_create_prototype: _firdecim_crcf_create_prototype, _qpacketmodem_get_modscheme: _qpacketmodem_get_modscheme, _constrained_write: _constrained_write, _packetizer_decode: _packetizer_decode, _ofdmflexframegen_reconfigure: _ofdmflexframegen_reconfigure, _ofdmframesync_debug_enable: _ofdmframesync_debug_enable, _erff: _erff, _packetizer_encode: _packetizer_encode, _json_string_value: _json_string_value, _kaiser: _kaiser, runPostSets: runPostSets, _strbuffer_append_bytes: _strbuffer_append_bytes, _crc16_generate_key: _crc16_generate_key, _fec_rep5_create: _fec_rep5_create, _firdespm_compute_taps: _firdespm_compute_taps, _lex_get: _lex_get, _try_realloc_chunk: _try_realloc_chunk, _gmskframegen_reset: _gmskframegen_reset, _nco_crcf_create: _nco_crcf_create, _stream_unget: _stream_unget, _quiet_encoder_destroy: _quiet_encoder_destroy, ___divsc3: ___divsc3, _json_array_grow: _json_array_grow, _qdetector_cccf_set_threshold: _qdetector_cccf_set_threshold, _modem_modulate_qpsk: _modem_modulate_qpsk, _json_delete: _json_delete, _gmskmod_create: _gmskmod_create, _fec_secded2216_create: _fec_secded2216_create, _log10f: _log10f, _windowcf_push: _windowcf_push, _quiet_decoder_create: _quiet_decoder_create, _liquid_unpack_array: _liquid_unpack_array, _llvm_cttz_i32: _llvm_cttz_i32, _fec_secded2216_compute_parity: _fec_secded2216_compute_parity, _liquid_firdes_hM3: _liquid_firdes_hM3, _firdecim_crcf_execute: _firdecim_crcf_execute, _lex_steal_string: _lex_steal_string, _fec_hamming128_encode: _fec_hamming128_encode, _strtox: _strtox, _jsonp_strtod: _jsonp_strtod, _liquid_firdes_rkaiser: _liquid_firdes_rkaiser, _fft_execute_dft: _fft_execute_dft, _wdelayf_clear: _wdelayf_clear, _ofdmframesync_get_cfo: _ofdmframesync_get_cfo, _fft_destroy_plan: _fft_destroy_plan, _printf: _printf, _fmaxf: _fmaxf, _liquid_repack_bytes: _liquid_repack_bytes, _json_loads: _json_loads, _msequence_create_default: _msequence_create_default, _fec_golay2412_encode: _fec_golay2412_encode, _nco_crcf_pll_set_bandwidth: _nco_crcf_pll_set_bandwidth, _liquid_firdes_rkaiser_internal_isi: _liquid_firdes_rkaiser_internal_isi, _lex_init: _lex_init, _firpfb_crcf_create: _firpfb_crcf_create, establishStackSpace: establishStackSpace, _firpfb_rrrf_push: _firpfb_rrrf_push, _read: _read, _string_get: _string_get, _nco_crcf_pll_step: _nco_crcf_pll_step, _modem_create: _modem_create, _json_real_value: _json_real_value, _qdetector_cccf_get_gamma: _qdetector_cccf_get_gamma, _utf8_encode: _utf8_encode, _windowcf_read: _windowcf_read, _fec_rs_decode: _fec_rs_decode, _json_object_seed: _json_object_seed, _fec_conv_create: _fec_conv_create, _seed_from_urandom: _seed_from_urandom, _fec_rep5_decode_soft: _fec_rep5_decode_soft, _modem_demodsoft_gentab: _modem_demodsoft_gentab, _ofdmframesync_debug_print: _ofdmframesync_debug_print, _qpilotsync_get_frame_len: _qpilotsync_get_frame_len, _fmod: _fmod, _iirdes_dzpk2tff: _iirdes_dzpk2tff, _fec_hamming74_decode_soft: _fec_hamming74_decode_soft, _array_copy: _array_copy, _liquid_unpack_array_block: _liquid_unpack_array_block, _iirfilt_crcf_create_lowpass: _iirfilt_crcf_create_lowpass, _gmskframesync_decode_header: _gmskframesync_decode_header, _quiet_encoder_sample_len: _quiet_encoder_sample_len, _fec_pass_decode: _fec_pass_decode, _fec_destroy: _fec_destroy, _fec_golay2412_decode_symbol: _fec_golay2412_decode_symbol, _qpilotgen_create: _qpilotgen_create, _liquid_cplxpair: _liquid_cplxpair, ___overflow: ___overflow, _firpfb_rrrf_reset: _firpfb_rrrf_reset, _lex_get_save: _lex_get_save, _json_delete_real: _json_delete_real, _gmskframesync_debug_enable: _gmskframesync_debug_enable, _flexframesync_decode_header: _flexframesync_decode_header, _json_incref: _json_incref, _firpfb_crcf_destroy: _firpfb_crcf_destroy, _json_delete_array: _json_delete_array, _qdetector_cccf_get_tau: _qdetector_cccf_get_tau, _ofdmflexframesync_set_header_len: _ofdmflexframesync_set_header_len, _jsonp_error_init: _jsonp_error_init, _modem_modulate_sqam32: _modem_modulate_sqam32, _liquid_besseli0f: _liquid_besseli0f, ___floatscan: ___floatscan, ___fflush_unlocked: ___fflush_unlocked, _hashtable_do_rehash: _hashtable_do_rehash, _crc24_generate_key: _crc24_generate_key, _json_decref_1931: _json_decref_1931, ___toread: ___toread, _windowf_clear: _windowf_clear, _fec_rep3_create: _fec_rep3_create, _ilogbf: _ilogbf, _ring_read: _ring_read, _ofdmflexframesync_internal_callback: _ofdmflexframesync_internal_callback, _firinterp_rrrf_destroy: _firinterp_rrrf_destroy, _fec_golay2412_create: _fec_golay2412_create, _decoder_on_decode: _decoder_on_decode, _ring_advance_reader: _ring_advance_reader, _list_init: _list_init, _fec_hamming74_create: _fec_hamming74_create, _demodulator_destroy: _demodulator_destroy, _liquid_pack_array: _liquid_pack_array, _fft_run: _fft_run, _flexframesync_debug_enable: _flexframesync_debug_enable, _bucket_is_empty: _bucket_is_empty, ___ldexp_cexpf: ___ldexp_cexpf, _modem_create_apsk: _modem_create_apsk, _ofdmflexframegen_getframelen: _ofdmflexframegen_getframelen, _jsonp_malloc: _jsonp_malloc, _scanexp: _scanexp, _fft_create_plan_radix2: _fft_create_plan_radix2, _fec_conv_destroy: _fec_conv_destroy, _iirfilt_crcf_create_prototype: _iirfilt_crcf_create_prototype, _ofdmframe_init_S1: _ofdmframe_init_S1, _ofdmframe_init_S0: _ofdmframe_init_S0, _stream_init: _stream_init, _ofdmflexframegen_write_header: _ofdmflexframegen_write_header, _liquid_modpow: _liquid_modpow, _strerror: _strerror, _strbuffer_value: _strbuffer_value, _quiet_encoder_emit: _quiet_encoder_emit, _qdetector_cccf_execute_align: _qdetector_cccf_execute_align, stackAlloc: stackAlloc, _ofdmflexframegen_write_payload: _ofdmflexframegen_write_payload, _realloc: _realloc, _gmskframesync_execute_rxpayload: _gmskframesync_execute_rxpayload, _quiet_decoder_enable_stats: _quiet_decoder_enable_stats, _fputs: _fputs, _strtod: _strtod, _ofdmframesync_execute_seekplcp: _ofdmframesync_execute_seekplcp, _quiet_decoder_disable_stats: _quiet_decoder_disable_stats, _ofdmframegen_write_S1: _ofdmframegen_write_S1, _firpfb_crcf_create_rnyquist: _firpfb_crcf_create_rnyquist, _gray_encode: _gray_encode, _nco_crcf_step: _nco_crcf_step, _flexframegen_set_header_len: _flexframegen_set_header_len, _windowcf_clear: _windowcf_clear, _fec_secded3932_encode: _fec_secded3932_encode, _fec_encode: _fec_encode, _liquid_firdes_arkaiser: _liquid_firdes_arkaiser, _gmskframesync_create: _gmskframesync_create, _lex_unget_unsave: _lex_unget_unsave, _fft_execute_rader: _fft_execute_rader, ___fwritex: ___fwritex, _qpacketmodem_get_crc: _qpacketmodem_get_crc };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__fec_hamming84_decode_soft = asm["_fec_hamming84_decode_soft"]; asm["_fec_hamming84_decode_soft"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_hamming84_decode_soft.apply(null, arguments);
};

var real__fec_hamming84_destroy = asm["_fec_hamming84_destroy"]; asm["_fec_hamming84_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_hamming84_destroy.apply(null, arguments);
};

var real__nco_crcf_set_frequency = asm["_nco_crcf_set_frequency"]; asm["_nco_crcf_set_frequency"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__nco_crcf_set_frequency.apply(null, arguments);
};

var real__crc_generate_key = asm["_crc_generate_key"]; asm["_crc_generate_key"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__crc_generate_key.apply(null, arguments);
};

var real__firpfb_rrrf_reset = asm["_firpfb_rrrf_reset"]; asm["_firpfb_rrrf_reset"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__firpfb_rrrf_reset.apply(null, arguments);
};

var real__memchr = asm["_memchr"]; asm["_memchr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memchr.apply(null, arguments);
};

var real__flexframegen_write_samples = asm["_flexframegen_write_samples"]; asm["_flexframegen_write_samples"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__flexframegen_write_samples.apply(null, arguments);
};

var real__strbuffer_append_byte = asm["_strbuffer_append_byte"]; asm["_strbuffer_append_byte"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strbuffer_append_byte.apply(null, arguments);
};

var real__ellip_acdf = asm["_ellip_acdf"]; asm["_ellip_acdf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ellip_acdf.apply(null, arguments);
};

var real__liquid_cacosf = asm["_liquid_cacosf"]; asm["_liquid_cacosf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_cacosf.apply(null, arguments);
};

var real__lex_save_cached = asm["_lex_save_cached"]; asm["_lex_save_cached"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lex_save_cached.apply(null, arguments);
};

var real__fec_secded7264_encode = asm["_fec_secded7264_encode"]; asm["_fec_secded7264_encode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_secded7264_encode.apply(null, arguments);
};

var real__fft_create_plan_rader = asm["_fft_create_plan_rader"]; asm["_fft_create_plan_rader"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fft_create_plan_rader.apply(null, arguments);
};

var real__fec_get_enc_msg_length = asm["_fec_get_enc_msg_length"]; asm["_fec_get_enc_msg_length"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_get_enc_msg_length.apply(null, arguments);
};

var real__jsonp_stringn_nocheck_own = asm["_jsonp_stringn_nocheck_own"]; asm["_jsonp_stringn_nocheck_own"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__jsonp_stringn_nocheck_own.apply(null, arguments);
};

var real__fec_hamming84_encode = asm["_fec_hamming84_encode"]; asm["_fec_hamming84_encode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_hamming84_encode.apply(null, arguments);
};

var real__ilogb = asm["_ilogb"]; asm["_ilogb"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ilogb.apply(null, arguments);
};

var real__firpfb_rrrf_create_drnyquist = asm["_firpfb_rrrf_create_drnyquist"]; asm["_firpfb_rrrf_create_drnyquist"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__firpfb_rrrf_create_drnyquist.apply(null, arguments);
};

var real__wdelayf_read = asm["_wdelayf_read"]; asm["_wdelayf_read"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__wdelayf_read.apply(null, arguments);
};

var real__nco_crcf_mix_down = asm["_nco_crcf_mix_down"]; asm["_nco_crcf_mix_down"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__nco_crcf_mix_down.apply(null, arguments);
};

var real__decoder_profile = asm["_decoder_profile"]; asm["_decoder_profile"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__decoder_profile.apply(null, arguments);
};

var real__ofdmframegen_write_S0b = asm["_ofdmframegen_write_S0b"]; asm["_ofdmframegen_write_S0b"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmframegen_write_S0b.apply(null, arguments);
};

var real__ofdmframegen_write_S0a = asm["_ofdmframegen_write_S0a"]; asm["_ofdmframegen_write_S0a"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmframegen_write_S0a.apply(null, arguments);
};

var real__ofdmframesync_rxsymbol = asm["_ofdmframesync_rxsymbol"]; asm["_ofdmframesync_rxsymbol"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmframesync_rxsymbol.apply(null, arguments);
};

var real__iirfilt_crcf_reset = asm["_iirfilt_crcf_reset"]; asm["_iirfilt_crcf_reset"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__iirfilt_crcf_reset.apply(null, arguments);
};

var real__gmskframesync_create = asm["_gmskframesync_create"]; asm["_gmskframesync_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gmskframesync_create.apply(null, arguments);
};

var real__fec_block_get_enc_msg_len = asm["_fec_block_get_enc_msg_len"]; asm["_fec_block_get_enc_msg_len"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_block_get_enc_msg_len.apply(null, arguments);
};

var real__vsprintf = asm["_vsprintf"]; asm["_vsprintf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__vsprintf.apply(null, arguments);
};

var real__modem_modulate_psk = asm["_modem_modulate_psk"]; asm["_modem_modulate_psk"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modem_modulate_psk.apply(null, arguments);
};

var real__puts = asm["_puts"]; asm["_puts"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__puts.apply(null, arguments);
};

var real__liquid_firdes_hM3 = asm["_liquid_firdes_hM3"]; asm["_liquid_firdes_hM3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_firdes_hM3.apply(null, arguments);
};

var real__liquid_reverse_uint24 = asm["_liquid_reverse_uint24"]; asm["_liquid_reverse_uint24"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_reverse_uint24.apply(null, arguments);
};

var real__liquid_firdes_fnyquist = asm["_liquid_firdes_fnyquist"]; asm["_liquid_firdes_fnyquist"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_firdes_fnyquist.apply(null, arguments);
};

var real__dotprod_cccf_execute = asm["_dotprod_cccf_execute"]; asm["_dotprod_cccf_execute"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dotprod_cccf_execute.apply(null, arguments);
};

var real__json_decref_1974 = asm["_json_decref_1974"]; asm["_json_decref_1974"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__json_decref_1974.apply(null, arguments);
};

var real__qdetector_cccf_get_phi = asm["_qdetector_cccf_get_phi"]; asm["_qdetector_cccf_get_phi"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__qdetector_cccf_get_phi.apply(null, arguments);
};

var real__polycf_expandroots = asm["_polycf_expandroots"]; asm["_polycf_expandroots"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__polycf_expandroots.apply(null, arguments);
};

var real__flexframegen_reconfigure = asm["_flexframegen_reconfigure"]; asm["_flexframegen_reconfigure"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__flexframegen_reconfigure.apply(null, arguments);
};

var real__iirfilt_crcf_destroy = asm["_iirfilt_crcf_destroy"]; asm["_iirfilt_crcf_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__iirfilt_crcf_destroy.apply(null, arguments);
};

var real__jsonp_free = asm["_jsonp_free"]; asm["_jsonp_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__jsonp_free.apply(null, arguments);
};

var real__modulator_symbol_len = asm["_modulator_symbol_len"]; asm["_modulator_symbol_len"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modulator_symbol_len.apply(null, arguments);
};

var real__pad = asm["_pad"]; asm["_pad"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pad.apply(null, arguments);
};

var real__modem_modulate_qam = asm["_modem_modulate_qam"]; asm["_modem_modulate_qam"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modem_modulate_qam.apply(null, arguments);
};

var real__buf_to_uint32 = asm["_buf_to_uint32"]; asm["_buf_to_uint32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__buf_to_uint32.apply(null, arguments);
};

var real__ofdmframe_validate_sctype = asm["_ofdmframe_validate_sctype"]; asm["_ofdmframe_validate_sctype"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmframe_validate_sctype.apply(null, arguments);
};

var real__nco_crcf_compute_sincos_nco = asm["_nco_crcf_compute_sincos_nco"]; asm["_nco_crcf_compute_sincos_nco"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__nco_crcf_compute_sincos_nco.apply(null, arguments);
};

var real__json_array_append = asm["_json_array_append"]; asm["_json_array_append"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__json_array_append.apply(null, arguments);
};

var real__qdetector_cccf_execute_seek = asm["_qdetector_cccf_execute_seek"]; asm["_qdetector_cccf_execute_seek"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__qdetector_cccf_execute_seek.apply(null, arguments);
};

var real__ccosf = asm["_ccosf"]; asm["_ccosf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ccosf.apply(null, arguments);
};

var real__ellip_cdf = asm["_ellip_cdf"]; asm["_ellip_cdf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ellip_cdf.apply(null, arguments);
};

var real__nco_crcf_reset = asm["_nco_crcf_reset"]; asm["_nco_crcf_reset"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__nco_crcf_reset.apply(null, arguments);
};

var real__quiet_decoder_checksum_fails = asm["_quiet_decoder_checksum_fails"]; asm["_quiet_decoder_checksum_fails"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__quiet_decoder_checksum_fails.apply(null, arguments);
};

var real__ofdmflexframesync_execute = asm["_ofdmflexframesync_execute"]; asm["_ofdmflexframesync_execute"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmflexframesync_execute.apply(null, arguments);
};

var real__resamp_rrrf_destroy = asm["_resamp_rrrf_destroy"]; asm["_resamp_rrrf_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__resamp_rrrf_destroy.apply(null, arguments);
};

var real__fec_secded7264_compute_syndrome = asm["_fec_secded7264_compute_syndrome"]; asm["_fec_secded7264_compute_syndrome"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_secded7264_compute_syndrome.apply(null, arguments);
};

var real__firinterp_crcf_execute = asm["_firinterp_crcf_execute"]; asm["_firinterp_crcf_execute"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__firinterp_crcf_execute.apply(null, arguments);
};

var real__fft_execute_rader2 = asm["_fft_execute_rader2"]; asm["_fft_execute_rader2"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fft_execute_rader2.apply(null, arguments);
};

var real__modem_modulate_ask = asm["_modem_modulate_ask"]; asm["_modem_modulate_ask"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modem_modulate_ask.apply(null, arguments);
};

var real__liquid_firdes_rkaiser = asm["_liquid_firdes_rkaiser"]; asm["_liquid_firdes_rkaiser"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_firdes_rkaiser.apply(null, arguments);
};

var real__firpfb_crcf_reset = asm["_firpfb_crcf_reset"]; asm["_firpfb_crcf_reset"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__firpfb_crcf_reset.apply(null, arguments);
};

var real__liquid_firdes_rfsech = asm["_liquid_firdes_rfsech"]; asm["_liquid_firdes_rfsech"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_firdes_rfsech.apply(null, arguments);
};

var real__qdetector_cccf_get_buf_len = asm["_qdetector_cccf_get_buf_len"]; asm["_qdetector_cccf_get_buf_len"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__qdetector_cccf_get_buf_len.apply(null, arguments);
};

var real____towrite = asm["___towrite"]; asm["___towrite"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____towrite.apply(null, arguments);
};

var real__ofdmflexframegen_create = asm["_ofdmflexframegen_create"]; asm["_ofdmflexframegen_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmflexframegen_create.apply(null, arguments);
};

var real__liquid_nextpow2 = asm["_liquid_nextpow2"]; asm["_liquid_nextpow2"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_nextpow2.apply(null, arguments);
};

var real__json_object_set_new_nocheck = asm["_json_object_set_new_nocheck"]; asm["_json_object_set_new_nocheck"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__json_object_set_new_nocheck.apply(null, arguments);
};

var real__liquid_firdes_fsech_freqresponse = asm["_liquid_firdes_fsech_freqresponse"]; asm["_liquid_firdes_fsech_freqresponse"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_firdes_fsech_freqresponse.apply(null, arguments);
};

var real__modem_demodulate_dpsk = asm["_modem_demodulate_dpsk"]; asm["_modem_demodulate_dpsk"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modem_demodulate_dpsk.apply(null, arguments);
};

var real__packetizer_destroy = asm["_packetizer_destroy"]; asm["_packetizer_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__packetizer_destroy.apply(null, arguments);
};

var real__qpilotsync_get_dphi = asm["_qpilotsync_get_dphi"]; asm["_qpilotsync_get_dphi"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__qpilotsync_get_dphi.apply(null, arguments);
};

var real__packetizer_recreate = asm["_packetizer_recreate"]; asm["_packetizer_recreate"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__packetizer_recreate.apply(null, arguments);
};

var real__packetizer_get_enc_msg_len = asm["_packetizer_get_enc_msg_len"]; asm["_packetizer_get_enc_msg_len"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__packetizer_get_enc_msg_len.apply(null, arguments);
};

var real____strchrnul = asm["___strchrnul"]; asm["___strchrnul"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____strchrnul.apply(null, arguments);
};

var real__flexframegen_getframelen = asm["_flexframegen_getframelen"]; asm["_flexframegen_getframelen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__flexframegen_getframelen.apply(null, arguments);
};

var real__modem_demodulate_apsk = asm["_modem_demodulate_apsk"]; asm["_modem_demodulate_apsk"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modem_demodulate_apsk.apply(null, arguments);
};

var real__windowcf_create = asm["_windowcf_create"]; asm["_windowcf_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__windowcf_create.apply(null, arguments);
};

var real__flexframesync_execute_rxpreamble = asm["_flexframesync_execute_rxpreamble"]; asm["_flexframesync_execute_rxpreamble"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__flexframesync_execute_rxpreamble.apply(null, arguments);
};

var real__ofdmflexframegen_destroy = asm["_ofdmflexframegen_destroy"]; asm["_ofdmflexframegen_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmflexframegen_destroy.apply(null, arguments);
};

var real__fft_create_plan = asm["_fft_create_plan"]; asm["_fft_create_plan"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fft_create_plan.apply(null, arguments);
};

var real__encoder_profile = asm["_encoder_profile"]; asm["_encoder_profile"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__encoder_profile.apply(null, arguments);
};

var real__localeconv = asm["_localeconv"]; asm["_localeconv"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__localeconv.apply(null, arguments);
};

var real__matrixf_trans = asm["_matrixf_trans"]; asm["_matrixf_trans"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__matrixf_trans.apply(null, arguments);
};

var real__firinterp_crcf_create = asm["_firinterp_crcf_create"]; asm["_firinterp_crcf_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__firinterp_crcf_create.apply(null, arguments);
};

var real__quiet_encoder_destroy = asm["_quiet_encoder_destroy"]; asm["_quiet_encoder_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__quiet_encoder_destroy.apply(null, arguments);
};

var real__modem_demodulate = asm["_modem_demodulate"]; asm["_modem_demodulate"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modem_demodulate.apply(null, arguments);
};

var real__flexframegen_generate_symbol = asm["_flexframegen_generate_symbol"]; asm["_flexframegen_generate_symbol"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__flexframegen_generate_symbol.apply(null, arguments);
};

var real__fec_rep5_destroy = asm["_fec_rep5_destroy"]; asm["_fec_rep5_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_rep5_destroy.apply(null, arguments);
};

var real__modem_recreate = asm["_modem_recreate"]; asm["_modem_recreate"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modem_recreate.apply(null, arguments);
};

var real__flexframegen_create = asm["_flexframegen_create"]; asm["_flexframegen_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__flexframegen_create.apply(null, arguments);
};

var real__firdespm_execute = asm["_firdespm_execute"]; asm["_firdespm_execute"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__firdespm_execute.apply(null, arguments);
};

var real__json_false = asm["_json_false"]; asm["_json_false"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__json_false.apply(null, arguments);
};

var real__resamp_rrrf_execute_output_block = asm["_resamp_rrrf_execute_output_block"]; asm["_resamp_rrrf_execute_output_block"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__resamp_rrrf_execute_output_block.apply(null, arguments);
};

var real__json_object_get = asm["_json_object_get"]; asm["_json_object_get"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__json_object_get.apply(null, arguments);
};

var real__liquid_msb_index = asm["_liquid_msb_index"]; asm["_liquid_msb_index"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_msb_index.apply(null, arguments);
};

var real__crc_validate_message = asm["_crc_validate_message"]; asm["_crc_validate_message"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__crc_validate_message.apply(null, arguments);
};

var real__hashtable_do_clear = asm["_hashtable_do_clear"]; asm["_hashtable_do_clear"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__hashtable_do_clear.apply(null, arguments);
};

var real__liquid_cplxpair_cleanup = asm["_liquid_cplxpair_cleanup"]; asm["_liquid_cplxpair_cleanup"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_cplxpair_cleanup.apply(null, arguments);
};

var real__json_integer_value = asm["_json_integer_value"]; asm["_json_integer_value"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__json_integer_value.apply(null, arguments);
};

var real__nco_crcf_destroy = asm["_nco_crcf_destroy"]; asm["_nco_crcf_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__nco_crcf_destroy.apply(null, arguments);
};

var real__gmskframegen_destroy = asm["_gmskframegen_destroy"]; asm["_gmskframegen_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gmskframegen_destroy.apply(null, arguments);
};

var real__gmskframegen_getframelen = asm["_gmskframegen_getframelen"]; asm["_gmskframegen_getframelen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gmskframegen_getframelen.apply(null, arguments);
};

var real__fec_rep3_decode = asm["_fec_rep3_decode"]; asm["_fec_rep3_decode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_rep3_decode.apply(null, arguments);
};

var real__iirdes_dzpk2sosf = asm["_iirdes_dzpk2sosf"]; asm["_iirdes_dzpk2sosf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__iirdes_dzpk2sosf.apply(null, arguments);
};

var real__list_insert = asm["_list_insert"]; asm["_list_insert"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__list_insert.apply(null, arguments);
};

var real__fec_golay2412_decode = asm["_fec_golay2412_decode"]; asm["_fec_golay2412_decode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_golay2412_decode.apply(null, arguments);
};

var real__ofdmframesync_estimate_gain_S1 = asm["_ofdmframesync_estimate_gain_S1"]; asm["_ofdmframesync_estimate_gain_S1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmframesync_estimate_gain_S1.apply(null, arguments);
};

var real__ofdmframesync_estimate_gain_S0 = asm["_ofdmframesync_estimate_gain_S0"]; asm["_ofdmframesync_estimate_gain_S0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmframesync_estimate_gain_S0.apply(null, arguments);
};

var real__strtoll = asm["_strtoll"]; asm["_strtoll"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strtoll.apply(null, arguments);
};

var real__fec_secded7264_decode = asm["_fec_secded7264_decode"]; asm["_fec_secded7264_decode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_secded7264_decode.apply(null, arguments);
};

var real____uflow = asm["___uflow"]; asm["___uflow"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____uflow.apply(null, arguments);
};

var real__fec_secded2216_decode = asm["_fec_secded2216_decode"]; asm["_fec_secded2216_decode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_secded2216_decode.apply(null, arguments);
};

var real__liquid_Qf = asm["_liquid_Qf"]; asm["_liquid_Qf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_Qf.apply(null, arguments);
};

var real__demodulator_recv = asm["_demodulator_recv"]; asm["_demodulator_recv"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__demodulator_recv.apply(null, arguments);
};

var real__matrixf_hermitian = asm["_matrixf_hermitian"]; asm["_matrixf_hermitian"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__matrixf_hermitian.apply(null, arguments);
};

var real__stream_get = asm["_stream_get"]; asm["_stream_get"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__stream_get.apply(null, arguments);
};

var real__json_number_value = asm["_json_number_value"]; asm["_json_number_value"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__json_number_value.apply(null, arguments);
};

var real__fec_hamming128_decode_symbol = asm["_fec_hamming128_decode_symbol"]; asm["_fec_hamming128_decode_symbol"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_hamming128_decode_symbol.apply(null, arguments);
};

var real__modem_demodulate_arb = asm["_modem_demodulate_arb"]; asm["_modem_demodulate_arb"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modem_demodulate_arb.apply(null, arguments);
};

var real____stdio_seek = asm["___stdio_seek"]; asm["___stdio_seek"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____stdio_seek.apply(null, arguments);
};

var real__conj = asm["_conj"]; asm["_conj"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__conj.apply(null, arguments);
};

var real__scramble_data = asm["_scramble_data"]; asm["_scramble_data"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__scramble_data.apply(null, arguments);
};

var real__msequence_reset = asm["_msequence_reset"]; asm["_msequence_reset"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__msequence_reset.apply(null, arguments);
};

var real__quiet_encoder_profile_str = asm["_quiet_encoder_profile_str"]; asm["_quiet_encoder_profile_str"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__quiet_encoder_profile_str.apply(null, arguments);
};

var real__pop_arg = asm["_pop_arg"]; asm["_pop_arg"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pop_arg.apply(null, arguments);
};

var real__json_array_append_new = asm["_json_array_append_new"]; asm["_json_array_append_new"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__json_array_append_new.apply(null, arguments);
};

var real__iirfilt_crcf_create_dc_blocker = asm["_iirfilt_crcf_create_dc_blocker"]; asm["_iirfilt_crcf_create_dc_blocker"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__iirfilt_crcf_create_dc_blocker.apply(null, arguments);
};

var real__lex_close = asm["_lex_close"]; asm["_lex_close"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lex_close.apply(null, arguments);
};

var real__firpfb_crcf_create = asm["_firpfb_crcf_create"]; asm["_firpfb_crcf_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__firpfb_crcf_create.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__firinterp_crcf_reset = asm["_firinterp_crcf_reset"]; asm["_firinterp_crcf_reset"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__firinterp_crcf_reset.apply(null, arguments);
};

var real__fopen = asm["_fopen"]; asm["_fopen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fopen.apply(null, arguments);
};

var real__msequence_destroy = asm["_msequence_destroy"]; asm["_msequence_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__msequence_destroy.apply(null, arguments);
};

var real____mulsc3 = asm["___mulsc3"]; asm["___mulsc3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____mulsc3.apply(null, arguments);
};

var real__ofdmflexframesync_debug_print = asm["_ofdmflexframesync_debug_print"]; asm["_ofdmflexframesync_debug_print"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmflexframesync_debug_print.apply(null, arguments);
};

var real__dotprod_cccf_create = asm["_dotprod_cccf_create"]; asm["_dotprod_cccf_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dotprod_cccf_create.apply(null, arguments);
};

var real__ofdmframesync_reset = asm["_ofdmframesync_reset"]; asm["_ofdmframesync_reset"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmframesync_reset.apply(null, arguments);
};

var real__packetizer_create = asm["_packetizer_create"]; asm["_packetizer_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__packetizer_create.apply(null, arguments);
};

var real__quiet_decoder_recv = asm["_quiet_decoder_recv"]; asm["_quiet_decoder_recv"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__quiet_decoder_recv.apply(null, arguments);
};

var real__gmskframegen_create = asm["_gmskframegen_create"]; asm["_gmskframegen_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gmskframegen_create.apply(null, arguments);
};

var real__unscramble_data = asm["_unscramble_data"]; asm["_unscramble_data"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__unscramble_data.apply(null, arguments);
};

var real__liquid_reverse_uint16 = asm["_liquid_reverse_uint16"]; asm["_liquid_reverse_uint16"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_reverse_uint16.apply(null, arguments);
};

var real__flexframegen_is_assembled = asm["_flexframegen_is_assembled"]; asm["_flexframegen_is_assembled"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__flexframegen_is_assembled.apply(null, arguments);
};

var real__fec_secded7264_compute_parity = asm["_fec_secded7264_compute_parity"]; asm["_fec_secded7264_compute_parity"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_secded7264_compute_parity.apply(null, arguments);
};

var real__gmskmod_modulate = asm["_gmskmod_modulate"]; asm["_gmskmod_modulate"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gmskmod_modulate.apply(null, arguments);
};

var real__gmskframesync_execute_rxpreamble = asm["_gmskframesync_execute_rxpreamble"]; asm["_gmskframesync_execute_rxpreamble"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gmskframesync_execute_rxpreamble.apply(null, arguments);
};

var real__fec_conv_init_v27 = asm["_fec_conv_init_v27"]; asm["_fec_conv_init_v27"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_conv_init_v27.apply(null, arguments);
};

var real__ring_write = asm["_ring_write"]; asm["_ring_write"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ring_write.apply(null, arguments);
};

var real__fec_conv_init_v29 = asm["_fec_conv_init_v29"]; asm["_fec_conv_init_v29"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_conv_init_v29.apply(null, arguments);
};

var real__fec_secded3932_estimate_ehat = asm["_fec_secded3932_estimate_ehat"]; asm["_fec_secded3932_estimate_ehat"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_secded3932_estimate_ehat.apply(null, arguments);
};

var real__erfc2_142 = asm["_erfc2_142"]; asm["_erfc2_142"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__erfc2_142.apply(null, arguments);
};

var real__fec_conv_punctured_create = asm["_fec_conv_punctured_create"]; asm["_fec_conv_punctured_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_conv_punctured_create.apply(null, arguments);
};

var real__modem_demodulate_sqam128 = asm["_modem_demodulate_sqam128"]; asm["_modem_demodulate_sqam128"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modem_demodulate_sqam128.apply(null, arguments);
};

var real__fec_pass_create = asm["_fec_pass_create"]; asm["_fec_pass_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_pass_create.apply(null, arguments);
};

var real__interleaver_decode = asm["_interleaver_decode"]; asm["_interleaver_decode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__interleaver_decode.apply(null, arguments);
};

var real__strtox_519 = asm["_strtox_519"]; asm["_strtox_519"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strtox_519.apply(null, arguments);
};

var real____lockfile = asm["___lockfile"]; asm["___lockfile"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____lockfile.apply(null, arguments);
};

var real__log10 = asm["_log10"]; asm["_log10"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__log10.apply(null, arguments);
};

var real__fec_conv_decode_hard = asm["_fec_conv_decode_hard"]; asm["_fec_conv_decode_hard"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_conv_decode_hard.apply(null, arguments);
};

var real__fec_rs_encode = asm["_fec_rs_encode"]; asm["_fec_rs_encode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_rs_encode.apply(null, arguments);
};

var real__detector_cccf_destroy = asm["_detector_cccf_destroy"]; asm["_detector_cccf_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__detector_cccf_destroy.apply(null, arguments);
};

var real__cexpf = asm["_cexpf"]; asm["_cexpf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__cexpf.apply(null, arguments);
};

var real__modem_get_demodulator_evm = asm["_modem_get_demodulator_evm"]; asm["_modem_get_demodulator_evm"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modem_get_demodulator_evm.apply(null, arguments);
};

var real__modem_demodulate_sqam32 = asm["_modem_demodulate_sqam32"]; asm["_modem_demodulate_sqam32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modem_demodulate_sqam32.apply(null, arguments);
};

var real__modem_init_map = asm["_modem_init_map"]; asm["_modem_init_map"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modem_init_map.apply(null, arguments);
};

var real____DOUBLE_BITS = asm["___DOUBLE_BITS"]; asm["___DOUBLE_BITS"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____DOUBLE_BITS.apply(null, arguments);
};

var real__firdespm_init_grid = asm["_firdespm_init_grid"]; asm["_firdespm_init_grid"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__firdespm_init_grid.apply(null, arguments);
};

var real__modem_gen_rand_sym = asm["_modem_gen_rand_sym"]; asm["_modem_gen_rand_sym"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modem_gen_rand_sym.apply(null, arguments);
};

var real__liquid_filter_isi = asm["_liquid_filter_isi"]; asm["_liquid_filter_isi"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_filter_isi.apply(null, arguments);
};

var real__demodulator_flush = asm["_demodulator_flush"]; asm["_demodulator_flush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__demodulator_flush.apply(null, arguments);
};

var real__gmskmod_destroy = asm["_gmskmod_destroy"]; asm["_gmskmod_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gmskmod_destroy.apply(null, arguments);
};

var real__firpfb_crcf_execute = asm["_firpfb_crcf_execute"]; asm["_firpfb_crcf_execute"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__firpfb_crcf_execute.apply(null, arguments);
};

var real__liquid_firdes_fsech = asm["_liquid_firdes_fsech"]; asm["_liquid_firdes_fsech"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_firdes_fsech.apply(null, arguments);
};

var real__crc_get_length = asm["_crc_get_length"]; asm["_crc_get_length"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__crc_get_length.apply(null, arguments);
};

var real__qpacketmodem_destroy = asm["_qpacketmodem_destroy"]; asm["_qpacketmodem_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__qpacketmodem_destroy.apply(null, arguments);
};

var real__qdetector_cccf_create = asm["_qdetector_cccf_create"]; asm["_qdetector_cccf_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__qdetector_cccf_create.apply(null, arguments);
};

var real__lex_scan_string = asm["_lex_scan_string"]; asm["_lex_scan_string"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lex_scan_string.apply(null, arguments);
};

var real__ofdmflexframesync_rxheader = asm["_ofdmflexframesync_rxheader"]; asm["_ofdmflexframesync_rxheader"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmflexframesync_rxheader.apply(null, arguments);
};

var real__fpoly_bessel_roots_orchard_recursion = asm["_fpoly_bessel_roots_orchard_recursion"]; asm["_fpoly_bessel_roots_orchard_recursion"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fpoly_bessel_roots_orchard_recursion.apply(null, arguments);
};

var real__wcrtomb = asm["_wcrtomb"]; asm["_wcrtomb"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__wcrtomb.apply(null, arguments);
};

var real__modulator_create = asm["_modulator_create"]; asm["_modulator_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modulator_create.apply(null, arguments);
};

var real__windowf_read = asm["_windowf_read"]; asm["_windowf_read"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__windowf_read.apply(null, arguments);
};

var real__fft_create_plan_mixed_radix = asm["_fft_create_plan_mixed_radix"]; asm["_fft_create_plan_mixed_radix"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fft_create_plan_mixed_radix.apply(null, arguments);
};

var real__butter_azpkf = asm["_butter_azpkf"]; asm["_butter_azpkf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__butter_azpkf.apply(null, arguments);
};

var real__hashlittle = asm["_hashlittle"]; asm["_hashlittle"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__hashlittle.apply(null, arguments);
};

var real__ofdmframegen_writesymbol = asm["_ofdmframegen_writesymbol"]; asm["_ofdmframegen_writesymbol"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmframegen_writesymbol.apply(null, arguments);
};

var real__modem_modulate_dpsk = asm["_modem_modulate_dpsk"]; asm["_modem_modulate_dpsk"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modem_modulate_dpsk.apply(null, arguments);
};

var real__modem_modulate_sqam128 = asm["_modem_modulate_sqam128"]; asm["_modem_modulate_sqam128"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modem_modulate_sqam128.apply(null, arguments);
};

var real__ofdmframesync_execute_S1 = asm["_ofdmframesync_execute_S1"]; asm["_ofdmframesync_execute_S1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmframesync_execute_S1.apply(null, arguments);
};

var real____muldc3 = asm["___muldc3"]; asm["___muldc3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____muldc3.apply(null, arguments);
};

var real__modem_modulate_ook = asm["_modem_modulate_ook"]; asm["_modem_modulate_ook"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modem_modulate_ook.apply(null, arguments);
};

var real__liquid_firdes_gmsktx = asm["_liquid_firdes_gmsktx"]; asm["_liquid_firdes_gmsktx"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_firdes_gmsktx.apply(null, arguments);
};

var real__quiet_decoder_destroy = asm["_quiet_decoder_destroy"]; asm["_quiet_decoder_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__quiet_decoder_destroy.apply(null, arguments);
};

var real__hashtable_set = asm["_hashtable_set"]; asm["_hashtable_set"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__hashtable_set.apply(null, arguments);
};

var real__cleanup_382 = asm["_cleanup_382"]; asm["_cleanup_382"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__cleanup_382.apply(null, arguments);
};

var real__qdetector_cccf_execute = asm["_qdetector_cccf_execute"]; asm["_qdetector_cccf_execute"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__qdetector_cccf_execute.apply(null, arguments);
};

var real__cleanup_387 = asm["_cleanup_387"]; asm["_cleanup_387"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__cleanup_387.apply(null, arguments);
};

var real__gmskframesync_set_header_len = asm["_gmskframesync_set_header_len"]; asm["_gmskframesync_set_header_len"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gmskframesync_set_header_len.apply(null, arguments);
};

var real__firdespm_destroy = asm["_firdespm_destroy"]; asm["_firdespm_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__firdespm_destroy.apply(null, arguments);
};

var real____divdc3 = asm["___divdc3"]; asm["___divdc3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____divdc3.apply(null, arguments);
};

var real__json_integer = asm["_json_integer"]; asm["_json_integer"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__json_integer.apply(null, arguments);
};

var real__liquid_getopt_str2mod = asm["_liquid_getopt_str2mod"]; asm["_liquid_getopt_str2mod"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_getopt_str2mod.apply(null, arguments);
};

var real__ofdmframe_init_default_sctype = asm["_ofdmframe_init_default_sctype"]; asm["_ofdmframe_init_default_sctype"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmframe_init_default_sctype.apply(null, arguments);
};

var real__nco_crcf_adjust_frequency = asm["_nco_crcf_adjust_frequency"]; asm["_nco_crcf_adjust_frequency"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__nco_crcf_adjust_frequency.apply(null, arguments);
};

var real__liquid_firdes_rkaiser_quadratic = asm["_liquid_firdes_rkaiser_quadratic"]; asm["_liquid_firdes_rkaiser_quadratic"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_firdes_rkaiser_quadratic.apply(null, arguments);
};

var real__windowf_create = asm["_windowf_create"]; asm["_windowf_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__windowf_create.apply(null, arguments);
};

var real__flexframesync_execute_rxheader = asm["_flexframesync_execute_rxheader"]; asm["_flexframesync_execute_rxheader"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__flexframesync_execute_rxheader.apply(null, arguments);
};

var real__ofdmframesync_debug_print = asm["_ofdmframesync_debug_print"]; asm["_ofdmframesync_debug_print"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmframesync_debug_print.apply(null, arguments);
};

var real__ofdmframesync_get_rssi = asm["_ofdmframesync_get_rssi"]; asm["_ofdmframesync_get_rssi"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmframesync_get_rssi.apply(null, arguments);
};

var real__qdetector_cccf_destroy = asm["_qdetector_cccf_destroy"]; asm["_qdetector_cccf_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__qdetector_cccf_destroy.apply(null, arguments);
};

var real__nco_crcf_set_phase = asm["_nco_crcf_set_phase"]; asm["_nco_crcf_set_phase"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__nco_crcf_set_phase.apply(null, arguments);
};

var real__ofdmframesync_destroy = asm["_ofdmframesync_destroy"]; asm["_ofdmframesync_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmframesync_destroy.apply(null, arguments);
};

var real__gmskframegen_write_samples = asm["_gmskframegen_write_samples"]; asm["_gmskframegen_write_samples"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gmskframegen_write_samples.apply(null, arguments);
};

var real__jsonp_strndup = asm["_jsonp_strndup"]; asm["_jsonp_strndup"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__jsonp_strndup.apply(null, arguments);
};

var real____fmodeflags = asm["___fmodeflags"]; asm["___fmodeflags"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____fmodeflags.apply(null, arguments);
};

var real__rand = asm["_rand"]; asm["_rand"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__rand.apply(null, arguments);
};

var real__json_init = asm["_json_init"]; asm["_json_init"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__json_init.apply(null, arguments);
};

var real__gmskframesync_debug_enable = asm["_gmskframesync_debug_enable"]; asm["_gmskframesync_debug_enable"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gmskframesync_debug_enable.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__scalbn = asm["_scalbn"]; asm["_scalbn"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__scalbn.apply(null, arguments);
};

var real__qpacketmodem_get_frame_len = asm["_qpacketmodem_get_frame_len"]; asm["_qpacketmodem_get_frame_len"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__qpacketmodem_get_frame_len.apply(null, arguments);
};

var real__iirdes_dzpk2tff = asm["_iirdes_dzpk2tff"]; asm["_iirdes_dzpk2tff"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__iirdes_dzpk2tff.apply(null, arguments);
};

var real__liquid_firdes_gmskrx = asm["_liquid_firdes_gmskrx"]; asm["_liquid_firdes_gmskrx"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_firdes_gmskrx.apply(null, arguments);
};

var real__flexframesync_execute_seekpn = asm["_flexframesync_execute_seekpn"]; asm["_flexframesync_execute_seekpn"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__flexframesync_execute_seekpn.apply(null, arguments);
};

var real__gmskframesync_destroy = asm["_gmskframesync_destroy"]; asm["_gmskframesync_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gmskframesync_destroy.apply(null, arguments);
};

var real__quiet_decoder_flush = asm["_quiet_decoder_flush"]; asm["_quiet_decoder_flush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__quiet_decoder_flush.apply(null, arguments);
};

var real__modem_get_scheme = asm["_modem_get_scheme"]; asm["_modem_get_scheme"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modem_get_scheme.apply(null, arguments);
};

var real__dotprod_cccf_destroy = asm["_dotprod_cccf_destroy"]; asm["_dotprod_cccf_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dotprod_cccf_destroy.apply(null, arguments);
};

var real__error_set = asm["_error_set"]; asm["_error_set"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__error_set.apply(null, arguments);
};

var real__flexframesync_debug_print = asm["_flexframesync_debug_print"]; asm["_flexframesync_debug_print"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__flexframesync_debug_print.apply(null, arguments);
};

var real__fft_execute_mixed_radix = asm["_fft_execute_mixed_radix"]; asm["_fft_execute_mixed_radix"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fft_execute_mixed_radix.apply(null, arguments);
};

var real__liquid_firdes_kaiser = asm["_liquid_firdes_kaiser"]; asm["_liquid_firdes_kaiser"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_firdes_kaiser.apply(null, arguments);
};

var real__ofdmflexframesync_create = asm["_ofdmflexframesync_create"]; asm["_ofdmflexframesync_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmflexframesync_create.apply(null, arguments);
};

var real__demodulator_flush_symbol_len = asm["_demodulator_flush_symbol_len"]; asm["_demodulator_flush_symbol_len"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__demodulator_flush_symbol_len.apply(null, arguments);
};

var real__fecsoft_hamming74_decode = asm["_fecsoft_hamming74_decode"]; asm["_fecsoft_hamming74_decode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fecsoft_hamming74_decode.apply(null, arguments);
};

var real__cheby1_azpkf = asm["_cheby1_azpkf"]; asm["_cheby1_azpkf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__cheby1_azpkf.apply(null, arguments);
};

var real__fft_execute_dft_16 = asm["_fft_execute_dft_16"]; asm["_fft_execute_dft_16"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fft_execute_dft_16.apply(null, arguments);
};

var real__qdetector_cccf_reset = asm["_qdetector_cccf_reset"]; asm["_qdetector_cccf_reset"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__qdetector_cccf_reset.apply(null, arguments);
};

var real__csinhf = asm["_csinhf"]; asm["_csinhf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__csinhf.apply(null, arguments);
};

var real____unlockfile = asm["___unlockfile"]; asm["___unlockfile"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____unlockfile.apply(null, arguments);
};

var real__interleaver_set_depth = asm["_interleaver_set_depth"]; asm["_interleaver_set_depth"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__interleaver_set_depth.apply(null, arguments);
};

var real__firdespm_run = asm["_firdespm_run"]; asm["_firdespm_run"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__firdespm_run.apply(null, arguments);
};

var real__nco_crcf_get_frequency = asm["_nco_crcf_get_frequency"]; asm["_nco_crcf_get_frequency"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__nco_crcf_get_frequency.apply(null, arguments);
};

var real__fec_hamming84_create = asm["_fec_hamming84_create"]; asm["_fec_hamming84_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_hamming84_create.apply(null, arguments);
};

var real__firpfb_rrrf_execute = asm["_firpfb_rrrf_execute"]; asm["_firpfb_rrrf_execute"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__firpfb_rrrf_execute.apply(null, arguments);
};

var real__firinterp_rrrf_reset = asm["_firinterp_rrrf_reset"]; asm["_firinterp_rrrf_reset"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__firinterp_rrrf_reset.apply(null, arguments);
};

var real__getpid = asm["_getpid"]; asm["_getpid"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__getpid.apply(null, arguments);
};

var real__fec_pass_decode = asm["_fec_pass_decode"]; asm["_fec_pass_decode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_pass_decode.apply(null, arguments);
};

var real__div = asm["_div"]; asm["_div"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__div.apply(null, arguments);
};

var real__modulator_flush = asm["_modulator_flush"]; asm["_modulator_flush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modulator_flush.apply(null, arguments);
};

var real__quiet_encoder_clamp_frame_len = asm["_quiet_encoder_clamp_frame_len"]; asm["_quiet_encoder_clamp_frame_len"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__quiet_encoder_clamp_frame_len.apply(null, arguments);
};

var real__ofdmframesync_estimate_eqgain_poly = asm["_ofdmframesync_estimate_eqgain_poly"]; asm["_ofdmframesync_estimate_eqgain_poly"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmframesync_estimate_eqgain_poly.apply(null, arguments);
};

var real__utf8_check_first = asm["_utf8_check_first"]; asm["_utf8_check_first"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__utf8_check_first.apply(null, arguments);
};

var real__json_object = asm["_json_object"]; asm["_json_object"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__json_object.apply(null, arguments);
};

var real__flexframesync_create = asm["_flexframesync_create"]; asm["_flexframesync_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__flexframesync_create.apply(null, arguments);
};

var real__fec_destroy = asm["_fec_destroy"]; asm["_fec_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_destroy.apply(null, arguments);
};

var real__modem_demodulate_ook = asm["_modem_demodulate_ook"]; asm["_modem_demodulate_ook"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modem_demodulate_ook.apply(null, arguments);
};

var real__logb = asm["_logb"]; asm["_logb"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__logb.apply(null, arguments);
};

var real__windowf_push = asm["_windowf_push"]; asm["_windowf_push"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__windowf_push.apply(null, arguments);
};

var real__fwrite = asm["_fwrite"]; asm["_fwrite"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fwrite.apply(null, arguments);
};

var real__fec_secded7264_create = asm["_fec_secded7264_create"]; asm["_fec_secded7264_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_secded7264_create.apply(null, arguments);
};

var real__modem_get_bps = asm["_modem_get_bps"]; asm["_modem_get_bps"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modem_get_bps.apply(null, arguments);
};

var real__qpacketmodem_decode = asm["_qpacketmodem_decode"]; asm["_qpacketmodem_decode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__qpacketmodem_decode.apply(null, arguments);
};

var real__fec_secded7264_decode_symbol = asm["_fec_secded7264_decode_symbol"]; asm["_fec_secded7264_decode_symbol"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_secded7264_decode_symbol.apply(null, arguments);
};

var real__firdecim_crcf_create = asm["_firdecim_crcf_create"]; asm["_firdecim_crcf_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__firdecim_crcf_create.apply(null, arguments);
};

var real__fpoly_bessel_roots_orchard = asm["_fpoly_bessel_roots_orchard"]; asm["_fpoly_bessel_roots_orchard"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fpoly_bessel_roots_orchard.apply(null, arguments);
};

var real__interleaver_encode = asm["_interleaver_encode"]; asm["_interleaver_encode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__interleaver_encode.apply(null, arguments);
};

var real__bilinear_zpkf = asm["_bilinear_zpkf"]; asm["_bilinear_zpkf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bilinear_zpkf.apply(null, arguments);
};

var real__json_delete_real = asm["_json_delete_real"]; asm["_json_delete_real"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__json_delete_real.apply(null, arguments);
};

var real__modem_demodulate_qpsk = asm["_modem_demodulate_qpsk"]; asm["_modem_demodulate_qpsk"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modem_demodulate_qpsk.apply(null, arguments);
};

var real__to_locale = asm["_to_locale"]; asm["_to_locale"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__to_locale.apply(null, arguments);
};

var real__windowf_destroy = asm["_windowf_destroy"]; asm["_windowf_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__windowf_destroy.apply(null, arguments);
};

var real__fec_hamming128_destroy = asm["_fec_hamming128_destroy"]; asm["_fec_hamming128_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_hamming128_destroy.apply(null, arguments);
};

var real__interleaver_create = asm["_interleaver_create"]; asm["_interleaver_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__interleaver_create.apply(null, arguments);
};

var real__vfprintf = asm["_vfprintf"]; asm["_vfprintf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__vfprintf.apply(null, arguments);
};

var real__liquid_unpack_bytes = asm["_liquid_unpack_bytes"]; asm["_liquid_unpack_bytes"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_unpack_bytes.apply(null, arguments);
};

var real__ellip_snf = asm["_ellip_snf"]; asm["_ellip_snf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ellip_snf.apply(null, arguments);
};

var real__iirdes_dzpk_lp2bp = asm["_iirdes_dzpk_lp2bp"]; asm["_iirdes_dzpk_lp2bp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__iirdes_dzpk_lp2bp.apply(null, arguments);
};

var real__modem_demodulate_ask = asm["_modem_demodulate_ask"]; asm["_modem_demodulate_ask"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modem_demodulate_ask.apply(null, arguments);
};

var real__firinterp_crcf_destroy = asm["_firinterp_crcf_destroy"]; asm["_firinterp_crcf_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__firinterp_crcf_destroy.apply(null, arguments);
};

var real__fec_hamming128_create = asm["_fec_hamming128_create"]; asm["_fec_hamming128_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_hamming128_create.apply(null, arguments);
};

var real__qpacketmodem_get_fec0 = asm["_qpacketmodem_get_fec0"]; asm["_qpacketmodem_get_fec0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__qpacketmodem_get_fec0.apply(null, arguments);
};

var real__qpacketmodem_get_fec1 = asm["_qpacketmodem_get_fec1"]; asm["_qpacketmodem_get_fec1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__qpacketmodem_get_fec1.apply(null, arguments);
};

var real__gmskmod_reset = asm["_gmskmod_reset"]; asm["_gmskmod_reset"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gmskmod_reset.apply(null, arguments);
};

var real__poly_val_lagrange_barycentric = asm["_poly_val_lagrange_barycentric"]; asm["_poly_val_lagrange_barycentric"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__poly_val_lagrange_barycentric.apply(null, arguments);
};

var real__snprintf = asm["_snprintf"]; asm["_snprintf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__snprintf.apply(null, arguments);
};

var real__parse_object = asm["_parse_object"]; asm["_parse_object"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__parse_object.apply(null, arguments);
};

var real__matrixf_gjelim = asm["_matrixf_gjelim"]; asm["_matrixf_gjelim"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__matrixf_gjelim.apply(null, arguments);
};

var real__liquid_firdes_fexp = asm["_liquid_firdes_fexp"]; asm["_liquid_firdes_fexp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_firdes_fexp.apply(null, arguments);
};

var real__lex_scan = asm["_lex_scan"]; asm["_lex_scan"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lex_scan.apply(null, arguments);
};

var real__json_delete_integer = asm["_json_delete_integer"]; asm["_json_delete_integer"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__json_delete_integer.apply(null, arguments);
};

var real__msequence_create = asm["_msequence_create"]; asm["_msequence_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__msequence_create.apply(null, arguments);
};

var real__modem_modulate_arb = asm["_modem_modulate_arb"]; asm["_modem_modulate_arb"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modem_modulate_arb.apply(null, arguments);
};

var real__fec_rep5_decode = asm["_fec_rep5_decode"]; asm["_fec_rep5_decode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_rep5_decode.apply(null, arguments);
};

var real__detector_cccf_create = asm["_detector_cccf_create"]; asm["_detector_cccf_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__detector_cccf_create.apply(null, arguments);
};

var real__modem_create_qam = asm["_modem_create_qam"]; asm["_modem_create_qam"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modem_create_qam.apply(null, arguments);
};

var real__iirfilt_crcf_create_lowpass = asm["_iirfilt_crcf_create_lowpass"]; asm["_iirfilt_crcf_create_lowpass"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__iirfilt_crcf_create_lowpass.apply(null, arguments);
};

var real__modem_demodulate_qam = asm["_modem_demodulate_qam"]; asm["_modem_demodulate_qam"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modem_demodulate_qam.apply(null, arguments);
};

var real__lex_save = asm["_lex_save"]; asm["_lex_save"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lex_save.apply(null, arguments);
};

var real__modem_modulate = asm["_modem_modulate"]; asm["_modem_modulate"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modem_modulate.apply(null, arguments);
};

var real__quiet_decoder_consume = asm["_quiet_decoder_consume"]; asm["_quiet_decoder_consume"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__quiet_decoder_consume.apply(null, arguments);
};

var real__modem_demodulate_bpsk = asm["_modem_demodulate_bpsk"]; asm["_modem_demodulate_bpsk"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modem_demodulate_bpsk.apply(null, arguments);
};

var real__string_create = asm["_string_create"]; asm["_string_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__string_create.apply(null, arguments);
};

var real__fec_rep5_encode = asm["_fec_rep5_encode"]; asm["_fec_rep5_encode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_rep5_encode.apply(null, arguments);
};

var real__frexpl = asm["_frexpl"]; asm["_frexpl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__frexpl.apply(null, arguments);
};

var real__windowcf_destroy = asm["_windowcf_destroy"]; asm["_windowcf_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__windowcf_destroy.apply(null, arguments);
};

var real__flexframegen_reset = asm["_flexframegen_reset"]; asm["_flexframegen_reset"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__flexframegen_reset.apply(null, arguments);
};

var real__modem_create_psk = asm["_modem_create_psk"]; asm["_modem_create_psk"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modem_create_psk.apply(null, arguments);
};

var real__fec_secded7264_destroy = asm["_fec_secded7264_destroy"]; asm["_fec_secded7264_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_secded7264_destroy.apply(null, arguments);
};

var real__liquid_besseli0f = asm["_liquid_besseli0f"]; asm["_liquid_besseli0f"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_besseli0f.apply(null, arguments);
};

var real__isspace = asm["_isspace"]; asm["_isspace"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__isspace.apply(null, arguments);
};

var real__cheby2_azpkf = asm["_cheby2_azpkf"]; asm["_cheby2_azpkf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__cheby2_azpkf.apply(null, arguments);
};

var real__liquid_firdes_farcsech_freqresponse = asm["_liquid_firdes_farcsech_freqresponse"]; asm["_liquid_firdes_farcsech_freqresponse"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_firdes_farcsech_freqresponse.apply(null, arguments);
};

var real__fec_rep3_decode_soft = asm["_fec_rep3_decode_soft"]; asm["_fec_rep3_decode_soft"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_rep3_decode_soft.apply(null, arguments);
};

var real__modulator_reset = asm["_modulator_reset"]; asm["_modulator_reset"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modulator_reset.apply(null, arguments);
};

var real__ring_create = asm["_ring_create"]; asm["_ring_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ring_create.apply(null, arguments);
};

var real__quiet_encoder_get_frame_len = asm["_quiet_encoder_get_frame_len"]; asm["_quiet_encoder_get_frame_len"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__quiet_encoder_get_frame_len.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__packetizer_get_fec1 = asm["_packetizer_get_fec1"]; asm["_packetizer_get_fec1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__packetizer_get_fec1.apply(null, arguments);
};

var real__packetizer_get_fec0 = asm["_packetizer_get_fec0"]; asm["_packetizer_get_fec0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__packetizer_get_fec0.apply(null, arguments);
};

var real__fec_pass_encode = asm["_fec_pass_encode"]; asm["_fec_pass_encode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_pass_encode.apply(null, arguments);
};

var real__msequence_advance = asm["_msequence_advance"]; asm["_msequence_advance"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__msequence_advance.apply(null, arguments);
};

var real__firpfb_rrrf_create = asm["_firpfb_rrrf_create"]; asm["_firpfb_rrrf_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__firpfb_rrrf_create.apply(null, arguments);
};

var real__qpilotgen_destroy = asm["_qpilotgen_destroy"]; asm["_qpilotgen_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__qpilotgen_destroy.apply(null, arguments);
};

var real__fecsoft_hamming128_decode_n3 = asm["_fecsoft_hamming128_decode_n3"]; asm["_fecsoft_hamming128_decode_n3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fecsoft_hamming128_decode_n3.apply(null, arguments);
};

var real__dotprod_crcf_execute = asm["_dotprod_crcf_execute"]; asm["_dotprod_crcf_execute"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dotprod_crcf_execute.apply(null, arguments);
};

var real__ofdmframegen_reset = asm["_ofdmframegen_reset"]; asm["_ofdmframegen_reset"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmframegen_reset.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real__json_real = asm["_json_real"]; asm["_json_real"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__json_real.apply(null, arguments);
};

var real__firinterp_rrrf_execute = asm["_firinterp_rrrf_execute"]; asm["_firinterp_rrrf_execute"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__firinterp_rrrf_execute.apply(null, arguments);
};

var real__liquid_sumsqcf = asm["_liquid_sumsqcf"]; asm["_liquid_sumsqcf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_sumsqcf.apply(null, arguments);
};

var real__qdetector_cccf_create_linear = asm["_qdetector_cccf_create_linear"]; asm["_qdetector_cccf_create_linear"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__qdetector_cccf_create_linear.apply(null, arguments);
};

var real____FLOAT_BITS = asm["___FLOAT_BITS"]; asm["___FLOAT_BITS"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____FLOAT_BITS.apply(null, arguments);
};

var real__parse_array = asm["_parse_array"]; asm["_parse_array"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__parse_array.apply(null, arguments);
};

var real__dotprod_crcf_destroy = asm["_dotprod_crcf_destroy"]; asm["_dotprod_crcf_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dotprod_crcf_destroy.apply(null, arguments);
};

var real__ofdmframesync_create = asm["_ofdmframesync_create"]; asm["_ofdmframesync_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmframesync_create.apply(null, arguments);
};

var real__detector_cccf_correlate = asm["_detector_cccf_correlate"]; asm["_detector_cccf_correlate"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__detector_cccf_correlate.apply(null, arguments);
};

var real____expo2f = asm["___expo2f"]; asm["___expo2f"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____expo2f.apply(null, arguments);
};

var real__scalbnl = asm["_scalbnl"]; asm["_scalbnl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__scalbnl.apply(null, arguments);
};

var real__expm1f = asm["_expm1f"]; asm["_expm1f"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__expm1f.apply(null, arguments);
};

var real__coshf = asm["_coshf"]; asm["_coshf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__coshf.apply(null, arguments);
};

var real__firpfb_crcf_push = asm["_firpfb_crcf_push"]; asm["_firpfb_crcf_push"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__firpfb_crcf_push.apply(null, arguments);
};

var real__fec_conv_punctured_destroy = asm["_fec_conv_punctured_destroy"]; asm["_fec_conv_punctured_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_conv_punctured_destroy.apply(null, arguments);
};

var real__scalbnf = asm["_scalbnf"]; asm["_scalbnf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__scalbnf.apply(null, arguments);
};

var real__gmskframegen_write_preamble = asm["_gmskframegen_write_preamble"]; asm["_gmskframegen_write_preamble"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gmskframegen_write_preamble.apply(null, arguments);
};

var real__flexframesync_set_header_len = asm["_flexframesync_set_header_len"]; asm["_flexframesync_set_header_len"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__flexframesync_set_header_len.apply(null, arguments);
};

var real__qpacketmodem_create = asm["_qpacketmodem_create"]; asm["_qpacketmodem_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__qpacketmodem_create.apply(null, arguments);
};

var real__utf8_check_full = asm["_utf8_check_full"]; asm["_utf8_check_full"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__utf8_check_full.apply(null, arguments);
};

var real__flexframesync_execute = asm["_flexframesync_execute"]; asm["_flexframesync_execute"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__flexframesync_execute.apply(null, arguments);
};

var real__resamp_rrrf_create = asm["_resamp_rrrf_create"]; asm["_resamp_rrrf_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__resamp_rrrf_create.apply(null, arguments);
};

var real__flexframesync_execute_rxpayload = asm["_flexframesync_execute_rxpayload"]; asm["_flexframesync_execute_rxpayload"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__flexframesync_execute_rxpayload.apply(null, arguments);
};

var real__json_delete_string = asm["_json_delete_string"]; asm["_json_delete_string"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__json_delete_string.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real__fec_hamming84_decode = asm["_fec_hamming84_decode"]; asm["_fec_hamming84_decode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_hamming84_decode.apply(null, arguments);
};

var real__strcmp = asm["_strcmp"]; asm["_strcmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strcmp.apply(null, arguments);
};

var real__fec_secded2216_encode = asm["_fec_secded2216_encode"]; asm["_fec_secded2216_encode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_secded2216_encode.apply(null, arguments);
};

var real__ofdmframesync_execute_rxsymbols = asm["_ofdmframesync_execute_rxsymbols"]; asm["_ofdmframesync_execute_rxsymbols"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmframesync_execute_rxsymbols.apply(null, arguments);
};

var real__copysign = asm["_copysign"]; asm["_copysign"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__copysign.apply(null, arguments);
};

var real__csqrtf = asm["_csqrtf"]; asm["_csqrtf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__csqrtf.apply(null, arguments);
};

var real__printf_core = asm["_printf_core"]; asm["_printf_core"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__printf_core.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__liquid_lngammaf = asm["_liquid_lngammaf"]; asm["_liquid_lngammaf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_lngammaf.apply(null, arguments);
};

var real__qdetector_cccf_get_dphi = asm["_qdetector_cccf_get_dphi"]; asm["_qdetector_cccf_get_dphi"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__qdetector_cccf_get_dphi.apply(null, arguments);
};

var real__gray_encode = asm["_gray_encode"]; asm["_gray_encode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gray_encode.apply(null, arguments);
};

var real__ofdmflexframesync_rxpayload = asm["_ofdmflexframesync_rxpayload"]; asm["_ofdmflexframesync_rxpayload"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmflexframesync_rxpayload.apply(null, arguments);
};

var real__hamming = asm["_hamming"]; asm["_hamming"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__hamming.apply(null, arguments);
};

var real__ofdmflexframegen_set_header_len = asm["_ofdmflexframegen_set_header_len"]; asm["_ofdmflexframegen_set_header_len"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmflexframegen_set_header_len.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real__ofdmflexframesync_destroy = asm["_ofdmflexframesync_destroy"]; asm["_ofdmflexframesync_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmflexframesync_destroy.apply(null, arguments);
};

var real__json_decref = asm["_json_decref"]; asm["_json_decref"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__json_decref.apply(null, arguments);
};

var real__gmskframesync_update_symsync = asm["_gmskframesync_update_symsync"]; asm["_gmskframesync_update_symsync"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gmskframesync_update_symsync.apply(null, arguments);
};

var real__strbuffer_pop = asm["_strbuffer_pop"]; asm["_strbuffer_pop"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strbuffer_pop.apply(null, arguments);
};

var real__modulator_flush_sample_len = asm["_modulator_flush_sample_len"]; asm["_modulator_flush_sample_len"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modulator_flush_sample_len.apply(null, arguments);
};

var real__fec_conv_encode = asm["_fec_conv_encode"]; asm["_fec_conv_encode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_conv_encode.apply(null, arguments);
};

var real__flexframegen_setprops = asm["_flexframegen_setprops"]; asm["_flexframegen_setprops"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__flexframegen_setprops.apply(null, arguments);
};

var real__fec_hamming74_destroy = asm["_fec_hamming74_destroy"]; asm["_fec_hamming74_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_hamming74_destroy.apply(null, arguments);
};

var real__json_delete_object = asm["_json_delete_object"]; asm["_json_delete_object"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__json_delete_object.apply(null, arguments);
};

var real__strncpy = asm["_strncpy"]; asm["_strncpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strncpy.apply(null, arguments);
};

var real__liquid_csqrtf = asm["_liquid_csqrtf"]; asm["_liquid_csqrtf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_csqrtf.apply(null, arguments);
};

var real__conjf = asm["_conjf"]; asm["_conjf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__conjf.apply(null, arguments);
};

var real__hashtable_init = asm["_hashtable_init"]; asm["_hashtable_init"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__hashtable_init.apply(null, arguments);
};

var real____stpncpy = asm["___stpncpy"]; asm["___stpncpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____stpncpy.apply(null, arguments);
};

var real__liquid_modem_is_apsk = asm["_liquid_modem_is_apsk"]; asm["_liquid_modem_is_apsk"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_modem_is_apsk.apply(null, arguments);
};

var real__gmskframegen_write_tail = asm["_gmskframegen_write_tail"]; asm["_gmskframegen_write_tail"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gmskframegen_write_tail.apply(null, arguments);
};

var real__ofdmflexframegen_assemble = asm["_ofdmflexframegen_assemble"]; asm["_ofdmflexframegen_assemble"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmflexframegen_assemble.apply(null, arguments);
};

var real__json_null = asm["_json_null"]; asm["_json_null"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__json_null.apply(null, arguments);
};

var real__msequence_generate_symbol = asm["_msequence_generate_symbol"]; asm["_msequence_generate_symbol"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__msequence_generate_symbol.apply(null, arguments);
};

var real__modem_modulate_apsk = asm["_modem_modulate_apsk"]; asm["_modem_modulate_apsk"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modem_modulate_apsk.apply(null, arguments);
};

var real__fft_create_plan_rader2 = asm["_fft_create_plan_rader2"]; asm["_fft_create_plan_rader2"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fft_create_plan_rader2.apply(null, arguments);
};

var real__ofdmframegen_create = asm["_ofdmframegen_create"]; asm["_ofdmframegen_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmframegen_create.apply(null, arguments);
};

var real__liquid_firdes_rcos = asm["_liquid_firdes_rcos"]; asm["_liquid_firdes_rcos"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_firdes_rcos.apply(null, arguments);
};

var real__flexframegen_destroy = asm["_flexframegen_destroy"]; asm["_flexframegen_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__flexframegen_destroy.apply(null, arguments);
};

var real__liquid_firdes_farcsech = asm["_liquid_firdes_farcsech"]; asm["_liquid_firdes_farcsech"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_firdes_farcsech.apply(null, arguments);
};

var real____stdio_write = asm["___stdio_write"]; asm["___stdio_write"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____stdio_write.apply(null, arguments);
};

var real__fec_rep3_destroy = asm["_fec_rep3_destroy"]; asm["_fec_rep3_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_rep3_destroy.apply(null, arguments);
};

var real__nco_crcf_mix_up = asm["_nco_crcf_mix_up"]; asm["_nco_crcf_mix_up"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__nco_crcf_mix_up.apply(null, arguments);
};

var real____stdio_close = asm["___stdio_close"]; asm["___stdio_close"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____stdio_close.apply(null, arguments);
};

var real__firdespm_compute_interp = asm["_firdespm_compute_interp"]; asm["_firdespm_compute_interp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__firdespm_compute_interp.apply(null, arguments);
};

var real__jsonp_error_vset = asm["_jsonp_error_vset"]; asm["_jsonp_error_vset"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__jsonp_error_vset.apply(null, arguments);
};

var real__ofdmflexframesync_internal_callback = asm["_ofdmflexframesync_internal_callback"]; asm["_ofdmflexframesync_internal_callback"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmflexframesync_internal_callback.apply(null, arguments);
};

var real__quiet_encoder_create = asm["_quiet_encoder_create"]; asm["_quiet_encoder_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__quiet_encoder_create.apply(null, arguments);
};

var real__polyf_fit = asm["_polyf_fit"]; asm["_polyf_fit"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__polyf_fit.apply(null, arguments);
};

var real__matrixf_inv = asm["_matrixf_inv"]; asm["_matrixf_inv"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__matrixf_inv.apply(null, arguments);
};

var real__qpilotgen_get_frame_len = asm["_qpilotgen_get_frame_len"]; asm["_qpilotgen_get_frame_len"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__qpilotgen_get_frame_len.apply(null, arguments);
};

var real__ofdmframesync_execute_seekplcp = asm["_ofdmframesync_execute_seekplcp"]; asm["_ofdmframesync_execute_seekplcp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmframesync_execute_seekplcp.apply(null, arguments);
};

var real____shgetc = asm["___shgetc"]; asm["___shgetc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____shgetc.apply(null, arguments);
};

var real__qpilotsync_destroy = asm["_qpilotsync_destroy"]; asm["_qpilotsync_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__qpilotsync_destroy.apply(null, arguments);
};

var real__ofdmflexframegen_setprops = asm["_ofdmflexframegen_setprops"]; asm["_ofdmflexframegen_setprops"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmflexframegen_setprops.apply(null, arguments);
};

var real__gmskframesync_execute = asm["_gmskframesync_execute"]; asm["_gmskframesync_execute"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gmskframesync_execute.apply(null, arguments);
};

var real__firpfb_crcf_set_scale = asm["_firpfb_crcf_set_scale"]; asm["_firpfb_crcf_set_scale"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__firpfb_crcf_set_scale.apply(null, arguments);
};

var real__firpfb_rrrf_destroy = asm["_firpfb_rrrf_destroy"]; asm["_firpfb_rrrf_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__firpfb_rrrf_destroy.apply(null, arguments);
};

var real__fft_execute_dft_5 = asm["_fft_execute_dft_5"]; asm["_fft_execute_dft_5"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fft_execute_dft_5.apply(null, arguments);
};

var real__fft_execute_dft_4 = asm["_fft_execute_dft_4"]; asm["_fft_execute_dft_4"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fft_execute_dft_4.apply(null, arguments);
};

var real__fft_execute_dft_7 = asm["_fft_execute_dft_7"]; asm["_fft_execute_dft_7"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fft_execute_dft_7.apply(null, arguments);
};

var real__fft_execute_dft_6 = asm["_fft_execute_dft_6"]; asm["_fft_execute_dft_6"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fft_execute_dft_6.apply(null, arguments);
};

var real__liquid_modem_is_dpsk = asm["_liquid_modem_is_dpsk"]; asm["_liquid_modem_is_dpsk"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_modem_is_dpsk.apply(null, arguments);
};

var real__fft_execute_dft_3 = asm["_fft_execute_dft_3"]; asm["_fft_execute_dft_3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fft_execute_dft_3.apply(null, arguments);
};

var real__fft_execute_dft_2 = asm["_fft_execute_dft_2"]; asm["_fft_execute_dft_2"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fft_execute_dft_2.apply(null, arguments);
};

var real__strbuffer_clear = asm["_strbuffer_clear"]; asm["_strbuffer_clear"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strbuffer_clear.apply(null, arguments);
};

var real__ilogbf = asm["_ilogbf"]; asm["_ilogbf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ilogbf.apply(null, arguments);
};

var real__fft_execute_dft_8 = asm["_fft_execute_dft_8"]; asm["_fft_execute_dft_8"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fft_execute_dft_8.apply(null, arguments);
};

var real__liquid_vectorcf_mulscalar = asm["_liquid_vectorcf_mulscalar"]; asm["_liquid_vectorcf_mulscalar"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_vectorcf_mulscalar.apply(null, arguments);
};

var real__fec_hamming128_decode_soft = asm["_fec_hamming128_decode_soft"]; asm["_fec_hamming128_decode_soft"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_hamming128_decode_soft.apply(null, arguments);
};

var real__packetizer_get_crc = asm["_packetizer_get_crc"]; asm["_packetizer_get_crc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__packetizer_get_crc.apply(null, arguments);
};

var real__liquid_firdes_rrcos = asm["_liquid_firdes_rrcos"]; asm["_liquid_firdes_rrcos"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_firdes_rrcos.apply(null, arguments);
};

var real__cargf = asm["_cargf"]; asm["_cargf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__cargf.apply(null, arguments);
};

var real__fec_hamming74_encode = asm["_fec_hamming74_encode"]; asm["_fec_hamming74_encode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_hamming74_encode.apply(null, arguments);
};

var real__ring_destroy = asm["_ring_destroy"]; asm["_ring_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ring_destroy.apply(null, arguments);
};

var real__ellipkf = asm["_ellipkf"]; asm["_ellipkf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ellipkf.apply(null, arguments);
};

var real__lex_scan_number = asm["_lex_scan_number"]; asm["_lex_scan_number"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lex_scan_number.apply(null, arguments);
};

var real__iirfilt_crcf_execute = asm["_iirfilt_crcf_execute"]; asm["_iirfilt_crcf_execute"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__iirfilt_crcf_execute.apply(null, arguments);
};

var real__fft_create_plan_dft = asm["_fft_create_plan_dft"]; asm["_fft_create_plan_dft"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fft_create_plan_dft.apply(null, arguments);
};

var real__gmskframesync_execute_rxheader = asm["_gmskframesync_execute_rxheader"]; asm["_gmskframesync_execute_rxheader"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gmskframesync_execute_rxheader.apply(null, arguments);
};

var real__fec_secded2216_estimate_ehat = asm["_fec_secded2216_estimate_ehat"]; asm["_fec_secded2216_estimate_ehat"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_secded2216_estimate_ehat.apply(null, arguments);
};

var real__lex_free_string = asm["_lex_free_string"]; asm["_lex_free_string"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lex_free_string.apply(null, arguments);
};

var real__fec_golay2412_destroy = asm["_fec_golay2412_destroy"]; asm["_fec_golay2412_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_golay2412_destroy.apply(null, arguments);
};

var real__flexframesync_destroy = asm["_flexframesync_destroy"]; asm["_flexframesync_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__flexframesync_destroy.apply(null, arguments);
};

var real__modem_get_demodulator_phase_error = asm["_modem_get_demodulator_phase_error"]; asm["_modem_get_demodulator_phase_error"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modem_get_demodulator_phase_error.apply(null, arguments);
};

var real__firinterp_rrrf_create_prototype = asm["_firinterp_rrrf_create_prototype"]; asm["_firinterp_rrrf_create_prototype"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__firinterp_rrrf_create_prototype.apply(null, arguments);
};

var real__fec_secded3932_decode = asm["_fec_secded3932_decode"]; asm["_fec_secded3932_decode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_secded3932_decode.apply(null, arguments);
};

var real__framesyncstats_init_default = asm["_framesyncstats_init_default"]; asm["_framesyncstats_init_default"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__framesyncstats_init_default.apply(null, arguments);
};

var real__ofdmframesync_execute = asm["_ofdmframesync_execute"]; asm["_ofdmframesync_execute"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmframesync_execute.apply(null, arguments);
};

var real__modem_arb_init = asm["_modem_arb_init"]; asm["_modem_arb_init"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modem_arb_init.apply(null, arguments);
};

var real__fec_secded3932_create = asm["_fec_secded3932_create"]; asm["_fec_secded3932_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_secded3932_create.apply(null, arguments);
};

var real__flexframegen_assemble = asm["_flexframegen_assemble"]; asm["_flexframegen_assemble"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__flexframegen_assemble.apply(null, arguments);
};

var real__jsonp_error_set_source = asm["_jsonp_error_set_source"]; asm["_jsonp_error_set_source"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__jsonp_error_set_source.apply(null, arguments);
};

var real__liquid_getopt_str2firfilt = asm["_liquid_getopt_str2firfilt"]; asm["_liquid_getopt_str2firfilt"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_getopt_str2firfilt.apply(null, arguments);
};

var real__matrixf_mul = asm["_matrixf_mul"]; asm["_matrixf_mul"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__matrixf_mul.apply(null, arguments);
};

var real__quiet_decoder_consume_stats = asm["_quiet_decoder_consume_stats"]; asm["_quiet_decoder_consume_stats"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__quiet_decoder_consume_stats.apply(null, arguments);
};

var real__fecsoft_hamming84_decode = asm["_fecsoft_hamming84_decode"]; asm["_fecsoft_hamming84_decode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fecsoft_hamming84_decode.apply(null, arguments);
};

var real__strchr = asm["_strchr"]; asm["_strchr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strchr.apply(null, arguments);
};

var real__dotprod_rrrf_create = asm["_dotprod_rrrf_create"]; asm["_dotprod_rrrf_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dotprod_rrrf_create.apply(null, arguments);
};

var real__liquid_bdotprod = asm["_liquid_bdotprod"]; asm["_liquid_bdotprod"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_bdotprod.apply(null, arguments);
};

var real__fec_conv_decode_soft = asm["_fec_conv_decode_soft"]; asm["_fec_conv_decode_soft"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_conv_decode_soft.apply(null, arguments);
};

var real__qpilotsync_execute = asm["_qpilotsync_execute"]; asm["_qpilotsync_execute"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__qpilotsync_execute.apply(null, arguments);
};

var real__fec_secded3932_destroy = asm["_fec_secded3932_destroy"]; asm["_fec_secded3932_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_secded3932_destroy.apply(null, arguments);
};

var real__fft_execute = asm["_fft_execute"]; asm["_fft_execute"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fft_execute.apply(null, arguments);
};

var real__parse_json = asm["_parse_json"]; asm["_parse_json"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__parse_json.apply(null, arguments);
};

var real__gmskframegen_assemble = asm["_gmskframegen_assemble"]; asm["_gmskframegen_assemble"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gmskframegen_assemble.apply(null, arguments);
};

var real__bessel_azpkf = asm["_bessel_azpkf"]; asm["_bessel_azpkf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bessel_azpkf.apply(null, arguments);
};

var real__firdecim_crcf_destroy = asm["_firdecim_crcf_destroy"]; asm["_firdecim_crcf_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__firdecim_crcf_destroy.apply(null, arguments);
};

var real__detector_cccf_reset = asm["_detector_cccf_reset"]; asm["_detector_cccf_reset"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__detector_cccf_reset.apply(null, arguments);
};

var real__vsnprintf = asm["_vsnprintf"]; asm["_vsnprintf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__vsnprintf.apply(null, arguments);
};

var real__firinterp_crcf_create_prototype = asm["_firinterp_crcf_create_prototype"]; asm["_firinterp_crcf_create_prototype"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__firinterp_crcf_create_prototype.apply(null, arguments);
};

var real__firpfb_rrrf_create_rnyquist = asm["_firpfb_rrrf_create_rnyquist"]; asm["_firpfb_rrrf_create_rnyquist"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__firpfb_rrrf_create_rnyquist.apply(null, arguments);
};

var real__liquid_firdes_rfarcsech = asm["_liquid_firdes_rfarcsech"]; asm["_liquid_firdes_rfarcsech"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_firdes_rfarcsech.apply(null, arguments);
};

var real__fec_conv_punctured_encode = asm["_fec_conv_punctured_encode"]; asm["_fec_conv_punctured_encode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_conv_punctured_encode.apply(null, arguments);
};

var real__rkaiser_approximate_rho = asm["_rkaiser_approximate_rho"]; asm["_rkaiser_approximate_rho"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__rkaiser_approximate_rho.apply(null, arguments);
};

var real__poly_fit_lagrange_barycentric = asm["_poly_fit_lagrange_barycentric"]; asm["_poly_fit_lagrange_barycentric"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__poly_fit_lagrange_barycentric.apply(null, arguments);
};

var real__fprintf = asm["_fprintf"]; asm["_fprintf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fprintf.apply(null, arguments);
};

var real__sprintf = asm["_sprintf"]; asm["_sprintf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__sprintf.apply(null, arguments);
};

var real__gray_decode = asm["_gray_decode"]; asm["_gray_decode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gray_decode.apply(null, arguments);
};

var real__detector_cccf_update_sumsq = asm["_detector_cccf_update_sumsq"]; asm["_detector_cccf_update_sumsq"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__detector_cccf_update_sumsq.apply(null, arguments);
};

var real__strbuffer_close = asm["_strbuffer_close"]; asm["_strbuffer_close"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strbuffer_close.apply(null, arguments);
};

var real__ofdmframesync_execute_S0b = asm["_ofdmframesync_execute_S0b"]; asm["_ofdmframesync_execute_S0b"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmframesync_execute_S0b.apply(null, arguments);
};

var real__liquid_fft_estimate_method = asm["_liquid_fft_estimate_method"]; asm["_liquid_fft_estimate_method"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_fft_estimate_method.apply(null, arguments);
};

var real__qpilotsync_create = asm["_qpilotsync_create"]; asm["_qpilotsync_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__qpilotsync_create.apply(null, arguments);
};

var real__jsonp_error_set = asm["_jsonp_error_set"]; asm["_jsonp_error_set"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__jsonp_error_set.apply(null, arguments);
};

var real__modulator_emit = asm["_modulator_emit"]; asm["_modulator_emit"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modulator_emit.apply(null, arguments);
};

var real__wctomb = asm["_wctomb"]; asm["_wctomb"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__wctomb.apply(null, arguments);
};

var real__gmskframesync_pushpn = asm["_gmskframesync_pushpn"]; asm["_gmskframesync_pushpn"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gmskframesync_pushpn.apply(null, arguments);
};

var real__ellip_azpkf = asm["_ellip_azpkf"]; asm["_ellip_azpkf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ellip_azpkf.apply(null, arguments);
};

var real__liquid_pack_bytes = asm["_liquid_pack_bytes"]; asm["_liquid_pack_bytes"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_pack_bytes.apply(null, arguments);
};

var real__polyf_val = asm["_polyf_val"]; asm["_polyf_val"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__polyf_val.apply(null, arguments);
};

var real__demodulator_create = asm["_demodulator_create"]; asm["_demodulator_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__demodulator_create.apply(null, arguments);
};

var real__logbf = asm["_logbf"]; asm["_logbf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__logbf.apply(null, arguments);
};

var real__estimate_req_filter_As = asm["_estimate_req_filter_As"]; asm["_estimate_req_filter_As"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__estimate_req_filter_As.apply(null, arguments);
};

var real__fec_get_rate = asm["_fec_get_rate"]; asm["_fec_get_rate"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_get_rate.apply(null, arguments);
};

var real__dotprod_rrrf_execute = asm["_dotprod_rrrf_execute"]; asm["_dotprod_rrrf_execute"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dotprod_rrrf_execute.apply(null, arguments);
};

var real__fclose = asm["_fclose"]; asm["_fclose"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fclose.apply(null, arguments);
};

var real__firinterp_rrrf_destroy = asm["_firinterp_rrrf_destroy"]; asm["_firinterp_rrrf_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__firinterp_rrrf_destroy.apply(null, arguments);
};

var real__parse_value = asm["_parse_value"]; asm["_parse_value"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__parse_value.apply(null, arguments);
};

var real__ofdmflexframesync_debug_enable = asm["_ofdmflexframesync_debug_enable"]; asm["_ofdmflexframesync_debug_enable"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmflexframesync_debug_enable.apply(null, arguments);
};

var real__liquid_getopt_str2crc = asm["_liquid_getopt_str2crc"]; asm["_liquid_getopt_str2crc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_getopt_str2crc.apply(null, arguments);
};

var real__liquid_factor = asm["_liquid_factor"]; asm["_liquid_factor"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_factor.apply(null, arguments);
};

var real__insert_to_bucket = asm["_insert_to_bucket"]; asm["_insert_to_bucket"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__insert_to_bucket.apply(null, arguments);
};

var real__liquid_firdes_rfexp = asm["_liquid_firdes_rfexp"]; asm["_liquid_firdes_rfexp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_firdes_rfexp.apply(null, arguments);
};

var real__ofdm_subcarriers_create = asm["_ofdm_subcarriers_create"]; asm["_ofdm_subcarriers_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdm_subcarriers_create.apply(null, arguments);
};

var real__lex_unget = asm["_lex_unget"]; asm["_lex_unget"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lex_unget.apply(null, arguments);
};

var real__fft_execute_radix2 = asm["_fft_execute_radix2"]; asm["_fft_execute_radix2"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fft_execute_radix2.apply(null, arguments);
};

var real__liquid_is_prime = asm["_liquid_is_prime"]; asm["_liquid_is_prime"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_is_prime.apply(null, arguments);
};

var real__fec_rs_setlength = asm["_fec_rs_setlength"]; asm["_fec_rs_setlength"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_rs_setlength.apply(null, arguments);
};

var real__decode_unicode_escape = asm["_decode_unicode_escape"]; asm["_decode_unicode_escape"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__decode_unicode_escape.apply(null, arguments);
};

var real__gmskframesync_debug_print = asm["_gmskframesync_debug_print"]; asm["_gmskframesync_debug_print"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gmskframesync_debug_print.apply(null, arguments);
};

var real__ofdmflexframegen_reset = asm["_ofdmflexframegen_reset"]; asm["_ofdmflexframegen_reset"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmflexframegen_reset.apply(null, arguments);
};

var real__json_true = asm["_json_true"]; asm["_json_true"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__json_true.apply(null, arguments);
};

var real__qpilotgen_execute = asm["_qpilotgen_execute"]; asm["_qpilotgen_execute"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__qpilotgen_execute.apply(null, arguments);
};

var real__modem_destroy = asm["_modem_destroy"]; asm["_modem_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modem_destroy.apply(null, arguments);
};

var real__sinhf = asm["_sinhf"]; asm["_sinhf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__sinhf.apply(null, arguments);
};

var real__json_array = asm["_json_array"]; asm["_json_array"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__json_array.apply(null, arguments);
};

var real__wdelayf_destroy = asm["_wdelayf_destroy"]; asm["_wdelayf_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__wdelayf_destroy.apply(null, arguments);
};

var real__modulator_destroy = asm["_modulator_destroy"]; asm["_modulator_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modulator_destroy.apply(null, arguments);
};

var real__qpacketmodem_encode = asm["_qpacketmodem_encode"]; asm["_qpacketmodem_encode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__qpacketmodem_encode.apply(null, arguments);
};

var real__fft_reverse_index = asm["_fft_reverse_index"]; asm["_fft_reverse_index"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fft_reverse_index.apply(null, arguments);
};

var real____stdio_read = asm["___stdio_read"]; asm["___stdio_read"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____stdio_read.apply(null, arguments);
};

var real__liquid_primitive_root_prime = asm["_liquid_primitive_root_prime"]; asm["_liquid_primitive_root_prime"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_primitive_root_prime.apply(null, arguments);
};

var real__liquid_iirdes = asm["_liquid_iirdes"]; asm["_liquid_iirdes"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_iirdes.apply(null, arguments);
};

var real__iirfilt_crcf_create_sos = asm["_iirfilt_crcf_create_sos"]; asm["_iirfilt_crcf_create_sos"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__iirfilt_crcf_create_sos.apply(null, arguments);
};

var real__fec_secded2216_destroy = asm["_fec_secded2216_destroy"]; asm["_fec_secded2216_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_secded2216_destroy.apply(null, arguments);
};

var real__modulator_sample_len = asm["_modulator_sample_len"]; asm["_modulator_sample_len"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modulator_sample_len.apply(null, arguments);
};

var real__fec_hamming74_decode = asm["_fec_hamming74_decode"]; asm["_fec_hamming74_decode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_hamming74_decode.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real__fec_conv_punctured_decode_soft = asm["_fec_conv_punctured_decode_soft"]; asm["_fec_conv_punctured_decode_soft"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_conv_punctured_decode_soft.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__interleaver_destroy = asm["_interleaver_destroy"]; asm["_interleaver_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__interleaver_destroy.apply(null, arguments);
};

var real__fec_conv_destroy = asm["_fec_conv_destroy"]; asm["_fec_conv_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_conv_destroy.apply(null, arguments);
};

var real__framedatastats_reset = asm["_framedatastats_reset"]; asm["_framedatastats_reset"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__framedatastats_reset.apply(null, arguments);
};

var real__wdelayf_push = asm["_wdelayf_push"]; asm["_wdelayf_push"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__wdelayf_push.apply(null, arguments);
};

var real__wdelayf_create = asm["_wdelayf_create"]; asm["_wdelayf_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__wdelayf_create.apply(null, arguments);
};

var real__quiet_encoder_send = asm["_quiet_encoder_send"]; asm["_quiet_encoder_send"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__quiet_encoder_send.apply(null, arguments);
};

var real__hypot = asm["_hypot"]; asm["_hypot"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__hypot.apply(null, arguments);
};

var real__seed_from_timestamp_and_pid = asm["_seed_from_timestamp_and_pid"]; asm["_seed_from_timestamp_and_pid"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__seed_from_timestamp_and_pid.apply(null, arguments);
};

var real__copysignf = asm["_copysignf"]; asm["_copysignf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__copysignf.apply(null, arguments);
};

var real____shlim = asm["___shlim"]; asm["___shlim"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____shlim.apply(null, arguments);
};

var real__fec_rs_create = asm["_fec_rs_create"]; asm["_fec_rs_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_rs_create.apply(null, arguments);
};

var real__hypotf = asm["_hypotf"]; asm["_hypotf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__hypotf.apply(null, arguments);
};

var real__copysignl = asm["_copysignl"]; asm["_copysignl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__copysignl.apply(null, arguments);
};

var real____intscan = asm["___intscan"]; asm["___intscan"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____intscan.apply(null, arguments);
};

var real__fec_conv_punctured_decode_hard = asm["_fec_conv_punctured_decode_hard"]; asm["_fec_conv_punctured_decode_hard"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_conv_punctured_decode_hard.apply(null, arguments);
};

var real__fec_rep3_encode = asm["_fec_rep3_encode"]; asm["_fec_rep3_encode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_rep3_encode.apply(null, arguments);
};

var real__ccoshf = asm["_ccoshf"]; asm["_ccoshf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ccoshf.apply(null, arguments);
};

var real__decoder_on_decode = asm["_decoder_on_decode"]; asm["_decoder_on_decode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__decoder_on_decode.apply(null, arguments);
};

var real__firdespm_create = asm["_firdespm_create"]; asm["_firdespm_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__firdespm_create.apply(null, arguments);
};

var real____toread = asm["___toread"]; asm["___toread"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____toread.apply(null, arguments);
};

var real__frexp = asm["_frexp"]; asm["_frexp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__frexp.apply(null, arguments);
};

var real__gmskframegen_set_header_len = asm["_gmskframegen_set_header_len"]; asm["_gmskframegen_set_header_len"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gmskframegen_set_header_len.apply(null, arguments);
};

var real__hashtable_close = asm["_hashtable_close"]; asm["_hashtable_close"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__hashtable_close.apply(null, arguments);
};

var real__quiet_decoder_profile_str = asm["_quiet_decoder_profile_str"]; asm["_quiet_decoder_profile_str"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__quiet_decoder_profile_str.apply(null, arguments);
};

var real__liquid_reverse_uint32 = asm["_liquid_reverse_uint32"]; asm["_liquid_reverse_uint32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_reverse_uint32.apply(null, arguments);
};

var real__fmt_u = asm["_fmt_u"]; asm["_fmt_u"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fmt_u.apply(null, arguments);
};

var real__hashtable_find_pair = asm["_hashtable_find_pair"]; asm["_hashtable_find_pair"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__hashtable_find_pair.apply(null, arguments);
};

var real__ofdmframegen_destroy = asm["_ofdmframegen_destroy"]; asm["_ofdmframegen_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmframegen_destroy.apply(null, arguments);
};

var real____syscall_ret = asm["___syscall_ret"]; asm["___syscall_ret"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____syscall_ret.apply(null, arguments);
};

var real__fmodl = asm["_fmodl"]; asm["_fmodl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fmodl.apply(null, arguments);
};

var real__fec_rs_destroy = asm["_fec_rs_destroy"]; asm["_fec_rs_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_rs_destroy.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__modem_demodulate_psk = asm["_modem_demodulate_psk"]; asm["_modem_demodulate_psk"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modem_demodulate_psk.apply(null, arguments);
};

var real__fec_create = asm["_fec_create"]; asm["_fec_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_create.apply(null, arguments);
};

var real__modem_modulate_bpsk = asm["_modem_modulate_bpsk"]; asm["_modem_modulate_bpsk"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modem_modulate_bpsk.apply(null, arguments);
};

var real__fec_hamming128_decode = asm["_fec_hamming128_decode"]; asm["_fec_hamming128_decode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_hamming128_decode.apply(null, arguments);
};

var real__liquid_getopt_str2fec = asm["_liquid_getopt_str2fec"]; asm["_liquid_getopt_str2fec"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_getopt_str2fec.apply(null, arguments);
};

var real__firdespm_iext_search = asm["_firdespm_iext_search"]; asm["_firdespm_iext_search"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__firdespm_iext_search.apply(null, arguments);
};

var real____fdopen = asm["___fdopen"]; asm["___fdopen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____fdopen.apply(null, arguments);
};

var real__nco_crcf_compute_sincos_vco = asm["_nco_crcf_compute_sincos_vco"]; asm["_nco_crcf_compute_sincos_vco"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__nco_crcf_compute_sincos_vco.apply(null, arguments);
};

var real__quiet_encoder_emit = asm["_quiet_encoder_emit"]; asm["_quiet_encoder_emit"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__quiet_encoder_emit.apply(null, arguments);
};

var real__json_object_set_nocheck = asm["_json_object_set_nocheck"]; asm["_json_object_set_nocheck"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__json_object_set_nocheck.apply(null, arguments);
};

var real__dotprod_crcf_create = asm["_dotprod_crcf_create"]; asm["_dotprod_crcf_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dotprod_crcf_create.apply(null, arguments);
};

var real__ofdmframesync_S0_metrics = asm["_ofdmframesync_S0_metrics"]; asm["_ofdmframesync_S0_metrics"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmframesync_S0_metrics.apply(null, arguments);
};

var real__close = asm["_close"]; asm["_close"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__close.apply(null, arguments);
};

var real__qpacketmodem_configure = asm["_qpacketmodem_configure"]; asm["_qpacketmodem_configure"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__qpacketmodem_configure.apply(null, arguments);
};

var real__sincf = asm["_sincf"]; asm["_sincf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__sincf.apply(null, arguments);
};

var real__gmskframegen_is_assembled = asm["_gmskframegen_is_assembled"]; asm["_gmskframegen_is_assembled"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gmskframegen_is_assembled.apply(null, arguments);
};

var real____stdout_write = asm["___stdout_write"]; asm["___stdout_write"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____stdout_write.apply(null, arguments);
};

var real__csinf = asm["_csinf"]; asm["_csinf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__csinf.apply(null, arguments);
};

var real__sn_write = asm["_sn_write"]; asm["_sn_write"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__sn_write.apply(null, arguments);
};

var real__firdecim_crcf_create_prototype = asm["_firdecim_crcf_create_prototype"]; asm["_firdecim_crcf_create_prototype"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__firdecim_crcf_create_prototype.apply(null, arguments);
};

var real__qpacketmodem_get_modscheme = asm["_qpacketmodem_get_modscheme"]; asm["_qpacketmodem_get_modscheme"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__qpacketmodem_get_modscheme.apply(null, arguments);
};

var real__constrained_write = asm["_constrained_write"]; asm["_constrained_write"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__constrained_write.apply(null, arguments);
};

var real__packetizer_decode = asm["_packetizer_decode"]; asm["_packetizer_decode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__packetizer_decode.apply(null, arguments);
};

var real__ofdmflexframegen_reconfigure = asm["_ofdmflexframegen_reconfigure"]; asm["_ofdmflexframegen_reconfigure"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmflexframegen_reconfigure.apply(null, arguments);
};

var real__ofdmframesync_debug_enable = asm["_ofdmframesync_debug_enable"]; asm["_ofdmframesync_debug_enable"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmframesync_debug_enable.apply(null, arguments);
};

var real__erff = asm["_erff"]; asm["_erff"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__erff.apply(null, arguments);
};

var real__json_string_value = asm["_json_string_value"]; asm["_json_string_value"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__json_string_value.apply(null, arguments);
};

var real__kaiser = asm["_kaiser"]; asm["_kaiser"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__kaiser.apply(null, arguments);
};

var real__ofdmflexframegen_writesymbol = asm["_ofdmflexframegen_writesymbol"]; asm["_ofdmflexframegen_writesymbol"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmflexframegen_writesymbol.apply(null, arguments);
};

var real__crc16_generate_key = asm["_crc16_generate_key"]; asm["_crc16_generate_key"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__crc16_generate_key.apply(null, arguments);
};

var real__fec_rep5_create = asm["_fec_rep5_create"]; asm["_fec_rep5_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_rep5_create.apply(null, arguments);
};

var real__firdespm_compute_taps = asm["_firdespm_compute_taps"]; asm["_firdespm_compute_taps"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__firdespm_compute_taps.apply(null, arguments);
};

var real__lex_get = asm["_lex_get"]; asm["_lex_get"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lex_get.apply(null, arguments);
};

var real__try_realloc_chunk = asm["_try_realloc_chunk"]; asm["_try_realloc_chunk"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__try_realloc_chunk.apply(null, arguments);
};

var real__gmskframegen_reset = asm["_gmskframegen_reset"]; asm["_gmskframegen_reset"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gmskframegen_reset.apply(null, arguments);
};

var real__stream_unget = asm["_stream_unget"]; asm["_stream_unget"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__stream_unget.apply(null, arguments);
};

var real__fec_rep5_decode_soft = asm["_fec_rep5_decode_soft"]; asm["_fec_rep5_decode_soft"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_rep5_decode_soft.apply(null, arguments);
};

var real____divsc3 = asm["___divsc3"]; asm["___divsc3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____divsc3.apply(null, arguments);
};

var real__json_array_grow = asm["_json_array_grow"]; asm["_json_array_grow"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__json_array_grow.apply(null, arguments);
};

var real__qdetector_cccf_set_threshold = asm["_qdetector_cccf_set_threshold"]; asm["_qdetector_cccf_set_threshold"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__qdetector_cccf_set_threshold.apply(null, arguments);
};

var real__modem_modulate_qpsk = asm["_modem_modulate_qpsk"]; asm["_modem_modulate_qpsk"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modem_modulate_qpsk.apply(null, arguments);
};

var real__json_delete = asm["_json_delete"]; asm["_json_delete"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__json_delete.apply(null, arguments);
};

var real__gmskmod_create = asm["_gmskmod_create"]; asm["_gmskmod_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gmskmod_create.apply(null, arguments);
};

var real__fec_secded2216_create = asm["_fec_secded2216_create"]; asm["_fec_secded2216_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_secded2216_create.apply(null, arguments);
};

var real__log10f = asm["_log10f"]; asm["_log10f"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__log10f.apply(null, arguments);
};

var real__windowcf_push = asm["_windowcf_push"]; asm["_windowcf_push"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__windowcf_push.apply(null, arguments);
};

var real__quiet_decoder_create = asm["_quiet_decoder_create"]; asm["_quiet_decoder_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__quiet_decoder_create.apply(null, arguments);
};

var real__liquid_unpack_array = asm["_liquid_unpack_array"]; asm["_liquid_unpack_array"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_unpack_array.apply(null, arguments);
};

var real__llvm_cttz_i32 = asm["_llvm_cttz_i32"]; asm["_llvm_cttz_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_cttz_i32.apply(null, arguments);
};

var real__fec_secded2216_compute_parity = asm["_fec_secded2216_compute_parity"]; asm["_fec_secded2216_compute_parity"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_secded2216_compute_parity.apply(null, arguments);
};

var real__liquid_firdes_prototype = asm["_liquid_firdes_prototype"]; asm["_liquid_firdes_prototype"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_firdes_prototype.apply(null, arguments);
};

var real__firdecim_crcf_execute = asm["_firdecim_crcf_execute"]; asm["_firdecim_crcf_execute"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__firdecim_crcf_execute.apply(null, arguments);
};

var real__json_object_seed = asm["_json_object_seed"]; asm["_json_object_seed"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__json_object_seed.apply(null, arguments);
};

var real__lex_steal_string = asm["_lex_steal_string"]; asm["_lex_steal_string"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lex_steal_string.apply(null, arguments);
};

var real__fec_hamming128_encode = asm["_fec_hamming128_encode"]; asm["_fec_hamming128_encode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_hamming128_encode.apply(null, arguments);
};

var real__strtox = asm["_strtox"]; asm["_strtox"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strtox.apply(null, arguments);
};

var real__jsonp_strtod = asm["_jsonp_strtod"]; asm["_jsonp_strtod"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__jsonp_strtod.apply(null, arguments);
};

var real__liquid_firdes_fexp_freqresponse = asm["_liquid_firdes_fexp_freqresponse"]; asm["_liquid_firdes_fexp_freqresponse"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_firdes_fexp_freqresponse.apply(null, arguments);
};

var real__fft_execute_dft = asm["_fft_execute_dft"]; asm["_fft_execute_dft"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fft_execute_dft.apply(null, arguments);
};

var real__wdelayf_clear = asm["_wdelayf_clear"]; asm["_wdelayf_clear"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__wdelayf_clear.apply(null, arguments);
};

var real__ofdmframesync_get_cfo = asm["_ofdmframesync_get_cfo"]; asm["_ofdmframesync_get_cfo"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmframesync_get_cfo.apply(null, arguments);
};

var real__fft_destroy_plan = asm["_fft_destroy_plan"]; asm["_fft_destroy_plan"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fft_destroy_plan.apply(null, arguments);
};

var real__printf = asm["_printf"]; asm["_printf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__printf.apply(null, arguments);
};

var real__fmaxf = asm["_fmaxf"]; asm["_fmaxf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fmaxf.apply(null, arguments);
};

var real__liquid_repack_bytes = asm["_liquid_repack_bytes"]; asm["_liquid_repack_bytes"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_repack_bytes.apply(null, arguments);
};

var real__json_loads = asm["_json_loads"]; asm["_json_loads"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__json_loads.apply(null, arguments);
};

var real__msequence_create_default = asm["_msequence_create_default"]; asm["_msequence_create_default"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__msequence_create_default.apply(null, arguments);
};

var real__fec_golay2412_encode = asm["_fec_golay2412_encode"]; asm["_fec_golay2412_encode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_golay2412_encode.apply(null, arguments);
};

var real__nco_crcf_pll_set_bandwidth = asm["_nco_crcf_pll_set_bandwidth"]; asm["_nco_crcf_pll_set_bandwidth"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__nco_crcf_pll_set_bandwidth.apply(null, arguments);
};

var real__liquid_firdes_rkaiser_internal_isi = asm["_liquid_firdes_rkaiser_internal_isi"]; asm["_liquid_firdes_rkaiser_internal_isi"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_firdes_rkaiser_internal_isi.apply(null, arguments);
};

var real__lex_init = asm["_lex_init"]; asm["_lex_init"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lex_init.apply(null, arguments);
};

var real__ofdmflexframegen_is_assembled = asm["_ofdmflexframegen_is_assembled"]; asm["_ofdmflexframegen_is_assembled"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmflexframegen_is_assembled.apply(null, arguments);
};

var real__generate_seed = asm["_generate_seed"]; asm["_generate_seed"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__generate_seed.apply(null, arguments);
};

var real__firpfb_rrrf_push = asm["_firpfb_rrrf_push"]; asm["_firpfb_rrrf_push"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__firpfb_rrrf_push.apply(null, arguments);
};

var real__read = asm["_read"]; asm["_read"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__read.apply(null, arguments);
};

var real__string_get = asm["_string_get"]; asm["_string_get"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__string_get.apply(null, arguments);
};

var real__nco_crcf_pll_step = asm["_nco_crcf_pll_step"]; asm["_nco_crcf_pll_step"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__nco_crcf_pll_step.apply(null, arguments);
};

var real__modem_create = asm["_modem_create"]; asm["_modem_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modem_create.apply(null, arguments);
};

var real__json_real_value = asm["_json_real_value"]; asm["_json_real_value"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__json_real_value.apply(null, arguments);
};

var real__qdetector_cccf_get_gamma = asm["_qdetector_cccf_get_gamma"]; asm["_qdetector_cccf_get_gamma"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__qdetector_cccf_get_gamma.apply(null, arguments);
};

var real__fft_create_plan_radix2 = asm["_fft_create_plan_radix2"]; asm["_fft_create_plan_radix2"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fft_create_plan_radix2.apply(null, arguments);
};

var real__utf8_encode = asm["_utf8_encode"]; asm["_utf8_encode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__utf8_encode.apply(null, arguments);
};

var real__windowcf_read = asm["_windowcf_read"]; asm["_windowcf_read"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__windowcf_read.apply(null, arguments);
};

var real__fec_rs_decode = asm["_fec_rs_decode"]; asm["_fec_rs_decode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_rs_decode.apply(null, arguments);
};

var real__roundf = asm["_roundf"]; asm["_roundf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__roundf.apply(null, arguments);
};

var real__fec_conv_create = asm["_fec_conv_create"]; asm["_fec_conv_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_conv_create.apply(null, arguments);
};

var real__seed_from_urandom = asm["_seed_from_urandom"]; asm["_seed_from_urandom"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__seed_from_urandom.apply(null, arguments);
};

var real__fec_pass_destroy = asm["_fec_pass_destroy"]; asm["_fec_pass_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_pass_destroy.apply(null, arguments);
};

var real__modem_demodsoft_gentab = asm["_modem_demodsoft_gentab"]; asm["_modem_demodsoft_gentab"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modem_demodsoft_gentab.apply(null, arguments);
};

var real__windowf_clear = asm["_windowf_clear"]; asm["_windowf_clear"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__windowf_clear.apply(null, arguments);
};

var real__qpilotsync_get_frame_len = asm["_qpilotsync_get_frame_len"]; asm["_qpilotsync_get_frame_len"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__qpilotsync_get_frame_len.apply(null, arguments);
};

var real__fmod = asm["_fmod"]; asm["_fmod"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fmod.apply(null, arguments);
};

var real__dotprod_rrrf_destroy = asm["_dotprod_rrrf_destroy"]; asm["_dotprod_rrrf_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dotprod_rrrf_destroy.apply(null, arguments);
};

var real__fec_hamming74_decode_soft = asm["_fec_hamming74_decode_soft"]; asm["_fec_hamming74_decode_soft"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_hamming74_decode_soft.apply(null, arguments);
};

var real__array_copy = asm["_array_copy"]; asm["_array_copy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__array_copy.apply(null, arguments);
};

var real__liquid_unpack_array_block = asm["_liquid_unpack_array_block"]; asm["_liquid_unpack_array_block"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_unpack_array_block.apply(null, arguments);
};

var real__firinterp_rrrf_create = asm["_firinterp_rrrf_create"]; asm["_firinterp_rrrf_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__firinterp_rrrf_create.apply(null, arguments);
};

var real__gmskframesync_decode_header = asm["_gmskframesync_decode_header"]; asm["_gmskframesync_decode_header"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gmskframesync_decode_header.apply(null, arguments);
};

var real__quiet_encoder_sample_len = asm["_quiet_encoder_sample_len"]; asm["_quiet_encoder_sample_len"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__quiet_encoder_sample_len.apply(null, arguments);
};

var real__cabsf = asm["_cabsf"]; asm["_cabsf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__cabsf.apply(null, arguments);
};

var real__strbuffer_init = asm["_strbuffer_init"]; asm["_strbuffer_init"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strbuffer_init.apply(null, arguments);
};

var real__fec_golay2412_decode_symbol = asm["_fec_golay2412_decode_symbol"]; asm["_fec_golay2412_decode_symbol"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_golay2412_decode_symbol.apply(null, arguments);
};

var real__qpilotgen_create = asm["_qpilotgen_create"]; asm["_qpilotgen_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__qpilotgen_create.apply(null, arguments);
};

var real__liquid_cplxpair = asm["_liquid_cplxpair"]; asm["_liquid_cplxpair"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_cplxpair.apply(null, arguments);
};

var real____overflow = asm["___overflow"]; asm["___overflow"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____overflow.apply(null, arguments);
};

var real__fec_decode = asm["_fec_decode"]; asm["_fec_decode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_decode.apply(null, arguments);
};

var real__lex_get_save = asm["_lex_get_save"]; asm["_lex_get_save"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lex_get_save.apply(null, arguments);
};

var real__open = asm["_open"]; asm["_open"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__open.apply(null, arguments);
};

var real__flexframesync_decode_header = asm["_flexframesync_decode_header"]; asm["_flexframesync_decode_header"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__flexframesync_decode_header.apply(null, arguments);
};

var real__json_incref = asm["_json_incref"]; asm["_json_incref"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__json_incref.apply(null, arguments);
};

var real__firpfb_crcf_destroy = asm["_firpfb_crcf_destroy"]; asm["_firpfb_crcf_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__firpfb_crcf_destroy.apply(null, arguments);
};

var real__json_delete_array = asm["_json_delete_array"]; asm["_json_delete_array"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__json_delete_array.apply(null, arguments);
};

var real__qdetector_cccf_get_tau = asm["_qdetector_cccf_get_tau"]; asm["_qdetector_cccf_get_tau"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__qdetector_cccf_get_tau.apply(null, arguments);
};

var real__ofdmflexframesync_set_header_len = asm["_ofdmflexframesync_set_header_len"]; asm["_ofdmflexframesync_set_header_len"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmflexframesync_set_header_len.apply(null, arguments);
};

var real__jsonp_error_init = asm["_jsonp_error_init"]; asm["_jsonp_error_init"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__jsonp_error_init.apply(null, arguments);
};

var real__modem_modulate_sqam32 = asm["_modem_modulate_sqam32"]; asm["_modem_modulate_sqam32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modem_modulate_sqam32.apply(null, arguments);
};

var real__hashtable_get = asm["_hashtable_get"]; asm["_hashtable_get"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__hashtable_get.apply(null, arguments);
};

var real____floatscan = asm["___floatscan"]; asm["___floatscan"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____floatscan.apply(null, arguments);
};

var real____fflush_unlocked = asm["___fflush_unlocked"]; asm["___fflush_unlocked"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____fflush_unlocked.apply(null, arguments);
};

var real__hashtable_do_rehash = asm["_hashtable_do_rehash"]; asm["_hashtable_do_rehash"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__hashtable_do_rehash.apply(null, arguments);
};

var real__crc24_generate_key = asm["_crc24_generate_key"]; asm["_crc24_generate_key"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__crc24_generate_key.apply(null, arguments);
};

var real__json_decref_1931 = asm["_json_decref_1931"]; asm["_json_decref_1931"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__json_decref_1931.apply(null, arguments);
};

var real__nco_crcf_create = asm["_nco_crcf_create"]; asm["_nco_crcf_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__nco_crcf_create.apply(null, arguments);
};

var real__fec_rep3_create = asm["_fec_rep3_create"]; asm["_fec_rep3_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_rep3_create.apply(null, arguments);
};

var real__ofdmflexframesync_decode_header = asm["_ofdmflexframesync_decode_header"]; asm["_ofdmflexframesync_decode_header"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmflexframesync_decode_header.apply(null, arguments);
};

var real__ring_read = asm["_ring_read"]; asm["_ring_read"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ring_read.apply(null, arguments);
};

var real__iirfilt_crcf_create = asm["_iirfilt_crcf_create"]; asm["_iirfilt_crcf_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__iirfilt_crcf_create.apply(null, arguments);
};

var real__qpilotsync_get_phi = asm["_qpilotsync_get_phi"]; asm["_qpilotsync_get_phi"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__qpilotsync_get_phi.apply(null, arguments);
};

var real__fec_golay2412_create = asm["_fec_golay2412_create"]; asm["_fec_golay2412_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_golay2412_create.apply(null, arguments);
};

var real__dispose_chunk = asm["_dispose_chunk"]; asm["_dispose_chunk"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__dispose_chunk.apply(null, arguments);
};

var real__ring_advance_reader = asm["_ring_advance_reader"]; asm["_ring_advance_reader"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ring_advance_reader.apply(null, arguments);
};

var real__list_init = asm["_list_init"]; asm["_list_init"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__list_init.apply(null, arguments);
};

var real__fec_hamming74_create = asm["_fec_hamming74_create"]; asm["_fec_hamming74_create"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_hamming74_create.apply(null, arguments);
};

var real__demodulator_destroy = asm["_demodulator_destroy"]; asm["_demodulator_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__demodulator_destroy.apply(null, arguments);
};

var real__liquid_pack_array = asm["_liquid_pack_array"]; asm["_liquid_pack_array"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_pack_array.apply(null, arguments);
};

var real__fft_run = asm["_fft_run"]; asm["_fft_run"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fft_run.apply(null, arguments);
};

var real__flexframesync_debug_enable = asm["_flexframesync_debug_enable"]; asm["_flexframesync_debug_enable"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__flexframesync_debug_enable.apply(null, arguments);
};

var real__bucket_is_empty = asm["_bucket_is_empty"]; asm["_bucket_is_empty"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bucket_is_empty.apply(null, arguments);
};

var real____ldexp_cexpf = asm["___ldexp_cexpf"]; asm["___ldexp_cexpf"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____ldexp_cexpf.apply(null, arguments);
};

var real__modem_create_apsk = asm["_modem_create_apsk"]; asm["_modem_create_apsk"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__modem_create_apsk.apply(null, arguments);
};

var real__ofdmflexframegen_getframelen = asm["_ofdmflexframegen_getframelen"]; asm["_ofdmflexframegen_getframelen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmflexframegen_getframelen.apply(null, arguments);
};

var real__jsonp_malloc = asm["_jsonp_malloc"]; asm["_jsonp_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__jsonp_malloc.apply(null, arguments);
};

var real__scanexp = asm["_scanexp"]; asm["_scanexp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__scanexp.apply(null, arguments);
};

var real__calloc = asm["_calloc"]; asm["_calloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__calloc.apply(null, arguments);
};

var real__fmax = asm["_fmax"]; asm["_fmax"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fmax.apply(null, arguments);
};

var real__iirfilt_crcf_create_prototype = asm["_iirfilt_crcf_create_prototype"]; asm["_iirfilt_crcf_create_prototype"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__iirfilt_crcf_create_prototype.apply(null, arguments);
};

var real__ofdmframe_init_S1 = asm["_ofdmframe_init_S1"]; asm["_ofdmframe_init_S1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmframe_init_S1.apply(null, arguments);
};

var real__ofdmframe_init_S0 = asm["_ofdmframe_init_S0"]; asm["_ofdmframe_init_S0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmframe_init_S0.apply(null, arguments);
};

var real__stream_init = asm["_stream_init"]; asm["_stream_init"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__stream_init.apply(null, arguments);
};

var real__ofdmflexframegen_write_header = asm["_ofdmflexframegen_write_header"]; asm["_ofdmflexframegen_write_header"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmflexframegen_write_header.apply(null, arguments);
};

var real__liquid_modpow = asm["_liquid_modpow"]; asm["_liquid_modpow"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_modpow.apply(null, arguments);
};

var real__strerror = asm["_strerror"]; asm["_strerror"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strerror.apply(null, arguments);
};

var real__strbuffer_value = asm["_strbuffer_value"]; asm["_strbuffer_value"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strbuffer_value.apply(null, arguments);
};

var real__packetizer_encode = asm["_packetizer_encode"]; asm["_packetizer_encode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__packetizer_encode.apply(null, arguments);
};

var real__qdetector_cccf_execute_align = asm["_qdetector_cccf_execute_align"]; asm["_qdetector_cccf_execute_align"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__qdetector_cccf_execute_align.apply(null, arguments);
};

var real__ofdmflexframegen_write_payload = asm["_ofdmflexframegen_write_payload"]; asm["_ofdmflexframegen_write_payload"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmflexframegen_write_payload.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__realloc.apply(null, arguments);
};

var real__gmskframesync_execute_rxpayload = asm["_gmskframesync_execute_rxpayload"]; asm["_gmskframesync_execute_rxpayload"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__gmskframesync_execute_rxpayload.apply(null, arguments);
};

var real__quiet_decoder_enable_stats = asm["_quiet_decoder_enable_stats"]; asm["_quiet_decoder_enable_stats"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__quiet_decoder_enable_stats.apply(null, arguments);
};

var real__fputs = asm["_fputs"]; asm["_fputs"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fputs.apply(null, arguments);
};

var real__strtod = asm["_strtod"]; asm["_strtod"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strtod.apply(null, arguments);
};

var real__strbuffer_append_bytes = asm["_strbuffer_append_bytes"]; asm["_strbuffer_append_bytes"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strbuffer_append_bytes.apply(null, arguments);
};

var real__quiet_decoder_disable_stats = asm["_quiet_decoder_disable_stats"]; asm["_quiet_decoder_disable_stats"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__quiet_decoder_disable_stats.apply(null, arguments);
};

var real__ofdmframegen_write_S1 = asm["_ofdmframegen_write_S1"]; asm["_ofdmframegen_write_S1"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ofdmframegen_write_S1.apply(null, arguments);
};

var real__firpfb_crcf_create_rnyquist = asm["_firpfb_crcf_create_rnyquist"]; asm["_firpfb_crcf_create_rnyquist"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__firpfb_crcf_create_rnyquist.apply(null, arguments);
};

var real__nco_crcf_step = asm["_nco_crcf_step"]; asm["_nco_crcf_step"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__nco_crcf_step.apply(null, arguments);
};

var real__flexframegen_set_header_len = asm["_flexframegen_set_header_len"]; asm["_flexframegen_set_header_len"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__flexframegen_set_header_len.apply(null, arguments);
};

var real__windowcf_clear = asm["_windowcf_clear"]; asm["_windowcf_clear"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__windowcf_clear.apply(null, arguments);
};

var real__fec_secded3932_encode = asm["_fec_secded3932_encode"]; asm["_fec_secded3932_encode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_secded3932_encode.apply(null, arguments);
};

var real__fec_encode = asm["_fec_encode"]; asm["_fec_encode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fec_encode.apply(null, arguments);
};

var real__liquid_firdes_arkaiser = asm["_liquid_firdes_arkaiser"]; asm["_liquid_firdes_arkaiser"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__liquid_firdes_arkaiser.apply(null, arguments);
};

var real__bitshift64Ashr = asm["_bitshift64Ashr"]; asm["_bitshift64Ashr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Ashr.apply(null, arguments);
};

var real__lex_unget_unsave = asm["_lex_unget_unsave"]; asm["_lex_unget_unsave"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lex_unget_unsave.apply(null, arguments);
};

var real__fft_execute_rader = asm["_fft_execute_rader"]; asm["_fft_execute_rader"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fft_execute_rader.apply(null, arguments);
};

var real____fwritex = asm["___fwritex"]; asm["___fwritex"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____fwritex.apply(null, arguments);
};

var real__qpacketmodem_get_crc = asm["_qpacketmodem_get_crc"]; asm["_qpacketmodem_get_crc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__qpacketmodem_get_crc.apply(null, arguments);
};
var _fec_hamming84_decode_soft = Module["_fec_hamming84_decode_soft"] = asm["_fec_hamming84_decode_soft"];
var _fec_hamming84_destroy = Module["_fec_hamming84_destroy"] = asm["_fec_hamming84_destroy"];
var _nco_crcf_set_frequency = Module["_nco_crcf_set_frequency"] = asm["_nco_crcf_set_frequency"];
var _crc_generate_key = Module["_crc_generate_key"] = asm["_crc_generate_key"];
var _firpfb_rrrf_reset = Module["_firpfb_rrrf_reset"] = asm["_firpfb_rrrf_reset"];
var _memchr = Module["_memchr"] = asm["_memchr"];
var _flexframegen_write_samples = Module["_flexframegen_write_samples"] = asm["_flexframegen_write_samples"];
var _strbuffer_append_byte = Module["_strbuffer_append_byte"] = asm["_strbuffer_append_byte"];
var _ellip_acdf = Module["_ellip_acdf"] = asm["_ellip_acdf"];
var _liquid_cacosf = Module["_liquid_cacosf"] = asm["_liquid_cacosf"];
var _lex_save_cached = Module["_lex_save_cached"] = asm["_lex_save_cached"];
var _fec_secded7264_encode = Module["_fec_secded7264_encode"] = asm["_fec_secded7264_encode"];
var _fft_create_plan_rader = Module["_fft_create_plan_rader"] = asm["_fft_create_plan_rader"];
var _fec_get_enc_msg_length = Module["_fec_get_enc_msg_length"] = asm["_fec_get_enc_msg_length"];
var _jsonp_stringn_nocheck_own = Module["_jsonp_stringn_nocheck_own"] = asm["_jsonp_stringn_nocheck_own"];
var _fec_hamming84_encode = Module["_fec_hamming84_encode"] = asm["_fec_hamming84_encode"];
var _ilogb = Module["_ilogb"] = asm["_ilogb"];
var _firpfb_rrrf_create_drnyquist = Module["_firpfb_rrrf_create_drnyquist"] = asm["_firpfb_rrrf_create_drnyquist"];
var _wdelayf_read = Module["_wdelayf_read"] = asm["_wdelayf_read"];
var _nco_crcf_mix_down = Module["_nco_crcf_mix_down"] = asm["_nco_crcf_mix_down"];
var _decoder_profile = Module["_decoder_profile"] = asm["_decoder_profile"];
var _ofdmframegen_write_S0b = Module["_ofdmframegen_write_S0b"] = asm["_ofdmframegen_write_S0b"];
var _ofdmframegen_write_S0a = Module["_ofdmframegen_write_S0a"] = asm["_ofdmframegen_write_S0a"];
var _ofdmframesync_rxsymbol = Module["_ofdmframesync_rxsymbol"] = asm["_ofdmframesync_rxsymbol"];
var _iirfilt_crcf_reset = Module["_iirfilt_crcf_reset"] = asm["_iirfilt_crcf_reset"];
var _gmskframesync_create = Module["_gmskframesync_create"] = asm["_gmskframesync_create"];
var _fec_block_get_enc_msg_len = Module["_fec_block_get_enc_msg_len"] = asm["_fec_block_get_enc_msg_len"];
var _vsprintf = Module["_vsprintf"] = asm["_vsprintf"];
var _modem_modulate_psk = Module["_modem_modulate_psk"] = asm["_modem_modulate_psk"];
var _puts = Module["_puts"] = asm["_puts"];
var _liquid_firdes_hM3 = Module["_liquid_firdes_hM3"] = asm["_liquid_firdes_hM3"];
var _liquid_reverse_uint24 = Module["_liquid_reverse_uint24"] = asm["_liquid_reverse_uint24"];
var _liquid_firdes_fnyquist = Module["_liquid_firdes_fnyquist"] = asm["_liquid_firdes_fnyquist"];
var _dotprod_cccf_execute = Module["_dotprod_cccf_execute"] = asm["_dotprod_cccf_execute"];
var _json_decref_1974 = Module["_json_decref_1974"] = asm["_json_decref_1974"];
var _qdetector_cccf_get_phi = Module["_qdetector_cccf_get_phi"] = asm["_qdetector_cccf_get_phi"];
var _polycf_expandroots = Module["_polycf_expandroots"] = asm["_polycf_expandroots"];
var _flexframegen_reconfigure = Module["_flexframegen_reconfigure"] = asm["_flexframegen_reconfigure"];
var _iirfilt_crcf_destroy = Module["_iirfilt_crcf_destroy"] = asm["_iirfilt_crcf_destroy"];
var _jsonp_free = Module["_jsonp_free"] = asm["_jsonp_free"];
var _modulator_symbol_len = Module["_modulator_symbol_len"] = asm["_modulator_symbol_len"];
var _pad = Module["_pad"] = asm["_pad"];
var _modem_modulate_qam = Module["_modem_modulate_qam"] = asm["_modem_modulate_qam"];
var _buf_to_uint32 = Module["_buf_to_uint32"] = asm["_buf_to_uint32"];
var _ofdmframe_validate_sctype = Module["_ofdmframe_validate_sctype"] = asm["_ofdmframe_validate_sctype"];
var _nco_crcf_compute_sincos_nco = Module["_nco_crcf_compute_sincos_nco"] = asm["_nco_crcf_compute_sincos_nco"];
var _json_array_append = Module["_json_array_append"] = asm["_json_array_append"];
var _qdetector_cccf_execute_seek = Module["_qdetector_cccf_execute_seek"] = asm["_qdetector_cccf_execute_seek"];
var _ccosf = Module["_ccosf"] = asm["_ccosf"];
var _ellip_cdf = Module["_ellip_cdf"] = asm["_ellip_cdf"];
var _nco_crcf_reset = Module["_nco_crcf_reset"] = asm["_nco_crcf_reset"];
var _quiet_decoder_checksum_fails = Module["_quiet_decoder_checksum_fails"] = asm["_quiet_decoder_checksum_fails"];
var _ofdmflexframesync_execute = Module["_ofdmflexframesync_execute"] = asm["_ofdmflexframesync_execute"];
var _resamp_rrrf_destroy = Module["_resamp_rrrf_destroy"] = asm["_resamp_rrrf_destroy"];
var _fec_secded7264_compute_syndrome = Module["_fec_secded7264_compute_syndrome"] = asm["_fec_secded7264_compute_syndrome"];
var _firinterp_crcf_execute = Module["_firinterp_crcf_execute"] = asm["_firinterp_crcf_execute"];
var _fft_execute_rader2 = Module["_fft_execute_rader2"] = asm["_fft_execute_rader2"];
var _modem_modulate_ask = Module["_modem_modulate_ask"] = asm["_modem_modulate_ask"];
var _liquid_firdes_rkaiser = Module["_liquid_firdes_rkaiser"] = asm["_liquid_firdes_rkaiser"];
var _firpfb_crcf_reset = Module["_firpfb_crcf_reset"] = asm["_firpfb_crcf_reset"];
var _liquid_firdes_rfsech = Module["_liquid_firdes_rfsech"] = asm["_liquid_firdes_rfsech"];
var _qdetector_cccf_get_buf_len = Module["_qdetector_cccf_get_buf_len"] = asm["_qdetector_cccf_get_buf_len"];
var ___towrite = Module["___towrite"] = asm["___towrite"];
var _ofdmflexframegen_create = Module["_ofdmflexframegen_create"] = asm["_ofdmflexframegen_create"];
var _liquid_nextpow2 = Module["_liquid_nextpow2"] = asm["_liquid_nextpow2"];
var _json_object_set_new_nocheck = Module["_json_object_set_new_nocheck"] = asm["_json_object_set_new_nocheck"];
var _liquid_firdes_fsech_freqresponse = Module["_liquid_firdes_fsech_freqresponse"] = asm["_liquid_firdes_fsech_freqresponse"];
var _modem_demodulate_dpsk = Module["_modem_demodulate_dpsk"] = asm["_modem_demodulate_dpsk"];
var _packetizer_destroy = Module["_packetizer_destroy"] = asm["_packetizer_destroy"];
var _qpilotsync_get_dphi = Module["_qpilotsync_get_dphi"] = asm["_qpilotsync_get_dphi"];
var _packetizer_recreate = Module["_packetizer_recreate"] = asm["_packetizer_recreate"];
var _packetizer_get_enc_msg_len = Module["_packetizer_get_enc_msg_len"] = asm["_packetizer_get_enc_msg_len"];
var ___strchrnul = Module["___strchrnul"] = asm["___strchrnul"];
var _flexframegen_getframelen = Module["_flexframegen_getframelen"] = asm["_flexframegen_getframelen"];
var _modem_demodulate_apsk = Module["_modem_demodulate_apsk"] = asm["_modem_demodulate_apsk"];
var _windowcf_create = Module["_windowcf_create"] = asm["_windowcf_create"];
var _flexframesync_execute_rxpreamble = Module["_flexframesync_execute_rxpreamble"] = asm["_flexframesync_execute_rxpreamble"];
var _ofdmflexframegen_destroy = Module["_ofdmflexframegen_destroy"] = asm["_ofdmflexframegen_destroy"];
var _fft_create_plan = Module["_fft_create_plan"] = asm["_fft_create_plan"];
var _encoder_profile = Module["_encoder_profile"] = asm["_encoder_profile"];
var _localeconv = Module["_localeconv"] = asm["_localeconv"];
var _matrixf_trans = Module["_matrixf_trans"] = asm["_matrixf_trans"];
var _firinterp_crcf_create = Module["_firinterp_crcf_create"] = asm["_firinterp_crcf_create"];
var _quiet_encoder_destroy = Module["_quiet_encoder_destroy"] = asm["_quiet_encoder_destroy"];
var _modem_demodulate = Module["_modem_demodulate"] = asm["_modem_demodulate"];
var _flexframegen_generate_symbol = Module["_flexframegen_generate_symbol"] = asm["_flexframegen_generate_symbol"];
var _fec_rep5_destroy = Module["_fec_rep5_destroy"] = asm["_fec_rep5_destroy"];
var _modem_recreate = Module["_modem_recreate"] = asm["_modem_recreate"];
var _flexframegen_create = Module["_flexframegen_create"] = asm["_flexframegen_create"];
var _firdespm_execute = Module["_firdespm_execute"] = asm["_firdespm_execute"];
var _json_false = Module["_json_false"] = asm["_json_false"];
var _resamp_rrrf_execute_output_block = Module["_resamp_rrrf_execute_output_block"] = asm["_resamp_rrrf_execute_output_block"];
var _json_object_get = Module["_json_object_get"] = asm["_json_object_get"];
var _liquid_msb_index = Module["_liquid_msb_index"] = asm["_liquid_msb_index"];
var _crc_validate_message = Module["_crc_validate_message"] = asm["_crc_validate_message"];
var _hashtable_do_clear = Module["_hashtable_do_clear"] = asm["_hashtable_do_clear"];
var _liquid_cplxpair_cleanup = Module["_liquid_cplxpair_cleanup"] = asm["_liquid_cplxpair_cleanup"];
var _json_integer_value = Module["_json_integer_value"] = asm["_json_integer_value"];
var _nco_crcf_destroy = Module["_nco_crcf_destroy"] = asm["_nco_crcf_destroy"];
var _gmskframegen_destroy = Module["_gmskframegen_destroy"] = asm["_gmskframegen_destroy"];
var _gmskframegen_getframelen = Module["_gmskframegen_getframelen"] = asm["_gmskframegen_getframelen"];
var _fec_rep3_decode = Module["_fec_rep3_decode"] = asm["_fec_rep3_decode"];
var _iirdes_dzpk2sosf = Module["_iirdes_dzpk2sosf"] = asm["_iirdes_dzpk2sosf"];
var _list_insert = Module["_list_insert"] = asm["_list_insert"];
var _fec_golay2412_decode = Module["_fec_golay2412_decode"] = asm["_fec_golay2412_decode"];
var _ofdmframesync_estimate_gain_S1 = Module["_ofdmframesync_estimate_gain_S1"] = asm["_ofdmframesync_estimate_gain_S1"];
var _ofdmframesync_estimate_gain_S0 = Module["_ofdmframesync_estimate_gain_S0"] = asm["_ofdmframesync_estimate_gain_S0"];
var _strtoll = Module["_strtoll"] = asm["_strtoll"];
var _fec_secded7264_decode = Module["_fec_secded7264_decode"] = asm["_fec_secded7264_decode"];
var ___uflow = Module["___uflow"] = asm["___uflow"];
var _fec_secded2216_decode = Module["_fec_secded2216_decode"] = asm["_fec_secded2216_decode"];
var _liquid_Qf = Module["_liquid_Qf"] = asm["_liquid_Qf"];
var _demodulator_recv = Module["_demodulator_recv"] = asm["_demodulator_recv"];
var _matrixf_hermitian = Module["_matrixf_hermitian"] = asm["_matrixf_hermitian"];
var _stream_get = Module["_stream_get"] = asm["_stream_get"];
var _json_number_value = Module["_json_number_value"] = asm["_json_number_value"];
var _fec_hamming128_decode_symbol = Module["_fec_hamming128_decode_symbol"] = asm["_fec_hamming128_decode_symbol"];
var _modem_demodulate_arb = Module["_modem_demodulate_arb"] = asm["_modem_demodulate_arb"];
var ___stdio_seek = Module["___stdio_seek"] = asm["___stdio_seek"];
var _conj = Module["_conj"] = asm["_conj"];
var _scramble_data = Module["_scramble_data"] = asm["_scramble_data"];
var _msequence_reset = Module["_msequence_reset"] = asm["_msequence_reset"];
var _quiet_encoder_profile_str = Module["_quiet_encoder_profile_str"] = asm["_quiet_encoder_profile_str"];
var _pop_arg = Module["_pop_arg"] = asm["_pop_arg"];
var _json_array_append_new = Module["_json_array_append_new"] = asm["_json_array_append_new"];
var _iirfilt_crcf_create_dc_blocker = Module["_iirfilt_crcf_create_dc_blocker"] = asm["_iirfilt_crcf_create_dc_blocker"];
var _lex_close = Module["_lex_close"] = asm["_lex_close"];
var _firpfb_crcf_create = Module["_firpfb_crcf_create"] = asm["_firpfb_crcf_create"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _firinterp_crcf_reset = Module["_firinterp_crcf_reset"] = asm["_firinterp_crcf_reset"];
var _fopen = Module["_fopen"] = asm["_fopen"];
var _msequence_destroy = Module["_msequence_destroy"] = asm["_msequence_destroy"];
var ___mulsc3 = Module["___mulsc3"] = asm["___mulsc3"];
var _ofdmflexframesync_debug_print = Module["_ofdmflexframesync_debug_print"] = asm["_ofdmflexframesync_debug_print"];
var _dotprod_cccf_create = Module["_dotprod_cccf_create"] = asm["_dotprod_cccf_create"];
var _ofdmframesync_reset = Module["_ofdmframesync_reset"] = asm["_ofdmframesync_reset"];
var _packetizer_create = Module["_packetizer_create"] = asm["_packetizer_create"];
var _quiet_decoder_recv = Module["_quiet_decoder_recv"] = asm["_quiet_decoder_recv"];
var _gmskframegen_create = Module["_gmskframegen_create"] = asm["_gmskframegen_create"];
var _unscramble_data = Module["_unscramble_data"] = asm["_unscramble_data"];
var _liquid_reverse_uint16 = Module["_liquid_reverse_uint16"] = asm["_liquid_reverse_uint16"];
var _flexframegen_is_assembled = Module["_flexframegen_is_assembled"] = asm["_flexframegen_is_assembled"];
var _fec_secded7264_compute_parity = Module["_fec_secded7264_compute_parity"] = asm["_fec_secded7264_compute_parity"];
var _gmskmod_modulate = Module["_gmskmod_modulate"] = asm["_gmskmod_modulate"];
var _gmskframesync_execute_rxpreamble = Module["_gmskframesync_execute_rxpreamble"] = asm["_gmskframesync_execute_rxpreamble"];
var _fec_conv_init_v27 = Module["_fec_conv_init_v27"] = asm["_fec_conv_init_v27"];
var _ring_write = Module["_ring_write"] = asm["_ring_write"];
var _fec_conv_init_v29 = Module["_fec_conv_init_v29"] = asm["_fec_conv_init_v29"];
var _fec_secded3932_estimate_ehat = Module["_fec_secded3932_estimate_ehat"] = asm["_fec_secded3932_estimate_ehat"];
var _erfc2_142 = Module["_erfc2_142"] = asm["_erfc2_142"];
var _fec_conv_punctured_create = Module["_fec_conv_punctured_create"] = asm["_fec_conv_punctured_create"];
var _modem_demodulate_sqam128 = Module["_modem_demodulate_sqam128"] = asm["_modem_demodulate_sqam128"];
var _fec_pass_create = Module["_fec_pass_create"] = asm["_fec_pass_create"];
var _interleaver_decode = Module["_interleaver_decode"] = asm["_interleaver_decode"];
var _strtox_519 = Module["_strtox_519"] = asm["_strtox_519"];
var ___lockfile = Module["___lockfile"] = asm["___lockfile"];
var _log10 = Module["_log10"] = asm["_log10"];
var _fec_conv_decode_hard = Module["_fec_conv_decode_hard"] = asm["_fec_conv_decode_hard"];
var _fec_rs_encode = Module["_fec_rs_encode"] = asm["_fec_rs_encode"];
var _detector_cccf_destroy = Module["_detector_cccf_destroy"] = asm["_detector_cccf_destroy"];
var _cexpf = Module["_cexpf"] = asm["_cexpf"];
var _modem_get_demodulator_evm = Module["_modem_get_demodulator_evm"] = asm["_modem_get_demodulator_evm"];
var _modem_demodulate_sqam32 = Module["_modem_demodulate_sqam32"] = asm["_modem_demodulate_sqam32"];
var _modem_init_map = Module["_modem_init_map"] = asm["_modem_init_map"];
var ___DOUBLE_BITS = Module["___DOUBLE_BITS"] = asm["___DOUBLE_BITS"];
var _firdespm_init_grid = Module["_firdespm_init_grid"] = asm["_firdespm_init_grid"];
var _modem_gen_rand_sym = Module["_modem_gen_rand_sym"] = asm["_modem_gen_rand_sym"];
var _liquid_filter_isi = Module["_liquid_filter_isi"] = asm["_liquid_filter_isi"];
var _demodulator_flush = Module["_demodulator_flush"] = asm["_demodulator_flush"];
var _gmskmod_destroy = Module["_gmskmod_destroy"] = asm["_gmskmod_destroy"];
var _firpfb_crcf_execute = Module["_firpfb_crcf_execute"] = asm["_firpfb_crcf_execute"];
var _liquid_firdes_fsech = Module["_liquid_firdes_fsech"] = asm["_liquid_firdes_fsech"];
var _crc_get_length = Module["_crc_get_length"] = asm["_crc_get_length"];
var _qpacketmodem_destroy = Module["_qpacketmodem_destroy"] = asm["_qpacketmodem_destroy"];
var _qdetector_cccf_create = Module["_qdetector_cccf_create"] = asm["_qdetector_cccf_create"];
var _lex_scan_string = Module["_lex_scan_string"] = asm["_lex_scan_string"];
var _ofdmflexframesync_rxheader = Module["_ofdmflexframesync_rxheader"] = asm["_ofdmflexframesync_rxheader"];
var _fpoly_bessel_roots_orchard_recursion = Module["_fpoly_bessel_roots_orchard_recursion"] = asm["_fpoly_bessel_roots_orchard_recursion"];
var _wcrtomb = Module["_wcrtomb"] = asm["_wcrtomb"];
var _modulator_create = Module["_modulator_create"] = asm["_modulator_create"];
var _windowf_read = Module["_windowf_read"] = asm["_windowf_read"];
var _fft_create_plan_mixed_radix = Module["_fft_create_plan_mixed_radix"] = asm["_fft_create_plan_mixed_radix"];
var _butter_azpkf = Module["_butter_azpkf"] = asm["_butter_azpkf"];
var _hashlittle = Module["_hashlittle"] = asm["_hashlittle"];
var _ofdmframegen_writesymbol = Module["_ofdmframegen_writesymbol"] = asm["_ofdmframegen_writesymbol"];
var _modem_modulate_dpsk = Module["_modem_modulate_dpsk"] = asm["_modem_modulate_dpsk"];
var _modem_modulate_sqam128 = Module["_modem_modulate_sqam128"] = asm["_modem_modulate_sqam128"];
var _ofdmframesync_execute_S1 = Module["_ofdmframesync_execute_S1"] = asm["_ofdmframesync_execute_S1"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var ___muldc3 = Module["___muldc3"] = asm["___muldc3"];
var _modem_modulate_ook = Module["_modem_modulate_ook"] = asm["_modem_modulate_ook"];
var _liquid_firdes_gmsktx = Module["_liquid_firdes_gmsktx"] = asm["_liquid_firdes_gmsktx"];
var _quiet_decoder_destroy = Module["_quiet_decoder_destroy"] = asm["_quiet_decoder_destroy"];
var _hashtable_set = Module["_hashtable_set"] = asm["_hashtable_set"];
var _cleanup_382 = Module["_cleanup_382"] = asm["_cleanup_382"];
var _qdetector_cccf_execute = Module["_qdetector_cccf_execute"] = asm["_qdetector_cccf_execute"];
var _cleanup_387 = Module["_cleanup_387"] = asm["_cleanup_387"];
var _gmskframesync_set_header_len = Module["_gmskframesync_set_header_len"] = asm["_gmskframesync_set_header_len"];
var _firdespm_destroy = Module["_firdespm_destroy"] = asm["_firdespm_destroy"];
var ___divdc3 = Module["___divdc3"] = asm["___divdc3"];
var _json_integer = Module["_json_integer"] = asm["_json_integer"];
var _liquid_getopt_str2mod = Module["_liquid_getopt_str2mod"] = asm["_liquid_getopt_str2mod"];
var _ofdmframe_init_default_sctype = Module["_ofdmframe_init_default_sctype"] = asm["_ofdmframe_init_default_sctype"];
var _nco_crcf_adjust_frequency = Module["_nco_crcf_adjust_frequency"] = asm["_nco_crcf_adjust_frequency"];
var _liquid_firdes_rkaiser_quadratic = Module["_liquid_firdes_rkaiser_quadratic"] = asm["_liquid_firdes_rkaiser_quadratic"];
var _windowf_create = Module["_windowf_create"] = asm["_windowf_create"];
var _flexframesync_execute_rxheader = Module["_flexframesync_execute_rxheader"] = asm["_flexframesync_execute_rxheader"];
var _ofdmframesync_debug_print = Module["_ofdmframesync_debug_print"] = asm["_ofdmframesync_debug_print"];
var _ofdmframesync_get_rssi = Module["_ofdmframesync_get_rssi"] = asm["_ofdmframesync_get_rssi"];
var _qdetector_cccf_destroy = Module["_qdetector_cccf_destroy"] = asm["_qdetector_cccf_destroy"];
var _nco_crcf_set_phase = Module["_nco_crcf_set_phase"] = asm["_nco_crcf_set_phase"];
var _ofdmframesync_destroy = Module["_ofdmframesync_destroy"] = asm["_ofdmframesync_destroy"];
var _gmskframegen_write_samples = Module["_gmskframegen_write_samples"] = asm["_gmskframegen_write_samples"];
var _jsonp_strndup = Module["_jsonp_strndup"] = asm["_jsonp_strndup"];
var ___fmodeflags = Module["___fmodeflags"] = asm["___fmodeflags"];
var _rand = Module["_rand"] = asm["_rand"];
var _json_init = Module["_json_init"] = asm["_json_init"];
var _gmskframesync_debug_enable = Module["_gmskframesync_debug_enable"] = asm["_gmskframesync_debug_enable"];
var _free = Module["_free"] = asm["_free"];
var _scalbn = Module["_scalbn"] = asm["_scalbn"];
var _qpacketmodem_get_frame_len = Module["_qpacketmodem_get_frame_len"] = asm["_qpacketmodem_get_frame_len"];
var _iirdes_dzpk2tff = Module["_iirdes_dzpk2tff"] = asm["_iirdes_dzpk2tff"];
var _liquid_firdes_gmskrx = Module["_liquid_firdes_gmskrx"] = asm["_liquid_firdes_gmskrx"];
var _flexframesync_execute_seekpn = Module["_flexframesync_execute_seekpn"] = asm["_flexframesync_execute_seekpn"];
var _gmskframesync_destroy = Module["_gmskframesync_destroy"] = asm["_gmskframesync_destroy"];
var _quiet_decoder_flush = Module["_quiet_decoder_flush"] = asm["_quiet_decoder_flush"];
var _modem_get_scheme = Module["_modem_get_scheme"] = asm["_modem_get_scheme"];
var _dotprod_cccf_destroy = Module["_dotprod_cccf_destroy"] = asm["_dotprod_cccf_destroy"];
var _error_set = Module["_error_set"] = asm["_error_set"];
var _flexframesync_debug_print = Module["_flexframesync_debug_print"] = asm["_flexframesync_debug_print"];
var _fft_execute_mixed_radix = Module["_fft_execute_mixed_radix"] = asm["_fft_execute_mixed_radix"];
var _liquid_firdes_kaiser = Module["_liquid_firdes_kaiser"] = asm["_liquid_firdes_kaiser"];
var _ofdmflexframesync_create = Module["_ofdmflexframesync_create"] = asm["_ofdmflexframesync_create"];
var _demodulator_flush_symbol_len = Module["_demodulator_flush_symbol_len"] = asm["_demodulator_flush_symbol_len"];
var _fecsoft_hamming74_decode = Module["_fecsoft_hamming74_decode"] = asm["_fecsoft_hamming74_decode"];
var _cheby1_azpkf = Module["_cheby1_azpkf"] = asm["_cheby1_azpkf"];
var _fft_execute_dft_16 = Module["_fft_execute_dft_16"] = asm["_fft_execute_dft_16"];
var _qdetector_cccf_reset = Module["_qdetector_cccf_reset"] = asm["_qdetector_cccf_reset"];
var _csinhf = Module["_csinhf"] = asm["_csinhf"];
var ___unlockfile = Module["___unlockfile"] = asm["___unlockfile"];
var _interleaver_set_depth = Module["_interleaver_set_depth"] = asm["_interleaver_set_depth"];
var _firdespm_run = Module["_firdespm_run"] = asm["_firdespm_run"];
var _nco_crcf_get_frequency = Module["_nco_crcf_get_frequency"] = asm["_nco_crcf_get_frequency"];
var _fec_hamming84_create = Module["_fec_hamming84_create"] = asm["_fec_hamming84_create"];
var _firpfb_rrrf_execute = Module["_firpfb_rrrf_execute"] = asm["_firpfb_rrrf_execute"];
var _firinterp_rrrf_reset = Module["_firinterp_rrrf_reset"] = asm["_firinterp_rrrf_reset"];
var _getpid = Module["_getpid"] = asm["_getpid"];
var _fec_pass_decode = Module["_fec_pass_decode"] = asm["_fec_pass_decode"];
var _div = Module["_div"] = asm["_div"];
var _modulator_flush = Module["_modulator_flush"] = asm["_modulator_flush"];
var _quiet_encoder_clamp_frame_len = Module["_quiet_encoder_clamp_frame_len"] = asm["_quiet_encoder_clamp_frame_len"];
var _ofdmframesync_estimate_eqgain_poly = Module["_ofdmframesync_estimate_eqgain_poly"] = asm["_ofdmframesync_estimate_eqgain_poly"];
var _utf8_check_first = Module["_utf8_check_first"] = asm["_utf8_check_first"];
var _json_object = Module["_json_object"] = asm["_json_object"];
var _flexframesync_create = Module["_flexframesync_create"] = asm["_flexframesync_create"];
var _fec_destroy = Module["_fec_destroy"] = asm["_fec_destroy"];
var _modem_demodulate_ook = Module["_modem_demodulate_ook"] = asm["_modem_demodulate_ook"];
var _logb = Module["_logb"] = asm["_logb"];
var _windowf_push = Module["_windowf_push"] = asm["_windowf_push"];
var _fwrite = Module["_fwrite"] = asm["_fwrite"];
var _fec_secded7264_create = Module["_fec_secded7264_create"] = asm["_fec_secded7264_create"];
var _modem_get_bps = Module["_modem_get_bps"] = asm["_modem_get_bps"];
var _qpacketmodem_decode = Module["_qpacketmodem_decode"] = asm["_qpacketmodem_decode"];
var _fec_secded7264_decode_symbol = Module["_fec_secded7264_decode_symbol"] = asm["_fec_secded7264_decode_symbol"];
var _firdecim_crcf_create = Module["_firdecim_crcf_create"] = asm["_firdecim_crcf_create"];
var _fpoly_bessel_roots_orchard = Module["_fpoly_bessel_roots_orchard"] = asm["_fpoly_bessel_roots_orchard"];
var _interleaver_encode = Module["_interleaver_encode"] = asm["_interleaver_encode"];
var _bilinear_zpkf = Module["_bilinear_zpkf"] = asm["_bilinear_zpkf"];
var _json_delete_real = Module["_json_delete_real"] = asm["_json_delete_real"];
var _modem_demodulate_qpsk = Module["_modem_demodulate_qpsk"] = asm["_modem_demodulate_qpsk"];
var _to_locale = Module["_to_locale"] = asm["_to_locale"];
var _windowf_destroy = Module["_windowf_destroy"] = asm["_windowf_destroy"];
var _fec_hamming128_destroy = Module["_fec_hamming128_destroy"] = asm["_fec_hamming128_destroy"];
var _interleaver_create = Module["_interleaver_create"] = asm["_interleaver_create"];
var _vfprintf = Module["_vfprintf"] = asm["_vfprintf"];
var _liquid_unpack_bytes = Module["_liquid_unpack_bytes"] = asm["_liquid_unpack_bytes"];
var _ellip_snf = Module["_ellip_snf"] = asm["_ellip_snf"];
var _iirdes_dzpk_lp2bp = Module["_iirdes_dzpk_lp2bp"] = asm["_iirdes_dzpk_lp2bp"];
var _modem_demodulate_ask = Module["_modem_demodulate_ask"] = asm["_modem_demodulate_ask"];
var _firinterp_crcf_destroy = Module["_firinterp_crcf_destroy"] = asm["_firinterp_crcf_destroy"];
var _fec_hamming128_create = Module["_fec_hamming128_create"] = asm["_fec_hamming128_create"];
var _qpacketmodem_get_fec0 = Module["_qpacketmodem_get_fec0"] = asm["_qpacketmodem_get_fec0"];
var _qpacketmodem_get_fec1 = Module["_qpacketmodem_get_fec1"] = asm["_qpacketmodem_get_fec1"];
var _gmskmod_reset = Module["_gmskmod_reset"] = asm["_gmskmod_reset"];
var _poly_val_lagrange_barycentric = Module["_poly_val_lagrange_barycentric"] = asm["_poly_val_lagrange_barycentric"];
var _snprintf = Module["_snprintf"] = asm["_snprintf"];
var _parse_object = Module["_parse_object"] = asm["_parse_object"];
var _matrixf_gjelim = Module["_matrixf_gjelim"] = asm["_matrixf_gjelim"];
var _liquid_firdes_fexp = Module["_liquid_firdes_fexp"] = asm["_liquid_firdes_fexp"];
var _lex_scan = Module["_lex_scan"] = asm["_lex_scan"];
var _json_delete_integer = Module["_json_delete_integer"] = asm["_json_delete_integer"];
var _msequence_create = Module["_msequence_create"] = asm["_msequence_create"];
var _modem_modulate_arb = Module["_modem_modulate_arb"] = asm["_modem_modulate_arb"];
var _fec_rep5_decode = Module["_fec_rep5_decode"] = asm["_fec_rep5_decode"];
var _detector_cccf_create = Module["_detector_cccf_create"] = asm["_detector_cccf_create"];
var _modem_create_qam = Module["_modem_create_qam"] = asm["_modem_create_qam"];
var _iirfilt_crcf_create_lowpass = Module["_iirfilt_crcf_create_lowpass"] = asm["_iirfilt_crcf_create_lowpass"];
var _modem_demodulate_qam = Module["_modem_demodulate_qam"] = asm["_modem_demodulate_qam"];
var _lex_save = Module["_lex_save"] = asm["_lex_save"];
var _modem_modulate = Module["_modem_modulate"] = asm["_modem_modulate"];
var _quiet_decoder_consume = Module["_quiet_decoder_consume"] = asm["_quiet_decoder_consume"];
var _modem_demodulate_bpsk = Module["_modem_demodulate_bpsk"] = asm["_modem_demodulate_bpsk"];
var _string_create = Module["_string_create"] = asm["_string_create"];
var _fec_rep5_encode = Module["_fec_rep5_encode"] = asm["_fec_rep5_encode"];
var _frexpl = Module["_frexpl"] = asm["_frexpl"];
var _windowcf_destroy = Module["_windowcf_destroy"] = asm["_windowcf_destroy"];
var _flexframegen_reset = Module["_flexframegen_reset"] = asm["_flexframegen_reset"];
var _modem_create_psk = Module["_modem_create_psk"] = asm["_modem_create_psk"];
var _fec_secded7264_destroy = Module["_fec_secded7264_destroy"] = asm["_fec_secded7264_destroy"];
var _liquid_besseli0f = Module["_liquid_besseli0f"] = asm["_liquid_besseli0f"];
var _isspace = Module["_isspace"] = asm["_isspace"];
var _cheby2_azpkf = Module["_cheby2_azpkf"] = asm["_cheby2_azpkf"];
var _liquid_firdes_farcsech_freqresponse = Module["_liquid_firdes_farcsech_freqresponse"] = asm["_liquid_firdes_farcsech_freqresponse"];
var _fec_rep3_decode_soft = Module["_fec_rep3_decode_soft"] = asm["_fec_rep3_decode_soft"];
var _modulator_reset = Module["_modulator_reset"] = asm["_modulator_reset"];
var _ring_create = Module["_ring_create"] = asm["_ring_create"];
var _quiet_encoder_get_frame_len = Module["_quiet_encoder_get_frame_len"] = asm["_quiet_encoder_get_frame_len"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _packetizer_get_fec1 = Module["_packetizer_get_fec1"] = asm["_packetizer_get_fec1"];
var _packetizer_get_fec0 = Module["_packetizer_get_fec0"] = asm["_packetizer_get_fec0"];
var _fec_pass_encode = Module["_fec_pass_encode"] = asm["_fec_pass_encode"];
var _msequence_advance = Module["_msequence_advance"] = asm["_msequence_advance"];
var _firpfb_rrrf_create = Module["_firpfb_rrrf_create"] = asm["_firpfb_rrrf_create"];
var _qpilotgen_destroy = Module["_qpilotgen_destroy"] = asm["_qpilotgen_destroy"];
var _fecsoft_hamming128_decode_n3 = Module["_fecsoft_hamming128_decode_n3"] = asm["_fecsoft_hamming128_decode_n3"];
var _dotprod_crcf_execute = Module["_dotprod_crcf_execute"] = asm["_dotprod_crcf_execute"];
var _ofdmframegen_reset = Module["_ofdmframegen_reset"] = asm["_ofdmframegen_reset"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _json_real = Module["_json_real"] = asm["_json_real"];
var _firinterp_rrrf_execute = Module["_firinterp_rrrf_execute"] = asm["_firinterp_rrrf_execute"];
var _liquid_sumsqcf = Module["_liquid_sumsqcf"] = asm["_liquid_sumsqcf"];
var _qdetector_cccf_create_linear = Module["_qdetector_cccf_create_linear"] = asm["_qdetector_cccf_create_linear"];
var ___FLOAT_BITS = Module["___FLOAT_BITS"] = asm["___FLOAT_BITS"];
var _parse_array = Module["_parse_array"] = asm["_parse_array"];
var _dotprod_crcf_destroy = Module["_dotprod_crcf_destroy"] = asm["_dotprod_crcf_destroy"];
var _ofdmframesync_create = Module["_ofdmframesync_create"] = asm["_ofdmframesync_create"];
var _detector_cccf_correlate = Module["_detector_cccf_correlate"] = asm["_detector_cccf_correlate"];
var ___expo2f = Module["___expo2f"] = asm["___expo2f"];
var _scalbnl = Module["_scalbnl"] = asm["_scalbnl"];
var _expm1f = Module["_expm1f"] = asm["_expm1f"];
var _coshf = Module["_coshf"] = asm["_coshf"];
var _firpfb_crcf_push = Module["_firpfb_crcf_push"] = asm["_firpfb_crcf_push"];
var _fec_conv_punctured_destroy = Module["_fec_conv_punctured_destroy"] = asm["_fec_conv_punctured_destroy"];
var _scalbnf = Module["_scalbnf"] = asm["_scalbnf"];
var _gmskframegen_write_preamble = Module["_gmskframegen_write_preamble"] = asm["_gmskframegen_write_preamble"];
var _flexframesync_set_header_len = Module["_flexframesync_set_header_len"] = asm["_flexframesync_set_header_len"];
var _qpacketmodem_create = Module["_qpacketmodem_create"] = asm["_qpacketmodem_create"];
var _utf8_check_full = Module["_utf8_check_full"] = asm["_utf8_check_full"];
var _flexframesync_execute = Module["_flexframesync_execute"] = asm["_flexframesync_execute"];
var _resamp_rrrf_create = Module["_resamp_rrrf_create"] = asm["_resamp_rrrf_create"];
var _flexframesync_execute_rxpayload = Module["_flexframesync_execute_rxpayload"] = asm["_flexframesync_execute_rxpayload"];
var _json_delete_string = Module["_json_delete_string"] = asm["_json_delete_string"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _fec_hamming84_decode = Module["_fec_hamming84_decode"] = asm["_fec_hamming84_decode"];
var _strcmp = Module["_strcmp"] = asm["_strcmp"];
var _fec_secded2216_encode = Module["_fec_secded2216_encode"] = asm["_fec_secded2216_encode"];
var _ofdmframesync_execute_rxsymbols = Module["_ofdmframesync_execute_rxsymbols"] = asm["_ofdmframesync_execute_rxsymbols"];
var _copysign = Module["_copysign"] = asm["_copysign"];
var _csqrtf = Module["_csqrtf"] = asm["_csqrtf"];
var _printf_core = Module["_printf_core"] = asm["_printf_core"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _liquid_lngammaf = Module["_liquid_lngammaf"] = asm["_liquid_lngammaf"];
var _qdetector_cccf_get_dphi = Module["_qdetector_cccf_get_dphi"] = asm["_qdetector_cccf_get_dphi"];
var _gray_encode = Module["_gray_encode"] = asm["_gray_encode"];
var _ofdmflexframesync_rxpayload = Module["_ofdmflexframesync_rxpayload"] = asm["_ofdmflexframesync_rxpayload"];
var _hamming = Module["_hamming"] = asm["_hamming"];
var _ofdmflexframegen_set_header_len = Module["_ofdmflexframegen_set_header_len"] = asm["_ofdmflexframegen_set_header_len"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _ofdmflexframesync_destroy = Module["_ofdmflexframesync_destroy"] = asm["_ofdmflexframesync_destroy"];
var _json_decref = Module["_json_decref"] = asm["_json_decref"];
var _gmskframesync_update_symsync = Module["_gmskframesync_update_symsync"] = asm["_gmskframesync_update_symsync"];
var _strbuffer_pop = Module["_strbuffer_pop"] = asm["_strbuffer_pop"];
var _modulator_flush_sample_len = Module["_modulator_flush_sample_len"] = asm["_modulator_flush_sample_len"];
var _fec_conv_encode = Module["_fec_conv_encode"] = asm["_fec_conv_encode"];
var _flexframegen_setprops = Module["_flexframegen_setprops"] = asm["_flexframegen_setprops"];
var _fec_hamming74_destroy = Module["_fec_hamming74_destroy"] = asm["_fec_hamming74_destroy"];
var _json_delete_object = Module["_json_delete_object"] = asm["_json_delete_object"];
var _strncpy = Module["_strncpy"] = asm["_strncpy"];
var _liquid_csqrtf = Module["_liquid_csqrtf"] = asm["_liquid_csqrtf"];
var _conjf = Module["_conjf"] = asm["_conjf"];
var _hashtable_init = Module["_hashtable_init"] = asm["_hashtable_init"];
var ___stpncpy = Module["___stpncpy"] = asm["___stpncpy"];
var _liquid_modem_is_apsk = Module["_liquid_modem_is_apsk"] = asm["_liquid_modem_is_apsk"];
var _gmskframegen_write_tail = Module["_gmskframegen_write_tail"] = asm["_gmskframegen_write_tail"];
var _ofdmflexframegen_assemble = Module["_ofdmflexframegen_assemble"] = asm["_ofdmflexframegen_assemble"];
var _json_null = Module["_json_null"] = asm["_json_null"];
var _msequence_generate_symbol = Module["_msequence_generate_symbol"] = asm["_msequence_generate_symbol"];
var _modem_modulate_apsk = Module["_modem_modulate_apsk"] = asm["_modem_modulate_apsk"];
var _fft_create_plan_rader2 = Module["_fft_create_plan_rader2"] = asm["_fft_create_plan_rader2"];
var _ofdmframegen_create = Module["_ofdmframegen_create"] = asm["_ofdmframegen_create"];
var _liquid_firdes_rcos = Module["_liquid_firdes_rcos"] = asm["_liquid_firdes_rcos"];
var _flexframegen_destroy = Module["_flexframegen_destroy"] = asm["_flexframegen_destroy"];
var _liquid_firdes_farcsech = Module["_liquid_firdes_farcsech"] = asm["_liquid_firdes_farcsech"];
var ___stdio_write = Module["___stdio_write"] = asm["___stdio_write"];
var _fec_rep3_destroy = Module["_fec_rep3_destroy"] = asm["_fec_rep3_destroy"];
var _nco_crcf_mix_up = Module["_nco_crcf_mix_up"] = asm["_nco_crcf_mix_up"];
var ___stdio_close = Module["___stdio_close"] = asm["___stdio_close"];
var _firdespm_compute_interp = Module["_firdespm_compute_interp"] = asm["_firdespm_compute_interp"];
var _jsonp_error_vset = Module["_jsonp_error_vset"] = asm["_jsonp_error_vset"];
var _ofdmflexframesync_internal_callback = Module["_ofdmflexframesync_internal_callback"] = asm["_ofdmflexframesync_internal_callback"];
var _quiet_encoder_create = Module["_quiet_encoder_create"] = asm["_quiet_encoder_create"];
var _polyf_fit = Module["_polyf_fit"] = asm["_polyf_fit"];
var _matrixf_inv = Module["_matrixf_inv"] = asm["_matrixf_inv"];
var _qpilotgen_get_frame_len = Module["_qpilotgen_get_frame_len"] = asm["_qpilotgen_get_frame_len"];
var _ofdmframesync_execute_seekplcp = Module["_ofdmframesync_execute_seekplcp"] = asm["_ofdmframesync_execute_seekplcp"];
var ___shgetc = Module["___shgetc"] = asm["___shgetc"];
var _qpilotsync_destroy = Module["_qpilotsync_destroy"] = asm["_qpilotsync_destroy"];
var _ofdmflexframegen_setprops = Module["_ofdmflexframegen_setprops"] = asm["_ofdmflexframegen_setprops"];
var _gmskframesync_execute = Module["_gmskframesync_execute"] = asm["_gmskframesync_execute"];
var _firpfb_crcf_set_scale = Module["_firpfb_crcf_set_scale"] = asm["_firpfb_crcf_set_scale"];
var _firpfb_rrrf_destroy = Module["_firpfb_rrrf_destroy"] = asm["_firpfb_rrrf_destroy"];
var _fft_execute_dft_5 = Module["_fft_execute_dft_5"] = asm["_fft_execute_dft_5"];
var _fft_execute_dft_4 = Module["_fft_execute_dft_4"] = asm["_fft_execute_dft_4"];
var _fft_execute_dft_7 = Module["_fft_execute_dft_7"] = asm["_fft_execute_dft_7"];
var _fft_execute_dft_6 = Module["_fft_execute_dft_6"] = asm["_fft_execute_dft_6"];
var _liquid_modem_is_dpsk = Module["_liquid_modem_is_dpsk"] = asm["_liquid_modem_is_dpsk"];
var _fft_execute_dft_3 = Module["_fft_execute_dft_3"] = asm["_fft_execute_dft_3"];
var _fft_execute_dft_2 = Module["_fft_execute_dft_2"] = asm["_fft_execute_dft_2"];
var _strbuffer_clear = Module["_strbuffer_clear"] = asm["_strbuffer_clear"];
var _ilogbf = Module["_ilogbf"] = asm["_ilogbf"];
var _fft_execute_dft_8 = Module["_fft_execute_dft_8"] = asm["_fft_execute_dft_8"];
var _liquid_vectorcf_mulscalar = Module["_liquid_vectorcf_mulscalar"] = asm["_liquid_vectorcf_mulscalar"];
var _fec_hamming128_decode_soft = Module["_fec_hamming128_decode_soft"] = asm["_fec_hamming128_decode_soft"];
var _packetizer_get_crc = Module["_packetizer_get_crc"] = asm["_packetizer_get_crc"];
var _liquid_firdes_rrcos = Module["_liquid_firdes_rrcos"] = asm["_liquid_firdes_rrcos"];
var _cargf = Module["_cargf"] = asm["_cargf"];
var _fec_hamming74_encode = Module["_fec_hamming74_encode"] = asm["_fec_hamming74_encode"];
var _ring_destroy = Module["_ring_destroy"] = asm["_ring_destroy"];
var _ellipkf = Module["_ellipkf"] = asm["_ellipkf"];
var _lex_scan_number = Module["_lex_scan_number"] = asm["_lex_scan_number"];
var _iirfilt_crcf_execute = Module["_iirfilt_crcf_execute"] = asm["_iirfilt_crcf_execute"];
var _fft_create_plan_dft = Module["_fft_create_plan_dft"] = asm["_fft_create_plan_dft"];
var _gmskframesync_execute_rxheader = Module["_gmskframesync_execute_rxheader"] = asm["_gmskframesync_execute_rxheader"];
var _fec_secded2216_estimate_ehat = Module["_fec_secded2216_estimate_ehat"] = asm["_fec_secded2216_estimate_ehat"];
var _lex_free_string = Module["_lex_free_string"] = asm["_lex_free_string"];
var _fec_golay2412_destroy = Module["_fec_golay2412_destroy"] = asm["_fec_golay2412_destroy"];
var _flexframesync_destroy = Module["_flexframesync_destroy"] = asm["_flexframesync_destroy"];
var _modem_get_demodulator_phase_error = Module["_modem_get_demodulator_phase_error"] = asm["_modem_get_demodulator_phase_error"];
var _firinterp_rrrf_create_prototype = Module["_firinterp_rrrf_create_prototype"] = asm["_firinterp_rrrf_create_prototype"];
var _fec_secded3932_decode = Module["_fec_secded3932_decode"] = asm["_fec_secded3932_decode"];
var _framesyncstats_init_default = Module["_framesyncstats_init_default"] = asm["_framesyncstats_init_default"];
var _ofdmframesync_execute = Module["_ofdmframesync_execute"] = asm["_ofdmframesync_execute"];
var _modem_arb_init = Module["_modem_arb_init"] = asm["_modem_arb_init"];
var _fec_secded3932_create = Module["_fec_secded3932_create"] = asm["_fec_secded3932_create"];
var _flexframegen_assemble = Module["_flexframegen_assemble"] = asm["_flexframegen_assemble"];
var _jsonp_error_set_source = Module["_jsonp_error_set_source"] = asm["_jsonp_error_set_source"];
var _liquid_getopt_str2firfilt = Module["_liquid_getopt_str2firfilt"] = asm["_liquid_getopt_str2firfilt"];
var _matrixf_mul = Module["_matrixf_mul"] = asm["_matrixf_mul"];
var _quiet_decoder_consume_stats = Module["_quiet_decoder_consume_stats"] = asm["_quiet_decoder_consume_stats"];
var _fecsoft_hamming84_decode = Module["_fecsoft_hamming84_decode"] = asm["_fecsoft_hamming84_decode"];
var _strchr = Module["_strchr"] = asm["_strchr"];
var _dotprod_rrrf_create = Module["_dotprod_rrrf_create"] = asm["_dotprod_rrrf_create"];
var _liquid_bdotprod = Module["_liquid_bdotprod"] = asm["_liquid_bdotprod"];
var _fec_conv_decode_soft = Module["_fec_conv_decode_soft"] = asm["_fec_conv_decode_soft"];
var _qpilotsync_execute = Module["_qpilotsync_execute"] = asm["_qpilotsync_execute"];
var _fec_secded3932_destroy = Module["_fec_secded3932_destroy"] = asm["_fec_secded3932_destroy"];
var _fft_execute = Module["_fft_execute"] = asm["_fft_execute"];
var _parse_json = Module["_parse_json"] = asm["_parse_json"];
var _gmskframegen_assemble = Module["_gmskframegen_assemble"] = asm["_gmskframegen_assemble"];
var _bessel_azpkf = Module["_bessel_azpkf"] = asm["_bessel_azpkf"];
var _firdecim_crcf_destroy = Module["_firdecim_crcf_destroy"] = asm["_firdecim_crcf_destroy"];
var _detector_cccf_reset = Module["_detector_cccf_reset"] = asm["_detector_cccf_reset"];
var _vsnprintf = Module["_vsnprintf"] = asm["_vsnprintf"];
var _firinterp_crcf_create_prototype = Module["_firinterp_crcf_create_prototype"] = asm["_firinterp_crcf_create_prototype"];
var _firpfb_rrrf_create_rnyquist = Module["_firpfb_rrrf_create_rnyquist"] = asm["_firpfb_rrrf_create_rnyquist"];
var _liquid_firdes_rfarcsech = Module["_liquid_firdes_rfarcsech"] = asm["_liquid_firdes_rfarcsech"];
var _fec_conv_punctured_encode = Module["_fec_conv_punctured_encode"] = asm["_fec_conv_punctured_encode"];
var _rkaiser_approximate_rho = Module["_rkaiser_approximate_rho"] = asm["_rkaiser_approximate_rho"];
var _poly_fit_lagrange_barycentric = Module["_poly_fit_lagrange_barycentric"] = asm["_poly_fit_lagrange_barycentric"];
var _fprintf = Module["_fprintf"] = asm["_fprintf"];
var _sprintf = Module["_sprintf"] = asm["_sprintf"];
var _gray_decode = Module["_gray_decode"] = asm["_gray_decode"];
var _detector_cccf_update_sumsq = Module["_detector_cccf_update_sumsq"] = asm["_detector_cccf_update_sumsq"];
var _strbuffer_close = Module["_strbuffer_close"] = asm["_strbuffer_close"];
var _ofdmframesync_execute_S0b = Module["_ofdmframesync_execute_S0b"] = asm["_ofdmframesync_execute_S0b"];
var _liquid_fft_estimate_method = Module["_liquid_fft_estimate_method"] = asm["_liquid_fft_estimate_method"];
var _qpilotsync_create = Module["_qpilotsync_create"] = asm["_qpilotsync_create"];
var _jsonp_error_set = Module["_jsonp_error_set"] = asm["_jsonp_error_set"];
var _modulator_emit = Module["_modulator_emit"] = asm["_modulator_emit"];
var _wctomb = Module["_wctomb"] = asm["_wctomb"];
var _gmskframesync_pushpn = Module["_gmskframesync_pushpn"] = asm["_gmskframesync_pushpn"];
var _ellip_azpkf = Module["_ellip_azpkf"] = asm["_ellip_azpkf"];
var _liquid_pack_bytes = Module["_liquid_pack_bytes"] = asm["_liquid_pack_bytes"];
var _polyf_val = Module["_polyf_val"] = asm["_polyf_val"];
var _demodulator_create = Module["_demodulator_create"] = asm["_demodulator_create"];
var _logbf = Module["_logbf"] = asm["_logbf"];
var _estimate_req_filter_As = Module["_estimate_req_filter_As"] = asm["_estimate_req_filter_As"];
var _fec_get_rate = Module["_fec_get_rate"] = asm["_fec_get_rate"];
var _dotprod_rrrf_execute = Module["_dotprod_rrrf_execute"] = asm["_dotprod_rrrf_execute"];
var _fclose = Module["_fclose"] = asm["_fclose"];
var _firinterp_rrrf_destroy = Module["_firinterp_rrrf_destroy"] = asm["_firinterp_rrrf_destroy"];
var _parse_value = Module["_parse_value"] = asm["_parse_value"];
var _ofdmflexframesync_debug_enable = Module["_ofdmflexframesync_debug_enable"] = asm["_ofdmflexframesync_debug_enable"];
var _liquid_getopt_str2crc = Module["_liquid_getopt_str2crc"] = asm["_liquid_getopt_str2crc"];
var _liquid_factor = Module["_liquid_factor"] = asm["_liquid_factor"];
var _insert_to_bucket = Module["_insert_to_bucket"] = asm["_insert_to_bucket"];
var _liquid_firdes_rfexp = Module["_liquid_firdes_rfexp"] = asm["_liquid_firdes_rfexp"];
var _ofdm_subcarriers_create = Module["_ofdm_subcarriers_create"] = asm["_ofdm_subcarriers_create"];
var _lex_unget = Module["_lex_unget"] = asm["_lex_unget"];
var _fft_execute_radix2 = Module["_fft_execute_radix2"] = asm["_fft_execute_radix2"];
var _liquid_is_prime = Module["_liquid_is_prime"] = asm["_liquid_is_prime"];
var _fec_rs_setlength = Module["_fec_rs_setlength"] = asm["_fec_rs_setlength"];
var _decode_unicode_escape = Module["_decode_unicode_escape"] = asm["_decode_unicode_escape"];
var _gmskframesync_debug_print = Module["_gmskframesync_debug_print"] = asm["_gmskframesync_debug_print"];
var _ofdmflexframegen_reset = Module["_ofdmflexframegen_reset"] = asm["_ofdmflexframegen_reset"];
var _json_true = Module["_json_true"] = asm["_json_true"];
var _qpilotgen_execute = Module["_qpilotgen_execute"] = asm["_qpilotgen_execute"];
var _modem_destroy = Module["_modem_destroy"] = asm["_modem_destroy"];
var _sinhf = Module["_sinhf"] = asm["_sinhf"];
var _json_array = Module["_json_array"] = asm["_json_array"];
var _wdelayf_destroy = Module["_wdelayf_destroy"] = asm["_wdelayf_destroy"];
var _modulator_destroy = Module["_modulator_destroy"] = asm["_modulator_destroy"];
var _qpacketmodem_encode = Module["_qpacketmodem_encode"] = asm["_qpacketmodem_encode"];
var _fft_reverse_index = Module["_fft_reverse_index"] = asm["_fft_reverse_index"];
var ___stdio_read = Module["___stdio_read"] = asm["___stdio_read"];
var _liquid_primitive_root_prime = Module["_liquid_primitive_root_prime"] = asm["_liquid_primitive_root_prime"];
var _liquid_iirdes = Module["_liquid_iirdes"] = asm["_liquid_iirdes"];
var _iirfilt_crcf_create_sos = Module["_iirfilt_crcf_create_sos"] = asm["_iirfilt_crcf_create_sos"];
var _fec_secded2216_destroy = Module["_fec_secded2216_destroy"] = asm["_fec_secded2216_destroy"];
var _modulator_sample_len = Module["_modulator_sample_len"] = asm["_modulator_sample_len"];
var _fec_hamming74_decode = Module["_fec_hamming74_decode"] = asm["_fec_hamming74_decode"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fec_conv_punctured_decode_soft = Module["_fec_conv_punctured_decode_soft"] = asm["_fec_conv_punctured_decode_soft"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _interleaver_destroy = Module["_interleaver_destroy"] = asm["_interleaver_destroy"];
var _fec_conv_destroy = Module["_fec_conv_destroy"] = asm["_fec_conv_destroy"];
var _framedatastats_reset = Module["_framedatastats_reset"] = asm["_framedatastats_reset"];
var _wdelayf_push = Module["_wdelayf_push"] = asm["_wdelayf_push"];
var _wdelayf_create = Module["_wdelayf_create"] = asm["_wdelayf_create"];
var _quiet_encoder_send = Module["_quiet_encoder_send"] = asm["_quiet_encoder_send"];
var _hypot = Module["_hypot"] = asm["_hypot"];
var _seed_from_timestamp_and_pid = Module["_seed_from_timestamp_and_pid"] = asm["_seed_from_timestamp_and_pid"];
var _copysignf = Module["_copysignf"] = asm["_copysignf"];
var ___shlim = Module["___shlim"] = asm["___shlim"];
var _fec_rs_create = Module["_fec_rs_create"] = asm["_fec_rs_create"];
var _hypotf = Module["_hypotf"] = asm["_hypotf"];
var _copysignl = Module["_copysignl"] = asm["_copysignl"];
var ___intscan = Module["___intscan"] = asm["___intscan"];
var _fec_conv_punctured_decode_hard = Module["_fec_conv_punctured_decode_hard"] = asm["_fec_conv_punctured_decode_hard"];
var _fec_rep3_encode = Module["_fec_rep3_encode"] = asm["_fec_rep3_encode"];
var _ccoshf = Module["_ccoshf"] = asm["_ccoshf"];
var _decoder_on_decode = Module["_decoder_on_decode"] = asm["_decoder_on_decode"];
var _firdespm_create = Module["_firdespm_create"] = asm["_firdespm_create"];
var ___toread = Module["___toread"] = asm["___toread"];
var _frexp = Module["_frexp"] = asm["_frexp"];
var _gmskframegen_set_header_len = Module["_gmskframegen_set_header_len"] = asm["_gmskframegen_set_header_len"];
var _hashtable_close = Module["_hashtable_close"] = asm["_hashtable_close"];
var _quiet_decoder_profile_str = Module["_quiet_decoder_profile_str"] = asm["_quiet_decoder_profile_str"];
var _liquid_reverse_uint32 = Module["_liquid_reverse_uint32"] = asm["_liquid_reverse_uint32"];
var _fmt_u = Module["_fmt_u"] = asm["_fmt_u"];
var _hashtable_find_pair = Module["_hashtable_find_pair"] = asm["_hashtable_find_pair"];
var _ofdmframegen_destroy = Module["_ofdmframegen_destroy"] = asm["_ofdmframegen_destroy"];
var ___syscall_ret = Module["___syscall_ret"] = asm["___syscall_ret"];
var _fmodl = Module["_fmodl"] = asm["_fmodl"];
var _fec_rs_destroy = Module["_fec_rs_destroy"] = asm["_fec_rs_destroy"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _modem_demodulate_psk = Module["_modem_demodulate_psk"] = asm["_modem_demodulate_psk"];
var _fec_create = Module["_fec_create"] = asm["_fec_create"];
var _modem_modulate_bpsk = Module["_modem_modulate_bpsk"] = asm["_modem_modulate_bpsk"];
var _fec_hamming128_decode = Module["_fec_hamming128_decode"] = asm["_fec_hamming128_decode"];
var _liquid_getopt_str2fec = Module["_liquid_getopt_str2fec"] = asm["_liquid_getopt_str2fec"];
var _firdespm_iext_search = Module["_firdespm_iext_search"] = asm["_firdespm_iext_search"];
var ___fdopen = Module["___fdopen"] = asm["___fdopen"];
var _nco_crcf_compute_sincos_vco = Module["_nco_crcf_compute_sincos_vco"] = asm["_nco_crcf_compute_sincos_vco"];
var _quiet_encoder_emit = Module["_quiet_encoder_emit"] = asm["_quiet_encoder_emit"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _json_object_set_nocheck = Module["_json_object_set_nocheck"] = asm["_json_object_set_nocheck"];
var _dotprod_crcf_create = Module["_dotprod_crcf_create"] = asm["_dotprod_crcf_create"];
var _ofdmframesync_S0_metrics = Module["_ofdmframesync_S0_metrics"] = asm["_ofdmframesync_S0_metrics"];
var _close = Module["_close"] = asm["_close"];
var _qpacketmodem_configure = Module["_qpacketmodem_configure"] = asm["_qpacketmodem_configure"];
var _sincf = Module["_sincf"] = asm["_sincf"];
var _gmskframegen_is_assembled = Module["_gmskframegen_is_assembled"] = asm["_gmskframegen_is_assembled"];
var ___stdout_write = Module["___stdout_write"] = asm["___stdout_write"];
var _csinf = Module["_csinf"] = asm["_csinf"];
var _sn_write = Module["_sn_write"] = asm["_sn_write"];
var _firdecim_crcf_create_prototype = Module["_firdecim_crcf_create_prototype"] = asm["_firdecim_crcf_create_prototype"];
var _qpacketmodem_get_modscheme = Module["_qpacketmodem_get_modscheme"] = asm["_qpacketmodem_get_modscheme"];
var _constrained_write = Module["_constrained_write"] = asm["_constrained_write"];
var _packetizer_decode = Module["_packetizer_decode"] = asm["_packetizer_decode"];
var _ofdmflexframegen_reconfigure = Module["_ofdmflexframegen_reconfigure"] = asm["_ofdmflexframegen_reconfigure"];
var _ofdmframesync_debug_enable = Module["_ofdmframesync_debug_enable"] = asm["_ofdmframesync_debug_enable"];
var _erff = Module["_erff"] = asm["_erff"];
var _json_string_value = Module["_json_string_value"] = asm["_json_string_value"];
var _kaiser = Module["_kaiser"] = asm["_kaiser"];
var _ofdmflexframegen_writesymbol = Module["_ofdmflexframegen_writesymbol"] = asm["_ofdmflexframegen_writesymbol"];
var _crc16_generate_key = Module["_crc16_generate_key"] = asm["_crc16_generate_key"];
var _fec_rep5_create = Module["_fec_rep5_create"] = asm["_fec_rep5_create"];
var _firdespm_compute_taps = Module["_firdespm_compute_taps"] = asm["_firdespm_compute_taps"];
var _lex_get = Module["_lex_get"] = asm["_lex_get"];
var _try_realloc_chunk = Module["_try_realloc_chunk"] = asm["_try_realloc_chunk"];
var _gmskframegen_reset = Module["_gmskframegen_reset"] = asm["_gmskframegen_reset"];
var _stream_unget = Module["_stream_unget"] = asm["_stream_unget"];
var _fec_rep5_decode_soft = Module["_fec_rep5_decode_soft"] = asm["_fec_rep5_decode_soft"];
var ___divsc3 = Module["___divsc3"] = asm["___divsc3"];
var _json_array_grow = Module["_json_array_grow"] = asm["_json_array_grow"];
var _qdetector_cccf_set_threshold = Module["_qdetector_cccf_set_threshold"] = asm["_qdetector_cccf_set_threshold"];
var _modem_modulate_qpsk = Module["_modem_modulate_qpsk"] = asm["_modem_modulate_qpsk"];
var _json_delete = Module["_json_delete"] = asm["_json_delete"];
var _gmskmod_create = Module["_gmskmod_create"] = asm["_gmskmod_create"];
var _fec_secded2216_create = Module["_fec_secded2216_create"] = asm["_fec_secded2216_create"];
var _log10f = Module["_log10f"] = asm["_log10f"];
var _windowcf_push = Module["_windowcf_push"] = asm["_windowcf_push"];
var _quiet_decoder_create = Module["_quiet_decoder_create"] = asm["_quiet_decoder_create"];
var _liquid_unpack_array = Module["_liquid_unpack_array"] = asm["_liquid_unpack_array"];
var _llvm_cttz_i32 = Module["_llvm_cttz_i32"] = asm["_llvm_cttz_i32"];
var _fec_secded2216_compute_parity = Module["_fec_secded2216_compute_parity"] = asm["_fec_secded2216_compute_parity"];
var _liquid_firdes_prototype = Module["_liquid_firdes_prototype"] = asm["_liquid_firdes_prototype"];
var _firdecim_crcf_execute = Module["_firdecim_crcf_execute"] = asm["_firdecim_crcf_execute"];
var _json_object_seed = Module["_json_object_seed"] = asm["_json_object_seed"];
var _lex_steal_string = Module["_lex_steal_string"] = asm["_lex_steal_string"];
var _fec_hamming128_encode = Module["_fec_hamming128_encode"] = asm["_fec_hamming128_encode"];
var _strtox = Module["_strtox"] = asm["_strtox"];
var _jsonp_strtod = Module["_jsonp_strtod"] = asm["_jsonp_strtod"];
var _liquid_firdes_fexp_freqresponse = Module["_liquid_firdes_fexp_freqresponse"] = asm["_liquid_firdes_fexp_freqresponse"];
var _fft_execute_dft = Module["_fft_execute_dft"] = asm["_fft_execute_dft"];
var _wdelayf_clear = Module["_wdelayf_clear"] = asm["_wdelayf_clear"];
var _ofdmframesync_get_cfo = Module["_ofdmframesync_get_cfo"] = asm["_ofdmframesync_get_cfo"];
var _fft_destroy_plan = Module["_fft_destroy_plan"] = asm["_fft_destroy_plan"];
var _printf = Module["_printf"] = asm["_printf"];
var _fmaxf = Module["_fmaxf"] = asm["_fmaxf"];
var _liquid_repack_bytes = Module["_liquid_repack_bytes"] = asm["_liquid_repack_bytes"];
var _json_loads = Module["_json_loads"] = asm["_json_loads"];
var _msequence_create_default = Module["_msequence_create_default"] = asm["_msequence_create_default"];
var _fec_golay2412_encode = Module["_fec_golay2412_encode"] = asm["_fec_golay2412_encode"];
var _nco_crcf_pll_set_bandwidth = Module["_nco_crcf_pll_set_bandwidth"] = asm["_nco_crcf_pll_set_bandwidth"];
var _liquid_firdes_rkaiser_internal_isi = Module["_liquid_firdes_rkaiser_internal_isi"] = asm["_liquid_firdes_rkaiser_internal_isi"];
var _lex_init = Module["_lex_init"] = asm["_lex_init"];
var _ofdmflexframegen_is_assembled = Module["_ofdmflexframegen_is_assembled"] = asm["_ofdmflexframegen_is_assembled"];
var _generate_seed = Module["_generate_seed"] = asm["_generate_seed"];
var _firpfb_rrrf_push = Module["_firpfb_rrrf_push"] = asm["_firpfb_rrrf_push"];
var _read = Module["_read"] = asm["_read"];
var _string_get = Module["_string_get"] = asm["_string_get"];
var _nco_crcf_pll_step = Module["_nco_crcf_pll_step"] = asm["_nco_crcf_pll_step"];
var _modem_create = Module["_modem_create"] = asm["_modem_create"];
var _json_real_value = Module["_json_real_value"] = asm["_json_real_value"];
var _qdetector_cccf_get_gamma = Module["_qdetector_cccf_get_gamma"] = asm["_qdetector_cccf_get_gamma"];
var _fft_create_plan_radix2 = Module["_fft_create_plan_radix2"] = asm["_fft_create_plan_radix2"];
var _utf8_encode = Module["_utf8_encode"] = asm["_utf8_encode"];
var _windowcf_read = Module["_windowcf_read"] = asm["_windowcf_read"];
var _fec_rs_decode = Module["_fec_rs_decode"] = asm["_fec_rs_decode"];
var _roundf = Module["_roundf"] = asm["_roundf"];
var _fec_conv_create = Module["_fec_conv_create"] = asm["_fec_conv_create"];
var _seed_from_urandom = Module["_seed_from_urandom"] = asm["_seed_from_urandom"];
var _fec_pass_destroy = Module["_fec_pass_destroy"] = asm["_fec_pass_destroy"];
var _modem_demodsoft_gentab = Module["_modem_demodsoft_gentab"] = asm["_modem_demodsoft_gentab"];
var _windowf_clear = Module["_windowf_clear"] = asm["_windowf_clear"];
var _qpilotsync_get_frame_len = Module["_qpilotsync_get_frame_len"] = asm["_qpilotsync_get_frame_len"];
var _fmod = Module["_fmod"] = asm["_fmod"];
var _dotprod_rrrf_destroy = Module["_dotprod_rrrf_destroy"] = asm["_dotprod_rrrf_destroy"];
var _fec_hamming74_decode_soft = Module["_fec_hamming74_decode_soft"] = asm["_fec_hamming74_decode_soft"];
var _array_copy = Module["_array_copy"] = asm["_array_copy"];
var _liquid_unpack_array_block = Module["_liquid_unpack_array_block"] = asm["_liquid_unpack_array_block"];
var _firinterp_rrrf_create = Module["_firinterp_rrrf_create"] = asm["_firinterp_rrrf_create"];
var _gmskframesync_decode_header = Module["_gmskframesync_decode_header"] = asm["_gmskframesync_decode_header"];
var _quiet_encoder_sample_len = Module["_quiet_encoder_sample_len"] = asm["_quiet_encoder_sample_len"];
var _cabsf = Module["_cabsf"] = asm["_cabsf"];
var _strbuffer_init = Module["_strbuffer_init"] = asm["_strbuffer_init"];
var _fec_golay2412_decode_symbol = Module["_fec_golay2412_decode_symbol"] = asm["_fec_golay2412_decode_symbol"];
var _qpilotgen_create = Module["_qpilotgen_create"] = asm["_qpilotgen_create"];
var _liquid_cplxpair = Module["_liquid_cplxpair"] = asm["_liquid_cplxpair"];
var ___overflow = Module["___overflow"] = asm["___overflow"];
var _fec_decode = Module["_fec_decode"] = asm["_fec_decode"];
var _lex_get_save = Module["_lex_get_save"] = asm["_lex_get_save"];
var _memset = Module["_memset"] = asm["_memset"];
var _open = Module["_open"] = asm["_open"];
var _flexframesync_decode_header = Module["_flexframesync_decode_header"] = asm["_flexframesync_decode_header"];
var _json_incref = Module["_json_incref"] = asm["_json_incref"];
var _firpfb_crcf_destroy = Module["_firpfb_crcf_destroy"] = asm["_firpfb_crcf_destroy"];
var _json_delete_array = Module["_json_delete_array"] = asm["_json_delete_array"];
var _qdetector_cccf_get_tau = Module["_qdetector_cccf_get_tau"] = asm["_qdetector_cccf_get_tau"];
var _ofdmflexframesync_set_header_len = Module["_ofdmflexframesync_set_header_len"] = asm["_ofdmflexframesync_set_header_len"];
var _jsonp_error_init = Module["_jsonp_error_init"] = asm["_jsonp_error_init"];
var _modem_modulate_sqam32 = Module["_modem_modulate_sqam32"] = asm["_modem_modulate_sqam32"];
var _hashtable_get = Module["_hashtable_get"] = asm["_hashtable_get"];
var ___floatscan = Module["___floatscan"] = asm["___floatscan"];
var ___fflush_unlocked = Module["___fflush_unlocked"] = asm["___fflush_unlocked"];
var _hashtable_do_rehash = Module["_hashtable_do_rehash"] = asm["_hashtable_do_rehash"];
var _crc24_generate_key = Module["_crc24_generate_key"] = asm["_crc24_generate_key"];
var _json_decref_1931 = Module["_json_decref_1931"] = asm["_json_decref_1931"];
var _nco_crcf_create = Module["_nco_crcf_create"] = asm["_nco_crcf_create"];
var _fec_rep3_create = Module["_fec_rep3_create"] = asm["_fec_rep3_create"];
var _ofdmflexframesync_decode_header = Module["_ofdmflexframesync_decode_header"] = asm["_ofdmflexframesync_decode_header"];
var _ring_read = Module["_ring_read"] = asm["_ring_read"];
var _iirfilt_crcf_create = Module["_iirfilt_crcf_create"] = asm["_iirfilt_crcf_create"];
var _qpilotsync_get_phi = Module["_qpilotsync_get_phi"] = asm["_qpilotsync_get_phi"];
var _fec_golay2412_create = Module["_fec_golay2412_create"] = asm["_fec_golay2412_create"];
var _dispose_chunk = Module["_dispose_chunk"] = asm["_dispose_chunk"];
var _ring_advance_reader = Module["_ring_advance_reader"] = asm["_ring_advance_reader"];
var _list_init = Module["_list_init"] = asm["_list_init"];
var _fec_hamming74_create = Module["_fec_hamming74_create"] = asm["_fec_hamming74_create"];
var _demodulator_destroy = Module["_demodulator_destroy"] = asm["_demodulator_destroy"];
var _liquid_pack_array = Module["_liquid_pack_array"] = asm["_liquid_pack_array"];
var _fft_run = Module["_fft_run"] = asm["_fft_run"];
var _flexframesync_debug_enable = Module["_flexframesync_debug_enable"] = asm["_flexframesync_debug_enable"];
var _bucket_is_empty = Module["_bucket_is_empty"] = asm["_bucket_is_empty"];
var ___ldexp_cexpf = Module["___ldexp_cexpf"] = asm["___ldexp_cexpf"];
var _modem_create_apsk = Module["_modem_create_apsk"] = asm["_modem_create_apsk"];
var _ofdmflexframegen_getframelen = Module["_ofdmflexframegen_getframelen"] = asm["_ofdmflexframegen_getframelen"];
var _jsonp_malloc = Module["_jsonp_malloc"] = asm["_jsonp_malloc"];
var _scanexp = Module["_scanexp"] = asm["_scanexp"];
var _calloc = Module["_calloc"] = asm["_calloc"];
var _fmax = Module["_fmax"] = asm["_fmax"];
var _iirfilt_crcf_create_prototype = Module["_iirfilt_crcf_create_prototype"] = asm["_iirfilt_crcf_create_prototype"];
var _ofdmframe_init_S1 = Module["_ofdmframe_init_S1"] = asm["_ofdmframe_init_S1"];
var _ofdmframe_init_S0 = Module["_ofdmframe_init_S0"] = asm["_ofdmframe_init_S0"];
var _stream_init = Module["_stream_init"] = asm["_stream_init"];
var _ofdmflexframegen_write_header = Module["_ofdmflexframegen_write_header"] = asm["_ofdmflexframegen_write_header"];
var _liquid_modpow = Module["_liquid_modpow"] = asm["_liquid_modpow"];
var _strerror = Module["_strerror"] = asm["_strerror"];
var _strbuffer_value = Module["_strbuffer_value"] = asm["_strbuffer_value"];
var _packetizer_encode = Module["_packetizer_encode"] = asm["_packetizer_encode"];
var _qdetector_cccf_execute_align = Module["_qdetector_cccf_execute_align"] = asm["_qdetector_cccf_execute_align"];
var _ofdmflexframegen_write_payload = Module["_ofdmflexframegen_write_payload"] = asm["_ofdmflexframegen_write_payload"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _gmskframesync_execute_rxpayload = Module["_gmskframesync_execute_rxpayload"] = asm["_gmskframesync_execute_rxpayload"];
var _quiet_decoder_enable_stats = Module["_quiet_decoder_enable_stats"] = asm["_quiet_decoder_enable_stats"];
var _fputs = Module["_fputs"] = asm["_fputs"];
var _strtod = Module["_strtod"] = asm["_strtod"];
var _strbuffer_append_bytes = Module["_strbuffer_append_bytes"] = asm["_strbuffer_append_bytes"];
var _quiet_decoder_disable_stats = Module["_quiet_decoder_disable_stats"] = asm["_quiet_decoder_disable_stats"];
var _ofdmframegen_write_S1 = Module["_ofdmframegen_write_S1"] = asm["_ofdmframegen_write_S1"];
var _firpfb_crcf_create_rnyquist = Module["_firpfb_crcf_create_rnyquist"] = asm["_firpfb_crcf_create_rnyquist"];
var _nco_crcf_step = Module["_nco_crcf_step"] = asm["_nco_crcf_step"];
var _flexframegen_set_header_len = Module["_flexframegen_set_header_len"] = asm["_flexframegen_set_header_len"];
var _windowcf_clear = Module["_windowcf_clear"] = asm["_windowcf_clear"];
var _fec_secded3932_encode = Module["_fec_secded3932_encode"] = asm["_fec_secded3932_encode"];
var _fec_encode = Module["_fec_encode"] = asm["_fec_encode"];
var _liquid_firdes_arkaiser = Module["_liquid_firdes_arkaiser"] = asm["_liquid_firdes_arkaiser"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _lex_unget_unsave = Module["_lex_unget_unsave"] = asm["_lex_unget_unsave"];
var _fft_execute_rader = Module["_fft_execute_rader"] = asm["_fft_execute_rader"];
var ___fwritex = Module["___fwritex"] = asm["___fwritex"];
var _qpacketmodem_get_crc = Module["_qpacketmodem_get_crc"] = asm["_qpacketmodem_get_crc"];

function b0(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(0);return 0;
}
function b1(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(1);return 0;
}
function _update_viterbi27_blk__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; return _update_viterbi27_blk(p0|0,p1|0,p2|0)|0;
}
function _update_viterbi29_blk__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; return _update_viterbi29_blk(p0|0,p1|0,p2|0)|0;
}
function _update_viterbi39_blk__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; return _update_viterbi39_blk(p0|0,p1|0,p2|0)|0;
}
function _update_viterbi615_blk__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; return _update_viterbi615_blk(p0|0,p1|0,p2|0)|0;
}
function b2(p0) {
 p0 = p0|0; nullFunc_vi(2);
}
function _delete_viterbi27__wrapper(p0) {
 p0 = p0|0; _delete_viterbi27(p0|0);
}
function _delete_viterbi29__wrapper(p0) {
 p0 = p0|0; _delete_viterbi29(p0|0);
}
function _delete_viterbi39__wrapper(p0) {
 p0 = p0|0; _delete_viterbi39(p0|0);
}
function _delete_viterbi615__wrapper(p0) {
 p0 = p0|0; _delete_viterbi615(p0|0);
}
function b3(p0) {
 p0 = p0|0; nullFunc_ii(3);return 0;
}
function _create_viterbi27__wrapper(p0) {
 p0 = p0|0; return _create_viterbi27(p0|0)|0;
}
function _create_viterbi29__wrapper(p0) {
 p0 = p0|0; return _create_viterbi29(p0|0)|0;
}
function _create_viterbi39__wrapper(p0) {
 p0 = p0|0; return _create_viterbi39(p0|0)|0;
}
function _create_viterbi615__wrapper(p0) {
 p0 = p0|0; return _create_viterbi615(p0|0)|0;
}
function b4(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(4);
}
function b5(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(5);return 0;
}
function _chainback_viterbi27__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; return _chainback_viterbi27(p0|0,p1|0,p2|0,p3|0)|0;
}
function _chainback_viterbi29__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; return _chainback_viterbi29(p0|0,p1|0,p2|0,p3|0)|0;
}
function _chainback_viterbi39__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; return _chainback_viterbi39(p0|0,p1|0,p2|0,p3|0)|0;
}
function _chainback_viterbi615__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; return _chainback_viterbi615(p0|0,p1|0,p2|0,p3|0)|0;
}
function b6(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(6);return 0;
}
function _init_viterbi27__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; return _init_viterbi27(p0|0,p1|0)|0;
}
function _init_viterbi29__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; return _init_viterbi29(p0|0,p1|0)|0;
}
function _init_viterbi39__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; return _init_viterbi39(p0|0,p1|0)|0;
}
function _init_viterbi615__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; return _init_viterbi615(p0|0,p1|0)|0;
}
function b7(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(7);
}

var FUNCTION_TABLE_iiiiiiii = [b0,asm['_decoder_on_decode']];
var FUNCTION_TABLE_iiii = [b1,asm['___stdio_write'],asm['___stdio_seek'],asm['___stdout_write'],asm['_sn_write'],_update_viterbi27_blk__wrapper,_update_viterbi29_blk__wrapper,_update_viterbi39_blk__wrapper,_update_viterbi615_blk__wrapper,asm['___stdio_read'],b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_vi = [b2,asm['_free'],_delete_viterbi27__wrapper,_delete_viterbi29__wrapper,_delete_viterbi39__wrapper,_delete_viterbi615__wrapper,asm['_nco_crcf_compute_sincos_nco'],asm['_nco_crcf_compute_sincos_vco'],asm['_fft_execute_radix2'],asm['_fft_execute_mixed_radix'],asm['_fft_execute_rader'],asm['_fft_execute_rader2'],asm['_fft_execute_dft_2'],asm['_fft_execute_dft_3'],asm['_fft_execute_dft_4'],asm['_fft_execute_dft_5'],asm['_fft_execute_dft_6'],asm['_fft_execute_dft_7'],asm['_fft_execute_dft_8'],asm['_fft_execute_dft_16'],asm['_fft_execute_dft'],asm['_cleanup_387'],asm['_cleanup_382'],b2,b2,b2,b2,b2,b2
,b2,b2,b2];
var FUNCTION_TABLE_ii = [b3,asm['_malloc'],asm['___stdio_close'],_create_viterbi27__wrapper,_create_viterbi29__wrapper,_create_viterbi39__wrapper,_create_viterbi615__wrapper,asm['_string_get']];
var FUNCTION_TABLE_viii = [b4,asm['_modem_modulate_dpsk'],asm['_modem_demodulate_dpsk'],asm['_modem_modulate_ask'],asm['_modem_demodulate_ask'],asm['_modem_modulate_bpsk'],asm['_modem_demodulate_bpsk'],asm['_modem_modulate_qpsk'],asm['_modem_demodulate_qpsk'],asm['_modem_modulate_ook'],asm['_modem_demodulate_ook'],asm['_modem_modulate_sqam32'],asm['_modem_demodulate_sqam32'],asm['_modem_modulate_sqam128'],asm['_modem_demodulate_sqam128'],asm['_modem_modulate_arb'],asm['_modem_demodulate_arb'],asm['_modem_modulate_psk'],asm['_modem_demodulate_psk'],asm['_modem_modulate_qam'],asm['_modem_demodulate_qam'],asm['_modem_modulate_apsk'],asm['_modem_demodulate_apsk'],b4,b4,b4,b4,b4,b4
,b4,b4,b4];
var FUNCTION_TABLE_iiiii = [b5,_chainback_viterbi27__wrapper,_chainback_viterbi29__wrapper,_chainback_viterbi39__wrapper,_chainback_viterbi615__wrapper,asm['_ofdmflexframesync_internal_callback'],b5,b5];
var FUNCTION_TABLE_iii = [b6,_init_viterbi27__wrapper,_init_viterbi29__wrapper,_init_viterbi39__wrapper,_init_viterbi615__wrapper,b6,b6,b6];
var FUNCTION_TABLE_viiii = [b7,asm['_fec_conv_encode'],asm['_fec_conv_decode_hard'],asm['_fec_conv_decode_soft'],asm['_fec_conv_punctured_encode'],asm['_fec_conv_punctured_decode_hard'],asm['_fec_conv_punctured_decode_soft'],asm['_fec_golay2412_encode'],asm['_fec_golay2412_decode'],asm['_fec_hamming74_encode'],asm['_fec_hamming74_decode'],asm['_fec_hamming74_decode_soft'],asm['_fec_hamming84_encode'],asm['_fec_hamming84_decode'],asm['_fec_hamming84_decode_soft'],asm['_fec_hamming128_encode'],asm['_fec_hamming128_decode'],asm['_fec_hamming128_decode_soft'],asm['_fec_pass_encode'],asm['_fec_pass_decode'],asm['_fec_rep3_encode'],asm['_fec_rep3_decode'],asm['_fec_rep3_decode_soft'],asm['_fec_rep5_encode'],asm['_fec_rep5_decode'],asm['_fec_rep5_decode_soft'],asm['_fec_rs_encode'],asm['_fec_rs_decode'],asm['_fec_secded2216_encode']
,asm['_fec_secded2216_decode'],asm['_fec_secded3932_encode'],asm['_fec_secded3932_decode'],asm['_fec_secded7264_encode'],asm['_fec_secded7264_decode'],b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7];
Module["dynCall_iiiiiiii"] = dynCall_iiiiiiii
Module["dynCall_iiii"] = dynCall_iiii
Module["dynCall_vi"] = dynCall_vi
Module["dynCall_ii"] = dynCall_ii
Module["dynCall_viii"] = dynCall_viii
Module["dynCall_iiiii"] = dynCall_iiiii
Module["dynCall_iii"] = dynCall_iii
Module["dynCall_viiii"] = dynCall_viiii
Module["FUNCTION_TABLE_iiiiiiii"] = FUNCTION_TABLE_iiiiiiii;
Module["FUNCTION_TABLE_iiii"] = FUNCTION_TABLE_iiii;
Module["FUNCTION_TABLE_vi"] = FUNCTION_TABLE_vi;
Module["FUNCTION_TABLE_ii"] = FUNCTION_TABLE_ii;
Module["FUNCTION_TABLE_viii"] = FUNCTION_TABLE_viii;
Module["FUNCTION_TABLE_iiiii"] = FUNCTION_TABLE_iiiii;
Module["FUNCTION_TABLE_iii"] = FUNCTION_TABLE_iii;
Module["FUNCTION_TABLE_viiii"] = FUNCTION_TABLE_viiii;

var NAMED_GLOBALS = { "str": 10692 };
for (var named in NAMED_GLOBALS) {
  Module['_' + named] = gb + NAMED_GLOBALS[named];
}
Module['NAMED_GLOBALS'] = NAMED_GLOBALS;
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];



// === Auto-generated postamble setup entry stuff ===



if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, Runtime.GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[Runtime.GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, Runtime.GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        if (request.status !== 200 && request.status !== 0) {
          // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
          // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
          // Look in your browser's devtools network console to see what's going on.
          console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
          doBrowserLoad();
          return;
        }
        applyMemoryInitializer(request.response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}






